
McDermott_Frank_RTOS_Lab7_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d338  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  0800d4e8  0800d4e8  0001d4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eff8  0800eff8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800eff8  0800eff8  0001eff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f000  0800f000  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f000  0800f000  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f004  0800f004  0001f004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800f008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0002b1ec  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2002b26c  2002b26c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025fd8  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005293  00000000  00000000  000460cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002238  00000000  00000000  0004b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a55  00000000  00000000  0004d598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007bcc  00000000  00000000  0004efed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027476  00000000  00000000  00056bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc07d  00000000  00000000  0007e02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009a38  00000000  00000000  0017a0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ee  00000000  00000000  00183ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d4d0 	.word	0x0800d4d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800d4d0 	.word	0x0800d4d0

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2002a5b4 	.word	0x2002a5b4
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8000630:	f000 f80a 	bl	8000648 <Gyro_Power_On>
	osDelay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f005 fe75 	bl	8006324 <osDelay>
	Gyro_Config_Regs();
 800063a:	f000 f8b7 	bl	80007ac <Gyro_Config_Regs>
	Gyro_Reboot();
 800063e:	f000 f847 	bl	80006d0 <Gyro_Reboot>


}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000656:	f000 f921 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800065a:	bf00      	nop
 800065c:	2102      	movs	r1, #2
 800065e:	481a      	ldr	r0, [pc, #104]	; (80006c8 <Gyro_Power_On+0x80>)
 8000660:	f003 faac 	bl	8003bbc <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f8      	bne.n	800065c <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f947 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f929 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800067a:	f000 f91b 	bl	80008b4 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 800067e:	2320      	movs	r3, #32
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	b2db      	uxtb	r3, r3
 800068a:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 800068c:	f000 f906 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000690:	bf00      	nop
 8000692:	2102      	movs	r1, #2
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <Gyro_Power_On+0x80>)
 8000696:	f003 fa91 	bl	8003bbc <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f8      	bne.n	8000692 <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f92c 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 80006a8:	1d7b      	adds	r3, r7, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f928 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80006b0:	f000 f900 	bl	80008b4 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <Gyro_Power_On+0x84>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d000      	beq.n	80006be <Gyro_Power_On+0x76>
	{
		while(1);
 80006bc:	e7fe      	b.n	80006bc <Gyro_Power_On+0x74>
	}
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020800 	.word	0x40020800
 80006cc:	2000009c 	.word	0x2000009c

080006d0 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 80006d6:	23a4      	movs	r3, #164	; 0xa4
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80006de:	f000 f8dd 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80006e2:	bf00      	nop
 80006e4:	2102      	movs	r1, #2
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <Gyro_Reboot+0x74>)
 80006e8:	f003 fa68 	bl	8003bbc <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f8      	bne.n	80006e4 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f903 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f8e5 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000702:	f000 f8d7 	bl	80008b4 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 8000706:	2324      	movs	r3, #36	; 0x24
 8000708:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000710:	b2db      	uxtb	r3, r3
 8000712:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8000714:	f000 f8c2 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000718:	bf00      	nop
 800071a:	2102      	movs	r1, #2
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <Gyro_Reboot+0x74>)
 800071e:	f003 fa4d 	bl	8003bbc <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f8      	bne.n	800071a <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8e8 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000730:	1d7b      	adds	r3, r7, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f8e4 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000738:	f000 f8bc 	bl	80008b4 <Gyro_Slave_Disable>

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020800 	.word	0x40020800

08000748 <Gyro_Get_Velocity>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 8000752:	23ea      	movs	r3, #234	; 0xea
 8000754:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800075e:	f000 f89d 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000762:	bf00      	nop
 8000764:	2102      	movs	r1, #2
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <Gyro_Get_Velocity+0x60>)
 8000768:	f003 fa28 	bl	8003bbc <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <Gyro_Get_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 8000772:	1d7b      	adds	r3, r7, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f8c3 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f8a5 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 8000782:	1cfb      	adds	r3, r7, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f8a1 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800078a:	f000 f893 	bl	80008b4 <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	793b      	ldrb	r3, [r7, #4]
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]

	return yval;
 800079c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]



}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40020800 	.word	0x40020800

080007ac <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 80007b2:	2320      	movs	r3, #32
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 80007b6:	231a      	movs	r3, #26
 80007b8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007ba:	f000 f86f 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007be:	bf00      	nop
 80007c0:	2102      	movs	r1, #2
 80007c2:	482e      	ldr	r0, [pc, #184]	; (800087c <Gyro_Config_Regs+0xd0>)
 80007c4:	f003 f9fa 	bl	8003bbc <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f8      	bne.n	80007c0 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f895 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f891 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80007de:	f000 f869 	bl	80008b4 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 80007e2:	2323      	movs	r3, #35	; 0x23
 80007e4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 80007e6:	2310      	movs	r3, #16
 80007e8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007ea:	f000 f857 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007ee:	bf00      	nop
 80007f0:	2102      	movs	r1, #2
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <Gyro_Config_Regs+0xd0>)
 80007f4:	f003 f9e2 	bl	8003bbc <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f8      	bne.n	80007f0 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f87d 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f879 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800080e:	f000 f851 	bl	80008b4 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8000812:	2324      	movs	r3, #36	; 0x24
 8000814:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 8000816:	23c0      	movs	r3, #192	; 0xc0
 8000818:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800081a:	f000 f83f 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800081e:	bf00      	nop
 8000820:	2102      	movs	r1, #2
 8000822:	4816      	ldr	r0, [pc, #88]	; (800087c <Gyro_Config_Regs+0xd0>)
 8000824:	f003 f9ca 	bl	8003bbc <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f8      	bne.n	8000820 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f865 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f861 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800083e:	f000 f839 	bl	80008b4 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8000842:	232e      	movs	r3, #46	; 0x2e
 8000844:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8000846:	2300      	movs	r3, #0
 8000848:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800084a:	f000 f827 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800084e:	bf00      	nop
 8000850:	2102      	movs	r1, #2
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <Gyro_Config_Regs+0xd0>)
 8000854:	f003 f9b2 	bl	8003bbc <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f8      	bne.n	8000850 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f84d 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f849 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800086e:	f000 f821 	bl	80008b4 <Gyro_Slave_Disable>




}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020800 	.word	0x40020800

08000880 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <Gyro_HAL_Check+0x18>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d000      	beq.n	800088e <Gyro_HAL_Check+0xe>
		while(1);
 800088c:	e7fe      	b.n	800088c <Gyro_HAL_Check+0xc>
	}
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	2000009c 	.word	0x2000009c

0800089c <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2102      	movs	r1, #2
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <Gyro_Slave_Enable+0x14>)
 80008a6:	f003 f9a1 	bl	8003bec <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40020800 	.word	0x40020800

080008b4 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2102      	movs	r1, #2
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <Gyro_Slave_Disable+0x14>)
 80008be:	f003 f995 	bl	8003bec <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40020800 	.word	0x40020800

080008cc <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 80008d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008d8:	2201      	movs	r2, #1
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <Gyro_Receive_Data+0x2c>)
 80008de:	f004 fe6a 	bl	80055b6 <HAL_SPI_Receive>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <Gyro_Receive_Data+0x30>)
 80008e8:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 80008ea:	f7ff ffc9 	bl	8000880 <Gyro_HAL_Check>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20025b60 	.word	0x20025b60
 80008fc:	2000009c 	.word	0x2000009c

08000900 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8000908:	f644 6320 	movw	r3, #20000	; 0x4e20
 800090c:	2201      	movs	r2, #1
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <Gyro_Transmit_Data+0x2c>)
 8000912:	f004 fd14 	bl	800533e <HAL_SPI_Transmit>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <Gyro_Transmit_Data+0x30>)
 800091c:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 800091e:	f7ff ffaf 	bl	8000880 <Gyro_HAL_Check>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20025b60 	.word	0x20025b60
 8000930:	2000009c 	.word	0x2000009c

08000934 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a59      	ldr	r2, [pc, #356]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	4b53      	ldr	r3, [pc, #332]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a4b      	ldr	r2, [pc, #300]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b49      	ldr	r3, [pc, #292]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80009fe:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a02:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a10:	230e      	movs	r3, #14
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4824      	ldr	r0, [pc, #144]	; (8000aac <LCD_GPIO_Init+0x178>)
 8000a1c:	f002 fe16 	bl	800364c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a24:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <LCD_GPIO_Init+0x17c>)
 8000a2e:	f002 fe0d 	bl	800364c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a32:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481d      	ldr	r0, [pc, #116]	; (8000ab4 <LCD_GPIO_Init+0x180>)
 8000a40:	f002 fe04 	bl	800364c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000a44:	2348      	movs	r3, #72	; 0x48
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <LCD_GPIO_Init+0x184>)
 8000a50:	f002 fdfc 	bl	800364c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <LCD_GPIO_Init+0x188>)
 8000a62:	f002 fdf3 	bl	800364c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a6a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <LCD_GPIO_Init+0x18c>)
 8000a74:	f002 fdea 	bl	800364c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a7c:	2309      	movs	r3, #9
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <LCD_GPIO_Init+0x17c>)
 8000a88:	f002 fde0 	bl	800364c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <LCD_GPIO_Init+0x18c>)
 8000a9a:	f002 fdd7 	bl	800364c <HAL_GPIO_Init>
}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40021400 	.word	0x40021400
 8000ac0:	40021800 	.word	0x40021800

08000ac4 <LTCD__Init>:


void LTCD__Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <LTCD__Init+0xb0>)
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <LTCD__Init+0xb4>)
 8000acc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <LTCD__Init+0xb0>)
 8000ad0:	2209      	movs	r2, #9
 8000ad2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <LTCD__Init+0xb0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <LTCD__Init+0xb0>)
 8000adc:	221d      	movs	r2, #29
 8000ade:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <LTCD__Init+0xb0>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <LTCD__Init+0xb0>)
 8000ae8:	f240 120d 	movw	r2, #269	; 0x10d
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <LTCD__Init+0xb0>)
 8000af0:	f240 1243 	movw	r2, #323	; 0x143
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <LTCD__Init+0xb0>)
 8000af8:	f240 1217 	movw	r2, #279	; 0x117
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <LTCD__Init+0xb0>)
 8000b00:	f240 1247 	movw	r2, #327	; 0x147
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <LTCD__Init+0xb0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <LTCD__Init+0xb0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <LTCD__Init+0xb0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <LTCD__Init+0xb8>)
 8000b20:	2208      	movs	r2, #8
 8000b22:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <LTCD__Init+0xb8>)
 8000b26:	22c0      	movs	r2, #192	; 0xc0
 8000b28:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <LTCD__Init+0xb8>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <LTCD__Init+0xb8>)
 8000b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <LTCD__Init+0xb8>)
 8000b3a:	f004 f95b 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <LTCD__Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LTCD__Init+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <LTCD__Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <LTCD__Init+0xb0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b56:	f7ff feed 	bl	8000934 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <LTCD__Init+0xb0>)
 8000b5c:	f003 fa20 	bl	8003fa0 <HAL_LTDC_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b66:	f000 f88d 	bl	8000c84 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b6a:	f000 f88e 	bl	8000c8a <ili9341_Init>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000a0 	.word	0x200000a0
 8000b78:	40016800 	.word	0x40016800
 8000b7c:	20000148 	.word	0x20000148

08000b80 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	; 0x40
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b8e:	23f0      	movs	r3, #240	; 0xf0
 8000b90:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b9a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000ba0:	23ff      	movs	r3, #255	; 0xff
 8000ba2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <LTCD_Layer_Init+0x78>)
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000bbc:	23f0      	movs	r3, #240	; 0xf0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000bc0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <LTCD_Layer_Init+0x7c>)
 8000be2:	f003 faad 	bl	8004140 <HAL_LTDC_ConfigLayer>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000bec:	f000 f84a 	bl	8000c84 <LCD_Error_Handler>
	}

}
 8000bf0:	bf00      	nop
 8000bf2:	3740      	adds	r7, #64	; 0x40
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001d4 	.word	0x200001d4
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <LCD_SetTextColor>:
	}

}

void LCD_SetTextColor(uint16_t Color)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <LCD_SetTextColor+0x1c>)
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	8013      	strh	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	20000000 	.word	0x20000000

08000c20 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <LCD_SetFont+0x1c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000178 	.word	0x20000178

08000c40 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	460a      	mov	r2, r1
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10e      	bne.n	8000c74 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	e007      	b.n	8000c6c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000c5c:	4908      	ldr	r1, [pc, #32]	; (8000c80 <LCD_Clear+0x40>)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	88ba      	ldrh	r2, [r7, #4]
 8000c62:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000c72:	d3f3      	bcc.n	8000c5c <LCD_Clear+0x1c>
		}
	}
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	200001d4 	.word	0x200001d4

08000c84 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8000c88:	e7fe      	b.n	8000c88 <LCD_Error_Handler+0x4>

08000c8a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000c8e:	f000 f9ff 	bl	8001090 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000c92:	20ca      	movs	r0, #202	; 0xca
 8000c94:	f000 f943 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000c98:	20c3      	movs	r0, #195	; 0xc3
 8000c9a:	f000 f94d 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	f000 f94a 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000ca4:	2050      	movs	r0, #80	; 0x50
 8000ca6:	f000 f947 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000caa:	20cf      	movs	r0, #207	; 0xcf
 8000cac:	f000 f937 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f000 f941 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000cb6:	20c1      	movs	r0, #193	; 0xc1
 8000cb8:	f000 f93e 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000cbc:	2030      	movs	r0, #48	; 0x30
 8000cbe:	f000 f93b 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000cc2:	20ed      	movs	r0, #237	; 0xed
 8000cc4:	f000 f92b 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000cc8:	2064      	movs	r0, #100	; 0x64
 8000cca:	f000 f935 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f000 f932 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f000 f92f 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000cda:	2081      	movs	r0, #129	; 0x81
 8000cdc:	f000 f92c 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000ce0:	20e8      	movs	r0, #232	; 0xe8
 8000ce2:	f000 f91c 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000ce6:	2085      	movs	r0, #133	; 0x85
 8000ce8:	f000 f926 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f923 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000cf2:	2078      	movs	r0, #120	; 0x78
 8000cf4:	f000 f920 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000cf8:	20cb      	movs	r0, #203	; 0xcb
 8000cfa:	f000 f910 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000cfe:	2039      	movs	r0, #57	; 0x39
 8000d00:	f000 f91a 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000d04:	202c      	movs	r0, #44	; 0x2c
 8000d06:	f000 f917 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f914 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000d10:	2034      	movs	r0, #52	; 0x34
 8000d12:	f000 f911 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000d16:	2002      	movs	r0, #2
 8000d18:	f000 f90e 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000d1c:	20f7      	movs	r0, #247	; 0xf7
 8000d1e:	f000 f8fe 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000d22:	2020      	movs	r0, #32
 8000d24:	f000 f908 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000d28:	20ea      	movs	r0, #234	; 0xea
 8000d2a:	f000 f8f8 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f902 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f000 f8ff 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000d3a:	20b1      	movs	r0, #177	; 0xb1
 8000d3c:	f000 f8ef 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f000 f8f9 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000d46:	201b      	movs	r0, #27
 8000d48:	f000 f8f6 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d4c:	20b6      	movs	r0, #182	; 0xb6
 8000d4e:	f000 f8e6 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d52:	200a      	movs	r0, #10
 8000d54:	f000 f8f0 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000d58:	20a2      	movs	r0, #162	; 0xa2
 8000d5a:	f000 f8ed 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000d5e:	20c0      	movs	r0, #192	; 0xc0
 8000d60:	f000 f8dd 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d64:	2010      	movs	r0, #16
 8000d66:	f000 f8e7 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000d6a:	20c1      	movs	r0, #193	; 0xc1
 8000d6c:	f000 f8d7 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d70:	2010      	movs	r0, #16
 8000d72:	f000 f8e1 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000d76:	20c5      	movs	r0, #197	; 0xc5
 8000d78:	f000 f8d1 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000d7c:	2045      	movs	r0, #69	; 0x45
 8000d7e:	f000 f8db 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000d82:	2015      	movs	r0, #21
 8000d84:	f000 f8d8 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000d88:	20c7      	movs	r0, #199	; 0xc7
 8000d8a:	f000 f8c8 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000d8e:	2090      	movs	r0, #144	; 0x90
 8000d90:	f000 f8d2 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000d94:	2036      	movs	r0, #54	; 0x36
 8000d96:	f000 f8c2 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000d9a:	20c8      	movs	r0, #200	; 0xc8
 8000d9c:	f000 f8cc 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000da0:	20f2      	movs	r0, #242	; 0xf2
 8000da2:	f000 f8bc 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f8c6 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000dac:	20b0      	movs	r0, #176	; 0xb0
 8000dae:	f000 f8b6 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000db2:	20c2      	movs	r0, #194	; 0xc2
 8000db4:	f000 f8c0 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000db8:	20b6      	movs	r0, #182	; 0xb6
 8000dba:	f000 f8b0 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f000 f8ba 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000dc4:	20a7      	movs	r0, #167	; 0xa7
 8000dc6:	f000 f8b7 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000dca:	2027      	movs	r0, #39	; 0x27
 8000dcc:	f000 f8b4 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000dd0:	2004      	movs	r0, #4
 8000dd2:	f000 f8b1 	bl	8000f38 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000dd6:	202a      	movs	r0, #42	; 0x2a
 8000dd8:	f000 f8a1 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f8ab 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f8a8 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f8a5 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000dee:	20ef      	movs	r0, #239	; 0xef
 8000df0:	f000 f8a2 	bl	8000f38 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000df4:	202b      	movs	r0, #43	; 0x2b
 8000df6:	f000 f892 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f000 f89c 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 f899 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 f896 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000e0c:	203f      	movs	r0, #63	; 0x3f
 8000e0e:	f000 f893 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000e12:	20f6      	movs	r0, #246	; 0xf6
 8000e14:	f000 f883 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f000 f88d 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f88a 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000e24:	2006      	movs	r0, #6
 8000e26:	f000 f887 	bl	8000f38 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000e2a:	202c      	movs	r0, #44	; 0x2c
 8000e2c:	f000 f877 	bl	8000f1e <ili9341_Write_Reg>
  LCD_Delay(200);
 8000e30:	20c8      	movs	r0, #200	; 0xc8
 8000e32:	f000 f9e9 	bl	8001208 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000e36:	2026      	movs	r0, #38	; 0x26
 8000e38:	f000 f871 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f000 f87b 	bl	8000f38 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000e42:	20e0      	movs	r0, #224	; 0xe0
 8000e44:	f000 f86b 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000e48:	200f      	movs	r0, #15
 8000e4a:	f000 f875 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000e4e:	2029      	movs	r0, #41	; 0x29
 8000e50:	f000 f872 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000e54:	2024      	movs	r0, #36	; 0x24
 8000e56:	f000 f86f 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e5a:	200c      	movs	r0, #12
 8000e5c:	f000 f86c 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000e60:	200e      	movs	r0, #14
 8000e62:	f000 f869 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e66:	2009      	movs	r0, #9
 8000e68:	f000 f866 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000e6c:	204e      	movs	r0, #78	; 0x4e
 8000e6e:	f000 f863 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e72:	2078      	movs	r0, #120	; 0x78
 8000e74:	f000 f860 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000e78:	203c      	movs	r0, #60	; 0x3c
 8000e7a:	f000 f85d 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e7e:	2009      	movs	r0, #9
 8000e80:	f000 f85a 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000e84:	2013      	movs	r0, #19
 8000e86:	f000 f857 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e8a:	2005      	movs	r0, #5
 8000e8c:	f000 f854 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000e90:	2017      	movs	r0, #23
 8000e92:	f000 f851 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e96:	2011      	movs	r0, #17
 8000e98:	f000 f84e 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 f84b 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000ea2:	20e1      	movs	r0, #225	; 0xe1
 8000ea4:	f000 f83b 	bl	8000f1e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f845 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000eae:	2016      	movs	r0, #22
 8000eb0:	f000 f842 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000eb4:	201b      	movs	r0, #27
 8000eb6:	f000 f83f 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000eba:	2004      	movs	r0, #4
 8000ebc:	f000 f83c 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000ec0:	2011      	movs	r0, #17
 8000ec2:	f000 f839 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000ec6:	2007      	movs	r0, #7
 8000ec8:	f000 f836 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000ecc:	2031      	movs	r0, #49	; 0x31
 8000ece:	f000 f833 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000ed2:	2033      	movs	r0, #51	; 0x33
 8000ed4:	f000 f830 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000ed8:	2042      	movs	r0, #66	; 0x42
 8000eda:	f000 f82d 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000ede:	2005      	movs	r0, #5
 8000ee0:	f000 f82a 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000ee4:	200c      	movs	r0, #12
 8000ee6:	f000 f827 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000eea:	200a      	movs	r0, #10
 8000eec:	f000 f824 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000ef0:	2028      	movs	r0, #40	; 0x28
 8000ef2:	f000 f821 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000ef6:	202f      	movs	r0, #47	; 0x2f
 8000ef8:	f000 f81e 	bl	8000f38 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000efc:	200f      	movs	r0, #15
 8000efe:	f000 f81b 	bl	8000f38 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000f02:	2011      	movs	r0, #17
 8000f04:	f000 f80b 	bl	8000f1e <ili9341_Write_Reg>
  LCD_Delay(200);
 8000f08:	20c8      	movs	r0, #200	; 0xc8
 8000f0a:	f000 f97d 	bl	8001208 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000f0e:	2029      	movs	r0, #41	; 0x29
 8000f10:	f000 f805 	bl	8000f1e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000f14:	202c      	movs	r0, #44	; 0x2c
 8000f16:	f000 f802 	bl	8000f1e <ili9341_Write_Reg>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f94a 	bl	80011c4 <LCD_IO_WriteReg>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f91b 	bl	8001180 <LCD_IO_WriteData>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000f58:	4819      	ldr	r0, [pc, #100]	; (8000fc0 <SPI_Init+0x6c>)
 8000f5a:	f004 fddf 	bl	8005b1c <HAL_SPI_GetState>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d12b      	bne.n	8000fbc <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <SPI_Init+0x6c>)
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <SPI_Init+0x70>)
 8000f68:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <SPI_Init+0x6c>)
 8000f6c:	2218      	movs	r2, #24
 8000f6e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <SPI_Init+0x6c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <SPI_Init+0x6c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <SPI_Init+0x6c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <SPI_Init+0x6c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <SPI_Init+0x6c>)
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <SPI_Init+0x6c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <SPI_Init+0x6c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <SPI_Init+0x6c>)
 8000f9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <SPI_Init+0x6c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SPI_Init+0x6c>)
 8000faa:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fae:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <SPI_Init+0x6c>)
 8000fb2:	f000 f833 	bl	800101c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000fb6:	4802      	ldr	r0, [pc, #8]	; (8000fc0 <SPI_Init+0x6c>)
 8000fb8:	f004 f910 	bl	80051dc <HAL_SPI_Init>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000017c 	.word	0x2000017c
 8000fc4:	40015000 	.word	0x40015000

08000fc8 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <SPI_Write+0x34>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1db9      	adds	r1, r7, #6
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4808      	ldr	r0, [pc, #32]	; (8001000 <SPI_Write+0x38>)
 8000fe0:	f004 f9ad 	bl	800533e <HAL_SPI_Transmit>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000fee:	f000 f809 	bl	8001004 <SPI_Error>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004
 8001000:	2000017c 	.word	0x2000017c

08001004 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <SPI_Error+0x14>)
 800100a:	f004 f970 	bl	80052ee <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800100e:	f7ff ffa1 	bl	8000f54 <SPI_Init>
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000017c 	.word	0x2000017c

0800101c <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <SPI_MspInit+0x6c>)
 800102a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <SPI_MspInit+0x6c>)
 800102e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001032:	6453      	str	r3, [r2, #68]	; 0x44
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <SPI_MspInit+0x6c>)
 8001036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <SPI_MspInit+0x6c>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <SPI_MspInit+0x6c>)
 800104a:	f043 0320 	orr.w	r3, r3, #32
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <SPI_MspInit+0x6c>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0320 	and.w	r3, r3, #32
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 800105c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001060:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001066:	2302      	movs	r3, #2
 8001068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800106a:	2301      	movs	r3, #1
 800106c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800106e:	2305      	movs	r3, #5
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <SPI_MspInit+0x70>)
 800107a:	f002 fae7 	bl	800364c <HAL_GPIO_Init>
}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40021400 	.word	0x40021400

08001090 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001096:	4b36      	ldr	r3, [pc, #216]	; (8001170 <LCD_IO_Init+0xe0>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d164      	bne.n	8001168 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <LCD_IO_Init+0xe0>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b32      	ldr	r3, [pc, #200]	; (8001174 <LCD_IO_Init+0xe4>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a31      	ldr	r2, [pc, #196]	; (8001174 <LCD_IO_Init+0xe4>)
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <LCD_IO_Init+0xe4>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	4619      	mov	r1, r3
 80010d8:	4827      	ldr	r0, [pc, #156]	; (8001178 <LCD_IO_Init+0xe8>)
 80010da:	f002 fab7 	bl	800364c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <LCD_IO_Init+0xe4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a23      	ldr	r2, [pc, #140]	; (8001174 <LCD_IO_Init+0xe4>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <LCD_IO_Init+0xe4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80010fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	4619      	mov	r1, r3
 8001112:	4819      	ldr	r0, [pc, #100]	; (8001178 <LCD_IO_Init+0xe8>)
 8001114:	f002 fa9a 	bl	800364c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <LCD_IO_Init+0xe4>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <LCD_IO_Init+0xe4>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <LCD_IO_Init+0xe4>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001134:	2304      	movs	r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <LCD_IO_Init+0xec>)
 800114c:	f002 fa7e 	bl	800364c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001150:	2200      	movs	r2, #0
 8001152:	2104      	movs	r1, #4
 8001154:	4809      	ldr	r0, [pc, #36]	; (800117c <LCD_IO_Init+0xec>)
 8001156:	f002 fd49 	bl	8003bec <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800115a:	2201      	movs	r2, #1
 800115c:	2104      	movs	r1, #4
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <LCD_IO_Init+0xec>)
 8001160:	f002 fd44 	bl	8003bec <HAL_GPIO_WritePin>

    SPI_Init();
 8001164:	f7ff fef6 	bl	8000f54 <SPI_Init>
  }
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200259d4 	.word	0x200259d4
 8001174:	40023800 	.word	0x40023800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40020800 	.word	0x40020800

08001180 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <LCD_IO_WriteData+0x3c>)
 8001192:	f002 fd2b 	bl	8003bec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001196:	2200      	movs	r2, #0
 8001198:	2104      	movs	r1, #4
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <LCD_IO_WriteData+0x40>)
 800119c:	f002 fd26 	bl	8003bec <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff10 	bl	8000fc8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011a8:	2201      	movs	r2, #1
 80011aa:	2104      	movs	r1, #4
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <LCD_IO_WriteData+0x40>)
 80011ae:	f002 fd1d 	bl	8003bec <HAL_GPIO_WritePin>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40020800 	.word	0x40020800

080011c4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <LCD_IO_WriteReg+0x3c>)
 80011d6:	f002 fd09 	bl	8003bec <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80011da:	2200      	movs	r2, #0
 80011dc:	2104      	movs	r1, #4
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <LCD_IO_WriteReg+0x40>)
 80011e0:	f002 fd04 	bl	8003bec <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff feed 	bl	8000fc8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80011ee:	2201      	movs	r2, #1
 80011f0:	2104      	movs	r1, #4
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <LCD_IO_WriteReg+0x40>)
 80011f4:	f002 fcfa 	bl	8003bec <HAL_GPIO_WritePin>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40020800 	.word	0x40020800

08001208 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f005 f887 	bl	8006324 <osDelay>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <appInit>:

/*
 * @brief Initialize the application
 */
void appInit(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0
	// Initialize Tasks, Timers, and ITC structures
	initTimers();
 8001222:	f000 f89b 	bl	800135c <initTimers>
	initSempahores();
 8001226:	f000 f90d 	bl	8001444 <initSempahores>
	initMutexes();
 800122a:	f000 f95b 	bl	80014e4 <initMutexes>
	initEventFlags();
 800122e:	f000 f98d 	bl	800154c <initEventFlags>

	// Initialize the LTCD
	lcdInit();
 8001232:	f000 f9f7 	bl	8001624 <lcdInit>

	// Initialize the Gyro
	Gyro_Init();
 8001236:	f7ff f9f9 	bl	800062c <Gyro_Init>

	// Start tasks/timers
	initTasks();
 800123a:	f000 f805 	bl	8001248 <initTasks>
	startTimers();
 800123e:	f000 f9bb 	bl	80015b8 <startTimers>
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <initTasks>:

/*
 * @brief Initialize all tasks
 */
void initTasks(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	// Create new task threads
	speedSetpointTaskID = osThreadNew(speedSetpointTask, NULL, &speedSetpointTaskAttr);
 800124c:	4a2d      	ldr	r2, [pc, #180]	; (8001304 <initTasks+0xbc>)
 800124e:	2100      	movs	r1, #0
 8001250:	482d      	ldr	r0, [pc, #180]	; (8001308 <initTasks+0xc0>)
 8001252:	f004 ffd5 	bl	8006200 <osThreadNew>
 8001256:	4603      	mov	r3, r0
 8001258:	4a2c      	ldr	r2, [pc, #176]	; (800130c <initTasks+0xc4>)
 800125a:	6013      	str	r3, [r2, #0]
	vehicleDirectionTaskID = osThreadNew(vehicleDirectionTask, NULL, &vehicleDirectionTaskAttr);
 800125c:	4a2c      	ldr	r2, [pc, #176]	; (8001310 <initTasks+0xc8>)
 800125e:	2100      	movs	r1, #0
 8001260:	482c      	ldr	r0, [pc, #176]	; (8001314 <initTasks+0xcc>)
 8001262:	f004 ffcd 	bl	8006200 <osThreadNew>
 8001266:	4603      	mov	r3, r0
 8001268:	4a2b      	ldr	r2, [pc, #172]	; (8001318 <initTasks+0xd0>)
 800126a:	6013      	str	r3, [r2, #0]
	vehicleMonitorTaskID = osThreadNew(vehicleMonitorTask, NULL, &vehicleMonitorTaskAttr);
 800126c:	4a2b      	ldr	r2, [pc, #172]	; (800131c <initTasks+0xd4>)
 800126e:	2100      	movs	r1, #0
 8001270:	482b      	ldr	r0, [pc, #172]	; (8001320 <initTasks+0xd8>)
 8001272:	f004 ffc5 	bl	8006200 <osThreadNew>
 8001276:	4603      	mov	r3, r0
 8001278:	4a2a      	ldr	r2, [pc, #168]	; (8001324 <initTasks+0xdc>)
 800127a:	6013      	str	r3, [r2, #0]
	lcdDisplayTaskID = osThreadNew(lcdDisplayTask, NULL, &lcdDisplayTaskAttr);
 800127c:	4a2a      	ldr	r2, [pc, #168]	; (8001328 <initTasks+0xe0>)
 800127e:	2100      	movs	r1, #0
 8001280:	482a      	ldr	r0, [pc, #168]	; (800132c <initTasks+0xe4>)
 8001282:	f004 ffbd 	bl	8006200 <osThreadNew>
 8001286:	4603      	mov	r3, r0
 8001288:	4a29      	ldr	r2, [pc, #164]	; (8001330 <initTasks+0xe8>)
 800128a:	6013      	str	r3, [r2, #0]
	ledOutputTaskID = osThreadNew(ledOutputTask, NULL, &ledOutputTaskAttr);
 800128c:	4a29      	ldr	r2, [pc, #164]	; (8001334 <initTasks+0xec>)
 800128e:	2100      	movs	r1, #0
 8001290:	4829      	ldr	r0, [pc, #164]	; (8001338 <initTasks+0xf0>)
 8001292:	f004 ffb5 	bl	8006200 <osThreadNew>
 8001296:	4603      	mov	r3, r0
 8001298:	4a28      	ldr	r2, [pc, #160]	; (800133c <initTasks+0xf4>)
 800129a:	6013      	str	r3, [r2, #0]

	// Verify that all task threads were created successfully
	assert(speedSetpointTaskID != NULL);
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <initTasks+0xc4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <initTasks+0x68>
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <initTasks+0xf8>)
 80012a6:	4a27      	ldr	r2, [pc, #156]	; (8001344 <initTasks+0xfc>)
 80012a8:	21c5      	movs	r1, #197	; 0xc5
 80012aa:	4827      	ldr	r0, [pc, #156]	; (8001348 <initTasks+0x100>)
 80012ac:	f00b f952 	bl	800c554 <__assert_func>
	assert(vehicleDirectionTaskID != NULL);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <initTasks+0xd0>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <initTasks+0x7c>
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <initTasks+0x104>)
 80012ba:	4a22      	ldr	r2, [pc, #136]	; (8001344 <initTasks+0xfc>)
 80012bc:	21c6      	movs	r1, #198	; 0xc6
 80012be:	4822      	ldr	r0, [pc, #136]	; (8001348 <initTasks+0x100>)
 80012c0:	f00b f948 	bl	800c554 <__assert_func>
	assert(vehicleMonitorTaskID != NULL);
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <initTasks+0xdc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <initTasks+0x90>
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <initTasks+0x108>)
 80012ce:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <initTasks+0xfc>)
 80012d0:	21c7      	movs	r1, #199	; 0xc7
 80012d2:	481d      	ldr	r0, [pc, #116]	; (8001348 <initTasks+0x100>)
 80012d4:	f00b f93e 	bl	800c554 <__assert_func>
	assert(lcdDisplayTaskID != NULL);
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <initTasks+0xe8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <initTasks+0xa4>
 80012e0:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <initTasks+0x10c>)
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <initTasks+0xfc>)
 80012e4:	21c8      	movs	r1, #200	; 0xc8
 80012e6:	4818      	ldr	r0, [pc, #96]	; (8001348 <initTasks+0x100>)
 80012e8:	f00b f934 	bl	800c554 <__assert_func>
	assert(ledOutputTaskID != NULL);
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <initTasks+0xf4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d105      	bne.n	8001300 <initTasks+0xb8>
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <initTasks+0x110>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <initTasks+0xfc>)
 80012f8:	21c9      	movs	r1, #201	; 0xc9
 80012fa:	4813      	ldr	r0, [pc, #76]	; (8001348 <initTasks+0x100>)
 80012fc:	f00b f92a 	bl	800c554 <__assert_func>
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0800da48 	.word	0x0800da48
 8001308:	08001b49 	.word	0x08001b49
 800130c:	200259e0 	.word	0x200259e0
 8001310:	0800da6c 	.word	0x0800da6c
 8001314:	08001c69 	.word	0x08001c69
 8001318:	200259e4 	.word	0x200259e4
 800131c:	0800da90 	.word	0x0800da90
 8001320:	08001cf1 	.word	0x08001cf1
 8001324:	200259e8 	.word	0x200259e8
 8001328:	0800dab4 	.word	0x0800dab4
 800132c:	08001dd1 	.word	0x08001dd1
 8001330:	200259ec 	.word	0x200259ec
 8001334:	0800dad8 	.word	0x0800dad8
 8001338:	08001ec1 	.word	0x08001ec1
 800133c:	200259f0 	.word	0x200259f0
 8001340:	0800d628 	.word	0x0800d628
 8001344:	0800dbac 	.word	0x0800dbac
 8001348:	0800d644 	.word	0x0800d644
 800134c:	0800d658 	.word	0x0800d658
 8001350:	0800d678 	.word	0x0800d678
 8001354:	0800d698 	.word	0x0800d698
 8001358:	0800d6b4 	.word	0x0800d6b4

0800135c <initTimers>:

/*
 * @brief Initalize app timers
 */
void initTimers(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	// Create timers
	holdButtonTimerID = osTimerNew(holdButtonTimerCallback, osTimerOnce, NULL, &holdButtonTimerAttr);
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <initTimers+0xa0>)
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	4826      	ldr	r0, [pc, #152]	; (8001400 <initTimers+0xa4>)
 8001368:	f005 f80c 	bl	8006384 <osTimerNew>
 800136c:	4603      	mov	r3, r0
 800136e:	4a25      	ldr	r2, [pc, #148]	; (8001404 <initTimers+0xa8>)
 8001370:	6013      	str	r3, [r2, #0]
	vehicleDirWakeupTimerID = osTimerNew(vehicleDirWakeupTimerCallback, osTimerPeriodic, NULL, &vehicleDirWakeupTimerAttr);
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <initTimers+0xac>)
 8001374:	2200      	movs	r2, #0
 8001376:	2101      	movs	r1, #1
 8001378:	4824      	ldr	r0, [pc, #144]	; (800140c <initTimers+0xb0>)
 800137a:	f005 f803 	bl	8006384 <osTimerNew>
 800137e:	4603      	mov	r3, r0
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <initTimers+0xb4>)
 8001382:	6013      	str	r3, [r2, #0]
	directionAlertTimerID = osTimerNew(directionAlertTimerCallback, osTimerOnce, NULL, &directionAlertTimerAttr);
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <initTimers+0xb8>)
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	4823      	ldr	r0, [pc, #140]	; (8001418 <initTimers+0xbc>)
 800138c:	f004 fffa 	bl	8006384 <osTimerNew>
 8001390:	4603      	mov	r3, r0
 8001392:	4a22      	ldr	r2, [pc, #136]	; (800141c <initTimers+0xc0>)
 8001394:	6013      	str	r3, [r2, #0]
	lcdDisplayWakeupTimerID = osTimerNew(lcdDisplayWakeupTimerCallback, osTimerPeriodic, NULL, &lcdDisplayWakeupTimerAttr);
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <initTimers+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	2101      	movs	r1, #1
 800139c:	4821      	ldr	r0, [pc, #132]	; (8001424 <initTimers+0xc8>)
 800139e:	f004 fff1 	bl	8006384 <osTimerNew>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a20      	ldr	r2, [pc, #128]	; (8001428 <initTimers+0xcc>)
 80013a6:	6013      	str	r3, [r2, #0]

	// Verify each of the timers was setup properly
	assert(holdButtonTimerID != NULL);
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <initTimers+0xa8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <initTimers+0x60>
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <initTimers+0xd0>)
 80013b2:	4a1f      	ldr	r2, [pc, #124]	; (8001430 <initTimers+0xd4>)
 80013b4:	21d9      	movs	r1, #217	; 0xd9
 80013b6:	481f      	ldr	r0, [pc, #124]	; (8001434 <initTimers+0xd8>)
 80013b8:	f00b f8cc 	bl	800c554 <__assert_func>
	assert(vehicleDirWakeupTimerID != NULL);
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <initTimers+0xb4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <initTimers+0x74>
 80013c4:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <initTimers+0xdc>)
 80013c6:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <initTimers+0xd4>)
 80013c8:	21da      	movs	r1, #218	; 0xda
 80013ca:	481a      	ldr	r0, [pc, #104]	; (8001434 <initTimers+0xd8>)
 80013cc:	f00b f8c2 	bl	800c554 <__assert_func>
	assert(directionAlertTimerID != NULL);
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <initTimers+0xc0>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <initTimers+0x88>
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <initTimers+0xe0>)
 80013da:	4a15      	ldr	r2, [pc, #84]	; (8001430 <initTimers+0xd4>)
 80013dc:	21db      	movs	r1, #219	; 0xdb
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <initTimers+0xd8>)
 80013e0:	f00b f8b8 	bl	800c554 <__assert_func>
	assert(lcdDisplayWakeupTimerID != NULL);
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <initTimers+0xcc>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d105      	bne.n	80013f8 <initTimers+0x9c>
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <initTimers+0xe4>)
 80013ee:	4a10      	ldr	r2, [pc, #64]	; (8001430 <initTimers+0xd4>)
 80013f0:	21dc      	movs	r1, #220	; 0xdc
 80013f2:	4810      	ldr	r0, [pc, #64]	; (8001434 <initTimers+0xd8>)
 80013f4:	f00b f8ae 	bl	800c554 <__assert_func>
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800dafc 	.word	0x0800dafc
 8001400:	08001fb9 	.word	0x08001fb9
 8001404:	200259f4 	.word	0x200259f4
 8001408:	0800db0c 	.word	0x0800db0c
 800140c:	08001fe5 	.word	0x08001fe5
 8001410:	200259f8 	.word	0x200259f8
 8001414:	0800db1c 	.word	0x0800db1c
 8001418:	08002039 	.word	0x08002039
 800141c:	200259fc 	.word	0x200259fc
 8001420:	0800db2c 	.word	0x0800db2c
 8001424:	080020a5 	.word	0x080020a5
 8001428:	20025a00 	.word	0x20025a00
 800142c:	0800d6cc 	.word	0x0800d6cc
 8001430:	0800dbb8 	.word	0x0800dbb8
 8001434:	0800d644 	.word	0x0800d644
 8001438:	0800d6e8 	.word	0x0800d6e8
 800143c:	0800d708 	.word	0x0800d708
 8001440:	0800d728 	.word	0x0800d728

08001444 <initSempahores>:

/*
 * @brief Initialize app semaphores
 */
void initSempahores(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	// Create new app semaphores
	buttonStateSemaphorID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <initSempahores+0x74>)
 800144a:	2100      	movs	r1, #0
 800144c:	2001      	movs	r0, #1
 800144e:	f005 fabf 	bl	80069d0 <osSemaphoreNew>
 8001452:	4603      	mov	r3, r0
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <initSempahores+0x78>)
 8001456:	6013      	str	r3, [r2, #0]
										   &buttonStateSemaphorAttr);
	vehicleDirSemaphoreID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <initSempahores+0x7c>)
 800145a:	2100      	movs	r1, #0
 800145c:	2001      	movs	r0, #1
 800145e:	f005 fab7 	bl	80069d0 <osSemaphoreNew>
 8001462:	4603      	mov	r3, r0
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <initSempahores+0x80>)
 8001466:	6013      	str	r3, [r2, #0]
										   &vehicleDirSemaphoreAttr);
	lcdDisplaySemaphoreID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <initSempahores+0x84>)
 800146a:	2100      	movs	r1, #0
 800146c:	2001      	movs	r0, #1
 800146e:	f005 faaf 	bl	80069d0 <osSemaphoreNew>
 8001472:	4603      	mov	r3, r0
 8001474:	4a15      	ldr	r2, [pc, #84]	; (80014cc <initSempahores+0x88>)
 8001476:	6013      	str	r3, [r2, #0]
										   &lcdDisplaySemaphoreAttr);

	// Verify each semaphore was initialized sucessfully
	assert(buttonStateSemaphorID != NULL);
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <initSempahores+0x78>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <initSempahores+0x48>
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <initSempahores+0x8c>)
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <initSempahores+0x90>)
 8001484:	21ee      	movs	r1, #238	; 0xee
 8001486:	4814      	ldr	r0, [pc, #80]	; (80014d8 <initSempahores+0x94>)
 8001488:	f00b f864 	bl	800c554 <__assert_func>
	assert(vehicleDirSemaphoreID != NULL);
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <initSempahores+0x80>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d105      	bne.n	80014a0 <initSempahores+0x5c>
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <initSempahores+0x98>)
 8001496:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <initSempahores+0x90>)
 8001498:	21ef      	movs	r1, #239	; 0xef
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <initSempahores+0x94>)
 800149c:	f00b f85a 	bl	800c554 <__assert_func>
	assert(lcdDisplaySemaphoreID != NULL);
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <initSempahores+0x88>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <initSempahores+0x70>
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <initSempahores+0x9c>)
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <initSempahores+0x90>)
 80014ac:	21f0      	movs	r1, #240	; 0xf0
 80014ae:	480a      	ldr	r0, [pc, #40]	; (80014d8 <initSempahores+0x94>)
 80014b0:	f00b f850 	bl	800c554 <__assert_func>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800db3c 	.word	0x0800db3c
 80014bc:	20025a04 	.word	0x20025a04
 80014c0:	0800db4c 	.word	0x0800db4c
 80014c4:	20025a08 	.word	0x20025a08
 80014c8:	0800db5c 	.word	0x0800db5c
 80014cc:	20025a0c 	.word	0x20025a0c
 80014d0:	0800d748 	.word	0x0800d748
 80014d4:	0800dbc4 	.word	0x0800dbc4
 80014d8:	0800d644 	.word	0x0800d644
 80014dc:	0800d768 	.word	0x0800d768
 80014e0:	0800d788 	.word	0x0800d788

080014e4 <initMutexes>:

/*
 * @brief Initialize app mutexes
 */
void initMutexes(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	// Create app mutexes
	speedDataMutexID = osMutexNew(&speedDataMutexAttr);
 80014e8:	4810      	ldr	r0, [pc, #64]	; (800152c <initMutexes+0x48>)
 80014ea:	f005 f963 	bl	80067b4 <osMutexNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <initMutexes+0x4c>)
 80014f2:	6013      	str	r3, [r2, #0]
	vehicleDirDataMutexID = osMutexNew(&vehicleDirDataMutexAttr);
 80014f4:	480f      	ldr	r0, [pc, #60]	; (8001534 <initMutexes+0x50>)
 80014f6:	f005 f95d 	bl	80067b4 <osMutexNew>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <initMutexes+0x54>)
 80014fe:	6013      	str	r3, [r2, #0]

	// Verifiy that the mutexes were created successfully
	assert(speedDataMutexID != NULL);
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <initMutexes+0x4c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <initMutexes+0x30>
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <initMutexes+0x58>)
 800150a:	4a0d      	ldr	r2, [pc, #52]	; (8001540 <initMutexes+0x5c>)
 800150c:	21fe      	movs	r1, #254	; 0xfe
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <initMutexes+0x60>)
 8001510:	f00b f820 	bl	800c554 <__assert_func>
	assert(vehicleDirDataMutexID != NULL);
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <initMutexes+0x54>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d105      	bne.n	8001528 <initMutexes+0x44>
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <initMutexes+0x64>)
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <initMutexes+0x5c>)
 8001520:	21ff      	movs	r1, #255	; 0xff
 8001522:	4808      	ldr	r0, [pc, #32]	; (8001544 <initMutexes+0x60>)
 8001524:	f00b f816 	bl	800c554 <__assert_func>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	0800db6c 	.word	0x0800db6c
 8001530:	20025a10 	.word	0x20025a10
 8001534:	0800db7c 	.word	0x0800db7c
 8001538:	20025a14 	.word	0x20025a14
 800153c:	0800d7a8 	.word	0x0800d7a8
 8001540:	0800dbd4 	.word	0x0800dbd4
 8001544:	0800d644 	.word	0x0800d644
 8001548:	0800d7c4 	.word	0x0800d7c4

0800154c <initEventFlags>:

/*
 * @brief Initialize app event flags
 */
void initEventFlags(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	// Create app event flags
	vehicleMonitorEventFlagID = osEventFlagsNew(&vehicleMonitorEventFlagAttr);
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <initEventFlags+0x4c>)
 8001552:	f005 f814 	bl	800657e <osEventFlagsNew>
 8001556:	4603      	mov	r3, r0
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <initEventFlags+0x50>)
 800155a:	6013      	str	r3, [r2, #0]
	ledOutputEventFlagID = osEventFlagsNew(&ledOutputEventFlagAttr);
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <initEventFlags+0x54>)
 800155e:	f005 f80e 	bl	800657e <osEventFlagsNew>
 8001562:	4603      	mov	r3, r0
 8001564:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <initEventFlags+0x58>)
 8001566:	6013      	str	r3, [r2, #0]

	// Verify that the event flags were created successfully
	assert(vehicleMonitorEventFlagID != NULL);
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <initEventFlags+0x50>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <initEventFlags+0x32>
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <initEventFlags+0x5c>)
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <initEventFlags+0x60>)
 8001574:	f240 110d 	movw	r1, #269	; 0x10d
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <initEventFlags+0x64>)
 800157a:	f00a ffeb 	bl	800c554 <__assert_func>
	assert(ledOutputEventFlagID != NULL);
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <initEventFlags+0x58>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <initEventFlags+0x48>
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <initEventFlags+0x68>)
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <initEventFlags+0x60>)
 800158a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <initEventFlags+0x64>)
 8001590:	f00a ffe0 	bl	800c554 <__assert_func>
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800db8c 	.word	0x0800db8c
 800159c:	20025a18 	.word	0x20025a18
 80015a0:	0800db9c 	.word	0x0800db9c
 80015a4:	20025a1c 	.word	0x20025a1c
 80015a8:	0800d7e4 	.word	0x0800d7e4
 80015ac:	0800dbe0 	.word	0x0800dbe0
 80015b0:	0800d644 	.word	0x0800d644
 80015b4:	0800d808 	.word	0x0800d808

080015b8 <startTimers>:

/*
 * @brief Starts the task wakeup timers
 */
void startTimers(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
	// Start task wakeup timers
	osStatus_t dirWakeupTimerStatus = osTimerStart(vehicleDirWakeupTimerID, VEHICLE_DIR_WAKEUP_TIMER_TICKS);
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <startTimers+0x54>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2164      	movs	r1, #100	; 0x64
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 ff59 	bl	800647c <osTimerStart>
 80015ca:	6078      	str	r0, [r7, #4]
	osStatus_t lcdWakeupTimerStatus = osTimerStart(lcdDisplayWakeupTimerID, LCD_DISPLAY_TIMER_TICKS);
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <startTimers+0x58>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015d4:	4618      	mov	r0, r3
 80015d6:	f004 ff51 	bl	800647c <osTimerStart>
 80015da:	6038      	str	r0, [r7, #0]

	// Verify that the timers were started successfully
	assert(dirWakeupTimerStatus == osOK);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <startTimers+0x38>
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <startTimers+0x5c>)
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <startTimers+0x60>)
 80015e6:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <startTimers+0x64>)
 80015ec:	f00a ffb2 	bl	800c554 <__assert_func>
	assert(lcdWakeupTimerStatus == osOK);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <startTimers+0x4c>
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <startTimers+0x68>)
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <startTimers+0x60>)
 80015fa:	f240 111d 	movw	r1, #285	; 0x11d
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <startTimers+0x64>)
 8001600:	f00a ffa8 	bl	800c554 <__assert_func>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200259f8 	.word	0x200259f8
 8001610:	20025a00 	.word	0x20025a00
 8001614:	0800d828 	.word	0x0800d828
 8001618:	0800dbf0 	.word	0x0800dbf0
 800161c:	0800d644 	.word	0x0800d644
 8001620:	0800d848 	.word	0x0800d848

08001624 <lcdInit>:

/*
 * @brief Initialize the LCD
 */
void lcdInit(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	LTCD__Init();
 8001628:	f7ff fa4c 	bl	8000ac4 <LTCD__Init>
	LTCD_Layer_Init(0);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff faa7 	bl	8000b80 <LTCD_Layer_Init>
	LCD_Clear(0,LCD_COLOR_CYAN);
 8001632:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001636:	2000      	movs	r0, #0
 8001638:	f7ff fb02 	bl	8000c40 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fadf 	bl	8000c00 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001642:	4802      	ldr	r0, [pc, #8]	; (800164c <lcdInit+0x28>)
 8001644:	f7ff faec 	bl	8000c20 <LCD_SetFont>
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	2000000c 	.word	0x2000000c

08001650 <updateVehicleSpeedData>:

/*
 *
 */
void updateVehicleSpeedData(const int acceleration)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	// Acquire the speed data mutex before reading the vehicle speed data
	osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <updateVehicleSpeedData+0x9c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f04f 31ff 	mov.w	r1, #4294967295
 8001660:	4618      	mov	r0, r3
 8001662:	f005 f92d 	bl	80068c0 <osMutexAcquire>
 8001666:	60f8      	str	r0, [r7, #12]
	assert(mutexStatus == osOK);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <updateVehicleSpeedData+0x2c>
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <updateVehicleSpeedData+0xa0>)
 8001670:	4a20      	ldr	r2, [pc, #128]	; (80016f4 <updateVehicleSpeedData+0xa4>)
 8001672:	f240 1135 	movw	r1, #309	; 0x135
 8001676:	4820      	ldr	r0, [pc, #128]	; (80016f8 <updateVehicleSpeedData+0xa8>)
 8001678:	f00a ff6c 	bl	800c554 <__assert_func>

	// Update vehicle speed
	uint8_t currentSpeed = speedData.speed;
 800167c:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <updateVehicleSpeedData+0xac>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	72fb      	strb	r3, [r7, #11]

	// Update vehicle speed
	// NOTE: Speed should never be negative
	if((currentSpeed + acceleration) < 0){ speedData.speed = 0; }
 8001682:	7afa      	ldrb	r2, [r7, #11]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	da03      	bge.n	8001694 <updateVehicleSpeedData+0x44>
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <updateVehicleSpeedData+0xac>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
 8001692:	e007      	b.n	80016a4 <updateVehicleSpeedData+0x54>
	else { speedData.speed += acceleration; }
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <updateVehicleSpeedData+0xac>)
 8001696:	781a      	ldrb	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	4413      	add	r3, r2
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <updateVehicleSpeedData+0xac>)
 80016a2:	701a      	strb	r2, [r3, #0]

	// Update vehicle increment/decrement counts
	if(acceleration > 0) { speedData.speedIncrementCount++; }
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	dd06      	ble.n	80016b8 <updateVehicleSpeedData+0x68>
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <updateVehicleSpeedData+0xac>)
 80016ac:	785b      	ldrb	r3, [r3, #1]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <updateVehicleSpeedData+0xac>)
 80016b4:	705a      	strb	r2, [r3, #1]
 80016b6:	e005      	b.n	80016c4 <updateVehicleSpeedData+0x74>
	else { speedData.speedDecrementCount++; }
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <updateVehicleSpeedData+0xac>)
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	3301      	adds	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <updateVehicleSpeedData+0xac>)
 80016c2:	709a      	strb	r2, [r3, #2]


	// speedData updated, release the mutex
	mutexStatus = osMutexRelease(speedDataMutexID);
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <updateVehicleSpeedData+0x9c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 f944 	bl	8006956 <osMutexRelease>
 80016ce:	60f8      	str	r0, [r7, #12]
	assert(mutexStatus == osOK);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <updateVehicleSpeedData+0x94>
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <updateVehicleSpeedData+0xa0>)
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <updateVehicleSpeedData+0xa4>)
 80016da:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <updateVehicleSpeedData+0xa8>)
 80016e0:	f00a ff38 	bl	800c554 <__assert_func>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20025a10 	.word	0x20025a10
 80016f0:	0800d868 	.word	0x0800d868
 80016f4:	0800dbfc 	.word	0x0800dbfc
 80016f8:	0800d644 	.word	0x0800d644
 80016fc:	200259d8 	.word	0x200259d8

08001700 <updateVehicleDirectionData>:

/*
 *
 */
void updateVehicleDirectionData(const vehicleDirection newDirection)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
    // Acquire the vehicle direction data mutex
    osStatus_t mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 800170a:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <updateVehicleDirectionData+0xb8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f04f 31ff 	mov.w	r1, #4294967295
 8001712:	4618      	mov	r0, r3
 8001714:	f005 f8d4 	bl	80068c0 <osMutexAcquire>
 8001718:	60f8      	str	r0, [r7, #12]
    assert(mutexStatus == osOK);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <updateVehicleDirectionData+0x2e>
 8001720:	4b26      	ldr	r3, [pc, #152]	; (80017bc <updateVehicleDirectionData+0xbc>)
 8001722:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <updateVehicleDirectionData+0xc0>)
 8001724:	f240 1151 	movw	r1, #337	; 0x151
 8001728:	4826      	ldr	r0, [pc, #152]	; (80017c4 <updateVehicleDirectionData+0xc4>)
 800172a:	f00a ff13 	bl	800c554 <__assert_func>

    // Update the vehicle direction data
    directionData.direction = newDirection;
 800172e:	4a26      	ldr	r2, [pc, #152]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	7013      	strb	r3, [r2, #0]

    // Update direction data turn counts
    switch(newDirection)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b04      	cmp	r3, #4
 8001738:	d828      	bhi.n	800178c <updateVehicleDirectionData+0x8c>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <updateVehicleDirectionData+0x40>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	08001755 	.word	0x08001755
 8001744:	08001763 	.word	0x08001763
 8001748:	0800178d 	.word	0x0800178d
 800174c:	08001771 	.word	0x08001771
 8001750:	0800177f 	.word	0x0800177f
    {
        case hardLeftTurn:
            directionData.leftTurnCount += 2;
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	3302      	adds	r3, #2
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 800175e:	705a      	strb	r2, [r3, #1]
            break;
 8001760:	e015      	b.n	800178e <updateVehicleDirectionData+0x8e>
        case gradualLeftTurn:
            directionData.leftTurnCount++;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 8001764:	785b      	ldrb	r3, [r3, #1]
 8001766:	3301      	adds	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 800176c:	705a      	strb	r2, [r3, #1]
            break;
 800176e:	e00e      	b.n	800178e <updateVehicleDirectionData+0x8e>
        case gradualRightTurn:
            directionData.rightTurnCount++;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 8001772:	789b      	ldrb	r3, [r3, #2]
 8001774:	3301      	adds	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 800177a:	709a      	strb	r2, [r3, #2]
            break;
 800177c:	e007      	b.n	800178e <updateVehicleDirectionData+0x8e>
        case hardRightTurn:
            directionData.rightTurnCount += 2;
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 8001780:	789b      	ldrb	r3, [r3, #2]
 8001782:	3302      	adds	r3, #2
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <updateVehicleDirectionData+0xc8>)
 8001788:	709a      	strb	r2, [r3, #2]
            break;
 800178a:	e000      	b.n	800178e <updateVehicleDirectionData+0x8e>
        default:
            break;
 800178c:	bf00      	nop
    }

    // Release the vehicle direction data mutex
    mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <updateVehicleDirectionData+0xb8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f005 f8df 	bl	8006956 <osMutexRelease>
 8001798:	60f8      	str	r0, [r7, #12]
    assert(mutexStatus == osOK);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <updateVehicleDirectionData+0xae>
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <updateVehicleDirectionData+0xbc>)
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <updateVehicleDirectionData+0xc0>)
 80017a4:	f240 116b 	movw	r1, #363	; 0x16b
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <updateVehicleDirectionData+0xc4>)
 80017aa:	f00a fed3 	bl	800c554 <__assert_func>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20025a14 	.word	0x20025a14
 80017bc:	0800d868 	.word	0x0800d868
 80017c0:	0800dc14 	.word	0x0800dc14
 80017c4:	0800d644 	.word	0x0800d644
 80017c8:	200259dc 	.word	0x200259dc

080017cc <getGyroRateOfRotation>:
 *  			the velocity as clockwise/counterclockwise and slow/fast.
 *
 *  @return Returns the categorized gyro velocity rate
 * */
gyroRotationRate getGyroRateOfRotation(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	// Variable to store and return the gyro rotation rate
	gyroRotationRate gyroRate;

	// Get the gyro velocity
	int16_t rawVelocity = Gyro_Get_Velocity();
 80017d2:	f7fe ffb9 	bl	8000748 <Gyro_Get_Velocity>
 80017d6:	4603      	mov	r3, r0
 80017d8:	80bb      	strh	r3, [r7, #4]
	// 		velocity <= -15000 			= counterClockwiseFast
	//		-15000 < velocity <= -2000 	= counterClockwiseSlow
	//		-2000 < velocity < 2000		= nearlyZero (treated as clockwise)
	//		150 <= velocity < 15000		= clockwiseSlow
	//		velocity >= 15000			= clockwiseFast
	if(rawVelocity <= counterClockwiseFast)
 80017da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017de:	4a15      	ldr	r2, [pc, #84]	; (8001834 <getGyroRateOfRotation+0x68>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	da03      	bge.n	80017ec <getGyroRateOfRotation+0x20>
	{
		gyroRate = counterClockwiseFast;
 80017e4:	f24c 5368 	movw	r3, #50536	; 0xc568
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	e01d      	b.n	8001828 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity <= counterClockwiseSlow)
 80017ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017f0:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80017f4:	dc03      	bgt.n	80017fe <getGyroRateOfRotation+0x32>
	{
		gyroRate = counterClockwiseSlow;
 80017f6:	f64f 0330 	movw	r3, #63536	; 0xf830
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	e014      	b.n	8001828 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseSlow)
 80017fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001802:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001806:	da02      	bge.n	800180e <getGyroRateOfRotation+0x42>
	{
		gyroRate = nearlyZero;
 8001808:	2300      	movs	r3, #0
 800180a:	80fb      	strh	r3, [r7, #6]
 800180c:	e00c      	b.n	8001828 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseFast)
 800180e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001812:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001816:	4293      	cmp	r3, r2
 8001818:	dc03      	bgt.n	8001822 <getGyroRateOfRotation+0x56>
	{
		gyroRate = clockwiseSlow;
 800181a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800181e:	80fb      	strh	r3, [r7, #6]
 8001820:	e002      	b.n	8001828 <getGyroRateOfRotation+0x5c>
	}
	else // rawVelocity > clockwiseFast
	{
		gyroRate = clockwiseFast;
 8001822:	f643 2398 	movw	r3, #15000	; 0x3a98
 8001826:	80fb      	strh	r3, [r7, #6]
	}

	return gyroRate;
 8001828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	ffffc569 	.word	0xffffc569

08001838 <determineVehicleDirection>:
 * 				   turns or driving straight.
 *
 * @return Returns the direction that the vehicle is moving
 */
vehicleDirection determineVehicleDirection(const gyroRotationRate gyro)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	vehicleDirection direction;

	// Convert gyro rotation data to vehicle direction data
	switch(gyro)
 8001842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001846:	f643 2298 	movw	r2, #15000	; 0x3a98
 800184a:	4293      	cmp	r3, r2
 800184c:	d019      	beq.n	8001882 <determineVehicleDirection+0x4a>
 800184e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001852:	4293      	cmp	r3, r2
 8001854:	dc18      	bgt.n	8001888 <determineVehicleDirection+0x50>
 8001856:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800185a:	d00f      	beq.n	800187c <determineVehicleDirection+0x44>
 800185c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001860:	dc12      	bgt.n	8001888 <determineVehicleDirection+0x50>
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <determineVehicleDirection+0x64>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d003      	beq.n	8001870 <determineVehicleDirection+0x38>
 8001868:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800186c:	d003      	beq.n	8001876 <determineVehicleDirection+0x3e>
 800186e:	e00b      	b.n	8001888 <determineVehicleDirection+0x50>
	{
		case counterClockwiseFast:
			direction = hardLeftTurn;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
			break;
 8001874:	e00b      	b.n	800188e <determineVehicleDirection+0x56>
		case counterClockwiseSlow:
			direction = gradualLeftTurn;
 8001876:	2301      	movs	r3, #1
 8001878:	73fb      	strb	r3, [r7, #15]
			break;
 800187a:	e008      	b.n	800188e <determineVehicleDirection+0x56>
		case clockwiseSlow:
			direction = gradualRightTurn;
 800187c:	2303      	movs	r3, #3
 800187e:	73fb      	strb	r3, [r7, #15]
			break;
 8001880:	e005      	b.n	800188e <determineVehicleDirection+0x56>
		case clockwiseFast:
			direction = hardRightTurn;
 8001882:	2304      	movs	r3, #4
 8001884:	73fb      	strb	r3, [r7, #15]
			break;
 8001886:	e002      	b.n	800188e <determineVehicleDirection+0x56>
		default:
			direction = drivingStraight;
 8001888:	2302      	movs	r3, #2
 800188a:	73fb      	strb	r3, [r7, #15]
			break;
 800188c:	bf00      	nop
	}

	return direction;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	ffffc568 	.word	0xffffc568

080018a0 <getVehicleSpeed>:

/*
 *
 */
uint8_t getVehicleSpeed(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
	// Acquire the vehicle speed data mutex before trying to
	// read vehicle speed data
	osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <getVehicleSpeed+0x5c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 31ff 	mov.w	r1, #4294967295
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 f806 	bl	80068c0 <osMutexAcquire>
 80018b4:	6078      	str	r0, [r7, #4]
	assert(mutexStatus == osOK);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <getVehicleSpeed+0x2a>
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <getVehicleSpeed+0x60>)
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <getVehicleSpeed+0x64>)
 80018c0:	f240 11cb 	movw	r1, #459	; 0x1cb
 80018c4:	4810      	ldr	r0, [pc, #64]	; (8001908 <getVehicleSpeed+0x68>)
 80018c6:	f00a fe45 	bl	800c554 <__assert_func>

	// Update speed data
	uint8_t currentSpeed = speedData.speed;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <getVehicleSpeed+0x6c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	70fb      	strb	r3, [r7, #3]

	// Done reading vehicle speed data; release the vehicle
	// speed data mutex
	mutexStatus = osMutexRelease(speedDataMutexID);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <getVehicleSpeed+0x5c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f005 f83e 	bl	8006956 <osMutexRelease>
 80018da:	6078      	str	r0, [r7, #4]
	assert(mutexStatus == osOK);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d006      	beq.n	80018f0 <getVehicleSpeed+0x50>
 80018e2:	4b07      	ldr	r3, [pc, #28]	; (8001900 <getVehicleSpeed+0x60>)
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <getVehicleSpeed+0x64>)
 80018e6:	f240 11d3 	movw	r1, #467	; 0x1d3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <getVehicleSpeed+0x68>)
 80018ec:	f00a fe32 	bl	800c554 <__assert_func>

	return currentSpeed;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20025a10 	.word	0x20025a10
 8001900:	0800d868 	.word	0x0800d868
 8001904:	0800dc30 	.word	0x0800dc30
 8001908:	0800d644 	.word	0x0800d644
 800190c:	200259d8 	.word	0x200259d8

08001910 <getVehicleDirection>:

/*
 *
 */
void getVehicleDirection(vehicleDirection* currentDirection, vehicleDirection* previousDirection)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
	// Acquire the vehicle direction data mutex before trying to
	// read vehicle direction data
	osStatus_t mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <getVehicleDirection+0x68>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f04f 31ff 	mov.w	r1, #4294967295
 8001922:	4618      	mov	r0, r3
 8001924:	f004 ffcc 	bl	80068c0 <osMutexAcquire>
 8001928:	60f8      	str	r0, [r7, #12]
	assert(mutexStatus == osOK);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <getVehicleDirection+0x2e>
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <getVehicleDirection+0x6c>)
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <getVehicleDirection+0x70>)
 8001934:	f240 11e1 	movw	r1, #481	; 0x1e1
 8001938:	4812      	ldr	r0, [pc, #72]	; (8001984 <getVehicleDirection+0x74>)
 800193a:	f00a fe0b 	bl	800c554 <__assert_func>

	// Update directional data
	*previousDirection = *currentDirection;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	701a      	strb	r2, [r3, #0]
	*currentDirection = directionData.direction;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <getVehicleDirection+0x78>)
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	701a      	strb	r2, [r3, #0]

	// Done reading vehicle direction data; release the vehicle
	// direction data mutex
	mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <getVehicleDirection+0x68>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f004 ffff 	bl	8006956 <osMutexRelease>
 8001958:	60f8      	str	r0, [r7, #12]
	assert(mutexStatus == osOK);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <getVehicleDirection+0x5e>
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <getVehicleDirection+0x6c>)
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <getVehicleDirection+0x70>)
 8001964:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8001968:	4806      	ldr	r0, [pc, #24]	; (8001984 <getVehicleDirection+0x74>)
 800196a:	f00a fdf3 	bl	800c554 <__assert_func>
}
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20025a14 	.word	0x20025a14
 800197c:	0800d868 	.word	0x0800d868
 8001980:	0800dc40 	.word	0x0800dc40
 8001984:	0800d644 	.word	0x0800d644
 8001988:	200259dc 	.word	0x200259dc

0800198c <checkForVehicleSpeedViolation>:

/*
 *
 */
void checkForVehicleSpeedViolation(uint8_t currentSpeed, vehicleDirection currentDirection)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	71bb      	strb	r3, [r7, #6]
	/* Speed Violation – Light LED3 (green) for the following warnings:
	 * - Over limit, regardless of direction. Suggested limit: 75 mph.
	 * - Over limit, when making a turn. Suggested limit: 45 mph. */
	if((currentSpeed > 75) || ((currentSpeed > 45) && (currentDirection != drivingStraight)))
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b4b      	cmp	r3, #75	; 0x4b
 80019a0:	d805      	bhi.n	80019ae <checkForVehicleSpeedViolation+0x22>
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b2d      	cmp	r3, #45	; 0x2d
 80019a6:	d915      	bls.n	80019d4 <checkForVehicleSpeedViolation+0x48>
 80019a8:	79bb      	ldrb	r3, [r7, #6]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d012      	beq.n	80019d4 <checkForVehicleSpeedViolation+0x48>
	{
		uint32_t flags = osEventFlagsSet(ledOutputEventFlagID, activateSpeedAlertEventFlag);
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <checkForVehicleSpeedViolation+0x78>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2120      	movs	r1, #32
 80019b4:	4618      	mov	r0, r3
 80019b6:	f004 fe21 	bl	80065fc <osEventFlagsSet>
 80019ba:	60b8      	str	r0, [r7, #8]
		assert(flags & ledOutputEventAllFlags);
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d119      	bne.n	80019fa <checkForVehicleSpeedViolation+0x6e>
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <checkForVehicleSpeedViolation+0x7c>)
 80019c8:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <checkForVehicleSpeedViolation+0x80>)
 80019ca:	f240 11f9 	movw	r1, #505	; 0x1f9
 80019ce:	4810      	ldr	r0, [pc, #64]	; (8001a10 <checkForVehicleSpeedViolation+0x84>)
 80019d0:	f00a fdc0 	bl	800c554 <__assert_func>
	}
	else
	{
		uint32_t flags = osEventFlagsSet(ledOutputEventFlagID, deactivateSpeedAlertEventFlag);
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <checkForVehicleSpeedViolation+0x78>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	4618      	mov	r0, r3
 80019dc:	f004 fe0e 	bl	80065fc <osEventFlagsSet>
 80019e0:	60f8      	str	r0, [r7, #12]
		assert(flags & ledOutputEventAllFlags);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <checkForVehicleSpeedViolation+0x70>
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <checkForVehicleSpeedViolation+0x7c>)
 80019ee:	4a07      	ldr	r2, [pc, #28]	; (8001a0c <checkForVehicleSpeedViolation+0x80>)
 80019f0:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80019f4:	4806      	ldr	r0, [pc, #24]	; (8001a10 <checkForVehicleSpeedViolation+0x84>)
 80019f6:	f00a fdad 	bl	800c554 <__assert_func>
	{
 80019fa:	bf00      	nop
	}
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20025a1c 	.word	0x20025a1c
 8001a08:	0800d87c 	.word	0x0800d87c
 8001a0c:	0800dc54 	.word	0x0800dc54
 8001a10:	0800d644 	.word	0x0800d644

08001a14 <checkForVehicleDirectionViolation>:

/*
 *
 */
void checkForVehicleDirectionViolation(vehicleDirection previousDirection, vehicleDirection currentDirection)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	4613      	mov	r3, r2
 8001a22:	71bb      	strb	r3, [r7, #6]
	// Makes the compound conditional easier to read
	bool currentLeft = (currentDirection < drivingStraight);
 8001a24:	79bb      	ldrb	r3, [r7, #6]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	bf94      	ite	ls
 8001a2a:	2301      	movls	r3, #1
 8001a2c:	2300      	movhi	r3, #0
 8001a2e:	77fb      	strb	r3, [r7, #31]
	bool previouslyNotLeft = (previousDirection >= drivingStraight);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	bf8c      	ite	hi
 8001a36:	2301      	movhi	r3, #1
 8001a38:	2300      	movls	r3, #0
 8001a3a:	77bb      	strb	r3, [r7, #30]
	bool currentRight = (currentDirection > drivingStraight);
 8001a3c:	79bb      	ldrb	r3, [r7, #6]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	bf8c      	ite	hi
 8001a42:	2301      	movhi	r3, #1
 8001a44:	2300      	movls	r3, #0
 8001a46:	777b      	strb	r3, [r7, #29]
	bool previouslyNotRight = (previousDirection <= drivingStraight);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	bf94      	ite	ls
 8001a4e:	2301      	movls	r3, #1
 8001a50:	2300      	movhi	r3, #0
 8001a52:	773b      	strb	r3, [r7, #28]

	// Check if the vehicle has changed direction
	// NOTE: The direction alert timer is started/restarted when the
	//		 vehicle changes direction. It is only stopped when driving
	//		 straight.
	if((currentDirection == drivingStraight) 	||	/* Vehicle is now driving straight */
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d00b      	beq.n	8001a72 <checkForVehicleDirectionViolation+0x5e>
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <checkForVehicleDirectionViolation+0x52>
	   (currentLeft && previouslyNotLeft) 		||	/* Vehicle is now turning left; but wasn't previously */
 8001a60:	7fbb      	ldrb	r3, [r7, #30]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <checkForVehicleDirectionViolation+0x5e>
 8001a66:	7f7b      	ldrb	r3, [r7, #29]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d05b      	beq.n	8001b24 <checkForVehicleDirectionViolation+0x110>
	   (currentRight && previouslyNotRight))		/* Vehicle is now turning right; but wasn't previously */
 8001a6c:	7f3b      	ldrb	r3, [r7, #28]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d058      	beq.n	8001b24 <checkForVehicleDirectionViolation+0x110>
	{
		// Direction changed, so set the deactivate direction alert flag
		uint32_t flags = osEventFlagsSet(ledOutputEventFlagID, deactivateDirAlertEventFlag);
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <checkForVehicleDirectionViolation+0x118>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fdbe 	bl	80065fc <osEventFlagsSet>
 8001a80:	61b8      	str	r0, [r7, #24]
		assert(flags & ledOutputEventAllFlags);
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <checkForVehicleDirectionViolation+0x86>
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <checkForVehicleDirectionViolation+0x11c>)
 8001a8e:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <checkForVehicleDirectionViolation+0x120>)
 8001a90:	f240 2119 	movw	r1, #537	; 0x219
 8001a94:	4828      	ldr	r0, [pc, #160]	; (8001b38 <checkForVehicleDirectionViolation+0x124>)
 8001a96:	f00a fd5d 	bl	800c554 <__assert_func>

		// Since the vehicle is driving straight, it is not in danger
		// of committing a direction violation. Therefore, stop the
		// direction alert timer
		if(currentDirection == drivingStraight)
 8001a9a:	79bb      	ldrb	r3, [r7, #6]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d117      	bne.n	8001ad0 <checkForVehicleDirectionViolation+0xbc>
		{
			// Stop timer if running
			// NOTE: osTimerStop will return osErrorResource if
			// 		 the timer is not running
			if(osTimerIsRunning(directionAlertTimerID))
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <checkForVehicleDirectionViolation+0x128>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 fd4e 	bl	8006546 <osTimerIsRunning>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d039      	beq.n	8001b24 <checkForVehicleDirectionViolation+0x110>
			{
				osStatus_t stopStatus = osTimerStop(directionAlertTimerID);
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <checkForVehicleDirectionViolation+0x128>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fd0f 	bl	80064d8 <osTimerStop>
 8001aba:	60f8      	str	r0, [r7, #12]
				assert(stopStatus == osOK);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d030      	beq.n	8001b24 <checkForVehicleDirectionViolation+0x110>
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <checkForVehicleDirectionViolation+0x12c>)
 8001ac4:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <checkForVehicleDirectionViolation+0x120>)
 8001ac6:	f240 2126 	movw	r1, #550	; 0x226
 8001aca:	481b      	ldr	r0, [pc, #108]	; (8001b38 <checkForVehicleDirectionViolation+0x124>)
 8001acc:	f00a fd42 	bl	800c554 <__assert_func>

			/* Direction Violation – Light LED4 (red) for the following warnings:
			 * - Potential collision alert if constantly turning for more
			 *   than a predefined time limit. Suggested limit: 5 seconds.
			 * - Treat both gradual and hard turns as the same direction.	*/
			if(osTimerIsRunning(directionAlertTimerID))
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <checkForVehicleDirectionViolation+0x128>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fd36 	bl	8006546 <osTimerIsRunning>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00f      	beq.n	8001b00 <checkForVehicleDirectionViolation+0xec>
			{
				osStatus_t stopStatus = osTimerStop(directionAlertTimerID);
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <checkForVehicleDirectionViolation+0x128>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f004 fcf7 	bl	80064d8 <osTimerStop>
 8001aea:	6178      	str	r0, [r7, #20]
				assert(stopStatus == osOK);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <checkForVehicleDirectionViolation+0xec>
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <checkForVehicleDirectionViolation+0x12c>)
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <checkForVehicleDirectionViolation+0x120>)
 8001af6:	f44f 710e 	mov.w	r1, #568	; 0x238
 8001afa:	480f      	ldr	r0, [pc, #60]	; (8001b38 <checkForVehicleDirectionViolation+0x124>)
 8001afc:	f00a fd2a 	bl	800c554 <__assert_func>
			}

			osStatus_t startStatus = osTimerStart(directionAlertTimerID, DIRECTION_ALERT_TIMER_TICKS);
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <checkForVehicleDirectionViolation+0x128>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 fcb7 	bl	800647c <osTimerStart>
 8001b0e:	6138      	str	r0, [r7, #16]
			assert(startStatus == osOK);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <checkForVehicleDirectionViolation+0x110>
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <checkForVehicleDirectionViolation+0x130>)
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <checkForVehicleDirectionViolation+0x120>)
 8001b1a:	f44f 710f 	mov.w	r1, #572	; 0x23c
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <checkForVehicleDirectionViolation+0x124>)
 8001b20:	f00a fd18 	bl	800c554 <__assert_func>
		}
	}
}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20025a1c 	.word	0x20025a1c
 8001b30:	0800d87c 	.word	0x0800d87c
 8001b34:	0800dc74 	.word	0x0800dc74
 8001b38:	0800d644 	.word	0x0800d644
 8001b3c:	200259fc 	.word	0x200259fc
 8001b40:	0800d89c 	.word	0x0800d89c
 8001b44:	0800d8b0 	.word	0x0800d8b0

08001b48 <speedSetpointTask>:
 * 			signal this change to the Vehicle Monitor Task.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void speedSetpointTask(void* arg)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Acquire the button state sempahore to wake up the task
		osStatus_t semaphoreStatus = osSemaphoreAcquire(buttonStateSemaphorID, osWaitForever);
 8001b50:	4b3c      	ldr	r3, [pc, #240]	; (8001c44 <speedSetpointTask+0xfc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 ffc3 	bl	8006ae4 <osSemaphoreAcquire>
 8001b5e:	61b8      	str	r0, [r7, #24]
		assert(semaphoreStatus == osOK);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <speedSetpointTask+0x2c>
 8001b66:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <speedSetpointTask+0x100>)
 8001b68:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <speedSetpointTask+0x104>)
 8001b6a:	f240 2187 	movw	r1, #647	; 0x287
 8001b6e:	4838      	ldr	r0, [pc, #224]	; (8001c50 <speedSetpointTask+0x108>)
 8001b70:	f00a fcf0 	bl	800c554 <__assert_func>

		if(!osTimerIsRunning(holdButtonTimerID))
 8001b74:	4b37      	ldr	r3, [pc, #220]	; (8001c54 <speedSetpointTask+0x10c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fce4 	bl	8006546 <osTimerIsRunning>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d111      	bne.n	8001ba8 <speedSetpointTask+0x60>
		{
			// Start the oneshot hold button timer
			osStatus_t status = osTimerStart(holdButtonTimerID, HOLD_BTN_TIMER_TICKS_1S);
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <speedSetpointTask+0x10c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 fc75 	bl	800647c <osTimerStart>
 8001b92:	6178      	str	r0, [r7, #20]
			assert(status == osOK);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <speedSetpointTask+0x60>
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	; (8001c58 <speedSetpointTask+0x110>)
 8001b9c:	4a2b      	ldr	r2, [pc, #172]	; (8001c4c <speedSetpointTask+0x104>)
 8001b9e:	f240 218d 	movw	r1, #653	; 0x28d
 8001ba2:	482b      	ldr	r0, [pc, #172]	; (8001c50 <speedSetpointTask+0x108>)
 8001ba4:	f00a fcd6 	bl	800c554 <__assert_func>
		}

		// Pend on the button state semaphore (wait for the button to be released)
		semaphoreStatus = osSemaphoreAcquire(buttonStateSemaphorID, osWaitForever);
 8001ba8:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <speedSetpointTask+0xfc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f004 ff97 	bl	8006ae4 <osSemaphoreAcquire>
 8001bb6:	61b8      	str	r0, [r7, #24]
		assert(semaphoreStatus == osOK);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <speedSetpointTask+0x84>
 8001bbe:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <speedSetpointTask+0x100>)
 8001bc0:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <speedSetpointTask+0x104>)
 8001bc2:	f240 2192 	movw	r1, #658	; 0x292
 8001bc6:	4822      	ldr	r0, [pc, #136]	; (8001c50 <speedSetpointTask+0x108>)
 8001bc8:	f00a fcc4 	bl	800c554 <__assert_func>

		// Stop the timer if it hasn't yet expired
		if(osTimerIsRunning(holdButtonTimerID) == true)
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <speedSetpointTask+0x10c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 fcb8 	bl	8006546 <osTimerIsRunning>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10f      	bne.n	8001bfc <speedSetpointTask+0xb4>
		{
			osStatus_t status = osTimerStop(holdButtonTimerID);
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <speedSetpointTask+0x10c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f004 fc79 	bl	80064d8 <osTimerStop>
 8001be6:	6138      	str	r0, [r7, #16]
			assert(status == osOK);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <speedSetpointTask+0xb4>
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <speedSetpointTask+0x110>)
 8001bf0:	4a16      	ldr	r2, [pc, #88]	; (8001c4c <speedSetpointTask+0x104>)
 8001bf2:	f44f 7126 	mov.w	r1, #664	; 0x298
 8001bf6:	4816      	ldr	r0, [pc, #88]	; (8001c50 <speedSetpointTask+0x108>)
 8001bf8:	f00a fcac 	bl	800c554 <__assert_func>
		}

		// Since the button was pressed, accelerate by 5
        int acceleration = 5;
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	61fb      	str	r3, [r7, #28]

        // If the button was held sufficiently long (1 second), flip the sign
        // of acceleration (from 5 to -5) to signal deceleration
        if(buttonHeld == true) { buttonHeld = false; acceleration *= -1; }
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <speedSetpointTask+0x114>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <speedSetpointTask+0xce>
 8001c0a:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <speedSetpointTask+0x114>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	425b      	negs	r3, r3
 8001c14:	61fb      	str	r3, [r7, #28]

		updateVehicleSpeedData(acceleration);
 8001c16:	69f8      	ldr	r0, [r7, #28]
 8001c18:	f7ff fd1a 	bl	8001650 <updateVehicleSpeedData>

		// Raise the speed update event flag to signal to the Vehicle Monitor
		// Task that the speed has been updated
		uint32_t flags = osEventFlagsSet(vehicleMonitorEventFlagID, speedUpdateEventFlag);
 8001c1c:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <speedSetpointTask+0x118>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2108      	movs	r1, #8
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fcea 	bl	80065fc <osEventFlagsSet>
 8001c28:	60f8      	str	r0, [r7, #12]

		// Verify that the event flag was set successfully
		assert(flags & speedUpdateEventFlag);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d18d      	bne.n	8001b50 <speedSetpointTask+0x8>
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <speedSetpointTask+0x11c>)
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <speedSetpointTask+0x104>)
 8001c38:	f240 21a9 	movw	r1, #681	; 0x2a9
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <speedSetpointTask+0x108>)
 8001c3e:	f00a fc89 	bl	800c554 <__assert_func>
 8001c42:	bf00      	nop
 8001c44:	20025a04 	.word	0x20025a04
 8001c48:	0800d8c4 	.word	0x0800d8c4
 8001c4c:	0800dc98 	.word	0x0800dc98
 8001c50:	0800d644 	.word	0x0800d644
 8001c54:	200259f4 	.word	0x200259f4
 8001c58:	0800d8dc 	.word	0x0800d8dc
 8001c5c:	20025a20 	.word	0x20025a20
 8001c60:	20025a18 	.word	0x20025a18
 8001c64:	0800d8ec 	.word	0x0800d8ec

08001c68 <vehicleDirectionTask>:
 * 			to the Vehicle Monitor Task.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void vehicleDirectionTask(void* arg)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Wakeup task when the semaphore is released by
		// the Vehicle Direction Timer Callback
		osStatus_t status = osSemaphoreAcquire(vehicleDirSemaphoreID, osWaitForever);
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <vehicleDirectionTask+0x70>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 ff33 	bl	8006ae4 <osSemaphoreAcquire>
 8001c7e:	6178      	str	r0, [r7, #20]
		assert(status == osOK);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <vehicleDirectionTask+0x2c>
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <vehicleDirectionTask+0x74>)
 8001c88:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <vehicleDirectionTask+0x78>)
 8001c8a:	f240 21bf 	movw	r1, #703	; 0x2bf
 8001c8e:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <vehicleDirectionTask+0x7c>)
 8001c90:	f00a fc60 	bl	800c554 <__assert_func>

		// Sample the gyro
		gyroRotationRate gyro = getGyroRateOfRotation();
 8001c94:	f7ff fd9a 	bl	80017cc <getGyroRateOfRotation>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	827b      	strh	r3, [r7, #18]

		// Determine which direction the vehicle is moving
		vehicleDirection newDirection = determineVehicleDirection(gyro);
 8001c9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fdc9 	bl	8001838 <determineVehicleDirection>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	747b      	strb	r3, [r7, #17]

		updateVehicleDirectionData(newDirection);
 8001caa:	7c7b      	ldrb	r3, [r7, #17]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fd27 	bl	8001700 <updateVehicleDirectionData>

		// Raise the Direction Update Flag to signal to the Vehicle
		// Monitor Task that new vehicle direction data is available
		uint32_t flags = osEventFlagsSet(vehicleMonitorEventFlagID, directionUpdateEventFlag);
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <vehicleDirectionTask+0x80>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 fc9f 	bl	80065fc <osEventFlagsSet>
 8001cbe:	60f8      	str	r0, [r7, #12]
		assert(flags & directionUpdateEventFlag);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1d2      	bne.n	8001c70 <vehicleDirectionTask+0x8>
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <vehicleDirectionTask+0x84>)
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <vehicleDirectionTask+0x78>)
 8001cce:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8001cd2:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <vehicleDirectionTask+0x7c>)
 8001cd4:	f00a fc3e 	bl	800c554 <__assert_func>
 8001cd8:	20025a08 	.word	0x20025a08
 8001cdc:	0800d8dc 	.word	0x0800d8dc
 8001ce0:	0800dcac 	.word	0x0800dcac
 8001ce4:	0800d644 	.word	0x0800d644
 8001ce8:	20025a18 	.word	0x20025a18
 8001cec:	0800d90c 	.word	0x0800d90c

08001cf0 <vehicleMonitorTask>:
 * 			violation has occured.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void vehicleMonitorTask(void* arg)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint8_t currentSpeed = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	77fb      	strb	r3, [r7, #31]
	vehicleDirection currentDirection = drivingStraight;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	73fb      	strb	r3, [r7, #15]
	vehicleDirection previousDirection;

	while(1)
	{
		// Pend on the Vehicle Monitor Event Flag
		uint32_t eventStatus = osEventFlagsWait(vehicleMonitorEventFlagID, vehicleMonitorBothFlags,
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <vehicleMonitorTask+0xcc>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	2202      	movs	r2, #2
 8001d0a:	2118      	movs	r1, #24
 8001d0c:	f004 fcec 	bl	80066e8 <osEventFlagsWait>
 8001d10:	61b8      	str	r0, [r7, #24]
												osFlagsNoClear, osWaitForever);
		assert(eventStatus & vehicleMonitorBothFlags);
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f003 0318 	and.w	r3, r3, #24
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d106      	bne.n	8001d2a <vehicleMonitorTask+0x3a>
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <vehicleMonitorTask+0xd0>)
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <vehicleMonitorTask+0xd4>)
 8001d20:	f240 21e7 	movw	r1, #743	; 0x2e7
 8001d24:	4828      	ldr	r0, [pc, #160]	; (8001dc8 <vehicleMonitorTask+0xd8>)
 8001d26:	f00a fc15 	bl	800c554 <__assert_func>


		// Check if the speed update event flag is set
		if(eventStatus & speedUpdateEventFlag)
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <vehicleMonitorTask+0x72>
		{
			// Manually clear the speed update event flag
			uint32_t flags = osEventFlagsClear(vehicleMonitorEventFlagID, speedUpdateEventFlag);
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <vehicleMonitorTask+0xcc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2108      	movs	r1, #8
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 fca2 	bl	8006684 <osEventFlagsClear>
 8001d40:	6178      	str	r0, [r7, #20]
			assert(flags & vehicleMonitorBothFlags);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0318 	and.w	r3, r3, #24
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d106      	bne.n	8001d5a <vehicleMonitorTask+0x6a>
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <vehicleMonitorTask+0xdc>)
 8001d4e:	4a1d      	ldr	r2, [pc, #116]	; (8001dc4 <vehicleMonitorTask+0xd4>)
 8001d50:	f240 21ef 	movw	r1, #751	; 0x2ef
 8001d54:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <vehicleMonitorTask+0xd8>)
 8001d56:	f00a fbfd 	bl	800c554 <__assert_func>

			currentSpeed = getVehicleSpeed();
 8001d5a:	f7ff fda1 	bl	80018a0 <getVehicleSpeed>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	77fb      	strb	r3, [r7, #31]
		}


		// Check if the direction update event flag is set
		if(eventStatus & directionUpdateEventFlag)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01a      	beq.n	8001da2 <vehicleMonitorTask+0xb2>
		{
			// Manually clear the direction update event flag
			uint32_t flags = osEventFlagsClear(vehicleMonitorEventFlagID, directionUpdateEventFlag);
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <vehicleMonitorTask+0xcc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2110      	movs	r1, #16
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fc86 	bl	8006684 <osEventFlagsClear>
 8001d78:	6138      	str	r0, [r7, #16]
			assert(flags & vehicleMonitorBothFlags);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f003 0318 	and.w	r3, r3, #24
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d106      	bne.n	8001d92 <vehicleMonitorTask+0xa2>
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <vehicleMonitorTask+0xdc>)
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <vehicleMonitorTask+0xd4>)
 8001d88:	f240 21fa 	movw	r1, #762	; 0x2fa
 8001d8c:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <vehicleMonitorTask+0xd8>)
 8001d8e:	f00a fbe1 	bl	800c554 <__assert_func>

			getVehicleDirection(&previousDirection, &currentDirection);
 8001d92:	f107 020f 	add.w	r2, r7, #15
 8001d96:	f107 030e 	add.w	r3, r7, #14
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fdb7 	bl	8001910 <getVehicleDirection>
		}

		// Check for vehicle speed and/or direction violations
		checkForVehicleSpeedViolation(currentSpeed, currentDirection);
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	7ffb      	ldrb	r3, [r7, #31]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fdef 	bl	800198c <checkForVehicleSpeedViolation>
		checkForVehicleDirectionViolation(previousDirection, currentDirection);
 8001dae:	7bbb      	ldrb	r3, [r7, #14]
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fe2d 	bl	8001a14 <checkForVehicleDirectionViolation>
	{
 8001dba:	e7a1      	b.n	8001d00 <vehicleMonitorTask+0x10>
 8001dbc:	20025a18 	.word	0x20025a18
 8001dc0:	0800d930 	.word	0x0800d930
 8001dc4:	0800dcc4 	.word	0x0800dcc4
 8001dc8:	0800d644 	.word	0x0800d644
 8001dcc:	0800d958 	.word	0x0800d958

08001dd0 <lcdDisplayTask>:
 * @details
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void lcdDisplayTask(void* arg)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Pend on the LCD Display Semaphore
		osStatus_t status = osSemaphoreAcquire(lcdDisplaySemaphoreID, osWaitForever);
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <lcdDisplayTask+0xc4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fe7f 	bl	8006ae4 <osSemaphoreAcquire>
 8001de6:	60f8      	str	r0, [r7, #12]
		assert(status == osOK);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <lcdDisplayTask+0x2c>
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <lcdDisplayTask+0xc8>)
 8001df0:	4a2a      	ldr	r2, [pc, #168]	; (8001e9c <lcdDisplayTask+0xcc>)
 8001df2:	f240 3113 	movw	r1, #787	; 0x313
 8001df6:	482a      	ldr	r0, [pc, #168]	; (8001ea0 <lcdDisplayTask+0xd0>)
 8001df8:	f00a fbac 	bl	800c554 <__assert_func>

		// Acquire the Speed Data Mutex
		osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <lcdDisplayTask+0xd4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	4618      	mov	r0, r3
 8001e06:	f004 fd5b 	bl	80068c0 <osMutexAcquire>
 8001e0a:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <lcdDisplayTask+0x50>
 8001e12:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <lcdDisplayTask+0xd8>)
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <lcdDisplayTask+0xcc>)
 8001e16:	f240 3117 	movw	r1, #791	; 0x317
 8001e1a:	4821      	ldr	r0, [pc, #132]	; (8001ea0 <lcdDisplayTask+0xd0>)
 8001e1c:	f00a fb9a 	bl	800c554 <__assert_func>

		currentSpeed_LCD = speedData.speed;
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <lcdDisplayTask+0xdc>)
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <lcdDisplayTask+0xe0>)
 8001e26:	701a      	strb	r2, [r3, #0]

		// Release the Speed Data Mutex
		mutexStatus = osMutexRelease(speedDataMutexID);
 8001e28:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <lcdDisplayTask+0xd4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 fd92 	bl	8006956 <osMutexRelease>
 8001e32:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d006      	beq.n	8001e48 <lcdDisplayTask+0x78>
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <lcdDisplayTask+0xd8>)
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <lcdDisplayTask+0xcc>)
 8001e3e:	f240 311d 	movw	r1, #797	; 0x31d
 8001e42:	4817      	ldr	r0, [pc, #92]	; (8001ea0 <lcdDisplayTask+0xd0>)
 8001e44:	f00a fb86 	bl	800c554 <__assert_func>

		// Acquire the Vehicle Direction Data Mutex
		mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <lcdDisplayTask+0xe4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 fd35 	bl	80068c0 <osMutexAcquire>
 8001e56:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <lcdDisplayTask+0x9c>
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <lcdDisplayTask+0xd8>)
 8001e60:	4a0e      	ldr	r2, [pc, #56]	; (8001e9c <lcdDisplayTask+0xcc>)
 8001e62:	f240 3121 	movw	r1, #801	; 0x321
 8001e66:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <lcdDisplayTask+0xd0>)
 8001e68:	f00a fb74 	bl	800c554 <__assert_func>

		currentDirection_LCD = directionData.direction;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <lcdDisplayTask+0xe8>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <lcdDisplayTask+0xec>)
 8001e72:	701a      	strb	r2, [r3, #0]

		// Release the Vehicle Direction Data Mutex
		mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <lcdDisplayTask+0xe4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fd6c 	bl	8006956 <osMutexRelease>
 8001e7e:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0a8      	beq.n	8001dd8 <lcdDisplayTask+0x8>
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <lcdDisplayTask+0xd8>)
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <lcdDisplayTask+0xcc>)
 8001e8a:	f240 3127 	movw	r1, #807	; 0x327
 8001e8e:	4804      	ldr	r0, [pc, #16]	; (8001ea0 <lcdDisplayTask+0xd0>)
 8001e90:	f00a fb60 	bl	800c554 <__assert_func>
 8001e94:	20025a0c 	.word	0x20025a0c
 8001e98:	0800d8dc 	.word	0x0800d8dc
 8001e9c:	0800dcd8 	.word	0x0800dcd8
 8001ea0:	0800d644 	.word	0x0800d644
 8001ea4:	20025a10 	.word	0x20025a10
 8001ea8:	0800d868 	.word	0x0800d868
 8001eac:	200259d8 	.word	0x200259d8
 8001eb0:	20025a22 	.word	0x20025a22
 8001eb4:	20025a14 	.word	0x20025a14
 8001eb8:	200259dc 	.word	0x200259dc
 8001ebc:	20000008 	.word	0x20000008

08001ec0 <ledOutputTask>:
 * 			direction violation is linked to the red LED (LED4).
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void ledOutputTask(void* arg)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Pend on the alert update event flag
		uint32_t flags = osEventFlagsWait(ledOutputEventFlagID, ledOutputEventAllFlags,
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <ledOutputTask+0xe4>)
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ed6:	f004 fc07 	bl	80066e8 <osEventFlagsWait>
 8001eda:	60f8      	str	r0, [r7, #12]
										  osFlagsNoClear, osWaitForever);

		assert(flags & ledOutputEventAllFlags);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <ledOutputTask+0x34>
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <ledOutputTask+0xe8>)
 8001ee8:	4a30      	ldr	r2, [pc, #192]	; (8001fac <ledOutputTask+0xec>)
 8001eea:	f240 3141 	movw	r1, #833	; 0x341
 8001eee:	4830      	ldr	r0, [pc, #192]	; (8001fb0 <ledOutputTask+0xf0>)
 8001ef0:	f00a fb30 	bl	800c554 <__assert_func>

		// Drive the LEDs according to which flag was set
		if(flags & activateSpeedAlertEventFlag)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <ledOutputTask+0x5a>
		{
			flags = osEventFlagsClear(ledOutputEventFlagID, activateSpeedAlertEventFlag);
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <ledOutputTask+0xe4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2120      	movs	r1, #32
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 fbbd 	bl	8006684 <osEventFlagsClear>
 8001f0a:	60f8      	str	r0, [r7, #12]
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	4828      	ldr	r0, [pc, #160]	; (8001fb4 <ledOutputTask+0xf4>)
 8001f14:	f001 fe6a 	bl	8003bec <HAL_GPIO_WritePin>
 8001f18:	e038      	b.n	8001f8c <ledOutputTask+0xcc>
		}
		else if(flags & activateDirAlertEventFlag)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <ledOutputTask+0x80>
		{
			flags = osEventFlagsClear(ledOutputEventFlagID, activateDirAlertEventFlag);
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <ledOutputTask+0xe4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2140      	movs	r1, #64	; 0x40
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fbaa 	bl	8006684 <osEventFlagsClear>
 8001f30:	60f8      	str	r0, [r7, #12]
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f38:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <ledOutputTask+0xf4>)
 8001f3a:	f001 fe57 	bl	8003bec <HAL_GPIO_WritePin>
 8001f3e:	e025      	b.n	8001f8c <ledOutputTask+0xcc>
		}
		else if(flags & deactivateSpeedAlertEventFlag)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00d      	beq.n	8001f66 <ledOutputTask+0xa6>
		{
			flags = osEventFlagsClear(ledOutputEventFlagID, deactivateSpeedAlertEventFlag);
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <ledOutputTask+0xe4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fb97 	bl	8006684 <osEventFlagsClear>
 8001f56:	60f8      	str	r0, [r7, #12]
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f5e:	4815      	ldr	r0, [pc, #84]	; (8001fb4 <ledOutputTask+0xf4>)
 8001f60:	f001 fe44 	bl	8003bec <HAL_GPIO_WritePin>
 8001f64:	e012      	b.n	8001f8c <ledOutputTask+0xcc>
		}
		else if(flags & deactivateDirAlertEventFlag)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <ledOutputTask+0xcc>
		{
			flags = osEventFlagsClear(ledOutputEventFlagID, deactivateDirAlertEventFlag);
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <ledOutputTask+0xe4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 fb83 	bl	8006684 <osEventFlagsClear>
 8001f7e:	60f8      	str	r0, [r7, #12]
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f86:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <ledOutputTask+0xf4>)
 8001f88:	f001 fe30 	bl	8003bec <HAL_GPIO_WritePin>
		}

		assert(flags & ledOutputEventAllFlags);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d198      	bne.n	8001ec8 <ledOutputTask+0x8>
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <ledOutputTask+0xe8>)
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <ledOutputTask+0xec>)
 8001f9a:	f240 3159 	movw	r1, #857	; 0x359
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <ledOutputTask+0xf0>)
 8001fa0:	f00a fad8 	bl	800c554 <__assert_func>
 8001fa4:	20025a1c 	.word	0x20025a1c
 8001fa8:	0800d87c 	.word	0x0800d87c
 8001fac:	0800dce8 	.word	0x0800dce8
 8001fb0:	0800d644 	.word	0x0800d644
 8001fb4:	40021800 	.word	0x40021800

08001fb8 <holdButtonTimerCallback>:
 * 			was held for more than 1 second.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void holdButtonTimerCallback(void* arg)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	SEGGER_SYSVIEW_RecordEnterTimer((uint32_t)holdButtonTimerID);
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <holdButtonTimerCallback+0x24>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f009 fe31 	bl	800bc2c <SEGGER_SYSVIEW_RecordEnterTimer>

	// Notify the speedSetpoint task that the button was held
	buttonHeld = true;
 8001fca:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <holdButtonTimerCallback+0x28>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]

	SEGGER_SYSVIEW_RecordExitTimer();
 8001fd0:	f009 fe6c 	bl	800bcac <SEGGER_SYSVIEW_RecordExitTimer>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200259f4 	.word	0x200259f4
 8001fe0:	20025a20 	.word	0x20025a20

08001fe4 <vehicleDirWakeupTimerCallback>:
 * 			to wakeup the Vehicle Direction Task.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void vehicleDirWakeupTimerCallback(void* arg)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	SEGGER_SYSVIEW_RecordEnterTimer((uint32_t)vehicleDirWakeupTimerID);
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <vehicleDirWakeupTimerCallback+0x40>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f009 fe1b 	bl	800bc2c <SEGGER_SYSVIEW_RecordEnterTimer>

	osStatus_t status = osSemaphoreRelease(vehicleDirSemaphoreID);
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <vehicleDirWakeupTimerCallback+0x44>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 fdc4 	bl	8006b88 <osSemaphoreRelease>
 8002000:	60f8      	str	r0, [r7, #12]
	assert(status == osOK);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <vehicleDirWakeupTimerCallback+0x32>
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <vehicleDirWakeupTimerCallback+0x48>)
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <vehicleDirWakeupTimerCallback+0x4c>)
 800200c:	f44f 7162 	mov.w	r1, #904	; 0x388
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <vehicleDirWakeupTimerCallback+0x50>)
 8002012:	f00a fa9f 	bl	800c554 <__assert_func>

	SEGGER_SYSVIEW_RecordExitTimer();
 8002016:	f009 fe49 	bl	800bcac <SEGGER_SYSVIEW_RecordExitTimer>
}
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200259f8 	.word	0x200259f8
 8002028:	20025a08 	.word	0x20025a08
 800202c:	0800d8dc 	.word	0x0800d8dc
 8002030:	0800dcf8 	.word	0x0800dcf8
 8002034:	0800d644 	.word	0x0800d644

08002038 <directionAlertTimerCallback>:
 * 			- Both gradual and hard turns are treated as same direction.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void directionAlertTimerCallback(void* arg)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	SEGGER_SYSVIEW_RecordEnterTimer((uint32_t)directionAlertTimerID);
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <directionAlertTimerCallback+0x54>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f009 fdf1 	bl	800bc2c <SEGGER_SYSVIEW_RecordEnterTimer>

	directionAlertCallbackCount++;
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <directionAlertTimerCallback+0x58>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <directionAlertTimerCallback+0x58>)
 8002056:	701a      	strb	r2, [r3, #0]

	uint32_t flags = osEventFlagsSet(ledOutputEventFlagID, activateDirAlertEventFlag);
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <directionAlertTimerCallback+0x5c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	4618      	mov	r0, r3
 8002060:	f004 facc 	bl	80065fc <osEventFlagsSet>
 8002064:	60f8      	str	r0, [r7, #12]
	assert(flags & ledOutputEventAllFlags);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <directionAlertTimerCallback+0x46>
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <directionAlertTimerCallback+0x60>)
 8002072:	4a0a      	ldr	r2, [pc, #40]	; (800209c <directionAlertTimerCallback+0x64>)
 8002074:	f240 31a5 	movw	r1, #933	; 0x3a5
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <directionAlertTimerCallback+0x68>)
 800207a:	f00a fa6b 	bl	800c554 <__assert_func>

	SEGGER_SYSVIEW_RecordExitTimer();
 800207e:	f009 fe15 	bl	800bcac <SEGGER_SYSVIEW_RecordExitTimer>

}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200259fc 	.word	0x200259fc
 8002090:	20025a21 	.word	0x20025a21
 8002094:	20025a1c 	.word	0x20025a1c
 8002098:	0800d87c 	.word	0x0800d87c
 800209c:	0800dd18 	.word	0x0800dd18
 80020a0:	0800d644 	.word	0x0800d644

080020a4 <lcdDisplayWakeupTimerCallback>:
 * @details
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void lcdDisplayWakeupTimerCallback(void* arg)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	SEGGER_SYSVIEW_RecordEnterTimer((uint32_t)lcdDisplayWakeupTimerID);
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <lcdDisplayWakeupTimerCallback+0x44>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f009 fdbb 	bl	800bc2c <SEGGER_SYSVIEW_RecordEnterTimer>

	osStatus_t status = osSemaphoreRelease(lcdDisplaySemaphoreID);
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <lcdDisplayWakeupTimerCallback+0x48>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fd64 	bl	8006b88 <osSemaphoreRelease>
 80020c0:	60f8      	str	r0, [r7, #12]
	assert(status == osOK);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <lcdDisplayWakeupTimerCallback+0x32>
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <lcdDisplayWakeupTimerCallback+0x4c>)
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <lcdDisplayWakeupTimerCallback+0x50>)
 80020cc:	f240 31bb 	movw	r1, #955	; 0x3bb
 80020d0:	4809      	ldr	r0, [pc, #36]	; (80020f8 <lcdDisplayWakeupTimerCallback+0x54>)
 80020d2:	f00a fa3f 	bl	800c554 <__assert_func>

	SEGGER_SYSVIEW_RecordEnterTimer((uint32_t)lcdDisplayWakeupTimerID);
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <lcdDisplayWakeupTimerCallback+0x44>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f009 fda6 	bl	800bc2c <SEGGER_SYSVIEW_RecordEnterTimer>
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20025a00 	.word	0x20025a00
 80020ec:	20025a0c 	.word	0x20025a0c
 80020f0:	0800d8dc 	.word	0x0800d8dc
 80020f4:	0800dd34 	.word	0x0800dd34
 80020f8:	0800d644 	.word	0x0800d644

080020fc <EXTI0_IRQHandler>:
 * 			post on the Button State Semaphore inorder to wake up the
 * 			Speed Setpoint Task. Toggles the buttonPressed global variable
 * 			on press/release.
 */
void EXTI0_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
	// Disable interrupts
	HAL_NVIC_DisableIRQ(BUTTON_IRQn);
 8002102:	2006      	movs	r0, #6
 8002104:	f001 f9ad 	bl	8003462 <HAL_NVIC_DisableIRQ>
	SEGGER_SYSVIEW_RecordEnterISR();
 8002108:	f009 fd32 	bl	800bb70 <SEGGER_SYSVIEW_RecordEnterISR>

	// Clear interrupt flag
	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_PIN);
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <EXTI0_IRQHandler+0x48>)
 800210e:	2201      	movs	r2, #1
 8002110:	615a      	str	r2, [r3, #20]

	// POST on the button state sempahore
	osStatus_t status = osSemaphoreRelease(buttonStateSemaphorID);
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <EXTI0_IRQHandler+0x4c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fd36 	bl	8006b88 <osSemaphoreRelease>
 800211c:	6078      	str	r0, [r7, #4]
	assert(status == osOK);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <EXTI0_IRQHandler+0x36>
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <EXTI0_IRQHandler+0x50>)
 8002126:	4a0a      	ldr	r2, [pc, #40]	; (8002150 <EXTI0_IRQHandler+0x54>)
 8002128:	f240 31d9 	movw	r1, #985	; 0x3d9
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <EXTI0_IRQHandler+0x58>)
 800212e:	f00a fa11 	bl	800c554 <__assert_func>


	SEGGER_SYSVIEW_RecordExitISR();
 8002132:	f009 fd5f 	bl	800bbf4 <SEGGER_SYSVIEW_RecordExitISR>

	// Re-enable interrupts
	HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 8002136:	2006      	movs	r0, #6
 8002138:	f001 f985 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40013c00 	.word	0x40013c00
 8002148:	20025a04 	.word	0x20025a04
 800214c:	0800d8dc 	.word	0x0800d8dc
 8002150:	0800dd54 	.word	0x0800dd54
 8002154:	0800d644 	.word	0x0800d644

08002158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002168:	2b00      	cmp	r3, #0
 800216a:	db0a      	blt.n	8002182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	490c      	ldr	r1, [pc, #48]	; (80021a4 <__NVIC_SetPriority+0x4c>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	0112      	lsls	r2, r2, #4
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	440b      	add	r3, r1
 800217c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002180:	e00a      	b.n	8002198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4908      	ldr	r1, [pc, #32]	; (80021a8 <__NVIC_SetPriority+0x50>)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3b04      	subs	r3, #4
 8002190:	0112      	lsls	r2, r2, #4
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	440b      	add	r3, r1
 8002196:	761a      	strb	r2, [r3, #24]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b092      	sub	sp, #72	; 0x48
 80021b0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <systemClockOverride+0x7c>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	4a1b      	ldr	r2, [pc, #108]	; (8002228 <systemClockOverride+0x7c>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	; 0x40
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <systemClockOverride+0x7c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021ce:	2301      	movs	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021d8:	2302      	movs	r3, #2
 80021da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021e2:	2308      	movs	r3, #8
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80021e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021f0:	2307      	movs	r3, #7
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 f978 	bl	80044ec <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021fc:	230f      	movs	r3, #15
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002200:	2302      	movs	r3, #2
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002204:	2300      	movs	r3, #0
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002208:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800220c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800220e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002212:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002214:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002218:	2105      	movs	r1, #5
 800221a:	4618      	mov	r0, r3
 800221c:	f002 fbde 	bl	80049dc <HAL_RCC_ClockConfig>
}
 8002220:	bf00      	nop
 8002222:	3748      	adds	r7, #72	; 0x48
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002230:	f000 ff7c 	bl	800312c <HAL_Init>
  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 8002234:	f7ff ffba 	bl	80021ac <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002238:	f000 f9f6 	bl	8002628 <MX_GPIO_Init>
  MX_SPI5_Init();
 800223c:	f000 f94c 	bl	80024d8 <MX_SPI5_Init>
  MX_LTDC_Init();
 8002240:	f000 f898 	bl	8002374 <MX_LTDC_Init>
  MX_TIM11_Init();
 8002244:	f000 f97e 	bl	8002544 <MX_TIM11_Init>
  MX_DMA2D_Init();
 8002248:	f000 f822 	bl	8002290 <MX_DMA2D_Init>
  MX_FMC_Init();
 800224c:	f000 f99e 	bl	800258c <MX_FMC_Init>
  MX_I2C3_Init();
 8002250:	f000 f850 	bl	80022f4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 8002254:	2006      	movs	r0, #6
 8002256:	f001 f8f6 	bl	8003446 <HAL_NVIC_EnableIRQ>
  NVIC_SetPriority(BUTTON_IRQn, osPriorityISR);
 800225a:	2138      	movs	r1, #56	; 0x38
 800225c:	2006      	movs	r0, #6
 800225e:	f7ff ff7b 	bl	8002158 <__NVIC_SetPriority>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002262:	f003 ff83 	bl	800616c <osKernelInitialize>

  appInit();
 8002266:	f7fe ffda 	bl	800121e <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800226a:	4a06      	ldr	r2, [pc, #24]	; (8002284 <main+0x58>)
 800226c:	2100      	movs	r1, #0
 800226e:	4806      	ldr	r0, [pc, #24]	; (8002288 <main+0x5c>)
 8002270:	f003 ffc6 	bl	8006200 <osThreadNew>
 8002274:	4603      	mov	r3, r0
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <main+0x60>)
 8002278:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 800227a:	f00a f827 	bl	800c2cc <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800227e:	f003 ff99 	bl	80061b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002282:	e7fe      	b.n	8002282 <main+0x56>
 8002284:	0800ef38 	.word	0x0800ef38
 8002288:	080028c1 	.word	0x080028c1
 800228c:	20025c34 	.word	0x20025c34

08002290 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002294:	4b15      	ldr	r3, [pc, #84]	; (80022ec <MX_DMA2D_Init+0x5c>)
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <MX_DMA2D_Init+0x60>)
 8002298:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <MX_DMA2D_Init+0x5c>)
 800229c:	2200      	movs	r2, #0
 800229e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022a2:	2202      	movs	r2, #2
 80022a4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022b4:	2202      	movs	r2, #2
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80022c4:	4809      	ldr	r0, [pc, #36]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022c6:	f001 f8e6 	bl	8003496 <HAL_DMA2D_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80022d0:	f000 fafe 	bl	80028d0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80022d4:	2101      	movs	r1, #1
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_DMA2D_Init+0x5c>)
 80022d8:	f001 f926 	bl	8003528 <HAL_DMA2D_ConfigLayer>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80022e2:	f000 faf5 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20025a24 	.word	0x20025a24
 80022f0:	4002b000 	.word	0x4002b000

080022f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <MX_I2C3_Init+0x74>)
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <MX_I2C3_Init+0x78>)
 80022fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <MX_I2C3_Init+0x74>)
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <MX_I2C3_Init+0x7c>)
 8002302:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <MX_I2C3_Init+0x74>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <MX_I2C3_Init+0x74>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002310:	4b15      	ldr	r3, [pc, #84]	; (8002368 <MX_I2C3_Init+0x74>)
 8002312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002316:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <MX_I2C3_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800231e:	4b12      	ldr	r3, [pc, #72]	; (8002368 <MX_I2C3_Init+0x74>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <MX_I2C3_Init+0x74>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <MX_I2C3_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <MX_I2C3_Init+0x74>)
 8002332:	f001 fc75 	bl	8003c20 <HAL_I2C_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800233c:	f000 fac8 	bl	80028d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002340:	2100      	movs	r1, #0
 8002342:	4809      	ldr	r0, [pc, #36]	; (8002368 <MX_I2C3_Init+0x74>)
 8002344:	f001 fdb0 	bl	8003ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800234e:	f000 fabf 	bl	80028d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002352:	2100      	movs	r1, #0
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <MX_I2C3_Init+0x74>)
 8002356:	f001 fde3 	bl	8003f20 <HAL_I2CEx_ConfigDigitalFilter>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002360:	f000 fab6 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20025a64 	.word	0x20025a64
 800236c:	40005c00 	.word	0x40005c00
 8002370:	000186a0 	.word	0x000186a0

08002374 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b09a      	sub	sp, #104	; 0x68
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800237a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800237e:	2234      	movs	r2, #52	; 0x34
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f00a fa2b 	bl	800c7de <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002388:	463b      	mov	r3, r7
 800238a:	2234      	movs	r2, #52	; 0x34
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f00a fa25 	bl	800c7de <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002394:	4b4e      	ldr	r3, [pc, #312]	; (80024d0 <MX_LTDC_Init+0x15c>)
 8002396:	4a4f      	ldr	r2, [pc, #316]	; (80024d4 <MX_LTDC_Init+0x160>)
 8002398:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800239a:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <MX_LTDC_Init+0x15c>)
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80023a0:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80023ac:	4b48      	ldr	r3, [pc, #288]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80023b2:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023b4:	2207      	movs	r2, #7
 80023b6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80023b8:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023ba:	2203      	movs	r2, #3
 80023bc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80023be:	4b44      	ldr	r3, [pc, #272]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023c0:	220e      	movs	r2, #14
 80023c2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80023c4:	4b42      	ldr	r3, [pc, #264]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023c6:	2205      	movs	r2, #5
 80023c8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80023ca:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023cc:	f240 228e 	movw	r2, #654	; 0x28e
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80023d2:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023d4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023dc:	f44f 7225 	mov.w	r2, #660	; 0x294
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023e4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80023e8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80023ea:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80023fa:	4b35      	ldr	r3, [pc, #212]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002402:	4833      	ldr	r0, [pc, #204]	; (80024d0 <MX_LTDC_Init+0x15c>)
 8002404:	f001 fdcc 	bl	8003fa0 <HAL_LTDC_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800240e:	f000 fa5f 	bl	80028d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002422:	2300      	movs	r3, #0
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800242e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002432:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002434:	2305      	movs	r3, #5
 8002436:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245a:	2200      	movs	r2, #0
 800245c:	4619      	mov	r1, r3
 800245e:	481c      	ldr	r0, [pc, #112]	; (80024d0 <MX_LTDC_Init+0x15c>)
 8002460:	f001 fe6e 	bl	8004140 <HAL_LTDC_ConfigLayer>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800246a:	f000 fa31 	bl	80028d0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800248a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002490:	2305      	movs	r3, #5
 8002492:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80024b2:	463b      	mov	r3, r7
 80024b4:	2201      	movs	r2, #1
 80024b6:	4619      	mov	r1, r3
 80024b8:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_LTDC_Init+0x15c>)
 80024ba:	f001 fe41 	bl	8004140 <HAL_LTDC_ConfigLayer>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80024c4:	f000 fa04 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	3768      	adds	r7, #104	; 0x68
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20025ab8 	.word	0x20025ab8
 80024d4:	40016800 	.word	0x40016800

080024d8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <MX_SPI5_Init+0x64>)
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <MX_SPI5_Init+0x68>)
 80024e0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <MX_SPI5_Init+0x64>)
 80024e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <MX_SPI5_Init+0x64>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_SPI5_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_SPI5_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_SPI5_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_SPI5_Init+0x64>)
 8002504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002508:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_SPI5_Init+0x64>)
 800250c:	2200      	movs	r2, #0
 800250e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <MX_SPI5_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_SPI5_Init+0x64>)
 8002518:	2200      	movs	r2, #0
 800251a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <MX_SPI5_Init+0x64>)
 800251e:	2200      	movs	r2, #0
 8002520:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_SPI5_Init+0x64>)
 8002524:	220a      	movs	r2, #10
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <MX_SPI5_Init+0x64>)
 800252a:	f002 fe57 	bl	80051dc <HAL_SPI_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002534:	f000 f9cc 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20025b60 	.word	0x20025b60
 8002540:	40015000 	.word	0x40015000

08002544 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002548:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <MX_TIM11_Init+0x40>)
 800254a:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <MX_TIM11_Init+0x44>)
 800254c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <MX_TIM11_Init+0x40>)
 8002550:	2200      	movs	r2, #0
 8002552:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <MX_TIM11_Init+0x40>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <MX_TIM11_Init+0x40>)
 800255c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002560:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002562:	4b08      	ldr	r3, [pc, #32]	; (8002584 <MX_TIM11_Init+0x40>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <MX_TIM11_Init+0x40>)
 800256a:	2200      	movs	r2, #0
 800256c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800256e:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_TIM11_Init+0x40>)
 8002570:	f003 fc12 	bl	8005d98 <HAL_TIM_Base_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800257a:	f000 f9a9 	bl	80028d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	20025bb8 	.word	0x20025bb8
 8002588:	40014800 	.word	0x40014800

0800258c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
 80025a0:	615a      	str	r2, [r3, #20]
 80025a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 80025a4:	4b1e      	ldr	r3, [pc, #120]	; (8002620 <MX_FMC_Init+0x94>)
 80025a6:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <MX_FMC_Init+0x98>)
 80025a8:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <MX_FMC_Init+0x94>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <MX_FMC_Init+0x94>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <MX_FMC_Init+0x94>)
 80025b8:	2204      	movs	r2, #4
 80025ba:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <MX_FMC_Init+0x94>)
 80025be:	2210      	movs	r2, #16
 80025c0:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <MX_FMC_Init+0x94>)
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_FMC_Init+0x94>)
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <MX_FMC_Init+0x94>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <MX_FMC_Init+0x94>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_FMC_Init+0x94>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80025e0:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <MX_FMC_Init+0x94>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80025e6:	2310      	movs	r3, #16
 80025e8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80025ea:	2310      	movs	r3, #16
 80025ec:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80025ee:	2310      	movs	r3, #16
 80025f0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80025f2:	2310      	movs	r3, #16
 80025f4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80025f6:	2310      	movs	r3, #16
 80025f8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80025fa:	2310      	movs	r3, #16
 80025fc:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80025fe:	2310      	movs	r3, #16
 8002600:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	4619      	mov	r1, r3
 8002606:	4806      	ldr	r0, [pc, #24]	; (8002620 <MX_FMC_Init+0x94>)
 8002608:	f002 fdb4 	bl	8005174 <HAL_SDRAM_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002612:	f000 f95d 	bl	80028d0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002616:	bf00      	nop
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20025c00 	.word	0x20025c00
 8002624:	a0000140 	.word	0xa0000140

08002628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08e      	sub	sp, #56	; 0x38
 800262c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	623b      	str	r3, [r7, #32]
 8002642:	4b99      	ldr	r3, [pc, #612]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a98      	ldr	r2, [pc, #608]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b96      	ldr	r3, [pc, #600]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	4b92      	ldr	r3, [pc, #584]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a91      	ldr	r2, [pc, #580]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b8f      	ldr	r3, [pc, #572]	; (80028a8 <MX_GPIO_Init+0x280>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <MX_GPIO_Init+0x280>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a8a      	ldr	r2, [pc, #552]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	4b84      	ldr	r3, [pc, #528]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a83      	ldr	r2, [pc, #524]	; (80028a8 <MX_GPIO_Init+0x280>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a7c      	ldr	r2, [pc, #496]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	4b76      	ldr	r3, [pc, #472]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a75      	ldr	r2, [pc, #468]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b73      	ldr	r3, [pc, #460]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b6f      	ldr	r3, [pc, #444]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a6e      	ldr	r2, [pc, #440]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026f0:	f043 0310 	orr.w	r3, r3, #16
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b6c      	ldr	r3, [pc, #432]	; (80028a8 <MX_GPIO_Init+0x280>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	4b68      	ldr	r3, [pc, #416]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a67      	ldr	r2, [pc, #412]	; (80028a8 <MX_GPIO_Init+0x280>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <MX_GPIO_Init+0x280>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800271e:	2200      	movs	r2, #0
 8002720:	2116      	movs	r1, #22
 8002722:	4862      	ldr	r0, [pc, #392]	; (80028ac <MX_GPIO_Init+0x284>)
 8002724:	f001 fa62 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002728:	2200      	movs	r2, #0
 800272a:	2180      	movs	r1, #128	; 0x80
 800272c:	4860      	ldr	r0, [pc, #384]	; (80028b0 <MX_GPIO_Init+0x288>)
 800272e:	f001 fa5d 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002738:	485e      	ldr	r0, [pc, #376]	; (80028b4 <MX_GPIO_Init+0x28c>)
 800273a:	f001 fa57 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8002744:	485c      	ldr	r0, [pc, #368]	; (80028b8 <MX_GPIO_Init+0x290>)
 8002746:	f001 fa51 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800274a:	2316      	movs	r3, #22
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274e:	2301      	movs	r3, #1
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275e:	4619      	mov	r1, r3
 8002760:	4852      	ldr	r0, [pc, #328]	; (80028ac <MX_GPIO_Init+0x284>)
 8002762:	f000 ff73 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002766:	2301      	movs	r3, #1
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800276a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	484d      	ldr	r0, [pc, #308]	; (80028b0 <MX_GPIO_Init+0x288>)
 800277c:	f000 ff66 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002780:	f248 0306 	movw	r3, #32774	; 0x8006
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002786:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002794:	4619      	mov	r1, r3
 8002796:	4846      	ldr	r0, [pc, #280]	; (80028b0 <MX_GPIO_Init+0x288>)
 8002798:	f000 ff58 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a0:	2301      	movs	r3, #1
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	483f      	ldr	r0, [pc, #252]	; (80028b0 <MX_GPIO_Init+0x288>)
 80027b4:	f000 ff4a 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80027b8:	2320      	movs	r3, #32
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ca:	4619      	mov	r1, r3
 80027cc:	4837      	ldr	r0, [pc, #220]	; (80028ac <MX_GPIO_Init+0x284>)
 80027ce:	f000 ff3d 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80027d2:	2304      	movs	r3, #4
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4619      	mov	r1, r3
 80027e4:	4835      	ldr	r0, [pc, #212]	; (80028bc <MX_GPIO_Init+0x294>)
 80027e6:	f000 ff31 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80027ea:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80027fc:	230c      	movs	r3, #12
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002804:	4619      	mov	r1, r3
 8002806:	482d      	ldr	r0, [pc, #180]	; (80028bc <MX_GPIO_Init+0x294>)
 8002808:	f000 ff20 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800280c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002812:	2300      	movs	r3, #0
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281e:	4619      	mov	r1, r3
 8002820:	4826      	ldr	r0, [pc, #152]	; (80028bc <MX_GPIO_Init+0x294>)
 8002822:	f000 ff13 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002826:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002838:	4619      	mov	r1, r3
 800283a:	481e      	ldr	r0, [pc, #120]	; (80028b4 <MX_GPIO_Init+0x28c>)
 800283c:	f000 ff06 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002840:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002846:	2301      	movs	r3, #1
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002856:	4619      	mov	r1, r3
 8002858:	4816      	ldr	r0, [pc, #88]	; (80028b4 <MX_GPIO_Init+0x28c>)
 800285a:	f000 fef7 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800285e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002870:	2307      	movs	r3, #7
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	480d      	ldr	r0, [pc, #52]	; (80028b0 <MX_GPIO_Init+0x288>)
 800287c:	f000 fee6 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002880:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002896:	4619      	mov	r1, r3
 8002898:	4807      	ldr	r0, [pc, #28]	; (80028b8 <MX_GPIO_Init+0x290>)
 800289a:	f000 fed7 	bl	800364c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800289e:	bf00      	nop
 80028a0:	3738      	adds	r7, #56	; 0x38
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020800 	.word	0x40020800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	40021800 	.word	0x40021800
 80028bc:	40020400 	.word	0x40020400

080028c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80028c8:	2001      	movs	r0, #1
 80028ca:	f003 fd2b 	bl	8006324 <osDelay>
 80028ce:	e7fb      	b.n	80028c8 <StartDefaultTask+0x8>

080028d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028d4:	b672      	cpsid	i
}
 80028d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <Error_Handler+0x8>
	...

080028dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_MspInit+0x54>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_MspInit+0x54>)
 80028ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f0:	6453      	str	r3, [r2, #68]	; 0x44
 80028f2:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_MspInit+0x54>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_MspInit+0x54>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_MspInit+0x54>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_MspInit+0x54>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	210f      	movs	r1, #15
 800291e:	f06f 0001 	mvn.w	r0, #1
 8002922:	f000 fd74 	bl	800340e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <HAL_DMA2D_MspInit+0x3c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d10d      	bne.n	8002962 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_DMA2D_MspInit+0x40>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_DMA2D_MspInit+0x40>)
 8002950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_DMA2D_MspInit+0x40>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	4002b000 	.word	0x4002b000
 8002974:	40023800 	.word	0x40023800

08002978 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_I2C_MspInit+0xc4>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d14b      	bne.n	8002a32 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b21      	ldr	r3, [pc, #132]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80029d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d8:	2312      	movs	r3, #18
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029e4:	2304      	movs	r3, #4
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	4815      	ldr	r0, [pc, #84]	; (8002a44 <HAL_I2C_MspInit+0xcc>)
 80029f0:	f000 fe2c 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80029f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029fa:	2312      	movs	r3, #18
 80029fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a06:	2304      	movs	r3, #4
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	480d      	ldr	r0, [pc, #52]	; (8002a48 <HAL_I2C_MspInit+0xd0>)
 8002a12:	f000 fe1b 	bl	800364c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 8002a20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <HAL_I2C_MspInit+0xc8>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	; 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40005c00 	.word	0x40005c00
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020800 	.word	0x40020800
 8002a48:	40020000 	.word	0x40020000

08002a4c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b09a      	sub	sp, #104	; 0x68
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a68:	2230      	movs	r2, #48	; 0x30
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f009 feb6 	bl	800c7de <memset>
  if(hltdc->Instance==LTDC)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a81      	ldr	r2, [pc, #516]	; (8002c7c <HAL_LTDC_MspInit+0x230>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	f040 80fa 	bne.w	8002c72 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a7e:	2308      	movs	r3, #8
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002a82:	2332      	movs	r3, #50	; 0x32
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002a86:	2302      	movs	r3, #2
 8002a88:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 f9ae 	bl	8004df4 <HAL_RCCEx_PeriphCLKConfig>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002a9e:	f7ff ff17 	bl	80028d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	4b76      	ldr	r3, [pc, #472]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4a75      	ldr	r2, [pc, #468]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	4b73      	ldr	r3, [pc, #460]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002ac8:	f043 0320 	orr.w	r3, r3, #32
 8002acc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ace:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a67      	ldr	r2, [pc, #412]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	4b61      	ldr	r3, [pc, #388]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a60      	ldr	r2, [pc, #384]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a59      	ldr	r2, [pc, #356]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4a4b      	ldr	r2, [pc, #300]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5a:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <HAL_LTDC_MspInit+0x234>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b78:	230e      	movs	r3, #14
 8002b7a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b80:	4619      	mov	r1, r3
 8002b82:	4840      	ldr	r0, [pc, #256]	; (8002c84 <HAL_LTDC_MspInit+0x238>)
 8002b84:	f000 fd62 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002b88:	f641 0358 	movw	r3, #6232	; 0x1858
 8002b8c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b96:	2300      	movs	r3, #0
 8002b98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b9a:	230e      	movs	r3, #14
 8002b9c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4838      	ldr	r0, [pc, #224]	; (8002c88 <HAL_LTDC_MspInit+0x23c>)
 8002ba6:	f000 fd51 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002baa:	2303      	movs	r3, #3
 8002bac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bba:	2309      	movs	r3, #9
 8002bbc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4831      	ldr	r0, [pc, #196]	; (8002c8c <HAL_LTDC_MspInit+0x240>)
 8002bc6:	f000 fd41 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002bca:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002bce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bdc:	230e      	movs	r3, #14
 8002bde:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002be4:	4619      	mov	r1, r3
 8002be6:	4829      	ldr	r0, [pc, #164]	; (8002c8c <HAL_LTDC_MspInit+0x240>)
 8002be8:	f000 fd30 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002bec:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002bf0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bfe:	230e      	movs	r3, #14
 8002c00:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c06:	4619      	mov	r1, r3
 8002c08:	4821      	ldr	r0, [pc, #132]	; (8002c90 <HAL_LTDC_MspInit+0x244>)
 8002c0a:	f000 fd1f 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002c0e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002c12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c14:	2302      	movs	r3, #2
 8002c16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c20:	230e      	movs	r3, #14
 8002c22:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c28:	4619      	mov	r1, r3
 8002c2a:	481a      	ldr	r0, [pc, #104]	; (8002c94 <HAL_LTDC_MspInit+0x248>)
 8002c2c:	f000 fd0e 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002c30:	2348      	movs	r3, #72	; 0x48
 8002c32:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c40:	230e      	movs	r3, #14
 8002c42:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4813      	ldr	r0, [pc, #76]	; (8002c98 <HAL_LTDC_MspInit+0x24c>)
 8002c4c:	f000 fcfe 	bl	800364c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c54:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c62:	2309      	movs	r3, #9
 8002c64:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4808      	ldr	r0, [pc, #32]	; (8002c90 <HAL_LTDC_MspInit+0x244>)
 8002c6e:	f000 fced 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c72:	bf00      	nop
 8002c74:	3768      	adds	r7, #104	; 0x68
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40016800 	.word	0x40016800
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40021800 	.word	0x40021800
 8002c94:	40020800 	.word	0x40020800
 8002c98:	40020c00 	.word	0x40020c00

08002c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_SPI_MspInit+0x84>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12c      	bne.n	8002d18 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_SPI_MspInit+0x88>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_SPI_MspInit+0x88>)
 8002ce4:	f043 0320 	orr.w	r3, r3, #32
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_SPI_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002cf6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d08:	2305      	movs	r3, #5
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <HAL_SPI_MspInit+0x8c>)
 8002d14:	f000 fc9a 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40015000 	.word	0x40015000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40021400 	.word	0x40021400

08002d2c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_SPI_MspDeInit+0x30>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10a      	bne.n	8002d54 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_SPI_MspDeInit+0x34>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <HAL_SPI_MspDeInit+0x34>)
 8002d44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d48:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d4a:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002d4e:	4805      	ldr	r0, [pc, #20]	; (8002d64 <HAL_SPI_MspDeInit+0x38>)
 8002d50:	f000 fe28 	bl	80039a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40015000 	.word	0x40015000
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40021400 	.word	0x40021400

08002d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0b      	ldr	r2, [pc, #44]	; (8002da4 <HAL_TIM_Base_MspInit+0x3c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d10d      	bne.n	8002d96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_TIM_Base_MspInit+0x40>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_TIM_Base_MspInit+0x40>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_TIM_Base_MspInit+0x40>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d96:	bf00      	nop
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40014800 	.word	0x40014800
 8002da8:	40023800 	.word	0x40023800

08002dac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_FMC_MspInit+0x104>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d16f      	bne.n	8002ea8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002dc8:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <HAL_FMC_MspInit+0x104>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	603b      	str	r3, [r7, #0]
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_FMC_MspInit+0x108>)
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd6:	4a37      	ldr	r2, [pc, #220]	; (8002eb4 <HAL_FMC_MspInit+0x108>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6393      	str	r3, [r2, #56]	; 0x38
 8002dde:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <HAL_FMC_MspInit+0x108>)
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002dea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002dee:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	482c      	ldr	r0, [pc, #176]	; (8002eb8 <HAL_FMC_MspInit+0x10c>)
 8002e06:	f000 fc21 	bl	800364c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e1a:	230c      	movs	r3, #12
 8002e1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4826      	ldr	r0, [pc, #152]	; (8002ebc <HAL_FMC_MspInit+0x110>)
 8002e24:	f000 fc12 	bl	800364c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002e28:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e2c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e36:	2303      	movs	r3, #3
 8002e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	4619      	mov	r1, r3
 8002e42:	481f      	ldr	r0, [pc, #124]	; (8002ec0 <HAL_FMC_MspInit+0x114>)
 8002e44:	f000 fc02 	bl	800364c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002e48:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e4c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e56:	2303      	movs	r3, #3
 8002e58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4818      	ldr	r0, [pc, #96]	; (8002ec4 <HAL_FMC_MspInit+0x118>)
 8002e64:	f000 fbf2 	bl	800364c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002e68:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e6c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e76:	2303      	movs	r3, #3
 8002e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e7a:	230c      	movs	r3, #12
 8002e7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	4619      	mov	r1, r3
 8002e82:	4811      	ldr	r0, [pc, #68]	; (8002ec8 <HAL_FMC_MspInit+0x11c>)
 8002e84:	f000 fbe2 	bl	800364c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002e88:	2360      	movs	r3, #96	; 0x60
 8002e8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e94:	2303      	movs	r3, #3
 8002e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e98:	230c      	movs	r3, #12
 8002e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	480a      	ldr	r0, [pc, #40]	; (8002ecc <HAL_FMC_MspInit+0x120>)
 8002ea2:	f000 fbd3 	bl	800364c <HAL_GPIO_Init>
 8002ea6:	e000      	b.n	8002eaa <HAL_FMC_MspInit+0xfe>
    return;
 8002ea8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20025c38 	.word	0x20025c38
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40021400 	.word	0x40021400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	40021800 	.word	0x40021800
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40020c00 	.word	0x40020c00
 8002ecc:	40020400 	.word	0x40020400

08002ed0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ed8:	f7ff ff68 	bl	8002dac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <NMI_Handler+0x4>

08002eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eee:	e7fe      	b.n	8002eee <HardFault_Handler+0x4>

08002ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef4:	e7fe      	b.n	8002ef4 <MemManage_Handler+0x4>

08002ef6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efa:	e7fe      	b.n	8002efa <BusFault_Handler+0x4>

08002efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f00:	e7fe      	b.n	8002f00 <UsageFault_Handler+0x4>

08002f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f14:	f000 f95c 	bl	80031d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f18:	f006 fae8 	bl	80094ec <xTaskGetSchedulerState>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d001      	beq.n	8002f26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f22:	f007 fb01 	bl	800a528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  return 1;
 8002f2e:	2301      	movs	r3, #1
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_kill>:

int _kill(int pid, int sig)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f44:	f009 fc9a 	bl	800c87c <__errno>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2216      	movs	r2, #22
 8002f4c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <_exit>:

void _exit (int status)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f62:	f04f 31ff 	mov.w	r1, #4294967295
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ffe7 	bl	8002f3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f6c:	e7fe      	b.n	8002f6c <_exit+0x12>

08002f6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	e00a      	b.n	8002f96 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f80:	f3af 8000 	nop.w
 8002f84:	4601      	mov	r1, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	60ba      	str	r2, [r7, #8]
 8002f8c:	b2ca      	uxtb	r2, r1
 8002f8e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3301      	adds	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	dbf0      	blt.n	8002f80 <_read+0x12>
  }

  return len;
 8002f9e:	687b      	ldr	r3, [r7, #4]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	e009      	b.n	8002fce <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	60ba      	str	r2, [r7, #8]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	dbf1      	blt.n	8002fba <_write+0x12>
  }
  return len;
 8002fd6:	687b      	ldr	r3, [r7, #4]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_close>:

int _close(int file)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003008:	605a      	str	r2, [r3, #4]
  return 0;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_isatty>:

int _isatty(int file)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003020:	2301      	movs	r3, #1
}
 8003022:	4618      	mov	r0, r3
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003050:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <_sbrk+0x5c>)
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <_sbrk+0x60>)
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <_sbrk+0x64>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d102      	bne.n	800306a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <_sbrk+0x64>)
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <_sbrk+0x68>)
 8003068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <_sbrk+0x64>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	429a      	cmp	r2, r3
 8003076:	d207      	bcs.n	8003088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003078:	f009 fc00 	bl	800c87c <__errno>
 800307c:	4603      	mov	r3, r0
 800307e:	220c      	movs	r2, #12
 8003080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	e009      	b.n	800309c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <_sbrk+0x64>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <_sbrk+0x64>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	4a05      	ldr	r2, [pc, #20]	; (80030ac <_sbrk+0x64>)
 8003098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800309a:	68fb      	ldr	r3, [r7, #12]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20030000 	.word	0x20030000
 80030a8:	00000400 	.word	0x00000400
 80030ac:	20025c3c 	.word	0x20025c3c
 80030b0:	2002b270 	.word	0x2002b270

080030b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <SystemInit+0x20>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <SystemInit+0x20>)
 80030c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80030d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003110 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030dc:	480d      	ldr	r0, [pc, #52]	; (8003114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030de:	490e      	ldr	r1, [pc, #56]	; (8003118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030e0:	4a0e      	ldr	r2, [pc, #56]	; (800311c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030f4:	4c0b      	ldr	r4, [pc, #44]	; (8003124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003102:	f7ff ffd7 	bl	80030b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003106:	f009 fbbf 	bl	800c888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800310a:	f7ff f88f 	bl	800222c <main>
  bx  lr    
 800310e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003110:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003118:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800311c:	0800f008 	.word	0x0800f008
  ldr r2, =_sbss
 8003120:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003124:	2002b26c 	.word	0x2002b26c

08003128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003128:	e7fe      	b.n	8003128 <ADC_IRQHandler>
	...

0800312c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <HAL_Init+0x40>)
 8003136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800313a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a0a      	ldr	r2, [pc, #40]	; (800316c <HAL_Init+0x40>)
 8003142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_Init+0x40>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a07      	ldr	r2, [pc, #28]	; (800316c <HAL_Init+0x40>)
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003154:	2003      	movs	r0, #3
 8003156:	f000 f94f 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800315a:	200f      	movs	r0, #15
 800315c:	f000 f808 	bl	8003170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003160:	f7ff fbbc 	bl	80028dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023c00 	.word	0x40023c00

08003170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_InitTick+0x54>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_InitTick+0x58>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	fbb3 f3f1 	udiv	r3, r3, r1
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f975 	bl	800347e <HAL_SYSTICK_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e00e      	b.n	80031bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d80a      	bhi.n	80031ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a4:	2200      	movs	r2, #0
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f000 f92f 	bl	800340e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b0:	4a06      	ldr	r2, [pc, #24]	; (80031cc <HAL_InitTick+0x5c>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000014 	.word	0x20000014
 80031c8:	2000001c 	.word	0x2000001c
 80031cc:	20000018 	.word	0x20000018

080031d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_IncTick+0x20>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_IncTick+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_IncTick+0x24>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	2000001c 	.word	0x2000001c
 80031f4:	20025c40 	.word	0x20025c40

080031f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return uwTick;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_GetTick+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20025c40 	.word	0x20025c40

08003210 <__NVIC_SetPriorityGrouping>:
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <__NVIC_EnableIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_DisableIRQ>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db12      	blt.n	80032e8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	490a      	ldr	r1, [pc, #40]	; (80032f4 <__NVIC_DisableIRQ+0x44>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	3320      	adds	r3, #32
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032dc:	f3bf 8f4f 	dsb	sy
}
 80032e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032e2:	f3bf 8f6f 	isb	sy
}
 80032e6:	bf00      	nop
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	; (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	; (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
         );
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	; 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff05 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff1a 	bl	8003258 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff8e 	bl	800334c <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff0d 	bl	8003274 <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff1d 	bl	80032b0 <__NVIC_DisableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff94 	bl	80033b4 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e03b      	b.n	8003520 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff fa39 	bl	8002934 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e6:	f023 0107 	bic.w	r1, r3, #7
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	68d1      	ldr	r1, [r2, #12]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	430b      	orrs	r3, r1
 800350e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_DMA2D_ConfigLayer+0x20>
 8003544:	2302      	movs	r3, #2
 8003546:	e079      	b.n	800363c <HAL_DMA2D_ConfigLayer+0x114>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	3318      	adds	r3, #24
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003572:	4b35      	ldr	r3, [pc, #212]	; (8003648 <HAL_DMA2D_ConfigLayer+0x120>)
 8003574:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b0a      	cmp	r3, #10
 800357c:	d003      	beq.n	8003586 <HAL_DMA2D_ConfigLayer+0x5e>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b09      	cmp	r3, #9
 8003584:	d107      	bne.n	8003596 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	e005      	b.n	80035a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	061b      	lsls	r3, r3, #24
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d120      	bne.n	80035ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	ea02 0103 	and.w	r1, r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	430a      	orrs	r2, r1
 80035be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b0a      	cmp	r3, #10
 80035d0:	d003      	beq.n	80035da <HAL_DMA2D_ConfigLayer+0xb2>
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b09      	cmp	r3, #9
 80035d8:	d127      	bne.n	800362a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
 80035e8:	e01f      	b.n	800362a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	ea02 0103 	and.w	r1, r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	430a      	orrs	r2, r1
 8003600:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b0a      	cmp	r3, #10
 8003612:	d003      	beq.n	800361c <HAL_DMA2D_ConfigLayer+0xf4>
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b09      	cmp	r3, #9
 800361a:	d106      	bne.n	800362a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003628:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	ff03000f 	.word	0xff03000f

0800364c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
 8003666:	e177      	b.n	8003958 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 8166 	bne.w	8003952 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b01      	cmp	r3, #1
 8003690:	d005      	beq.n	800369e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369a:	2b02      	cmp	r3, #2
 800369c:	d130      	bne.n	8003700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2203      	movs	r2, #3
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 0201 	and.w	r2, r3, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b03      	cmp	r3, #3
 800370a:	d017      	beq.n	800373c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	2203      	movs	r2, #3
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d123      	bne.n	8003790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	08da      	lsrs	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3208      	adds	r2, #8
 8003750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	220f      	movs	r2, #15
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	08da      	lsrs	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3208      	adds	r2, #8
 800378a:	69b9      	ldr	r1, [r7, #24]
 800378c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 0203 	and.w	r2, r3, #3
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80c0 	beq.w	8003952 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	4b66      	ldr	r3, [pc, #408]	; (8003970 <HAL_GPIO_Init+0x324>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	4a65      	ldr	r2, [pc, #404]	; (8003970 <HAL_GPIO_Init+0x324>)
 80037dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	4b63      	ldr	r3, [pc, #396]	; (8003970 <HAL_GPIO_Init+0x324>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ee:	4a61      	ldr	r2, [pc, #388]	; (8003974 <HAL_GPIO_Init+0x328>)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	220f      	movs	r2, #15
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_GPIO_Init+0x32c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d037      	beq.n	800388a <HAL_GPIO_Init+0x23e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <HAL_GPIO_Init+0x330>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d031      	beq.n	8003886 <HAL_GPIO_Init+0x23a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a56      	ldr	r2, [pc, #344]	; (8003980 <HAL_GPIO_Init+0x334>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02b      	beq.n	8003882 <HAL_GPIO_Init+0x236>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a55      	ldr	r2, [pc, #340]	; (8003984 <HAL_GPIO_Init+0x338>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d025      	beq.n	800387e <HAL_GPIO_Init+0x232>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a54      	ldr	r2, [pc, #336]	; (8003988 <HAL_GPIO_Init+0x33c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01f      	beq.n	800387a <HAL_GPIO_Init+0x22e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a53      	ldr	r2, [pc, #332]	; (800398c <HAL_GPIO_Init+0x340>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d019      	beq.n	8003876 <HAL_GPIO_Init+0x22a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_GPIO_Init+0x344>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_GPIO_Init+0x226>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a51      	ldr	r2, [pc, #324]	; (8003994 <HAL_GPIO_Init+0x348>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00d      	beq.n	800386e <HAL_GPIO_Init+0x222>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a50      	ldr	r2, [pc, #320]	; (8003998 <HAL_GPIO_Init+0x34c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d007      	beq.n	800386a <HAL_GPIO_Init+0x21e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4f      	ldr	r2, [pc, #316]	; (800399c <HAL_GPIO_Init+0x350>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d101      	bne.n	8003866 <HAL_GPIO_Init+0x21a>
 8003862:	2309      	movs	r3, #9
 8003864:	e012      	b.n	800388c <HAL_GPIO_Init+0x240>
 8003866:	230a      	movs	r3, #10
 8003868:	e010      	b.n	800388c <HAL_GPIO_Init+0x240>
 800386a:	2308      	movs	r3, #8
 800386c:	e00e      	b.n	800388c <HAL_GPIO_Init+0x240>
 800386e:	2307      	movs	r3, #7
 8003870:	e00c      	b.n	800388c <HAL_GPIO_Init+0x240>
 8003872:	2306      	movs	r3, #6
 8003874:	e00a      	b.n	800388c <HAL_GPIO_Init+0x240>
 8003876:	2305      	movs	r3, #5
 8003878:	e008      	b.n	800388c <HAL_GPIO_Init+0x240>
 800387a:	2304      	movs	r3, #4
 800387c:	e006      	b.n	800388c <HAL_GPIO_Init+0x240>
 800387e:	2303      	movs	r3, #3
 8003880:	e004      	b.n	800388c <HAL_GPIO_Init+0x240>
 8003882:	2302      	movs	r3, #2
 8003884:	e002      	b.n	800388c <HAL_GPIO_Init+0x240>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_GPIO_Init+0x240>
 800388a:	2300      	movs	r3, #0
 800388c:	69fa      	ldr	r2, [r7, #28]
 800388e:	f002 0203 	and.w	r2, r2, #3
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	4093      	lsls	r3, r2
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800389c:	4935      	ldr	r1, [pc, #212]	; (8003974 <HAL_GPIO_Init+0x328>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	089b      	lsrs	r3, r3, #2
 80038a2:	3302      	adds	r3, #2
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038aa:	4b3d      	ldr	r3, [pc, #244]	; (80039a0 <HAL_GPIO_Init+0x354>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ce:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <HAL_GPIO_Init+0x354>)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038d4:	4b32      	ldr	r3, [pc, #200]	; (80039a0 <HAL_GPIO_Init+0x354>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <HAL_GPIO_Init+0x354>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038fe:	4b28      	ldr	r3, [pc, #160]	; (80039a0 <HAL_GPIO_Init+0x354>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_GPIO_Init+0x354>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003928:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <HAL_GPIO_Init+0x354>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800394c:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <HAL_GPIO_Init+0x354>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b0f      	cmp	r3, #15
 800395c:	f67f ae84 	bls.w	8003668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40013800 	.word	0x40013800
 8003978:	40020000 	.word	0x40020000
 800397c:	40020400 	.word	0x40020400
 8003980:	40020800 	.word	0x40020800
 8003984:	40020c00 	.word	0x40020c00
 8003988:	40021000 	.word	0x40021000
 800398c:	40021400 	.word	0x40021400
 8003990:	40021800 	.word	0x40021800
 8003994:	40021c00 	.word	0x40021c00
 8003998:	40022000 	.word	0x40022000
 800399c:	40022400 	.word	0x40022400
 80039a0:	40013c00 	.word	0x40013c00

080039a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	e0d9      	b.n	8003b74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039c0:	2201      	movs	r2, #1
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f040 80c9 	bne.w	8003b6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80039dc:	4a6b      	ldr	r2, [pc, #428]	; (8003b8c <HAL_GPIO_DeInit+0x1e8>)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	089b      	lsrs	r3, r3, #2
 80039e2:	3302      	adds	r3, #2
 80039e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	220f      	movs	r2, #15
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a63      	ldr	r2, [pc, #396]	; (8003b90 <HAL_GPIO_DeInit+0x1ec>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d037      	beq.n	8003a76 <HAL_GPIO_DeInit+0xd2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a62      	ldr	r2, [pc, #392]	; (8003b94 <HAL_GPIO_DeInit+0x1f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d031      	beq.n	8003a72 <HAL_GPIO_DeInit+0xce>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a61      	ldr	r2, [pc, #388]	; (8003b98 <HAL_GPIO_DeInit+0x1f4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02b      	beq.n	8003a6e <HAL_GPIO_DeInit+0xca>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a60      	ldr	r2, [pc, #384]	; (8003b9c <HAL_GPIO_DeInit+0x1f8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d025      	beq.n	8003a6a <HAL_GPIO_DeInit+0xc6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a5f      	ldr	r2, [pc, #380]	; (8003ba0 <HAL_GPIO_DeInit+0x1fc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01f      	beq.n	8003a66 <HAL_GPIO_DeInit+0xc2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a5e      	ldr	r2, [pc, #376]	; (8003ba4 <HAL_GPIO_DeInit+0x200>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_GPIO_DeInit+0xbe>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_GPIO_DeInit+0x204>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_DeInit+0xba>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a5c      	ldr	r2, [pc, #368]	; (8003bac <HAL_GPIO_DeInit+0x208>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00d      	beq.n	8003a5a <HAL_GPIO_DeInit+0xb6>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a5b      	ldr	r2, [pc, #364]	; (8003bb0 <HAL_GPIO_DeInit+0x20c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <HAL_GPIO_DeInit+0xb2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <HAL_GPIO_DeInit+0x210>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_GPIO_DeInit+0xae>
 8003a4e:	2309      	movs	r3, #9
 8003a50:	e012      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a52:	230a      	movs	r3, #10
 8003a54:	e010      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a56:	2308      	movs	r3, #8
 8003a58:	e00e      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a5a:	2307      	movs	r3, #7
 8003a5c:	e00c      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a5e:	2306      	movs	r3, #6
 8003a60:	e00a      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a62:	2305      	movs	r3, #5
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a66:	2304      	movs	r3, #4
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_DeInit+0xd4>
 8003a76:	2300      	movs	r3, #0
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d132      	bne.n	8003aee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a88:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	43db      	mvns	r3, r3
 8003a90:	4949      	ldr	r1, [pc, #292]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a96:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	4946      	ldr	r1, [pc, #280]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003aa4:	4b44      	ldr	r3, [pc, #272]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	4942      	ldr	r1, [pc, #264]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ab2:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	493f      	ldr	r1, [pc, #252]	; (8003bb8 <HAL_GPIO_DeInit+0x214>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	220f      	movs	r2, #15
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ad0:	4a2e      	ldr	r2, [pc, #184]	; (8003b8c <HAL_GPIO_DeInit+0x1e8>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	482a      	ldr	r0, [pc, #168]	; (8003b8c <HAL_GPIO_DeInit+0x1e8>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	3302      	adds	r3, #2
 8003aea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	2103      	movs	r1, #3
 8003af8:	fa01 f303 	lsl.w	r3, r1, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	401a      	ands	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	08da      	lsrs	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3208      	adds	r2, #8
 8003b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	08d2      	lsrs	r2, r2, #3
 8003b24:	4019      	ands	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	2103      	movs	r1, #3
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	2101      	movs	r1, #1
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	401a      	ands	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2103      	movs	r1, #3
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	401a      	ands	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	3301      	adds	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	2b0f      	cmp	r3, #15
 8003b78:	f67f af22 	bls.w	80039c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40013800 	.word	0x40013800
 8003b90:	40020000 	.word	0x40020000
 8003b94:	40020400 	.word	0x40020400
 8003b98:	40020800 	.word	0x40020800
 8003b9c:	40020c00 	.word	0x40020c00
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40021400 	.word	0x40021400
 8003ba8:	40021800 	.word	0x40021800
 8003bac:	40021c00 	.word	0x40021c00
 8003bb0:	40022000 	.word	0x40022000
 8003bb4:	40022400 	.word	0x40022400
 8003bb8:	40013c00 	.word	0x40013c00

08003bbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e001      	b.n	8003bde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bfc:	787b      	ldrb	r3, [r7, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c08:	e003      	b.n	8003c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c0a:	887b      	ldrh	r3, [r7, #2]
 8003c0c:	041a      	lsls	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	619a      	str	r2, [r3, #24]
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e12b      	b.n	8003e8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe fe96 	bl	8002978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c84:	f001 f8a2 	bl	8004dcc <HAL_RCC_GetPCLK1Freq>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a81      	ldr	r2, [pc, #516]	; (8003e94 <HAL_I2C_Init+0x274>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d807      	bhi.n	8003ca4 <HAL_I2C_Init+0x84>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a80      	ldr	r2, [pc, #512]	; (8003e98 <HAL_I2C_Init+0x278>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	bf94      	ite	ls
 8003c9c:	2301      	movls	r3, #1
 8003c9e:	2300      	movhi	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e006      	b.n	8003cb2 <HAL_I2C_Init+0x92>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a7d      	ldr	r2, [pc, #500]	; (8003e9c <HAL_I2C_Init+0x27c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bf94      	ite	ls
 8003cac:	2301      	movls	r3, #1
 8003cae:	2300      	movhi	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0e7      	b.n	8003e8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a78      	ldr	r2, [pc, #480]	; (8003ea0 <HAL_I2C_Init+0x280>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0c9b      	lsrs	r3, r3, #18
 8003cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a6a      	ldr	r2, [pc, #424]	; (8003e94 <HAL_I2C_Init+0x274>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d802      	bhi.n	8003cf4 <HAL_I2C_Init+0xd4>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	e009      	b.n	8003d08 <HAL_I2C_Init+0xe8>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	4a69      	ldr	r2, [pc, #420]	; (8003ea4 <HAL_I2C_Init+0x284>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	3301      	adds	r3, #1
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	495c      	ldr	r1, [pc, #368]	; (8003e94 <HAL_I2C_Init+0x274>)
 8003d24:	428b      	cmp	r3, r1
 8003d26:	d819      	bhi.n	8003d5c <HAL_I2C_Init+0x13c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e59      	subs	r1, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d36:	1c59      	adds	r1, r3, #1
 8003d38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_I2C_Init+0x138>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e59      	subs	r1, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d56:	e051      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	e04f      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <HAL_I2C_Init+0x168>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e012      	b.n	8003dae <HAL_I2C_Init+0x18e>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1e58      	subs	r0, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	0099      	lsls	r1, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Init+0x196>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e022      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10e      	bne.n	8003ddc <HAL_I2C_Init+0x1bc>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1e58      	subs	r0, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	440b      	add	r3, r1
 8003dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dda:	e00f      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1e58      	subs	r0, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	0099      	lsls	r1, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	6809      	ldr	r1, [r1, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69da      	ldr	r2, [r3, #28]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6911      	ldr	r1, [r2, #16]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	000186a0 	.word	0x000186a0
 8003e98:	001e847f 	.word	0x001e847f
 8003e9c:	003d08ff 	.word	0x003d08ff
 8003ea0:	431bde83 	.word	0x431bde83
 8003ea4:	10624dd3 	.word	0x10624dd3

08003ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d129      	bne.n	8003f12 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2224      	movs	r2, #36	; 0x24
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0210 	bic.w	r2, r2, #16
 8003ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003f12:	2302      	movs	r3, #2
  }
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d12a      	bne.n	8003f90 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2224      	movs	r2, #36	; 0x24
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 0201 	bic.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f5a:	89fb      	ldrh	r3, [r7, #14]
 8003f5c:	f023 030f 	bic.w	r3, r3, #15
 8003f60:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	89fb      	ldrh	r3, [r7, #14]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	89fa      	ldrh	r2, [r7, #14]
 8003f72:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e0bf      	b.n	8004132 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fe fd40 	bl	8002a4c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	699a      	ldr	r2, [r3, #24]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003fe2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6999      	ldr	r1, [r3, #24]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ff8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b4a      	ldr	r3, [pc, #296]	; (800413c <HAL_LTDC_Init+0x19c>)
 8004014:	400b      	ands	r3, r1
 8004016:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68d9      	ldr	r1, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b3e      	ldr	r3, [pc, #248]	; (800413c <HAL_LTDC_Init+0x19c>)
 8004042:	400b      	ands	r3, r1
 8004044:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68d9      	ldr	r1, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6919      	ldr	r1, [r3, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b33      	ldr	r3, [pc, #204]	; (800413c <HAL_LTDC_Init+0x19c>)
 8004070:	400b      	ands	r3, r1
 8004072:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6919      	ldr	r1, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6959      	ldr	r1, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b27      	ldr	r3, [pc, #156]	; (800413c <HAL_LTDC_Init+0x19c>)
 800409e:	400b      	ands	r3, r1
 80040a0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	041b      	lsls	r3, r3, #16
 80040a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6959      	ldr	r1, [r3, #20]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0206 	orr.w	r2, r2, #6
 800410e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	f000f800 	.word	0xf000f800

08004140 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004140:	b5b0      	push	{r4, r5, r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_LTDC_ConfigLayer+0x1a>
 8004156:	2302      	movs	r3, #2
 8004158:	e02c      	b.n	80041b4 <HAL_LTDC_ConfigLayer+0x74>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2134      	movs	r1, #52	; 0x34
 8004170:	fb01 f303 	mul.w	r3, r1, r3
 8004174:	4413      	add	r3, r2
 8004176:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4614      	mov	r4, r2
 800417e:	461d      	mov	r5, r3
 8004180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800418a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800418c:	682b      	ldr	r3, [r5, #0]
 800418e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f811 	bl	80041bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2201      	movs	r2, #1
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bdb0      	pop	{r4, r5, r7, pc}

080041bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041bc:	b480      	push	{r7}
 80041be:	b089      	sub	sp, #36	; 0x24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d8:	4413      	add	r3, r2
 80041da:	041b      	lsls	r3, r3, #16
 80041dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	01db      	lsls	r3, r3, #7
 80041e8:	4413      	add	r3, r2
 80041ea:	3384      	adds	r3, #132	; 0x84
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	4611      	mov	r1, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	01d2      	lsls	r2, r2, #7
 80041f8:	440a      	add	r2, r1
 80041fa:	3284      	adds	r2, #132	; 0x84
 80041fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004200:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004212:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004214:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4619      	mov	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	01db      	lsls	r3, r3, #7
 8004220:	440b      	add	r3, r1
 8004222:	3384      	adds	r3, #132	; 0x84
 8004224:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800422a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423a:	4413      	add	r3, r2
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	01db      	lsls	r3, r3, #7
 800424a:	4413      	add	r3, r2
 800424c:	3384      	adds	r3, #132	; 0x84
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4611      	mov	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	01d2      	lsls	r2, r2, #7
 800425a:	440a      	add	r2, r1
 800425c:	3284      	adds	r2, #132	; 0x84
 800425e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004262:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004272:	4413      	add	r3, r2
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	01db      	lsls	r3, r3, #7
 8004280:	440b      	add	r3, r1
 8004282:	3384      	adds	r3, #132	; 0x84
 8004284:	4619      	mov	r1, r3
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4313      	orrs	r3, r2
 800428a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	01db      	lsls	r3, r3, #7
 8004296:	4413      	add	r3, r2
 8004298:	3384      	adds	r3, #132	; 0x84
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	4611      	mov	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	01d2      	lsls	r2, r2, #7
 80042a6:	440a      	add	r2, r1
 80042a8:	3284      	adds	r2, #132	; 0x84
 80042aa:	f023 0307 	bic.w	r3, r3, #7
 80042ae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	01db      	lsls	r3, r3, #7
 80042ba:	4413      	add	r3, r2
 80042bc:	3384      	adds	r3, #132	; 0x84
 80042be:	461a      	mov	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042d6:	041b      	lsls	r3, r3, #16
 80042d8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	01db      	lsls	r3, r3, #7
 80042ec:	4413      	add	r3, r2
 80042ee:	3384      	adds	r3, #132	; 0x84
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	01db      	lsls	r3, r3, #7
 80042fc:	4413      	add	r3, r2
 80042fe:	3384      	adds	r3, #132	; 0x84
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800430c:	461a      	mov	r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	431a      	orrs	r2, r3
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	431a      	orrs	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4619      	mov	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	01db      	lsls	r3, r3, #7
 8004320:	440b      	add	r3, r1
 8004322:	3384      	adds	r3, #132	; 0x84
 8004324:	4619      	mov	r1, r3
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	01db      	lsls	r3, r3, #7
 8004336:	4413      	add	r3, r2
 8004338:	3384      	adds	r3, #132	; 0x84
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	4611      	mov	r1, r2
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	01d2      	lsls	r2, r2, #7
 8004346:	440a      	add	r2, r1
 8004348:	3284      	adds	r2, #132	; 0x84
 800434a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800434e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	01db      	lsls	r3, r3, #7
 800435a:	4413      	add	r3, r2
 800435c:	3384      	adds	r3, #132	; 0x84
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	01db      	lsls	r3, r3, #7
 8004370:	4413      	add	r3, r2
 8004372:	3384      	adds	r3, #132	; 0x84
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	4611      	mov	r1, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	01d2      	lsls	r2, r2, #7
 8004380:	440a      	add	r2, r1
 8004382:	3284      	adds	r2, #132	; 0x84
 8004384:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004388:	f023 0307 	bic.w	r3, r3, #7
 800438c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	69da      	ldr	r2, [r3, #28]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	68f9      	ldr	r1, [r7, #12]
 8004398:	6809      	ldr	r1, [r1, #0]
 800439a:	4608      	mov	r0, r1
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	01c9      	lsls	r1, r1, #7
 80043a0:	4401      	add	r1, r0
 80043a2:	3184      	adds	r1, #132	; 0x84
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	01db      	lsls	r3, r3, #7
 80043b2:	4413      	add	r3, r2
 80043b4:	3384      	adds	r3, #132	; 0x84
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	01db      	lsls	r3, r3, #7
 80043c2:	4413      	add	r3, r2
 80043c4:	3384      	adds	r3, #132	; 0x84
 80043c6:	461a      	mov	r2, r3
 80043c8:	2300      	movs	r3, #0
 80043ca:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	01db      	lsls	r3, r3, #7
 80043d6:	4413      	add	r3, r2
 80043d8:	3384      	adds	r3, #132	; 0x84
 80043da:	461a      	mov	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80043ea:	2304      	movs	r3, #4
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e01b      	b.n	8004428 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d102      	bne.n	80043fe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80043f8:	2303      	movs	r3, #3
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e014      	b.n	8004428 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b04      	cmp	r3, #4
 8004404:	d00b      	beq.n	800441e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800440a:	2b02      	cmp	r3, #2
 800440c:	d007      	beq.n	800441e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004412:	2b03      	cmp	r3, #3
 8004414:	d003      	beq.n	800441e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800441a:	2b07      	cmp	r3, #7
 800441c:	d102      	bne.n	8004424 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800441e:	2302      	movs	r3, #2
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	e001      	b.n	8004428 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004424:	2301      	movs	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	01db      	lsls	r3, r3, #7
 8004432:	4413      	add	r3, r2
 8004434:	3384      	adds	r3, #132	; 0x84
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	4611      	mov	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	01d2      	lsls	r2, r2, #7
 8004442:	440a      	add	r2, r1
 8004444:	3284      	adds	r2, #132	; 0x84
 8004446:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800444a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	1acb      	subs	r3, r1, r3
 8004462:	69f9      	ldr	r1, [r7, #28]
 8004464:	fb01 f303 	mul.w	r3, r1, r3
 8004468:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	6809      	ldr	r1, [r1, #0]
 800446e:	4608      	mov	r0, r1
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	01c9      	lsls	r1, r1, #7
 8004474:	4401      	add	r1, r0
 8004476:	3184      	adds	r1, #132	; 0x84
 8004478:	4313      	orrs	r3, r2
 800447a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	01db      	lsls	r3, r3, #7
 8004486:	4413      	add	r3, r2
 8004488:	3384      	adds	r3, #132	; 0x84
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	4611      	mov	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	01d2      	lsls	r2, r2, #7
 8004496:	440a      	add	r2, r1
 8004498:	3284      	adds	r2, #132	; 0x84
 800449a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	01db      	lsls	r3, r3, #7
 80044ae:	4413      	add	r3, r2
 80044b0:	3384      	adds	r3, #132	; 0x84
 80044b2:	461a      	mov	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	01db      	lsls	r3, r3, #7
 80044c4:	4413      	add	r3, r2
 80044c6:	3384      	adds	r3, #132	; 0x84
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	4611      	mov	r1, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	01d2      	lsls	r2, r2, #7
 80044d4:	440a      	add	r2, r1
 80044d6:	3284      	adds	r2, #132	; 0x84
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6013      	str	r3, [r2, #0]
}
 80044de:	bf00      	nop
 80044e0:	3724      	adds	r7, #36	; 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e267      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d075      	beq.n	80045f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800450a:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b04      	cmp	r3, #4
 8004514:	d00c      	beq.n	8004530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004516:	4b85      	ldr	r3, [pc, #532]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800451e:	2b08      	cmp	r3, #8
 8004520:	d112      	bne.n	8004548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004522:	4b82      	ldr	r3, [pc, #520]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452e:	d10b      	bne.n	8004548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	4b7e      	ldr	r3, [pc, #504]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d05b      	beq.n	80045f4 <HAL_RCC_OscConfig+0x108>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d157      	bne.n	80045f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e242      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x74>
 8004552:	4b76      	ldr	r3, [pc, #472]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a75      	ldr	r2, [pc, #468]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e01d      	b.n	800459c <HAL_RCC_OscConfig+0xb0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004568:	d10c      	bne.n	8004584 <HAL_RCC_OscConfig+0x98>
 800456a:	4b70      	ldr	r3, [pc, #448]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a6f      	ldr	r2, [pc, #444]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b6d      	ldr	r3, [pc, #436]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a6c      	ldr	r2, [pc, #432]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e00b      	b.n	800459c <HAL_RCC_OscConfig+0xb0>
 8004584:	4b69      	ldr	r3, [pc, #420]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a68      	ldr	r2, [pc, #416]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800458a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b66      	ldr	r3, [pc, #408]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a65      	ldr	r2, [pc, #404]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d013      	beq.n	80045cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fe fe28 	bl	80031f8 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fe fe24 	bl	80031f8 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e207      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	4b5b      	ldr	r3, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0xc0>
 80045ca:	e014      	b.n	80045f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fe fe14 	bl	80031f8 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fe fe10 	bl	80031f8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e1f3      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	4b51      	ldr	r3, [pc, #324]	; (800472c <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f0      	bne.n	80045d4 <HAL_RCC_OscConfig+0xe8>
 80045f2:	e000      	b.n	80045f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d063      	beq.n	80046ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004602:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004616:	2b08      	cmp	r3, #8
 8004618:	d11c      	bne.n	8004654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461a:	4b44      	ldr	r3, [pc, #272]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d116      	bne.n	8004654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	4b41      	ldr	r3, [pc, #260]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_RCC_OscConfig+0x152>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e1c7      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463e:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	4937      	ldr	r1, [pc, #220]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004652:	e03a      	b.n	80046ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d020      	beq.n	800469e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800465c:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCC_OscConfig+0x244>)
 800465e:	2201      	movs	r2, #1
 8004660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fe fdc9 	bl	80031f8 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466a:	f7fe fdc5 	bl	80031f8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e1a8      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <HAL_RCC_OscConfig+0x240>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4925      	ldr	r1, [pc, #148]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]
 800469c:	e015      	b.n	80046ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469e:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_RCC_OscConfig+0x244>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe fda8 	bl	80031f8 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fe fda4 	bl	80031f8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e187      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	4b1b      	ldr	r3, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x240>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d036      	beq.n	8004744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046de:	4b15      	ldr	r3, [pc, #84]	; (8004734 <HAL_RCC_OscConfig+0x248>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fe fd88 	bl	80031f8 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fe fd84 	bl	80031f8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e167      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_OscConfig+0x240>)
 8004700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x200>
 800470a:	e01b      	b.n	8004744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCC_OscConfig+0x248>)
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004712:	f7fe fd71 	bl	80031f8 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004718:	e00e      	b.n	8004738 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800471a:	f7fe fd6d 	bl	80031f8 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d907      	bls.n	8004738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e150      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
 800472c:	40023800 	.word	0x40023800
 8004730:	42470000 	.word	0x42470000
 8004734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	4b88      	ldr	r3, [pc, #544]	; (800495c <HAL_RCC_OscConfig+0x470>)
 800473a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1ea      	bne.n	800471a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 8097 	beq.w	8004880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004756:	4b81      	ldr	r3, [pc, #516]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	4b7d      	ldr	r3, [pc, #500]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	4a7c      	ldr	r2, [pc, #496]	; (800495c <HAL_RCC_OscConfig+0x470>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004770:	6413      	str	r3, [r2, #64]	; 0x40
 8004772:	4b7a      	ldr	r3, [pc, #488]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477e:	2301      	movs	r3, #1
 8004780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004782:	4b77      	ldr	r3, [pc, #476]	; (8004960 <HAL_RCC_OscConfig+0x474>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d118      	bne.n	80047c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478e:	4b74      	ldr	r3, [pc, #464]	; (8004960 <HAL_RCC_OscConfig+0x474>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a73      	ldr	r2, [pc, #460]	; (8004960 <HAL_RCC_OscConfig+0x474>)
 8004794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479a:	f7fe fd2d 	bl	80031f8 <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7fe fd29 	bl	80031f8 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e10c      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x474>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d106      	bne.n	80047d6 <HAL_RCC_OscConfig+0x2ea>
 80047c8:	4b64      	ldr	r3, [pc, #400]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a63      	ldr	r2, [pc, #396]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
 80047d4:	e01c      	b.n	8004810 <HAL_RCC_OscConfig+0x324>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b05      	cmp	r3, #5
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCC_OscConfig+0x30c>
 80047de:	4b5f      	ldr	r3, [pc, #380]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	4a5e      	ldr	r2, [pc, #376]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ea:	4b5c      	ldr	r3, [pc, #368]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	4a5b      	ldr	r2, [pc, #364]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6713      	str	r3, [r2, #112]	; 0x70
 80047f6:	e00b      	b.n	8004810 <HAL_RCC_OscConfig+0x324>
 80047f8:	4b58      	ldr	r3, [pc, #352]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	4a57      	ldr	r2, [pc, #348]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	6713      	str	r3, [r2, #112]	; 0x70
 8004804:	4b55      	ldr	r3, [pc, #340]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a54      	ldr	r2, [pc, #336]	; (800495c <HAL_RCC_OscConfig+0x470>)
 800480a:	f023 0304 	bic.w	r3, r3, #4
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d015      	beq.n	8004844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fe fcee 	bl	80031f8 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fe fcea 	bl	80031f8 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0cb      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	4b49      	ldr	r3, [pc, #292]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0ee      	beq.n	8004820 <HAL_RCC_OscConfig+0x334>
 8004842:	e014      	b.n	800486e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004844:	f7fe fcd8 	bl	80031f8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484a:	e00a      	b.n	8004862 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484c:	f7fe fcd4 	bl	80031f8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	f241 3288 	movw	r2, #5000	; 0x1388
 800485a:	4293      	cmp	r3, r2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0b5      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004862:	4b3e      	ldr	r3, [pc, #248]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1ee      	bne.n	800484c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800486e:	7dfb      	ldrb	r3, [r7, #23]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d105      	bne.n	8004880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004874:	4b39      	ldr	r3, [pc, #228]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	4a38      	ldr	r2, [pc, #224]	; (800495c <HAL_RCC_OscConfig+0x470>)
 800487a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80a1 	beq.w	80049cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <HAL_RCC_OscConfig+0x470>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	2b08      	cmp	r3, #8
 8004894:	d05c      	beq.n	8004950 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d141      	bne.n	8004922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCC_OscConfig+0x478>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a4:	f7fe fca8 	bl	80031f8 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ac:	f7fe fca4 	bl	80031f8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e087      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048be:	4b27      	ldr	r3, [pc, #156]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	019b      	lsls	r3, r3, #6
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	3b01      	subs	r3, #1
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	491b      	ldr	r1, [pc, #108]	; (800495c <HAL_RCC_OscConfig+0x470>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_RCC_OscConfig+0x478>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fa:	f7fe fc7d 	bl	80031f8 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004902:	f7fe fc79 	bl	80031f8 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e05c      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004914:	4b11      	ldr	r3, [pc, #68]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x416>
 8004920:	e054      	b.n	80049cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <HAL_RCC_OscConfig+0x478>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fe fc66 	bl	80031f8 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004930:	f7fe fc62 	bl	80031f8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e045      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCC_OscConfig+0x470>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x444>
 800494e:	e03d      	b.n	80049cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d107      	bne.n	8004968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e038      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
 800495c:	40023800 	.word	0x40023800
 8004960:	40007000 	.word	0x40007000
 8004964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <HAL_RCC_OscConfig+0x4ec>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d028      	beq.n	80049c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d121      	bne.n	80049c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d11a      	bne.n	80049c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800499e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d111      	bne.n	80049c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	3b01      	subs	r3, #1
 80049b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800

080049dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0cc      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049f0:	4b68      	ldr	r3, [pc, #416]	; (8004b94 <HAL_RCC_ClockConfig+0x1b8>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 030f 	and.w	r3, r3, #15
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d90c      	bls.n	8004a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049fe:	4b65      	ldr	r3, [pc, #404]	; (8004b94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a06:	4b63      	ldr	r3, [pc, #396]	; (8004b94 <HAL_RCC_ClockConfig+0x1b8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0b8      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d020      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0304 	and.w	r3, r3, #4
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a30:	4b59      	ldr	r3, [pc, #356]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	4a58      	ldr	r2, [pc, #352]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a48:	4b53      	ldr	r3, [pc, #332]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a52      	ldr	r2, [pc, #328]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a54:	4b50      	ldr	r3, [pc, #320]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	494d      	ldr	r1, [pc, #308]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d044      	beq.n	8004afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d107      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e07f      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d003      	beq.n	8004a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d107      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9a:	4b3f      	ldr	r3, [pc, #252]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e06f      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aaa:	4b3b      	ldr	r3, [pc, #236]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e067      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 0203 	bic.w	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4934      	ldr	r1, [pc, #208]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004acc:	f7fe fb94 	bl	80031f8 <HAL_GetTick>
 8004ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	e00a      	b.n	8004aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad4:	f7fe fb90 	bl	80031f8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e04f      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 020c 	and.w	r2, r3, #12
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d1eb      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <HAL_RCC_ClockConfig+0x1b8>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d20c      	bcs.n	8004b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	b2d2      	uxtb	r2, r2
 8004b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b20      	ldr	r3, [pc, #128]	; (8004b94 <HAL_RCC_ClockConfig+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e032      	b.n	8004b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b30:	4b19      	ldr	r3, [pc, #100]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4916      	ldr	r1, [pc, #88]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b4e:	4b12      	ldr	r3, [pc, #72]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	490e      	ldr	r1, [pc, #56]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b62:	f000 f821 	bl	8004ba8 <HAL_RCC_GetSysClockFreq>
 8004b66:	4602      	mov	r2, r0
 8004b68:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	490a      	ldr	r1, [pc, #40]	; (8004b9c <HAL_RCC_ClockConfig+0x1c0>)
 8004b74:	5ccb      	ldrb	r3, [r1, r3]
 8004b76:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7a:	4a09      	ldr	r2, [pc, #36]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe faf4 	bl	8003170 <HAL_InitTick>

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023c00 	.word	0x40023c00
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	0800ef5c 	.word	0x0800ef5c
 8004ba0:	20000014 	.word	0x20000014
 8004ba4:	20000018 	.word	0x20000018

08004ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bac:	b094      	sub	sp, #80	; 0x50
 8004bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb8:	2300      	movs	r3, #0
 8004bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bc0:	4b79      	ldr	r3, [pc, #484]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d00d      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	f200 80e1 	bhi.w	8004d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x34>
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bda:	e0db      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4b73      	ldr	r3, [pc, #460]	; (8004dac <HAL_RCC_GetSysClockFreq+0x204>)
 8004bde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004be0:	e0db      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004be2:	4b73      	ldr	r3, [pc, #460]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004be6:	e0d8      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be8:	4b6f      	ldr	r3, [pc, #444]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bf2:	4b6d      	ldr	r3, [pc, #436]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d063      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfe:	4b6a      	ldr	r3, [pc, #424]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	099b      	lsrs	r3, r3, #6
 8004c04:	2200      	movs	r2, #0
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
 8004c12:	2300      	movs	r3, #0
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
 8004c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	f04f 0000 	mov.w	r0, #0
 8004c22:	f04f 0100 	mov.w	r1, #0
 8004c26:	0159      	lsls	r1, r3, #5
 8004c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c2c:	0150      	lsls	r0, r2, #5
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4621      	mov	r1, r4
 8004c34:	1a51      	subs	r1, r2, r1
 8004c36:	6139      	str	r1, [r7, #16]
 8004c38:	4629      	mov	r1, r5
 8004c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c4c:	4659      	mov	r1, fp
 8004c4e:	018b      	lsls	r3, r1, #6
 8004c50:	4651      	mov	r1, sl
 8004c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c56:	4651      	mov	r1, sl
 8004c58:	018a      	lsls	r2, r1, #6
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8004c60:	4659      	mov	r1, fp
 8004c62:	eb63 0901 	sbc.w	r9, r3, r1
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c7a:	4690      	mov	r8, r2
 8004c7c:	4699      	mov	r9, r3
 8004c7e:	4623      	mov	r3, r4
 8004c80:	eb18 0303 	adds.w	r3, r8, r3
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	462b      	mov	r3, r5
 8004c88:	eb49 0303 	adc.w	r3, r9, r3
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	024b      	lsls	r3, r1, #9
 8004c9e:	4621      	mov	r1, r4
 8004ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	024a      	lsls	r2, r1, #9
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4619      	mov	r1, r3
 8004cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cae:	2200      	movs	r2, #0
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cb8:	f7fb fb3a 	bl	8000330 <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc4:	e058      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc6:	4b38      	ldr	r3, [pc, #224]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cd6:	623b      	str	r3, [r7, #32]
 8004cd8:	2300      	movs	r3, #0
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
 8004cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	464b      	mov	r3, r9
 8004ce4:	f04f 0000 	mov.w	r0, #0
 8004ce8:	f04f 0100 	mov.w	r1, #0
 8004cec:	0159      	lsls	r1, r3, #5
 8004cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf2:	0150      	lsls	r0, r2, #5
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cfe:	4649      	mov	r1, r9
 8004d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d18:	ebb2 040a 	subs.w	r4, r2, sl
 8004d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8004d20:	f04f 0200 	mov.w	r2, #0
 8004d24:	f04f 0300 	mov.w	r3, #0
 8004d28:	00eb      	lsls	r3, r5, #3
 8004d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	4614      	mov	r4, r2
 8004d32:	461d      	mov	r5, r3
 8004d34:	4643      	mov	r3, r8
 8004d36:	18e3      	adds	r3, r4, r3
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	eb45 0303 	adc.w	r3, r5, r3
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f04f 0300 	mov.w	r3, #0
 8004d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d4e:	4629      	mov	r1, r5
 8004d50:	028b      	lsls	r3, r1, #10
 8004d52:	4621      	mov	r1, r4
 8004d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d58:	4621      	mov	r1, r4
 8004d5a:	028a      	lsls	r2, r1, #10
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d62:	2200      	movs	r2, #0
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	61fa      	str	r2, [r7, #28]
 8004d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d6c:	f7fb fae0 	bl	8000330 <__aeabi_uldivmod>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4613      	mov	r3, r2
 8004d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d78:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	3301      	adds	r3, #1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCC_GetSysClockFreq+0x204>)
 8004d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3750      	adds	r7, #80	; 0x50
 8004da0:	46bd      	mov	sp, r7
 8004da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	007a1200 	.word	0x007a1200

08004db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db8:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dba:	681b      	ldr	r3, [r3, #0]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000014 	.word	0x20000014

08004dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dd0:	f7ff fff0 	bl	8004db4 <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0a9b      	lsrs	r3, r3, #10
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	; (8004df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	0800ef6c 	.word	0x0800ef6c

08004df4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d075      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e28:	4b91      	ldr	r3, [pc, #580]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e2e:	f7fe f9e3 	bl	80031f8 <HAL_GetTick>
 8004e32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e36:	f7fe f9df 	bl	80031f8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e189      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e48:	4b8a      	ldr	r3, [pc, #552]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f0      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	019a      	lsls	r2, r3, #6
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	071b      	lsls	r3, r3, #28
 8004e6c:	4981      	ldr	r1, [pc, #516]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d01f      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e80:	4b7c      	ldr	r3, [pc, #496]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e86:	0f1b      	lsrs	r3, r3, #28
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	019a      	lsls	r2, r3, #6
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	071b      	lsls	r3, r3, #28
 8004ea0:	4974      	ldr	r1, [pc, #464]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ea8:	4b72      	ldr	r3, [pc, #456]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eae:	f023 021f 	bic.w	r2, r3, #31
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	496e      	ldr	r1, [pc, #440]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00d      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	019a      	lsls	r2, r3, #6
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	071b      	lsls	r3, r3, #28
 8004ee0:	4964      	ldr	r1, [pc, #400]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ee8:	4b61      	ldr	r3, [pc, #388]	; (8005070 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004eea:	2201      	movs	r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eee:	f7fe f983 	bl	80031f8 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ef6:	f7fe f97f 	bl	80031f8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e129      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f08:	4b5a      	ldr	r3, [pc, #360]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d079      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f2c:	4b52      	ldr	r3, [pc, #328]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f32:	f7fe f961 	bl	80031f8 <HAL_GetTick>
 8004f36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f3a:	f7fe f95d 	bl	80031f8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e107      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f4c:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f58:	d0ef      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d020      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f66:	4b43      	ldr	r3, [pc, #268]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	0f1b      	lsrs	r3, r3, #28
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	019a      	lsls	r2, r3, #6
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	061b      	lsls	r3, r3, #24
 8004f80:	431a      	orrs	r2, r3
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	071b      	lsls	r3, r3, #28
 8004f86:	493b      	ldr	r1, [pc, #236]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f8e:	4b39      	ldr	r3, [pc, #228]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	4934      	ldr	r1, [pc, #208]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d01e      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fb4:	4b2f      	ldr	r3, [pc, #188]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	0e1b      	lsrs	r3, r3, #24
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	019a      	lsls	r2, r3, #6
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	071b      	lsls	r3, r3, #28
 8004fd4:	4927      	ldr	r1, [pc, #156]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	4922      	ldr	r1, [pc, #136]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ff2:	4b21      	ldr	r3, [pc, #132]	; (8005078 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ff8:	f7fe f8fe 	bl	80031f8 <HAL_GetTick>
 8004ffc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005000:	f7fe f8fa 	bl	80031f8 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e0a4      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005012:	4b18      	ldr	r3, [pc, #96]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800501a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501e:	d1ef      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 808b 	beq.w	8005144 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	4b10      	ldr	r3, [pc, #64]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	4a0f      	ldr	r2, [pc, #60]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503c:	6413      	str	r3, [r2, #64]	; 0x40
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800504a:	4b0c      	ldr	r3, [pc, #48]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a0b      	ldr	r2, [pc, #44]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005056:	f7fe f8cf 	bl	80031f8 <HAL_GetTick>
 800505a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800505c:	e010      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800505e:	f7fe f8cb 	bl	80031f8 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d909      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e075      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005070:	42470068 	.word	0x42470068
 8005074:	40023800 	.word	0x40023800
 8005078:	42470070 	.word	0x42470070
 800507c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005080:	4b38      	ldr	r3, [pc, #224]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0e8      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800508c:	4b36      	ldr	r3, [pc, #216]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005094:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02f      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d028      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050aa:	4b2f      	ldr	r3, [pc, #188]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050b4:	4b2d      	ldr	r3, [pc, #180]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d114      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050d2:	f7fe f891 	bl	80031f8 <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d8:	e00a      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fe f88d 	bl	80031f8 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d901      	bls.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e035      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0ee      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005108:	d10d      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800510a:	4b17      	ldr	r3, [pc, #92]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800511a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511e:	4912      	ldr	r1, [pc, #72]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]
 8005124:	e005      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800512c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005134:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800513e:	490a      	ldr	r1, [pc, #40]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005140:	4313      	orrs	r3, r2
 8005142:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005158:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40007000 	.word	0x40007000
 8005168:	40023800 	.word	0x40023800
 800516c:	42470e40 	.word	0x42470e40
 8005170:	424711e0 	.word	0x424711e0

08005174 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e025      	b.n	80051d4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fd fe97 	bl	8002ed0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 fedf 	bl	8005f78 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	461a      	mov	r2, r3
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	f000 ff34 	bl	8006032 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e07b      	b.n	80052e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d108      	bne.n	8005208 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fe:	d009      	beq.n	8005214 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	61da      	str	r2, [r3, #28]
 8005206:	e005      	b.n	8005214 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fd fd34 	bl	8002c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	ea42 0103 	orr.w	r1, r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0104 	and.w	r1, r3, #4
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	f003 0210 	and.w	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e01a      	b.n	8005336 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005316:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7fd fd07 	bl	8002d2c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b088      	sub	sp, #32
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4613      	mov	r3, r2
 800534c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_SPI_Transmit+0x22>
 800535c:	2302      	movs	r3, #2
 800535e:	e126      	b.n	80055ae <HAL_SPI_Transmit+0x270>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005368:	f7fd ff46 	bl	80031f8 <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	d002      	beq.n	8005384 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800537e:	2302      	movs	r3, #2
 8005380:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005382:	e10b      	b.n	800559c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_Transmit+0x52>
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005394:	e102      	b.n	800559c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	88fa      	ldrh	r2, [r7, #6]
 80053ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	88fa      	ldrh	r2, [r7, #6]
 80053b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053dc:	d10f      	bne.n	80053fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d007      	beq.n	800541c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005424:	d14b      	bne.n	80054be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_Transmit+0xf6>
 800542e:	8afb      	ldrh	r3, [r7, #22]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d13e      	bne.n	80054b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005458:	e02b      	b.n	80054b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d112      	bne.n	800548e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	881a      	ldrh	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	1c9a      	adds	r2, r3, #2
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005482:	b29b      	uxth	r3, r3
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	86da      	strh	r2, [r3, #54]	; 0x36
 800548c:	e011      	b.n	80054b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548e:	f7fd feb3 	bl	80031f8 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d803      	bhi.n	80054a6 <HAL_SPI_Transmit+0x168>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_Transmit+0x16e>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d102      	bne.n	80054b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054b0:	e074      	b.n	800559c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1ce      	bne.n	800545a <HAL_SPI_Transmit+0x11c>
 80054bc:	e04c      	b.n	8005558 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <HAL_SPI_Transmit+0x18e>
 80054c6:	8afb      	ldrh	r3, [r7, #22]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d140      	bne.n	800554e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	330c      	adds	r3, #12
 80054d6:	7812      	ldrb	r2, [r2, #0]
 80054d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	3b01      	subs	r3, #1
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054f2:	e02c      	b.n	800554e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d113      	bne.n	800552a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	7812      	ldrb	r2, [r2, #0]
 800550e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	86da      	strh	r2, [r3, #54]	; 0x36
 8005528:	e011      	b.n	800554e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800552a:	f7fd fe65 	bl	80031f8 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d803      	bhi.n	8005542 <HAL_SPI_Transmit+0x204>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d102      	bne.n	8005548 <HAL_SPI_Transmit+0x20a>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800554c:	e026      	b.n	800559c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1cd      	bne.n	80054f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 fbd9 	bl	8005d14 <SPI_EndRxTxTransaction>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10a      	bne.n	800558c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005576:	2300      	movs	r3, #0
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e000      	b.n	800559c <HAL_SPI_Transmit+0x25e>
  }

error:
 800559a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3720      	adds	r7, #32
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b088      	sub	sp, #32
 80055ba:	af02      	add	r7, sp, #8
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055d2:	d112      	bne.n	80055fa <HAL_SPI_Receive+0x44>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10e      	bne.n	80055fa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2204      	movs	r2, #4
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 f8f1 	bl	80057d8 <HAL_SPI_TransmitReceive>
 80055f6:	4603      	mov	r3, r0
 80055f8:	e0ea      	b.n	80057d0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_SPI_Receive+0x52>
 8005604:	2302      	movs	r3, #2
 8005606:	e0e3      	b.n	80057d0 <HAL_SPI_Receive+0x21a>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005610:	f7fd fdf2 	bl	80031f8 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b01      	cmp	r3, #1
 8005620:	d002      	beq.n	8005628 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005622:	2302      	movs	r3, #2
 8005624:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005626:	e0ca      	b.n	80057be <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Receive+0x7e>
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d102      	bne.n	800563a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005638:	e0c1      	b.n	80057be <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2204      	movs	r2, #4
 800563e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	88fa      	ldrh	r2, [r7, #6]
 8005652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	88fa      	ldrh	r2, [r7, #6]
 8005658:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	d10f      	bne.n	80056a2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005690:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d007      	beq.n	80056c0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d162      	bne.n	800578e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056c8:	e02e      	b.n	8005728 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d115      	bne.n	8005704 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f103 020c 	add.w	r2, r3, #12
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005702:	e011      	b.n	8005728 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005704:	f7fd fd78 	bl	80031f8 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d803      	bhi.n	800571c <HAL_SPI_Receive+0x166>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d102      	bne.n	8005722 <HAL_SPI_Receive+0x16c>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d102      	bne.n	8005728 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005726:	e04a      	b.n	80057be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1cb      	bne.n	80056ca <HAL_SPI_Receive+0x114>
 8005732:	e031      	b.n	8005798 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d113      	bne.n	800576a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	b292      	uxth	r2, r2
 800574e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	1c9a      	adds	r2, r3, #2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005768:	e011      	b.n	800578e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576a:	f7fd fd45 	bl	80031f8 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d803      	bhi.n	8005782 <HAL_SPI_Receive+0x1cc>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005780:	d102      	bne.n	8005788 <HAL_SPI_Receive+0x1d2>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800578c:	e017      	b.n	80057be <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1cd      	bne.n	8005734 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fa53 	bl	8005c48 <SPI_EndRxTransaction>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
 80057ba:	e000      	b.n	80057be <HAL_SPI_Receive+0x208>
  }

error :
 80057bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08c      	sub	sp, #48	; 0x30
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057e6:	2301      	movs	r3, #1
 80057e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_SPI_TransmitReceive+0x26>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e18a      	b.n	8005b14 <HAL_SPI_TransmitReceive+0x33c>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005806:	f7fd fcf7 	bl	80031f8 <HAL_GetTick>
 800580a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005824:	2b01      	cmp	r3, #1
 8005826:	d00f      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x70>
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582e:	d107      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <HAL_SPI_TransmitReceive+0x68>
 8005838:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800583c:	2b04      	cmp	r3, #4
 800583e:	d003      	beq.n	8005848 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005840:	2302      	movs	r3, #2
 8005842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005846:	e15b      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_SPI_TransmitReceive+0x82>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_SPI_TransmitReceive+0x82>
 8005854:	887b      	ldrh	r3, [r7, #2]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005860:	e14e      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b04      	cmp	r3, #4
 800586c:	d003      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2205      	movs	r2, #5
 8005872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	887a      	ldrh	r2, [r7, #2]
 8005886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	887a      	ldrh	r2, [r7, #2]
 8005898:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	887a      	ldrh	r2, [r7, #2]
 800589e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d007      	beq.n	80058ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d2:	d178      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_SPI_TransmitReceive+0x10a>
 80058dc:	8b7b      	ldrh	r3, [r7, #26]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d166      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	881a      	ldrh	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f2:	1c9a      	adds	r2, r3, #2
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005906:	e053      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d11b      	bne.n	800594e <HAL_SPI_TransmitReceive+0x176>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d016      	beq.n	800594e <HAL_SPI_TransmitReceive+0x176>
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d113      	bne.n	800594e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d119      	bne.n	8005990 <HAL_SPI_TransmitReceive+0x1b8>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	b292      	uxth	r2, r2
 8005972:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	1c9a      	adds	r2, r3, #2
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800598c:	2301      	movs	r3, #1
 800598e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005990:	f7fd fc32 	bl	80031f8 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800599c:	429a      	cmp	r2, r3
 800599e:	d807      	bhi.n	80059b0 <HAL_SPI_TransmitReceive+0x1d8>
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d003      	beq.n	80059b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059ae:	e0a7      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1a6      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x130>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1a1      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x130>
 80059c4:	e07c      	b.n	8005ac0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x1fc>
 80059ce:	8b7b      	ldrh	r3, [r7, #26]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d16b      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	330c      	adds	r3, #12
 80059de:	7812      	ldrb	r2, [r2, #0]
 80059e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059fa:	e057      	b.n	8005aac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d11c      	bne.n	8005a44 <HAL_SPI_TransmitReceive+0x26c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d017      	beq.n	8005a44 <HAL_SPI_TransmitReceive+0x26c>
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d114      	bne.n	8005a44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d119      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x2ae>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d014      	beq.n	8005a86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6e:	1c5a      	adds	r2, r3, #1
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a82:	2301      	movs	r3, #1
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a86:	f7fd fbb7 	bl	80031f8 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d803      	bhi.n	8005a9e <HAL_SPI_TransmitReceive+0x2c6>
 8005a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d102      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x2cc>
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d103      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005aaa:	e029      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1a2      	bne.n	80059fc <HAL_SPI_TransmitReceive+0x224>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d19d      	bne.n	80059fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f925 	bl	8005d14 <SPI_EndRxTxTransaction>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d006      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005adc:	e010      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10b      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	e000      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005afe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3730      	adds	r7, #48	; 0x30
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b2a:	b2db      	uxtb	r3, r3
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b088      	sub	sp, #32
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b48:	f7fd fb56 	bl	80031f8 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b50:	1a9b      	subs	r3, r3, r2
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b58:	f7fd fb4e 	bl	80031f8 <HAL_GetTick>
 8005b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b5e:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	015b      	lsls	r3, r3, #5
 8005b64:	0d1b      	lsrs	r3, r3, #20
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	fb02 f303 	mul.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b6e:	e054      	b.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b76:	d050      	beq.n	8005c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b78:	f7fd fb3e 	bl	80031f8 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d902      	bls.n	8005b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d13d      	bne.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ba6:	d111      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	d004      	beq.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d107      	bne.n	8005bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd4:	d10f      	bne.n	8005bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e017      	b.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d19b      	bne.n	8005b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000014 	.word	0x20000014

08005c48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5c:	d111      	bne.n	8005c82 <SPI_EndRxTransaction+0x3a>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c66:	d004      	beq.n	8005c72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c70:	d107      	bne.n	8005c82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8a:	d12a      	bne.n	8005ce2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c94:	d012      	beq.n	8005cbc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f7ff ff49 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d02d      	beq.n	8005d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb0:	f043 0220 	orr.w	r2, r3, #32
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e026      	b.n	8005d0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f7ff ff36 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01a      	beq.n	8005d08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd6:	f043 0220 	orr.w	r2, r3, #32
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e013      	b.n	8005d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2101      	movs	r1, #1
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff ff23 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfc:	f043 0220 	orr.w	r2, r3, #32
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e000      	b.n	8005d0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af02      	add	r7, sp, #8
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d20:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <SPI_EndRxTxTransaction+0x7c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	; (8005d94 <SPI_EndRxTxTransaction+0x80>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	0d5b      	lsrs	r3, r3, #21
 8005d2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d30:	fb02 f303 	mul.w	r3, r2, r3
 8005d34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d3e:	d112      	bne.n	8005d66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2180      	movs	r1, #128	; 0x80
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff fef4 	bl	8005b38 <SPI_WaitFlagStateUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d016      	beq.n	8005d84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5a:	f043 0220 	orr.w	r2, r3, #32
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e00f      	b.n	8005d86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d7c:	2b80      	cmp	r3, #128	; 0x80
 8005d7e:	d0f2      	beq.n	8005d66 <SPI_EndRxTxTransaction+0x52>
 8005d80:	e000      	b.n	8005d84 <SPI_EndRxTxTransaction+0x70>
        break;
 8005d82:	bf00      	nop
  }

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	20000014 	.word	0x20000014
 8005d94:	165e9f81 	.word	0x165e9f81

08005d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e041      	b.n	8005e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fc ffd2 	bl	8002d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f000 f82e 	bl	8005e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a40      	ldr	r2, [pc, #256]	; (8005f4c <TIM_Base_SetConfig+0x114>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d013      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e56:	d00f      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a3d      	ldr	r2, [pc, #244]	; (8005f50 <TIM_Base_SetConfig+0x118>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00b      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a3c      	ldr	r2, [pc, #240]	; (8005f54 <TIM_Base_SetConfig+0x11c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a3b      	ldr	r2, [pc, #236]	; (8005f58 <TIM_Base_SetConfig+0x120>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3a      	ldr	r2, [pc, #232]	; (8005f5c <TIM_Base_SetConfig+0x124>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d108      	bne.n	8005e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a2f      	ldr	r2, [pc, #188]	; (8005f4c <TIM_Base_SetConfig+0x114>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d02b      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e98:	d027      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a2c      	ldr	r2, [pc, #176]	; (8005f50 <TIM_Base_SetConfig+0x118>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d023      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2b      	ldr	r2, [pc, #172]	; (8005f54 <TIM_Base_SetConfig+0x11c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01f      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <TIM_Base_SetConfig+0x120>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d01b      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a29      	ldr	r2, [pc, #164]	; (8005f5c <TIM_Base_SetConfig+0x124>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d017      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a28      	ldr	r2, [pc, #160]	; (8005f60 <TIM_Base_SetConfig+0x128>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <TIM_Base_SetConfig+0x12c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00f      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a26      	ldr	r2, [pc, #152]	; (8005f68 <TIM_Base_SetConfig+0x130>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00b      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <TIM_Base_SetConfig+0x134>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d007      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <TIM_Base_SetConfig+0x138>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d003      	beq.n	8005eea <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <TIM_Base_SetConfig+0x13c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d108      	bne.n	8005efc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a0a      	ldr	r2, [pc, #40]	; (8005f4c <TIM_Base_SetConfig+0x114>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d003      	beq.n	8005f30 <TIM_Base_SetConfig+0xf8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <TIM_Base_SetConfig+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d103      	bne.n	8005f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	691a      	ldr	r2, [r3, #16]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	615a      	str	r2, [r3, #20]
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40014400 	.word	0x40014400
 8005f68:	40014800 	.word	0x40014800
 8005f6c:	40001800 	.word	0x40001800
 8005f70:	40001c00 	.word	0x40001c00
 8005f74:	40002000 	.word	0x40002000

08005f78 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d123      	bne.n	8005fd2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	6851      	ldr	r1, [r2, #4]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	6892      	ldr	r2, [r2, #8]
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	68d2      	ldr	r2, [r2, #12]
 8005fa4:	4311      	orrs	r1, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	6912      	ldr	r2, [r2, #16]
 8005faa:	4311      	orrs	r1, r2
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	6952      	ldr	r2, [r2, #20]
 8005fb0:	4311      	orrs	r1, r2
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	6992      	ldr	r2, [r2, #24]
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	69d2      	ldr	r2, [r2, #28]
 8005fbc:	4311      	orrs	r1, r2
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	6a12      	ldr	r2, [r2, #32]
 8005fc2:	4311      	orrs	r1, r2
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e028      	b.n	8006024 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	69d9      	ldr	r1, [r3, #28]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	4319      	orrs	r1, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ff8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	6851      	ldr	r1, [r2, #4]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	6892      	ldr	r2, [r2, #8]
 8006004:	4311      	orrs	r1, r2
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	68d2      	ldr	r2, [r2, #12]
 800600a:	4311      	orrs	r1, r2
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	6912      	ldr	r2, [r2, #16]
 8006010:	4311      	orrs	r1, r2
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	6952      	ldr	r2, [r2, #20]
 8006016:	4311      	orrs	r1, r2
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	6992      	ldr	r2, [r2, #24]
 800601c:	430a      	orrs	r2, r1
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d128      	bne.n	8006096 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	1e59      	subs	r1, r3, #1
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	3b01      	subs	r3, #1
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	4319      	orrs	r1, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	3b01      	subs	r3, #1
 8006062:	021b      	lsls	r3, r3, #8
 8006064:	4319      	orrs	r1, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	3b01      	subs	r3, #1
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	4319      	orrs	r1, r3
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	3b01      	subs	r3, #1
 8006076:	041b      	lsls	r3, r3, #16
 8006078:	4319      	orrs	r1, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	3b01      	subs	r3, #1
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	4319      	orrs	r1, r3
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	3b01      	subs	r3, #1
 800608a:	061b      	lsls	r3, r3, #24
 800608c:	430b      	orrs	r3, r1
 800608e:	431a      	orrs	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	e02f      	b.n	80060f6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800609e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	68d2      	ldr	r2, [r2, #12]
 80060a6:	3a01      	subs	r2, #1
 80060a8:	0311      	lsls	r1, r2, #12
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	6952      	ldr	r2, [r2, #20]
 80060ae:	3a01      	subs	r2, #1
 80060b0:	0512      	lsls	r2, r2, #20
 80060b2:	430a      	orrs	r2, r1
 80060b4:	431a      	orrs	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	1e59      	subs	r1, r3, #1
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	4319      	orrs	r1, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	021b      	lsls	r3, r3, #8
 80060da:	4319      	orrs	r1, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	4319      	orrs	r1, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	430b      	orrs	r3, r1
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <__NVIC_SetPriority>:
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	6039      	str	r1, [r7, #0]
 800610e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006114:	2b00      	cmp	r3, #0
 8006116:	db0a      	blt.n	800612e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	490c      	ldr	r1, [pc, #48]	; (8006150 <__NVIC_SetPriority+0x4c>)
 800611e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006122:	0112      	lsls	r2, r2, #4
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	440b      	add	r3, r1
 8006128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800612c:	e00a      	b.n	8006144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	4908      	ldr	r1, [pc, #32]	; (8006154 <__NVIC_SetPriority+0x50>)
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	3b04      	subs	r3, #4
 800613c:	0112      	lsls	r2, r2, #4
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	440b      	add	r3, r1
 8006142:	761a      	strb	r2, [r3, #24]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	e000e100 	.word	0xe000e100
 8006154:	e000ed00 	.word	0xe000ed00

08006158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800615c:	2100      	movs	r1, #0
 800615e:	f06f 0004 	mvn.w	r0, #4
 8006162:	f7ff ffcf 	bl	8006104 <__NVIC_SetPriority>
#endif
}
 8006166:	bf00      	nop
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006172:	f3ef 8305 	mrs	r3, IPSR
 8006176:	603b      	str	r3, [r7, #0]
  return(result);
 8006178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800617e:	f06f 0305 	mvn.w	r3, #5
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	e00c      	b.n	80061a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <osKernelInitialize+0x44>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d105      	bne.n	800619a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800618e:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <osKernelInitialize+0x44>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006194:	2300      	movs	r3, #0
 8006196:	607b      	str	r3, [r7, #4]
 8006198:	e002      	b.n	80061a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061a0:	687b      	ldr	r3, [r7, #4]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	20025c44 	.word	0x20025c44

080061b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ba:	f3ef 8305 	mrs	r3, IPSR
 80061be:	603b      	str	r3, [r7, #0]
  return(result);
 80061c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80061c6:	f06f 0305 	mvn.w	r3, #5
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	e010      	b.n	80061f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061ce:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <osKernelStart+0x48>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d109      	bne.n	80061ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80061d6:	f7ff ffbf 	bl	8006158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80061da:	4b08      	ldr	r3, [pc, #32]	; (80061fc <osKernelStart+0x48>)
 80061dc:	2202      	movs	r2, #2
 80061de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80061e0:	f002 fc0a 	bl	80089f8 <vTaskStartScheduler>
      stat = osOK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	e002      	b.n	80061f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80061ea:	f04f 33ff 	mov.w	r3, #4294967295
 80061ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061f0:	687b      	ldr	r3, [r7, #4]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20025c44 	.word	0x20025c44

08006200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b08e      	sub	sp, #56	; 0x38
 8006204:	af04      	add	r7, sp, #16
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006210:	f3ef 8305 	mrs	r3, IPSR
 8006214:	617b      	str	r3, [r7, #20]
  return(result);
 8006216:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006218:	2b00      	cmp	r3, #0
 800621a:	d17e      	bne.n	800631a <osThreadNew+0x11a>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d07b      	beq.n	800631a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006222:	2380      	movs	r3, #128	; 0x80
 8006224:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006226:	2318      	movs	r3, #24
 8006228:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800622e:	f04f 33ff 	mov.w	r3, #4294967295
 8006232:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d045      	beq.n	80062c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <osThreadNew+0x48>
        name = attr->name;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <osThreadNew+0x6e>
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	2b38      	cmp	r3, #56	; 0x38
 8006260:	d805      	bhi.n	800626e <osThreadNew+0x6e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <osThreadNew+0x72>
        return (NULL);
 800626e:	2300      	movs	r3, #0
 8006270:	e054      	b.n	800631c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	089b      	lsrs	r3, r3, #2
 8006280:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00e      	beq.n	80062a8 <osThreadNew+0xa8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	2b6b      	cmp	r3, #107	; 0x6b
 8006290:	d90a      	bls.n	80062a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006296:	2b00      	cmp	r3, #0
 8006298:	d006      	beq.n	80062a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <osThreadNew+0xa8>
        mem = 1;
 80062a2:	2301      	movs	r3, #1
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e010      	b.n	80062ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10c      	bne.n	80062ca <osThreadNew+0xca>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d108      	bne.n	80062ca <osThreadNew+0xca>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <osThreadNew+0xca>
          mem = 0;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61bb      	str	r3, [r7, #24]
 80062c4:	e001      	b.n	80062ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d110      	bne.n	80062f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062d8:	9202      	str	r2, [sp, #8]
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f002 f98e 	bl	8008608 <xTaskCreateStatic>
 80062ec:	4603      	mov	r3, r0
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	e013      	b.n	800631a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d110      	bne.n	800631a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	f107 0310 	add.w	r3, r7, #16
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f002 f9d9 	bl	80086c2 <xTaskCreate>
 8006310:	4603      	mov	r3, r0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d001      	beq.n	800631a <osThreadNew+0x11a>
            hTask = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800631a:	693b      	ldr	r3, [r7, #16]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800632c:	f3ef 8305 	mrs	r3, IPSR
 8006330:	60bb      	str	r3, [r7, #8]
  return(result);
 8006332:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <osDelay+0x1c>
    stat = osErrorISR;
 8006338:	f06f 0305 	mvn.w	r3, #5
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e007      	b.n	8006350 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <osDelay+0x2c>
      vTaskDelay(ticks);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f002 fb1c 	bl	8008988 <vTaskDelay>
    }
  }

  return (stat);
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f003 fee3 	bl	800a12e <pvTimerGetTimerID>
 8006368:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <TimerCallback+0x22>
    callb->func (callb->arg);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	6852      	ldr	r2, [r2, #4]
 8006378:	4610      	mov	r0, r2
 800637a:	4798      	blx	r3
  }
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b08c      	sub	sp, #48	; 0x30
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	607a      	str	r2, [r7, #4]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	460b      	mov	r3, r1
 8006392:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006394:	2300      	movs	r3, #0
 8006396:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006398:	f3ef 8305 	mrs	r3, IPSR
 800639c:	613b      	str	r3, [r7, #16]
  return(result);
 800639e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d163      	bne.n	800646c <osTimerNew+0xe8>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d060      	beq.n	800646c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80063aa:	2008      	movs	r0, #8
 80063ac:	f004 f94c 	bl	800a648 <pvPortMalloc>
 80063b0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d059      	beq.n	800646c <osTimerNew+0xe8>
      callb->func = func;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80063c4:	7afb      	ldrb	r3, [r7, #11]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <osTimerNew+0x4c>
        reload = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	61fb      	str	r3, [r7, #28]
 80063ce:	e001      	b.n	80063d4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80063d0:	2301      	movs	r3, #1
 80063d2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01c      	beq.n	800641e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <osTimerNew+0x6e>
          name = attr->name;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <osTimerNew+0x84>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	2b2b      	cmp	r3, #43	; 0x2b
 8006400:	d902      	bls.n	8006408 <osTimerNew+0x84>
          mem = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e00c      	b.n	8006422 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d108      	bne.n	8006422 <osTimerNew+0x9e>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <osTimerNew+0x9e>
            mem = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	61bb      	str	r3, [r7, #24]
 800641c:	e001      	b.n	8006422 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d10c      	bne.n	8006442 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	9301      	str	r3, [sp, #4]
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <osTimerNew+0xf4>)
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	2101      	movs	r1, #1
 8006438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800643a:	f003 fad0 	bl	80099de <xTimerCreateStatic>
 800643e:	6238      	str	r0, [r7, #32]
 8006440:	e00b      	b.n	800645a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d108      	bne.n	800645a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <osTimerNew+0xf4>)
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	2101      	movs	r1, #1
 8006452:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006454:	f003 faa2 	bl	800999c <xTimerCreate>
 8006458:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d105      	bne.n	800646c <osTimerNew+0xe8>
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <osTimerNew+0xe8>
        vPortFree (callb);
 8006466:	6978      	ldr	r0, [r7, #20]
 8006468:	f004 f9ba 	bl	800a7e0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800646c:	6a3b      	ldr	r3, [r7, #32]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3728      	adds	r7, #40	; 0x28
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	0800635b 	.word	0x0800635b

0800647c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800648a:	f3ef 8305 	mrs	r3, IPSR
 800648e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006490:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <osTimerStart+0x22>
    stat = osErrorISR;
 8006496:	f06f 0305 	mvn.w	r3, #5
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	e017      	b.n	80064ce <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d103      	bne.n	80064ac <osTimerStart+0x30>
    stat = osErrorParameter;
 80064a4:	f06f 0303 	mvn.w	r3, #3
 80064a8:	617b      	str	r3, [r7, #20]
 80064aa:	e010      	b.n	80064ce <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	2104      	movs	r1, #4
 80064b6:	6938      	ldr	r0, [r7, #16]
 80064b8:	f003 fb0a 	bl	8009ad0 <xTimerGenericCommand>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d102      	bne.n	80064c8 <osTimerStart+0x4c>
      stat = osOK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e002      	b.n	80064ce <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80064c8:	f06f 0302 	mvn.w	r3, #2
 80064cc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064e4:	f3ef 8305 	mrs	r3, IPSR
 80064e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80064ea:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <osTimerStop+0x20>
    stat = osErrorISR;
 80064f0:	f06f 0305 	mvn.w	r3, #5
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e021      	b.n	800653c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <osTimerStop+0x2e>
    stat = osErrorParameter;
 80064fe:	f06f 0303 	mvn.w	r3, #3
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	e01a      	b.n	800653c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8006506:	6938      	ldr	r0, [r7, #16]
 8006508:	f003 fde8 	bl	800a0dc <xTimerIsTimerActive>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <osTimerStop+0x42>
      stat = osErrorResource;
 8006512:	f06f 0302 	mvn.w	r3, #2
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e010      	b.n	800653c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800651a:	2300      	movs	r3, #0
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	2300      	movs	r3, #0
 8006520:	2200      	movs	r2, #0
 8006522:	2103      	movs	r1, #3
 8006524:	6938      	ldr	r0, [r7, #16]
 8006526:	f003 fad3 	bl	8009ad0 <xTimerGenericCommand>
 800652a:	4603      	mov	r3, r0
 800652c:	2b01      	cmp	r3, #1
 800652e:	d102      	bne.n	8006536 <osTimerStop+0x5e>
        stat = osOK;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e002      	b.n	800653c <osTimerStop+0x64>
      } else {
        stat = osError;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800653c:	697b      	ldr	r3, [r7, #20]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006552:	f3ef 8305 	mrs	r3, IPSR
 8006556:	60fb      	str	r3, [r7, #12]
  return(result);
 8006558:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <osTimerIsRunning+0x1e>
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <osTimerIsRunning+0x24>
    running = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e004      	b.n	8006574 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f003 fdb6 	bl	800a0dc <xTimerIsTimerActive>
 8006570:	4603      	mov	r3, r0
 8006572:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8006574:	697b      	ldr	r3, [r7, #20]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800657e:	b580      	push	{r7, lr}
 8006580:	b086      	sub	sp, #24
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800658a:	f3ef 8305 	mrs	r3, IPSR
 800658e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006590:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006592:	2b00      	cmp	r3, #0
 8006594:	d12d      	bne.n	80065f2 <osEventFlagsNew+0x74>
    mem = -1;
 8006596:	f04f 33ff 	mov.w	r3, #4294967295
 800659a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d015      	beq.n	80065ce <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d006      	beq.n	80065b8 <osEventFlagsNew+0x3a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	2b1f      	cmp	r3, #31
 80065b0:	d902      	bls.n	80065b8 <osEventFlagsNew+0x3a>
        mem = 1;
 80065b2:	2301      	movs	r3, #1
 80065b4:	613b      	str	r3, [r7, #16]
 80065b6:	e00c      	b.n	80065d2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d108      	bne.n	80065d2 <osEventFlagsNew+0x54>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <osEventFlagsNew+0x54>
          mem = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	e001      	b.n	80065d2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d106      	bne.n	80065e6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fb4b 	bl	8006c78 <xEventGroupCreateStatic>
 80065e2:	6178      	str	r0, [r7, #20]
 80065e4:	e005      	b.n	80065f2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80065ec:	f000 fb7b 	bl	8006ce6 <xEventGroupCreate>
 80065f0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80065f2:	697b      	ldr	r3, [r7, #20]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <osEventFlagsSet+0x1e>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800661a:	f06f 0303 	mvn.w	r3, #3
 800661e:	617b      	str	r3, [r7, #20]
 8006620:	e028      	b.n	8006674 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006622:	f3ef 8305 	mrs	r3, IPSR
 8006626:	60fb      	str	r3, [r7, #12]
  return(result);
 8006628:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01d      	beq.n	800666a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8006632:	f107 0308 	add.w	r3, r7, #8
 8006636:	461a      	mov	r2, r3
 8006638:	6839      	ldr	r1, [r7, #0]
 800663a:	6938      	ldr	r0, [r7, #16]
 800663c:	f000 fd74 	bl	8007128 <xEventGroupSetBitsFromISR>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d103      	bne.n	800664e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8006646:	f06f 0302 	mvn.w	r3, #2
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	e012      	b.n	8006674 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00d      	beq.n	8006674 <osEventFlagsSet+0x78>
 8006658:	4b09      	ldr	r3, [pc, #36]	; (8006680 <osEventFlagsSet+0x84>)
 800665a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	e004      	b.n	8006674 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800666a:	6839      	ldr	r1, [r7, #0]
 800666c:	6938      	ldr	r0, [r7, #16]
 800666e:	f000 fc93 	bl	8006f98 <xEventGroupSetBits>
 8006672:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8006674:	697b      	ldr	r3, [r7, #20]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <osEventFlagsClear+0x1e>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80066a2:	f06f 0303 	mvn.w	r3, #3
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e019      	b.n	80066de <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066aa:	f3ef 8305 	mrs	r3, IPSR
 80066ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80066b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80066b6:	6938      	ldr	r0, [r7, #16]
 80066b8:	f000 fc4a 	bl	8006f50 <xEventGroupGetBitsFromISR>
 80066bc:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6938      	ldr	r0, [r7, #16]
 80066c2:	f000 fc31 	bl	8006f28 <xEventGroupClearBitsFromISR>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d108      	bne.n	80066de <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80066cc:	f06f 0302 	mvn.w	r3, #2
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e004      	b.n	80066de <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6938      	ldr	r0, [r7, #16]
 80066d8:	f000 fbee 	bl	8006eb8 <xEventGroupClearBits>
 80066dc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80066de:	697b      	ldr	r3, [r7, #20]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	; 0x30
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <osEventFlagsWait+0x22>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800670a:	f06f 0303 	mvn.w	r3, #3
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	e04b      	b.n	80067aa <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006712:	f3ef 8305 	mrs	r3, IPSR
 8006716:	617b      	str	r3, [r7, #20]
  return(result);
 8006718:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800671e:	f06f 0305 	mvn.w	r3, #5
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e041      	b.n	80067aa <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006730:	2301      	movs	r3, #1
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
 8006734:	e001      	b.n	800673a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006736:	2300      	movs	r3, #0
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006744:	2300      	movs	r3, #0
 8006746:	623b      	str	r3, [r7, #32]
 8006748:	e001      	b.n	800674e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800674a:	2301      	movs	r3, #1
 800674c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	6a3a      	ldr	r2, [r7, #32]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f000 fadf 	bl	8006d1c <xEventGroupWaitBits>
 800675e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d010      	beq.n	800678c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4013      	ands	r3, r2
 8006770:	68ba      	ldr	r2, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	d019      	beq.n	80067aa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800677c:	f06f 0301 	mvn.w	r3, #1
 8006780:	61fb      	str	r3, [r7, #28]
 8006782:	e012      	b.n	80067aa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8006784:	f06f 0302 	mvn.w	r3, #2
 8006788:	61fb      	str	r3, [r7, #28]
 800678a:	e00e      	b.n	80067aa <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4013      	ands	r3, r2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d109      	bne.n	80067aa <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800679c:	f06f 0301 	mvn.w	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	e002      	b.n	80067aa <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80067a4:	f06f 0302 	mvn.w	r3, #2
 80067a8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80067aa:	69fb      	ldr	r3, [r7, #28]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3728      	adds	r7, #40	; 0x28
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c0:	f3ef 8305 	mrs	r3, IPSR
 80067c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80067c6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d174      	bne.n	80068b6 <osMutexNew+0x102>
    if (attr != NULL) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <osMutexNew+0x26>
      type = attr->attr_bits;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e001      	b.n	80067de <osMutexNew+0x2a>
    } else {
      type = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <osMutexNew+0x3a>
      rmtx = 1U;
 80067e8:	2301      	movs	r3, #1
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	e001      	b.n	80067f2 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d15c      	bne.n	80068b6 <osMutexNew+0x102>
      mem = -1;
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d015      	beq.n	8006834 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d006      	beq.n	800681e <osMutexNew+0x6a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b4f      	cmp	r3, #79	; 0x4f
 8006816:	d902      	bls.n	800681e <osMutexNew+0x6a>
          mem = 1;
 8006818:	2301      	movs	r3, #1
 800681a:	613b      	str	r3, [r7, #16]
 800681c:	e00c      	b.n	8006838 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d108      	bne.n	8006838 <osMutexNew+0x84>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d104      	bne.n	8006838 <osMutexNew+0x84>
            mem = 0;
 800682e:	2300      	movs	r3, #0
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	e001      	b.n	8006838 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d112      	bne.n	8006864 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d007      	beq.n	8006854 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4619      	mov	r1, r3
 800684a:	2004      	movs	r0, #4
 800684c:	f000 fea9 	bl	80075a2 <xQueueCreateMutexStatic>
 8006850:	61f8      	str	r0, [r7, #28]
 8006852:	e016      	b.n	8006882 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	4619      	mov	r1, r3
 800685a:	2001      	movs	r0, #1
 800685c:	f000 fea1 	bl	80075a2 <xQueueCreateMutexStatic>
 8006860:	61f8      	str	r0, [r7, #28]
 8006862:	e00e      	b.n	8006882 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006870:	2004      	movs	r0, #4
 8006872:	f000 fe7e 	bl	8007572 <xQueueCreateMutex>
 8006876:	61f8      	str	r0, [r7, #28]
 8006878:	e003      	b.n	8006882 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800687a:	2001      	movs	r0, #1
 800687c:	f000 fe79 	bl	8007572 <xQueueCreateMutex>
 8006880:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00c      	beq.n	80068a2 <osMutexNew+0xee>
        if (attr != NULL) {
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <osMutexNew+0xe2>
          name = attr->name;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e001      	b.n	800689a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	69f8      	ldr	r0, [r7, #28]
 800689e:	f001 fe23 	bl	80084e8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d006      	beq.n	80068b6 <osMutexNew+0x102>
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80068b6:	69fb      	ldr	r3, [r7, #28]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f023 0301 	bic.w	r3, r3, #1
 80068d0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80068da:	2300      	movs	r3, #0
 80068dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068de:	f3ef 8305 	mrs	r3, IPSR
 80068e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80068e4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80068ea:	f06f 0305 	mvn.w	r3, #5
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e02c      	b.n	800694c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d103      	bne.n	8006900 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80068f8:	f06f 0303 	mvn.w	r3, #3
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e025      	b.n	800694c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d011      	beq.n	800692a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6938      	ldr	r0, [r7, #16]
 800690a:	f000 fe99 	bl	8007640 <xQueueTakeMutexRecursive>
 800690e:	4603      	mov	r3, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d01b      	beq.n	800694c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800691a:	f06f 0301 	mvn.w	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e014      	b.n	800694c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006922:	f06f 0302 	mvn.w	r3, #2
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e010      	b.n	800694c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6938      	ldr	r0, [r7, #16]
 800692e:	f001 faad 	bl	8007e8c <xQueueSemaphoreTake>
 8006932:	4603      	mov	r3, r0
 8006934:	2b01      	cmp	r3, #1
 8006936:	d009      	beq.n	800694c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800693e:	f06f 0301 	mvn.w	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	e002      	b.n	800694c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006946:	f06f 0302 	mvn.w	r3, #2
 800694a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800694c:	697b      	ldr	r3, [r7, #20]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006956:	b580      	push	{r7, lr}
 8006958:	b086      	sub	sp, #24
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800696e:	2300      	movs	r3, #0
 8006970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006972:	f3ef 8305 	mrs	r3, IPSR
 8006976:	60bb      	str	r3, [r7, #8]
  return(result);
 8006978:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <osMutexRelease+0x30>
    stat = osErrorISR;
 800697e:	f06f 0305 	mvn.w	r3, #5
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e01f      	b.n	80069c6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800698c:	f06f 0303 	mvn.w	r3, #3
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e018      	b.n	80069c6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800699a:	6938      	ldr	r0, [r7, #16]
 800699c:	f000 fe1c 	bl	80075d8 <xQueueGiveMutexRecursive>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d00f      	beq.n	80069c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80069a6:	f06f 0302 	mvn.w	r3, #2
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e00b      	b.n	80069c6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80069ae:	2300      	movs	r3, #0
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	6938      	ldr	r0, [r7, #16]
 80069b6:	f000 fee3 	bl	8007780 <xQueueGenericSend>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d002      	beq.n	80069c6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80069c0:	f06f 0302 	mvn.w	r3, #2
 80069c4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80069c6:	697b      	ldr	r3, [r7, #20]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3718      	adds	r7, #24
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e0:	f3ef 8305 	mrs	r3, IPSR
 80069e4:	613b      	str	r3, [r7, #16]
  return(result);
 80069e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d175      	bne.n	8006ad8 <osSemaphoreNew+0x108>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d072      	beq.n	8006ad8 <osSemaphoreNew+0x108>
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d86e      	bhi.n	8006ad8 <osSemaphoreNew+0x108>
    mem = -1;
 80069fa:	f04f 33ff 	mov.w	r3, #4294967295
 80069fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d015      	beq.n	8006a32 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d006      	beq.n	8006a1c <osSemaphoreNew+0x4c>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	2b4f      	cmp	r3, #79	; 0x4f
 8006a14:	d902      	bls.n	8006a1c <osSemaphoreNew+0x4c>
        mem = 1;
 8006a16:	2301      	movs	r3, #1
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	e00c      	b.n	8006a36 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d108      	bne.n	8006a36 <osSemaphoreNew+0x66>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d104      	bne.n	8006a36 <osSemaphoreNew+0x66>
          mem = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e001      	b.n	8006a36 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3c:	d04c      	beq.n	8006ad8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d128      	bne.n	8006a96 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d10a      	bne.n	8006a60 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	9200      	str	r2, [sp, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	2100      	movs	r1, #0
 8006a56:	2001      	movs	r0, #1
 8006a58:	f000 fc96 	bl	8007388 <xQueueGenericCreateStatic>
 8006a5c:	61f8      	str	r0, [r7, #28]
 8006a5e:	e005      	b.n	8006a6c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006a60:	2203      	movs	r2, #3
 8006a62:	2100      	movs	r1, #0
 8006a64:	2001      	movs	r0, #1
 8006a66:	f000 fd07 	bl	8007478 <xQueueGenericCreate>
 8006a6a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d022      	beq.n	8006ab8 <osSemaphoreNew+0xe8>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01f      	beq.n	8006ab8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	69f8      	ldr	r0, [r7, #28]
 8006a80:	f000 fe7e 	bl	8007780 <xQueueGenericSend>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d016      	beq.n	8006ab8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006a8a:	69f8      	ldr	r0, [r7, #28]
 8006a8c:	f001 fbd8 	bl	8008240 <vQueueDelete>
            hSemaphore = NULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	e010      	b.n	8006ab8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d108      	bne.n	8006aae <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fe01 	bl	80076ac <xQueueCreateCountingSemaphoreStatic>
 8006aaa:	61f8      	str	r0, [r7, #28]
 8006aac:	e004      	b.n	8006ab8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006aae:	68b9      	ldr	r1, [r7, #8]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fe32 	bl	800771a <xQueueCreateCountingSemaphore>
 8006ab6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d003      	beq.n	8006acc <osSemaphoreNew+0xfc>
          name = attr->name;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	e001      	b.n	8006ad0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006ad0:	6979      	ldr	r1, [r7, #20]
 8006ad2:	69f8      	ldr	r0, [r7, #28]
 8006ad4:	f001 fd08 	bl	80084e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006ad8:	69fb      	ldr	r3, [r7, #28]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006afc:	f06f 0303 	mvn.w	r3, #3
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	e039      	b.n	8006b78 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b04:	f3ef 8305 	mrs	r3, IPSR
 8006b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d022      	beq.n	8006b56 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006b16:	f06f 0303 	mvn.w	r3, #3
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e02c      	b.n	8006b78 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b22:	f107 0308 	add.w	r3, r7, #8
 8006b26:	461a      	mov	r2, r3
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6938      	ldr	r0, [r7, #16]
 8006b2c:	f001 faea 	bl	8008104 <xQueueReceiveFromISR>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d003      	beq.n	8006b3e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006b36:	f06f 0302 	mvn.w	r3, #2
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e01c      	b.n	8006b78 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d019      	beq.n	8006b78 <osSemaphoreAcquire+0x94>
 8006b44:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <osSemaphoreAcquire+0xa0>)
 8006b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	f3bf 8f6f 	isb	sy
 8006b54:	e010      	b.n	8006b78 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b56:	6839      	ldr	r1, [r7, #0]
 8006b58:	6938      	ldr	r0, [r7, #16]
 8006b5a:	f001 f997 	bl	8007e8c <xQueueSemaphoreTake>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d009      	beq.n	8006b78 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006b6a:	f06f 0301 	mvn.w	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e002      	b.n	8006b78 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006b72:	f06f 0302 	mvn.w	r3, #2
 8006b76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b78:	697b      	ldr	r3, [r7, #20]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	e000ed04 	.word	0xe000ed04

08006b88 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d103      	bne.n	8006ba6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006b9e:	f06f 0303 	mvn.w	r3, #3
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	e02c      	b.n	8006c00 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ba6:	f3ef 8305 	mrs	r3, IPSR
 8006baa:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01a      	beq.n	8006be8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006bb6:	f107 0308 	add.w	r3, r7, #8
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6938      	ldr	r0, [r7, #16]
 8006bbe:	f000 ffb4 	bl	8007b2a <xQueueGiveFromISR>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d003      	beq.n	8006bd0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006bc8:	f06f 0302 	mvn.w	r3, #2
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	e017      	b.n	8006c00 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d014      	beq.n	8006c00 <osSemaphoreRelease+0x78>
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	; (8006c0c <osSemaphoreRelease+0x84>)
 8006bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	e00b      	b.n	8006c00 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006be8:	2300      	movs	r3, #0
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f000 fdc6 	bl	8007780 <xQueueGenericSend>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d002      	beq.n	8006c00 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006bfa:	f06f 0302 	mvn.w	r3, #2
 8006bfe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006c00:	697b      	ldr	r3, [r7, #20]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4a07      	ldr	r2, [pc, #28]	; (8006c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4a06      	ldr	r2, [pc, #24]	; (8006c40 <vApplicationGetIdleTaskMemory+0x30>)
 8006c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2280      	movs	r2, #128	; 0x80
 8006c2c:	601a      	str	r2, [r3, #0]
}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	20025c48 	.word	0x20025c48
 8006c40:	20025cb4 	.word	0x20025cb4

08006c44 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	4a07      	ldr	r2, [pc, #28]	; (8006c70 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c54:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a06      	ldr	r2, [pc, #24]	; (8006c74 <vApplicationGetTimerTaskMemory+0x30>)
 8006c5a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c62:	601a      	str	r2, [r3, #0]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	20025eb4 	.word	0x20025eb4
 8006c74:	20025f20 	.word	0x20025f20

08006c78 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d00a      	beq.n	8006cbc <xEventGroupCreateStatic+0x44>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60fb      	str	r3, [r7, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fa3d 	bl	8007150 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006cdc:	697b      	ldr	r3, [r7, #20]
	}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006cec:	2020      	movs	r0, #32
 8006cee:	f003 fcab 	bl	800a648 <pvPortMalloc>
 8006cf2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00a      	beq.n	8006d10 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fa23 	bl	8007150 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006d10:	687b      	ldr	r3, [r7, #4]
	}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b090      	sub	sp, #64	; 0x40
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006d32:	2300      	movs	r3, #0
 8006d34:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <xEventGroupWaitBits+0x36>
	__asm volatile
 8006d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d40:	f383 8811 	msr	BASEPRI, r3
 8006d44:	f3bf 8f6f 	isb	sy
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	623b      	str	r3, [r7, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	e7fe      	b.n	8006d50 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	61fb      	str	r3, [r7, #28]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xEventGroupWaitBits+0x72>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	61bb      	str	r3, [r7, #24]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d8e:	f002 fbad 	bl	80094ec <xTaskGetSchedulerState>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <xEventGroupWaitBits+0x82>
 8006d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <xEventGroupWaitBits+0x86>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <xEventGroupWaitBits+0x88>
 8006da2:	2300      	movs	r3, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	617b      	str	r3, [r7, #20]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006dbe:	f001 fe97 	bl	8008af0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dce:	f000 f988 	bl	80070e2 <prvTestWaitCondition>
 8006dd2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00e      	beq.n	8006df8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006dde:	2300      	movs	r3, #0
 8006de0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d028      	beq.n	8006e3a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	43db      	mvns	r3, r3
 8006df0:	401a      	ands	r2, r3
 8006df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e020      	b.n	8006e3a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d104      	bne.n	8006e08 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006e02:	2301      	movs	r3, #1
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
 8006e06:	e018      	b.n	8006e3a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e14:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e26:	1d18      	adds	r0, r3, #4
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e30:	4619      	mov	r1, r3
 8006e32:	f002 f881 	bl	8008f38 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006e3a:	f001 fe67 	bl	8008b0c <xTaskResumeAll>
 8006e3e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d031      	beq.n	8006eaa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d107      	bne.n	8006e5c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006e4c:	4b19      	ldr	r3, [pc, #100]	; (8006eb4 <xEventGroupWaitBits+0x198>)
 8006e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006e5c:	f002 fcd6 	bl	800980c <uxTaskResetEventItemValue>
 8006e60:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d11a      	bne.n	8006ea2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006e6c:	f003 faca 	bl	800a404 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e7c:	f000 f931 	bl	80070e2 <prvTestWaitCondition>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d009      	beq.n	8006e9a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	43db      	mvns	r3, r3
 8006e94:	401a      	ands	r2, r3
 8006e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e98:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006e9e:	f003 fae1 	bl	800a464 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3740      	adds	r7, #64	; 0x40
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10a      	bne.n	8006ee2 <xEventGroupClearBits+0x2a>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	60fb      	str	r3, [r7, #12]
}
 8006ede:	bf00      	nop
 8006ee0:	e7fe      	b.n	8006ee0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <xEventGroupClearBits+0x4a>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60bb      	str	r3, [r7, #8]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8006f02:	f003 fa7f 	bl	800a404 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	43db      	mvns	r3, r3
 8006f14:	401a      	ands	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8006f1a:	f003 faa3 	bl	800a464 <vPortExitCritical>

	return uxReturn;
 8006f1e:	693b      	ldr	r3, [r7, #16]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006f32:	2300      	movs	r3, #0
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4804      	ldr	r0, [pc, #16]	; (8006f4c <xEventGroupClearBitsFromISR+0x24>)
 8006f3a:	f003 f919 	bl	800a170 <xTimerPendFunctionCallFromISR>
 8006f3e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8006f40:	68fb      	ldr	r3, [r7, #12]
	}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	080070c9 	.word	0x080070c9

08006f50 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	; 0x24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f5c:	f3ef 8211 	mrs	r2, BASEPRI
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	60fa      	str	r2, [r7, #12]
 8006f72:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f74:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f76:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f88:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8006f8a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3724      	adds	r7, #36	; 0x24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08e      	sub	sp, #56	; 0x38
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <xEventGroupSetBits+0x32>
	__asm volatile
 8006fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb8:	f383 8811 	msr	BASEPRI, r3
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	613b      	str	r3, [r7, #16]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <xEventGroupSetBits+0x52>
	__asm volatile
 8006fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	60fb      	str	r3, [r7, #12]
}
 8006fe6:	bf00      	nop
 8006fe8:	e7fe      	b.n	8006fe8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	3304      	adds	r3, #4
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006ff6:	f001 fd7b 	bl	8008af0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8007000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	431a      	orrs	r2, r3
 8007008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800700c:	e03c      	b.n	8007088 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800700e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800701a:	2300      	movs	r3, #0
 800701c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007024:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800702c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d108      	bne.n	800704a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	4013      	ands	r3, r2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00b      	beq.n	800705c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8007044:	2301      	movs	r3, #1
 8007046:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007048:	e008      	b.n	800705c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	4013      	ands	r3, r2
 8007052:	69ba      	ldr	r2, [r7, #24]
 8007054:	429a      	cmp	r2, r3
 8007056:	d101      	bne.n	800705c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	2b00      	cmp	r3, #0
 8007060:	d010      	beq.n	8007084 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800706c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	4313      	orrs	r3, r2
 8007072:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800707c:	4619      	mov	r1, r3
 800707e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007080:	f002 f82c 	bl	80090dc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8007088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	429a      	cmp	r2, r3
 800708e:	d1be      	bne.n	800700e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	43db      	mvns	r3, r3
 8007098:	401a      	ands	r2, r3
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800709e:	f001 fd35 	bl	8008b0c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	681b      	ldr	r3, [r3, #0]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3738      	adds	r7, #56	; 0x38
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
 80070b6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff ff6c 	bl	8006f98 <xEventGroupSetBits>
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80070d2:	6839      	ldr	r1, [r7, #0]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff feef 	bl	8006eb8 <xEventGroupClearBits>
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80070e2:	b480      	push	{r7}
 80070e4:	b087      	sub	sp, #28
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d107      	bne.n	8007108 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
 8007106:	e007      	b.n	8007118 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	4013      	ands	r3, r2
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	429a      	cmp	r2, r3
 8007112:	d101      	bne.n	8007118 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8007118:	697b      	ldr	r3, [r7, #20]
}
 800711a:	4618      	mov	r0, r3
 800711c:	371c      	adds	r7, #28
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	68f9      	ldr	r1, [r7, #12]
 800713a:	4804      	ldr	r0, [pc, #16]	; (800714c <xEventGroupSetBitsFromISR+0x24>)
 800713c:	f003 f818 	bl	800a170 <xTimerPendFunctionCallFromISR>
 8007140:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007142:	697b      	ldr	r3, [r7, #20]
	}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	080070af 	.word	0x080070af

08007150 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f103 0208 	add.w	r2, r3, #8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f04f 32ff 	mov.w	r2, #4294967295
 8007168:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f103 0208 	add.w	r2, r3, #8
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f103 0208 	add.w	r2, r3, #8
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071f2:	b480      	push	{r7}
 80071f4:	b085      	sub	sp, #20
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d103      	bne.n	8007212 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e00c      	b.n	800722c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3308      	adds	r3, #8
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e002      	b.n	8007220 <vListInsert+0x2e>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	429a      	cmp	r2, r3
 800722a:	d2f6      	bcs.n	800721a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	601a      	str	r2, [r3, #0]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	6892      	ldr	r2, [r2, #8]
 800727a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6852      	ldr	r2, [r2, #4]
 8007284:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	429a      	cmp	r2, r3
 800728e:	d103      	bne.n	8007298 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	1e5a      	subs	r2, r3, #1
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <xQueueGenericReset+0x2a>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60bb      	str	r3, [r7, #8]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072e2:	f003 f88f 	bl	800a404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072f2:	fb01 f303 	mul.w	r3, r1, r3
 80072f6:	441a      	add	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	3b01      	subs	r3, #1
 8007314:	68f9      	ldr	r1, [r7, #12]
 8007316:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	441a      	add	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	22ff      	movs	r2, #255	; 0xff
 8007326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	22ff      	movs	r2, #255	; 0xff
 800732e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d114      	bne.n	8007362 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01a      	beq.n	8007376 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3310      	adds	r3, #16
 8007344:	4618      	mov	r0, r3
 8007346:	f001 fe61 	bl	800900c <xTaskRemoveFromEventList>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d012      	beq.n	8007376 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007350:	4b0c      	ldr	r3, [pc, #48]	; (8007384 <xQueueGenericReset+0xcc>)
 8007352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	e009      	b.n	8007376 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3310      	adds	r3, #16
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fef2 	bl	8007150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3324      	adds	r3, #36	; 0x24
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff feed 	bl	8007150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007376:	f003 f875 	bl	800a464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800737a:	2301      	movs	r3, #1
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	e000ed04 	.word	0xe000ed04

08007388 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08e      	sub	sp, #56	; 0x38
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073ae:	bf00      	nop
 80073b0:	e7fe      	b.n	80073b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <xQueueGenericCreateStatic+0x52>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <xQueueGenericCreateStatic+0x56>
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <xQueueGenericCreateStatic+0x58>
 80073de:	2300      	movs	r3, #0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	623b      	str	r3, [r7, #32]
}
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <xQueueGenericCreateStatic+0x7e>
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <xQueueGenericCreateStatic+0x82>
 8007406:	2301      	movs	r3, #1
 8007408:	e000      	b.n	800740c <xQueueGenericCreateStatic+0x84>
 800740a:	2300      	movs	r3, #0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	61fb      	str	r3, [r7, #28]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007426:	2350      	movs	r3, #80	; 0x50
 8007428:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b50      	cmp	r3, #80	; 0x50
 800742e:	d00a      	beq.n	8007446 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	61bb      	str	r3, [r7, #24]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007446:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00d      	beq.n	800746e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800745a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	4613      	mov	r3, r2
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f83f 	bl	80074ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007470:	4618      	mov	r0, r3
 8007472:	3730      	adds	r7, #48	; 0x30
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08a      	sub	sp, #40	; 0x28
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007490:	f383 8811 	msr	BASEPRI, r3
 8007494:	f3bf 8f6f 	isb	sy
 8007498:	f3bf 8f4f 	dsb	sy
 800749c:	613b      	str	r3, [r7, #16]
}
 800749e:	bf00      	nop
 80074a0:	e7fe      	b.n	80074a0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	3350      	adds	r3, #80	; 0x50
 80074b0:	4618      	mov	r0, r3
 80074b2:	f003 f8c9 	bl	800a648 <pvPortMalloc>
 80074b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d011      	beq.n	80074e2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	3350      	adds	r3, #80	; 0x50
 80074c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074d0:	79fa      	ldrb	r2, [r7, #7]
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	4613      	mov	r3, r2
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f805 	bl	80074ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074e2:	69bb      	ldr	r3, [r7, #24]
	}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d103      	bne.n	8007508 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e002      	b.n	800750e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800751a:	2101      	movs	r1, #1
 800751c:	69b8      	ldr	r0, [r7, #24]
 800751e:	f7ff fecb 	bl	80072b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800752a:	78fb      	ldrb	r3, [r7, #3]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	2073      	movs	r0, #115	; 0x73
 8007532:	f003 ff4d 	bl	800b3d0 <SEGGER_SYSVIEW_RecordU32x3>
}
 8007536:	bf00      	nop
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00e      	beq.n	800756a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800755e:	2300      	movs	r3, #0
 8007560:	2200      	movs	r2, #0
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f90b 	bl	8007780 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800756a:	bf00      	nop
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af00      	add	r7, sp, #0
 8007578:	4603      	mov	r3, r0
 800757a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800757c:	2301      	movs	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007584:	79fb      	ldrb	r3, [r7, #7]
 8007586:	461a      	mov	r2, r3
 8007588:	6939      	ldr	r1, [r7, #16]
 800758a:	6978      	ldr	r0, [r7, #20]
 800758c:	f7ff ff74 	bl	8007478 <xQueueGenericCreate>
 8007590:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7ff ffd3 	bl	800753e <prvInitialiseMutex>

		return xNewQueue;
 8007598:	68fb      	ldr	r3, [r7, #12]
	}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b088      	sub	sp, #32
 80075a6:	af02      	add	r7, sp, #8
 80075a8:	4603      	mov	r3, r0
 80075aa:	6039      	str	r1, [r7, #0]
 80075ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80075ae:	2301      	movs	r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2200      	movs	r2, #0
 80075be:	6939      	ldr	r1, [r7, #16]
 80075c0:	6978      	ldr	r0, [r7, #20]
 80075c2:	f7ff fee1 	bl	8007388 <xQueueGenericCreateStatic>
 80075c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f7ff ffb8 	bl	800753e <prvInitialiseMutex>

		return xNewQueue;
 80075ce:	68fb      	ldr	r3, [r7, #12]
	}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	60fb      	str	r3, [r7, #12]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	689c      	ldr	r4, [r3, #8]
 8007604:	f001 ff62 	bl	80094cc <xTaskGetCurrentTaskHandle>
 8007608:	4603      	mov	r3, r0
 800760a:	429c      	cmp	r4, r3
 800760c:	d111      	bne.n	8007632 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	1e5a      	subs	r2, r3, #1
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007620:	2300      	movs	r3, #0
 8007622:	2200      	movs	r2, #0
 8007624:	2100      	movs	r1, #0
 8007626:	6938      	ldr	r0, [r7, #16]
 8007628:	f000 f8aa 	bl	8007780 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800762c:	2301      	movs	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e001      	b.n	8007636 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007632:	2300      	movs	r3, #0
 8007634:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007636:	697b      	ldr	r3, [r7, #20]
	}
 8007638:	4618      	mov	r0, r3
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd90      	pop	{r4, r7, pc}

08007640 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60fb      	str	r3, [r7, #12]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	689c      	ldr	r4, [r3, #8]
 800766e:	f001 ff2d 	bl	80094cc <xTaskGetCurrentTaskHandle>
 8007672:	4603      	mov	r3, r0
 8007674:	429c      	cmp	r4, r3
 8007676:	d107      	bne.n	8007688 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e00c      	b.n	80076a2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6938      	ldr	r0, [r7, #16]
 800768c:	f000 fbfe 	bl	8007e8c <xQueueSemaphoreTake>
 8007690:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80076a2:	697b      	ldr	r3, [r7, #20]
	}
 80076a4:	4618      	mov	r0, r3
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd90      	pop	{r4, r7, pc}

080076ac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	; 0x28
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10a      	bne.n	80076d4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	61bb      	str	r3, [r7, #24]
}
 80076d0:	bf00      	nop
 80076d2:	e7fe      	b.n	80076d2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d90a      	bls.n	80076f2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	617b      	str	r3, [r7, #20]
}
 80076ee:	bf00      	nop
 80076f0:	e7fe      	b.n	80076f0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076f2:	2302      	movs	r3, #2
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	2100      	movs	r1, #0
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f7ff fe43 	bl	8007388 <xQueueGenericCreateStatic>
 8007702:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007710:	69fb      	ldr	r3, [r7, #28]
	}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	613b      	str	r3, [r7, #16]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d90a      	bls.n	800775e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800775e:	2202      	movs	r2, #2
 8007760:	2100      	movs	r1, #0
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fe88 	bl	8007478 <xQueueGenericCreate>
 8007768:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007776:	697b      	ldr	r3, [r7, #20]
	}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b090      	sub	sp, #64	; 0x40
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xQueueGenericSend+0x32>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <xQueueGenericSend+0x40>
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d101      	bne.n	80077c4 <xQueueGenericSend+0x44>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <xQueueGenericSend+0x46>
 80077c4:	2300      	movs	r3, #0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <xQueueGenericSend+0x60>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d103      	bne.n	80077ee <xQueueGenericSend+0x6e>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <xQueueGenericSend+0x72>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <xQueueGenericSend+0x74>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <xQueueGenericSend+0x8e>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	623b      	str	r3, [r7, #32]
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800780e:	f001 fe6d 	bl	80094ec <xTaskGetSchedulerState>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <xQueueGenericSend+0x9e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <xQueueGenericSend+0xa2>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueGenericSend+0xa4>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xQueueGenericSend+0xbe>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	61fb      	str	r3, [r7, #28]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800783e:	f002 fde1 	bl	800a404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784a:	429a      	cmp	r2, r3
 800784c:	d302      	bcc.n	8007854 <xQueueGenericSend+0xd4>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d136      	bne.n	80078c2 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	4618      	mov	r0, r3
 8007858:	f004 fb26 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	460b      	mov	r3, r1
 8007866:	4601      	mov	r1, r0
 8007868:	205a      	movs	r0, #90	; 0x5a
 800786a:	f003 fe27 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007874:	f000 fd28 	bl	80082c8 <prvCopyDataToQueue>
 8007878:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	2b00      	cmp	r3, #0
 8007880:	d010      	beq.n	80078a4 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	3324      	adds	r3, #36	; 0x24
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fbc0 	bl	800900c <xTaskRemoveFromEventList>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d013      	beq.n	80078ba <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007892:	4b4d      	ldr	r3, [pc, #308]	; (80079c8 <xQueueGenericSend+0x248>)
 8007894:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	e00a      	b.n	80078ba <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078aa:	4b47      	ldr	r3, [pc, #284]	; (80079c8 <xQueueGenericSend+0x248>)
 80078ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078ba:	f002 fdd3 	bl	800a464 <vPortExitCritical>
				return pdPASS;
 80078be:	2301      	movs	r3, #1
 80078c0:	e07d      	b.n	80079be <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d110      	bne.n	80078ea <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c8:	f002 fdcc 	bl	800a464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	4618      	mov	r0, r3
 80078d0:	f004 faea 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	460b      	mov	r3, r1
 80078de:	4601      	mov	r1, r0
 80078e0:	205a      	movs	r0, #90	; 0x5a
 80078e2:	f003 fdeb 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e069      	b.n	80079be <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078f0:	f107 0314 	add.w	r3, r7, #20
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 fc57 	bl	80091a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078fa:	2301      	movs	r3, #1
 80078fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078fe:	f002 fdb1 	bl	800a464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007902:	f001 f8f5 	bl	8008af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007906:	f002 fd7d 	bl	800a404 <vPortEnterCritical>
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007910:	b25b      	sxtb	r3, r3
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d103      	bne.n	8007920 <xQueueGenericSend+0x1a0>
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007926:	b25b      	sxtb	r3, r3
 8007928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792c:	d103      	bne.n	8007936 <xQueueGenericSend+0x1b6>
 800792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007936:	f002 fd95 	bl	800a464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800793a:	1d3a      	adds	r2, r7, #4
 800793c:	f107 0314 	add.w	r3, r7, #20
 8007940:	4611      	mov	r1, r2
 8007942:	4618      	mov	r0, r3
 8007944:	f001 fc46 	bl	80091d4 <xTaskCheckForTimeOut>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d124      	bne.n	8007998 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800794e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007950:	f000 fdb2 	bl	80084b8 <prvIsQueueFull>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d018      	beq.n	800798c <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	3310      	adds	r3, #16
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f001 fac4 	bl	8008ef0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007968:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800796a:	f000 fd3d 	bl	80083e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800796e:	f001 f8cd 	bl	8008b0c <xTaskResumeAll>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	f47f af62 	bne.w	800783e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800797a:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <xQueueGenericSend+0x248>)
 800797c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	e758      	b.n	800783e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800798c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800798e:	f000 fd2b 	bl	80083e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007992:	f001 f8bb 	bl	8008b0c <xTaskResumeAll>
 8007996:	e752      	b.n	800783e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800799a:	f000 fd25 	bl	80083e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800799e:	f001 f8b5 	bl	8008b0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	4618      	mov	r0, r3
 80079a6:	f004 fa7f 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	9300      	str	r3, [sp, #0]
 80079b2:	460b      	mov	r3, r1
 80079b4:	4601      	mov	r1, r0
 80079b6:	205a      	movs	r0, #90	; 0x5a
 80079b8:	f003 fd80 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80079bc:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3738      	adds	r7, #56	; 0x38
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b090      	sub	sp, #64	; 0x40
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <xQueueGenericSendFromISR+0x3c>
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <xQueueGenericSendFromISR+0x40>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <xQueueGenericSendFromISR+0x42>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d103      	bne.n	8007a36 <xQueueGenericSendFromISR+0x6a>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <xQueueGenericSendFromISR+0x6e>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueGenericSendFromISR+0x70>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	623b      	str	r3, [r7, #32]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a56:	f002 fdb7 	bl	800a5c8 <vPortValidateInterruptPriority>
	__asm volatile
 8007a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	61fa      	str	r2, [r7, #28]
 8007a70:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007a72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <xQueueGenericSendFromISR+0xbc>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d139      	bne.n	8007afc <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f004 fa04 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007aa0:	4601      	mov	r1, r0
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	2060      	movs	r0, #96	; 0x60
 8007aa8:	f003 fc38 	bl	800b31c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	68b9      	ldr	r1, [r7, #8]
 8007ab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ab2:	f000 fc09 	bl	80082c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ab6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abe:	d112      	bne.n	8007ae6 <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d016      	beq.n	8007af6 <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aca:	3324      	adds	r3, #36	; 0x24
 8007acc:	4618      	mov	r0, r3
 8007ace:	f001 fa9d 	bl	800900c <xTaskRemoveFromEventList>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00e      	beq.n	8007af6 <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	e007      	b.n	8007af6 <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007aea:	3301      	adds	r3, #1
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	b25a      	sxtb	r2, r3
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007af6:	2301      	movs	r3, #1
 8007af8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007afa:	e00b      	b.n	8007b14 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	4618      	mov	r0, r3
 8007b00:	f004 f9d2 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007b04:	4601      	mov	r1, r0
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2060      	movs	r0, #96	; 0x60
 8007b0c:	f003 fc06 	bl	800b31c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b16:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f383 8811 	msr	BASEPRI, r3
}
 8007b1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3740      	adds	r7, #64	; 0x40
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b08e      	sub	sp, #56	; 0x38
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10a      	bne.n	8007b54 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	623b      	str	r3, [r7, #32]
}
 8007b50:	bf00      	nop
 8007b52:	e7fe      	b.n	8007b52 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00a      	beq.n	8007b72 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	61fb      	str	r3, [r7, #28]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <xQueueGiveFromISR+0x58>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <xQueueGiveFromISR+0x5c>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e000      	b.n	8007b88 <xQueueGiveFromISR+0x5e>
 8007b86:	2300      	movs	r3, #0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	61bb      	str	r3, [r7, #24]
}
 8007b9e:	bf00      	nop
 8007ba0:	e7fe      	b.n	8007ba0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ba2:	f002 fd11 	bl	800a5c8 <vPortValidateInterruptPriority>
	__asm volatile
 8007ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	617a      	str	r2, [r7, #20]
 8007bbc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bbe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d235      	bcs.n	8007c3e <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	4618      	mov	r0, r3
 8007be0:	f004 f962 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007be4:	4601      	mov	r1, r0
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	2060      	movs	r0, #96	; 0x60
 8007bec:	f003 fb96 	bl	800b31c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d112      	bne.n	8007c28 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d016      	beq.n	8007c38 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	3324      	adds	r3, #36	; 0x24
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 f9fc 	bl	800900c <xTaskRemoveFromEventList>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00e      	beq.n	8007c38 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	e007      	b.n	8007c38 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	b25a      	sxtb	r2, r3
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c3c:	e00b      	b.n	8007c56 <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	4618      	mov	r0, r3
 8007c42:	f004 f931 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007c46:	4601      	mov	r1, r0
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	2060      	movs	r0, #96	; 0x60
 8007c4e:	f003 fb65 	bl	800b31c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f383 8811 	msr	BASEPRI, r3
}
 8007c60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3738      	adds	r7, #56	; 0x38
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b08f      	sub	sp, #60	; 0x3c
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <xQueueReceive+0x30>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	623b      	str	r3, [r7, #32]
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <xQueueReceive+0x3e>
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <xQueueReceive+0x42>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueReceive+0x44>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueReceive+0x5e>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	61fb      	str	r3, [r7, #28]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cca:	f001 fc0f 	bl	80094ec <xTaskGetSchedulerState>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d102      	bne.n	8007cda <xQueueReceive+0x6e>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <xQueueReceive+0x72>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <xQueueReceive+0x74>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <xQueueReceive+0x8e>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61bb      	str	r3, [r7, #24]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cfa:	f002 fb83 	bl	800a404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d02f      	beq.n	8007d6a <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d0a:	68b9      	ldr	r1, [r7, #8]
 8007d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0e:	f000 fb45 	bl	800839c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8007d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d14:	4618      	mov	r0, r3
 8007d16:	f004 f8c7 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	f004 f8c3 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007d22:	4602      	mov	r2, r0
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2101      	movs	r1, #1
 8007d28:	9100      	str	r1, [sp, #0]
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	205c      	movs	r0, #92	; 0x5c
 8007d2e:	f003 fbc5 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	1e5a      	subs	r2, r3, #1
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00f      	beq.n	8007d62 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	3310      	adds	r3, #16
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 f960 	bl	800900c <xTaskRemoveFromEventList>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d007      	beq.n	8007d62 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d52:	4b4d      	ldr	r3, [pc, #308]	; (8007e88 <xQueueReceive+0x21c>)
 8007d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d62:	f002 fb7f 	bl	800a464 <vPortExitCritical>
				return pdPASS;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e08a      	b.n	8007e80 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d113      	bne.n	8007d98 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d70:	f002 fb78 	bl	800a464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	4618      	mov	r0, r3
 8007d78:	f004 f896 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	2000      	movs	r0, #0
 8007d80:	f004 f892 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007d84:	4602      	mov	r2, r0
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2101      	movs	r1, #1
 8007d8a:	9100      	str	r1, [sp, #0]
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	205c      	movs	r0, #92	; 0x5c
 8007d90:	f003 fb94 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e073      	b.n	8007e80 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d9e:	f107 0310 	add.w	r3, r7, #16
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 fa00 	bl	80091a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dac:	f002 fb5a 	bl	800a464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007db0:	f000 fe9e 	bl	8008af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007db4:	f002 fb26 	bl	800a404 <vPortEnterCritical>
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dbe:	b25b      	sxtb	r3, r3
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc4:	d103      	bne.n	8007dce <xQueueReceive+0x162>
 8007dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dd4:	b25b      	sxtb	r3, r3
 8007dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dda:	d103      	bne.n	8007de4 <xQueueReceive+0x178>
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007de4:	f002 fb3e 	bl	800a464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007de8:	1d3a      	adds	r2, r7, #4
 8007dea:	f107 0310 	add.w	r3, r7, #16
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f9ef 	bl	80091d4 <xTaskCheckForTimeOut>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d124      	bne.n	8007e46 <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dfe:	f000 fb45 	bl	800848c <prvIsQueueEmpty>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d018      	beq.n	8007e3a <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	3324      	adds	r3, #36	; 0x24
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 f86d 	bl	8008ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e18:	f000 fae6 	bl	80083e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e1c:	f000 fe76 	bl	8008b0c <xTaskResumeAll>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f47f af69 	bne.w	8007cfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007e28:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <xQueueReceive+0x21c>)
 8007e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	e75f      	b.n	8007cfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3c:	f000 fad4 	bl	80083e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e40:	f000 fe64 	bl	8008b0c <xTaskResumeAll>
 8007e44:	e759      	b.n	8007cfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e48:	f000 face 	bl	80083e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e4c:	f000 fe5e 	bl	8008b0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e52:	f000 fb1b 	bl	800848c <prvIsQueueEmpty>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f43f af4e 	beq.w	8007cfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	4618      	mov	r0, r3
 8007e62:	f004 f821 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007e66:	4604      	mov	r4, r0
 8007e68:	2000      	movs	r0, #0
 8007e6a:	f004 f81d 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2101      	movs	r1, #1
 8007e74:	9100      	str	r1, [sp, #0]
 8007e76:	4621      	mov	r1, r4
 8007e78:	205c      	movs	r0, #92	; 0x5c
 8007e7a:	f003 fb1f 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8007e7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3734      	adds	r7, #52	; 0x34
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd90      	pop	{r4, r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e8c:	b590      	push	{r4, r7, lr}
 8007e8e:	b091      	sub	sp, #68	; 0x44
 8007e90:	af02      	add	r7, sp, #8
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	623b      	str	r3, [r7, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	61fb      	str	r3, [r7, #28]
}
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007edc:	f001 fb06 	bl	80094ec <xTaskGetSchedulerState>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d102      	bne.n	8007eec <xQueueSemaphoreTake+0x60>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <xQueueSemaphoreTake+0x64>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <xQueueSemaphoreTake+0x66>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10a      	bne.n	8007f0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	f383 8811 	msr	BASEPRI, r3
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	f3bf 8f4f 	dsb	sy
 8007f06:	61bb      	str	r3, [r7, #24]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f0c:	f002 fa7a 	bl	800a404 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d034      	beq.n	8007f86 <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f003 ffc2 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007f24:	4604      	mov	r4, r0
 8007f26:	2000      	movs	r0, #0
 8007f28:	f003 ffbe 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2101      	movs	r1, #1
 8007f32:	9100      	str	r1, [sp, #0]
 8007f34:	4621      	mov	r1, r4
 8007f36:	205c      	movs	r0, #92	; 0x5c
 8007f38:	f003 fac0 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	1e5a      	subs	r2, r3, #1
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007f4c:	f001 fc76 	bl	800983c <pvTaskIncrementMutexHeldCount>
 8007f50:	4602      	mov	r2, r0
 8007f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00f      	beq.n	8007f7e <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	3310      	adds	r3, #16
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f852 	bl	800900c <xTaskRemoveFromEventList>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f6e:	4b64      	ldr	r3, [pc, #400]	; (8008100 <xQueueSemaphoreTake+0x274>)
 8007f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f7e:	f002 fa71 	bl	800a464 <vPortExitCritical>
				return pdPASS;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e0b7      	b.n	80080f6 <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d121      	bne.n	8007fd0 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	617b      	str	r3, [r7, #20]
}
 8007fa4:	bf00      	nop
 8007fa6:	e7fe      	b.n	8007fa6 <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007fa8:	f002 fa5c 	bl	800a464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f003 ff7a 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f003 ff76 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	9100      	str	r1, [sp, #0]
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	205c      	movs	r0, #92	; 0x5c
 8007fc8:	f003 fa78 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e092      	b.n	80080f6 <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d106      	bne.n	8007fe4 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 f8e4 	bl	80091a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fe4:	f002 fa3e 	bl	800a464 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fe8:	f000 fd82 	bl	8008af0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fec:	f002 fa0a 	bl	800a404 <vPortEnterCritical>
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ff6:	b25b      	sxtb	r3, r3
 8007ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffc:	d103      	bne.n	8008006 <xQueueSemaphoreTake+0x17a>
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008012:	d103      	bne.n	800801c <xQueueSemaphoreTake+0x190>
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	2200      	movs	r2, #0
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800801c:	f002 fa22 	bl	800a464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008020:	463a      	mov	r2, r7
 8008022:	f107 030c 	add.w	r3, r7, #12
 8008026:	4611      	mov	r1, r2
 8008028:	4618      	mov	r0, r3
 800802a:	f001 f8d3 	bl	80091d4 <xTaskCheckForTimeOut>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d132      	bne.n	800809a <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008034:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008036:	f000 fa29 	bl	800848c <prvIsQueueEmpty>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d026      	beq.n	800808e <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8008048:	f002 f9dc 	bl	800a404 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f001 fa69 	bl	8009528 <xTaskPriorityInherit>
 8008056:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008058:	f002 fa04 	bl	800a464 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	4611      	mov	r1, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f000 ff43 	bl	8008ef0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800806a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800806c:	f000 f9bc 	bl	80083e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008070:	f000 fd4c 	bl	8008b0c <xTaskResumeAll>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	f47f af48 	bne.w	8007f0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800807c:	4b20      	ldr	r3, [pc, #128]	; (8008100 <xQueueSemaphoreTake+0x274>)
 800807e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	e73e      	b.n	8007f0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800808e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008090:	f000 f9aa 	bl	80083e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008094:	f000 fd3a 	bl	8008b0c <xTaskResumeAll>
 8008098:	e738      	b.n	8007f0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800809a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800809c:	f000 f9a4 	bl	80083e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a0:	f000 fd34 	bl	8008b0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080a6:	f000 f9f1 	bl	800848c <prvIsQueueEmpty>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f43f af2d 	beq.w	8007f0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80080b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00d      	beq.n	80080d4 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 80080b8:	f002 f9a4 	bl	800a404 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80080bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080be:	f000 f8eb 	bl	8008298 <prvGetDisinheritPriorityAfterTimeout>
 80080c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fb14 	bl	80096f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80080d0:	f002 f9c8 	bl	800a464 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	4618      	mov	r0, r3
 80080d8:	f003 fee6 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 80080dc:	4604      	mov	r4, r0
 80080de:	2000      	movs	r0, #0
 80080e0:	f003 fee2 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 80080e4:	4602      	mov	r2, r0
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	2101      	movs	r1, #1
 80080ea:	9100      	str	r1, [sp, #0]
 80080ec:	4621      	mov	r1, r4
 80080ee:	205c      	movs	r0, #92	; 0x5c
 80080f0:	f003 f9e4 	bl	800b4bc <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80080f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	373c      	adds	r7, #60	; 0x3c
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd90      	pop	{r4, r7, pc}
 80080fe:	bf00      	nop
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b08f      	sub	sp, #60	; 0x3c
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	623b      	str	r3, [r7, #32]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d103      	bne.n	800813e <xQueueReceiveFromISR+0x3a>
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <xQueueReceiveFromISR+0x3e>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <xQueueReceiveFromISR+0x40>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10a      	bne.n	800815e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	61fb      	str	r3, [r7, #28]
}
 800815a:	bf00      	nop
 800815c:	e7fe      	b.n	800815c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800815e:	f002 fa33 	bl	800a5c8 <vPortValidateInterruptPriority>
	__asm volatile
 8008162:	f3ef 8211 	mrs	r2, BASEPRI
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	61ba      	str	r2, [r7, #24]
 8008178:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800817a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800817c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008186:	2b00      	cmp	r3, #0
 8008188:	d03e      	beq.n	8008208 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	4618      	mov	r0, r3
 8008198:	f003 fe86 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 800819c:	4604      	mov	r4, r0
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f003 fe81 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 80081a6:	4602      	mov	r2, r0
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4621      	mov	r1, r4
 80081ac:	2062      	movs	r0, #98	; 0x62
 80081ae:	f003 f90f 	bl	800b3d0 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80081b2:	68b9      	ldr	r1, [r7, #8]
 80081b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081b6:	f000 f8f1 	bl	800839c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	1e5a      	subs	r2, r3, #1
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80081c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80081c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ca:	d112      	bne.n	80081f2 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d016      	beq.n	8008202 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	3310      	adds	r3, #16
 80081d8:	4618      	mov	r0, r3
 80081da:	f000 ff17 	bl	800900c <xTaskRemoveFromEventList>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00e      	beq.n	8008202 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00b      	beq.n	8008202 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e007      	b.n	8008202 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80081f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081f6:	3301      	adds	r3, #1
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	b25a      	sxtb	r2, r3
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008202:	2301      	movs	r3, #1
 8008204:	637b      	str	r3, [r7, #52]	; 0x34
 8008206:	e010      	b.n	800822a <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8008208:	2300      	movs	r3, #0
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	4618      	mov	r0, r3
 8008210:	f003 fe4a 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8008214:	4604      	mov	r4, r0
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4618      	mov	r0, r3
 800821a:	f003 fe45 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 800821e:	4602      	mov	r2, r0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4621      	mov	r1, r4
 8008224:	2062      	movs	r0, #98	; 0x62
 8008226:	f003 f8d3 	bl	800b3d0 <SEGGER_SYSVIEW_RecordU32x3>
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f383 8811 	msr	BASEPRI, r3
}
 8008234:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008238:	4618      	mov	r0, r3
 800823a:	373c      	adds	r7, #60	; 0x3c
 800823c:	46bd      	mov	sp, r7
 800823e:	bd90      	pop	{r4, r7, pc}

08008240 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <vQueueDelete+0x28>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60bb      	str	r3, [r7, #8]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4618      	mov	r0, r3
 800826c:	f003 fe1c 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8008270:	4603      	mov	r3, r0
 8008272:	4619      	mov	r1, r3
 8008274:	205f      	movs	r0, #95	; 0x5f
 8008276:	f003 f815 	bl	800b2a4 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f966 	bl	800854c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008286:	2b00      	cmp	r3, #0
 8008288:	d102      	bne.n	8008290 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f002 faa8 	bl	800a7e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e001      	b.n	80082ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082b6:	2300      	movs	r3, #0
 80082b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80082ba:	68fb      	ldr	r3, [r7, #12]
	}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d14d      	bne.n	800838a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 f98a 	bl	800960c <xTaskPriorityDisinherit>
 80082f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	e043      	b.n	800838a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d119      	bne.n	800833c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6858      	ldr	r0, [r3, #4]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	461a      	mov	r2, r3
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	f004 fadf 	bl	800c8d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	441a      	add	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d32b      	bcc.n	800838a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	605a      	str	r2, [r3, #4]
 800833a:	e026      	b.n	800838a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	68d8      	ldr	r0, [r3, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008344:	461a      	mov	r2, r3
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	f004 fac5 	bl	800c8d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008354:	425b      	negs	r3, r3
 8008356:	441a      	add	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d207      	bcs.n	8008378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	425b      	negs	r3, r3
 8008372:	441a      	add	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b02      	cmp	r3, #2
 800837c:	d105      	bne.n	800838a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	3b01      	subs	r3, #1
 8008388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008392:	697b      	ldr	r3, [r7, #20]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3718      	adds	r7, #24
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d018      	beq.n	80083e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	441a      	add	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68da      	ldr	r2, [r3, #12]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d303      	bcc.n	80083d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68d9      	ldr	r1, [r3, #12]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	461a      	mov	r2, r3
 80083da:	6838      	ldr	r0, [r7, #0]
 80083dc:	f004 fa7b 	bl	800c8d6 <memcpy>
	}
}
 80083e0:	bf00      	nop
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80083f0:	f002 f808 	bl	800a404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80083fc:	e011      	b.n	8008422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d012      	beq.n	800842c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	3324      	adds	r3, #36	; 0x24
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fdfe 	bl	800900c <xTaskRemoveFromEventList>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008416:	f000 ff3f 	bl	8009298 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
 800841c:	3b01      	subs	r3, #1
 800841e:	b2db      	uxtb	r3, r3
 8008420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dce9      	bgt.n	80083fe <prvUnlockQueue+0x16>
 800842a:	e000      	b.n	800842e <prvUnlockQueue+0x46>
					break;
 800842c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	22ff      	movs	r2, #255	; 0xff
 8008432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008436:	f002 f815 	bl	800a464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800843a:	f001 ffe3 	bl	800a404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008446:	e011      	b.n	800846c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d012      	beq.n	8008476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3310      	adds	r3, #16
 8008454:	4618      	mov	r0, r3
 8008456:	f000 fdd9 	bl	800900c <xTaskRemoveFromEventList>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008460:	f000 ff1a 	bl	8009298 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	3b01      	subs	r3, #1
 8008468:	b2db      	uxtb	r3, r3
 800846a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800846c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008470:	2b00      	cmp	r3, #0
 8008472:	dce9      	bgt.n	8008448 <prvUnlockQueue+0x60>
 8008474:	e000      	b.n	8008478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	22ff      	movs	r2, #255	; 0xff
 800847c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008480:	f001 fff0 	bl	800a464 <vPortExitCritical>
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008494:	f001 ffb6 	bl	800a404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	e001      	b.n	80084aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084aa:	f001 ffdb 	bl	800a464 <vPortExitCritical>

	return xReturn;
 80084ae:	68fb      	ldr	r3, [r7, #12]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084c0:	f001 ffa0 	bl	800a404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d102      	bne.n	80084d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	e001      	b.n	80084da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084da:	f001 ffc3 	bl	800a464 <vPortExitCritical>

	return xReturn;
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	e01e      	b.n	8008536 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80084f8:	4a13      	ldr	r2, [pc, #76]	; (8008548 <vQueueAddToRegistry+0x60>)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d115      	bne.n	8008530 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008504:	4910      	ldr	r1, [pc, #64]	; (8008548 <vQueueAddToRegistry+0x60>)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800850e:	4a0e      	ldr	r2, [pc, #56]	; (8008548 <vQueueAddToRegistry+0x60>)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	4413      	add	r3, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4618      	mov	r0, r3
 800851e:	f003 fcc3 	bl	800bea8 <SEGGER_SYSVIEW_ShrinkId>
 8008522:	4601      	mov	r1, r0
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	2071      	movs	r0, #113	; 0x71
 800852a:	f002 fef7 	bl	800b31c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800852e:	e006      	b.n	800853e <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	3301      	adds	r3, #1
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b07      	cmp	r3, #7
 800853a:	d9dd      	bls.n	80084f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800853c:	bf00      	nop
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20026320 	.word	0x20026320

0800854c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	e016      	b.n	8008588 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800855a:	4a10      	ldr	r2, [pc, #64]	; (800859c <vQueueUnregisterQueue+0x50>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	4413      	add	r3, r2
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d10b      	bne.n	8008582 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800856a:	4a0c      	ldr	r2, [pc, #48]	; (800859c <vQueueUnregisterQueue+0x50>)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2100      	movs	r1, #0
 8008570:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008574:	4a09      	ldr	r2, [pc, #36]	; (800859c <vQueueUnregisterQueue+0x50>)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	00db      	lsls	r3, r3, #3
 800857a:	4413      	add	r3, r2
 800857c:	2200      	movs	r2, #0
 800857e:	605a      	str	r2, [r3, #4]
				break;
 8008580:	e006      	b.n	8008590 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b07      	cmp	r3, #7
 800858c:	d9e5      	bls.n	800855a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800858e:	bf00      	nop
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	20026320 	.word	0x20026320

080085a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085b0:	f001 ff28 	bl	800a404 <vPortEnterCritical>
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085ba:	b25b      	sxtb	r3, r3
 80085bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c0:	d103      	bne.n	80085ca <vQueueWaitForMessageRestricted+0x2a>
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085d0:	b25b      	sxtb	r3, r3
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d103      	bne.n	80085e0 <vQueueWaitForMessageRestricted+0x40>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085e0:	f001 ff40 	bl	800a464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	3324      	adds	r3, #36	; 0x24
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fcdb 	bl	8008fb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085fa:	6978      	ldr	r0, [r7, #20]
 80085fc:	f7ff fef4 	bl	80083e8 <prvUnlockQueue>
	}
 8008600:	bf00      	nop
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08e      	sub	sp, #56	; 0x38
 800860c:	af04      	add	r7, sp, #16
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xTaskCreateStatic+0x2a>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	623b      	str	r3, [r7, #32]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10a      	bne.n	800864e <xTaskCreateStatic+0x46>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	61fb      	str	r3, [r7, #28]
}
 800864a:	bf00      	nop
 800864c:	e7fe      	b.n	800864c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800864e:	236c      	movs	r3, #108	; 0x6c
 8008650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	2b6c      	cmp	r3, #108	; 0x6c
 8008656:	d00a      	beq.n	800866e <xTaskCreateStatic+0x66>
	__asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	61bb      	str	r3, [r7, #24]
}
 800866a:	bf00      	nop
 800866c:	e7fe      	b.n	800866c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800866e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	2b00      	cmp	r3, #0
 8008674:	d01e      	beq.n	80086b4 <xTaskCreateStatic+0xac>
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	2b00      	cmp	r3, #0
 800867a:	d01b      	beq.n	80086b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008684:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	2202      	movs	r2, #2
 800868a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800868e:	2300      	movs	r3, #0
 8008690:	9303      	str	r3, [sp, #12]
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	9302      	str	r3, [sp, #8]
 8008696:	f107 0314 	add.w	r3, r7, #20
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 f850 	bl	800874c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086ae:	f000 f8dd 	bl	800886c <prvAddNewTaskToReadyList>
 80086b2:	e001      	b.n	80086b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086b8:	697b      	ldr	r3, [r7, #20]
	}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3728      	adds	r7, #40	; 0x28
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b08c      	sub	sp, #48	; 0x30
 80086c6:	af04      	add	r7, sp, #16
 80086c8:	60f8      	str	r0, [r7, #12]
 80086ca:	60b9      	str	r1, [r7, #8]
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	4613      	mov	r3, r2
 80086d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086d2:	88fb      	ldrh	r3, [r7, #6]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 ffb6 	bl	800a648 <pvPortMalloc>
 80086dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00e      	beq.n	8008702 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086e4:	206c      	movs	r0, #108	; 0x6c
 80086e6:	f001 ffaf 	bl	800a648 <pvPortMalloc>
 80086ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
 80086f8:	e005      	b.n	8008706 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086fa:	6978      	ldr	r0, [r7, #20]
 80086fc:	f002 f870 	bl	800a7e0 <vPortFree>
 8008700:	e001      	b.n	8008706 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d017      	beq.n	800873c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008714:	88fa      	ldrh	r2, [r7, #6]
 8008716:	2300      	movs	r3, #0
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68b9      	ldr	r1, [r7, #8]
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f000 f80e 	bl	800874c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008730:	69f8      	ldr	r0, [r7, #28]
 8008732:	f000 f89b 	bl	800886c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008736:	2301      	movs	r3, #1
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	e002      	b.n	8008742 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800873c:	f04f 33ff 	mov.w	r3, #4294967295
 8008740:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008742:	69bb      	ldr	r3, [r7, #24]
	}
 8008744:	4618      	mov	r0, r3
 8008746:	3720      	adds	r7, #32
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b088      	sub	sp, #32
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	461a      	mov	r2, r3
 8008764:	21a5      	movs	r1, #165	; 0xa5
 8008766:	f004 f83a 	bl	800c7de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008774:	3b01      	subs	r3, #1
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f023 0307 	bic.w	r3, r3, #7
 8008782:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00a      	beq.n	80087a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	617b      	str	r3, [r7, #20]
}
 80087a0:	bf00      	nop
 80087a2:	e7fe      	b.n	80087a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d01f      	beq.n	80087ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087aa:	2300      	movs	r3, #0
 80087ac:	61fb      	str	r3, [r7, #28]
 80087ae:	e012      	b.n	80087d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	69fb      	ldr	r3, [r7, #28]
 80087b4:	4413      	add	r3, r2
 80087b6:	7819      	ldrb	r1, [r3, #0]
 80087b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	4413      	add	r3, r2
 80087be:	3334      	adds	r3, #52	; 0x34
 80087c0:	460a      	mov	r2, r1
 80087c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	4413      	add	r3, r2
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	3301      	adds	r3, #1
 80087d4:	61fb      	str	r3, [r7, #28]
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	2b1d      	cmp	r3, #29
 80087da:	d9e9      	bls.n	80087b0 <prvInitialiseNewTask+0x64>
 80087dc:	e000      	b.n	80087e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80087de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80087e8:	e003      	b.n	80087f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	2b37      	cmp	r3, #55	; 0x37
 80087f6:	d901      	bls.n	80087fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087f8:	2337      	movs	r3, #55	; 0x37
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008800:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008806:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	2200      	movs	r2, #0
 800880c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	3304      	adds	r3, #4
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe fcbc 	bl	8007190 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	3318      	adds	r3, #24
 800881c:	4618      	mov	r0, r3
 800881e:	f7fe fcb7 	bl	8007190 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008826:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008836:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	2200      	movs	r2, #0
 800883c:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	68f9      	ldr	r1, [r7, #12]
 800884a:	69b8      	ldr	r0, [r7, #24]
 800884c:	f001 fcb0 	bl	800a1b0 <pxPortInitialiseStack>
 8008850:	4602      	mov	r2, r0
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008862:	bf00      	nop
 8008864:	3720      	adds	r7, #32
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800886c:	b5b0      	push	{r4, r5, r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af02      	add	r7, sp, #8
 8008872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008874:	f001 fdc6 	bl	800a404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008878:	4b3c      	ldr	r3, [pc, #240]	; (800896c <prvAddNewTaskToReadyList+0x100>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	4a3b      	ldr	r2, [pc, #236]	; (800896c <prvAddNewTaskToReadyList+0x100>)
 8008880:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008882:	4b3b      	ldr	r3, [pc, #236]	; (8008970 <prvAddNewTaskToReadyList+0x104>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800888a:	4a39      	ldr	r2, [pc, #228]	; (8008970 <prvAddNewTaskToReadyList+0x104>)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008890:	4b36      	ldr	r3, [pc, #216]	; (800896c <prvAddNewTaskToReadyList+0x100>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d110      	bne.n	80088ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008898:	f000 fd22 	bl	80092e0 <prvInitialiseTaskLists>
 800889c:	e00d      	b.n	80088ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800889e:	4b35      	ldr	r3, [pc, #212]	; (8008974 <prvAddNewTaskToReadyList+0x108>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d109      	bne.n	80088ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088a6:	4b32      	ldr	r3, [pc, #200]	; (8008970 <prvAddNewTaskToReadyList+0x104>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d802      	bhi.n	80088ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088b4:	4a2e      	ldr	r2, [pc, #184]	; (8008970 <prvAddNewTaskToReadyList+0x104>)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088ba:	4b2f      	ldr	r3, [pc, #188]	; (8008978 <prvAddNewTaskToReadyList+0x10c>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3301      	adds	r3, #1
 80088c0:	4a2d      	ldr	r2, [pc, #180]	; (8008978 <prvAddNewTaskToReadyList+0x10c>)
 80088c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088c4:	4b2c      	ldr	r3, [pc, #176]	; (8008978 <prvAddNewTaskToReadyList+0x10c>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d016      	beq.n	8008900 <prvAddNewTaskToReadyList+0x94>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f003 fa21 	bl	800bd1c <SEGGER_SYSVIEW_OnTaskCreate>
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	461d      	mov	r5, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461c      	mov	r4, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	1ae3      	subs	r3, r4, r3
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	462b      	mov	r3, r5
 80088fc:	f003 fda0 	bl	800c440 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4618      	mov	r0, r3
 8008904:	f003 fa8e 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890c:	4b1b      	ldr	r3, [pc, #108]	; (800897c <prvAddNewTaskToReadyList+0x110>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d903      	bls.n	800891c <prvAddNewTaskToReadyList+0xb0>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	4a18      	ldr	r2, [pc, #96]	; (800897c <prvAddNewTaskToReadyList+0x110>)
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4a15      	ldr	r2, [pc, #84]	; (8008980 <prvAddNewTaskToReadyList+0x114>)
 800892a:	441a      	add	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3304      	adds	r3, #4
 8008930:	4619      	mov	r1, r3
 8008932:	4610      	mov	r0, r2
 8008934:	f7fe fc39 	bl	80071aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008938:	f001 fd94 	bl	800a464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800893c:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <prvAddNewTaskToReadyList+0x108>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00e      	beq.n	8008962 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <prvAddNewTaskToReadyList+0x104>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	429a      	cmp	r2, r3
 8008950:	d207      	bcs.n	8008962 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008952:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <prvAddNewTaskToReadyList+0x118>)
 8008954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bdb0      	pop	{r4, r5, r7, pc}
 800896a:	bf00      	nop
 800896c:	20026834 	.word	0x20026834
 8008970:	20026360 	.word	0x20026360
 8008974:	20026840 	.word	0x20026840
 8008978:	20026850 	.word	0x20026850
 800897c:	2002683c 	.word	0x2002683c
 8008980:	20026364 	.word	0x20026364
 8008984:	e000ed04 	.word	0xe000ed04

08008988 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d01b      	beq.n	80089d2 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800899a:	4b15      	ldr	r3, [pc, #84]	; (80089f0 <vTaskDelay+0x68>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00a      	beq.n	80089b8 <vTaskDelay+0x30>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	60bb      	str	r3, [r7, #8]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089b8:	f000 f89a 	bl	8008af0 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	2023      	movs	r0, #35	; 0x23
 80089c0:	f002 fc70 	bl	800b2a4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 ff4c 	bl	8009864 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089cc:	f000 f89e 	bl	8008b0c <xTaskResumeAll>
 80089d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d107      	bne.n	80089e8 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 80089d8:	4b06      	ldr	r3, [pc, #24]	; (80089f4 <vTaskDelay+0x6c>)
 80089da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	2002685c 	.word	0x2002685c
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b08a      	sub	sp, #40	; 0x28
 80089fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a06:	463a      	mov	r2, r7
 8008a08:	1d39      	adds	r1, r7, #4
 8008a0a:	f107 0308 	add.w	r3, r7, #8
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe f8fe 	bl	8006c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	9202      	str	r2, [sp, #8]
 8008a1c:	9301      	str	r3, [sp, #4]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	460a      	mov	r2, r1
 8008a26:	492b      	ldr	r1, [pc, #172]	; (8008ad4 <vTaskStartScheduler+0xdc>)
 8008a28:	482b      	ldr	r0, [pc, #172]	; (8008ad8 <vTaskStartScheduler+0xe0>)
 8008a2a:	f7ff fded 	bl	8008608 <xTaskCreateStatic>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4a2a      	ldr	r2, [pc, #168]	; (8008adc <vTaskStartScheduler+0xe4>)
 8008a32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a34:	4b29      	ldr	r3, [pc, #164]	; (8008adc <vTaskStartScheduler+0xe4>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
 8008a40:	e001      	b.n	8008a46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d102      	bne.n	8008a52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a4c:	f000 ff5e 	bl	800990c <xTimerCreateTimerTask>
 8008a50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d129      	bne.n	8008aac <vTaskStartScheduler+0xb4>
	__asm volatile
 8008a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	613b      	str	r3, [r7, #16]
}
 8008a6a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a6c:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <vTaskStartScheduler+0xe8>)
 8008a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a74:	4b1b      	ldr	r3, [pc, #108]	; (8008ae4 <vTaskStartScheduler+0xec>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <vTaskStartScheduler+0xf0>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8008a80:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <vTaskStartScheduler+0xf4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3334      	adds	r3, #52	; 0x34
 8008a86:	2205      	movs	r2, #5
 8008a88:	4912      	ldr	r1, [pc, #72]	; (8008ad4 <vTaskStartScheduler+0xdc>)
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f003 fe97 	bl	800c7be <memcmp>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d005      	beq.n	8008aa2 <vTaskStartScheduler+0xaa>
 8008a96:	4b15      	ldr	r3, [pc, #84]	; (8008aec <vTaskStartScheduler+0xf4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f003 f980 	bl	800bda0 <SEGGER_SYSVIEW_OnTaskStartExec>
 8008aa0:	e001      	b.n	8008aa6 <vTaskStartScheduler+0xae>
 8008aa2:	f003 f91f 	bl	800bce4 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008aa6:	f001 fc0b 	bl	800a2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008aaa:	e00e      	b.n	8008aca <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d10a      	bne.n	8008aca <vTaskStartScheduler+0xd2>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	60fb      	str	r3, [r7, #12]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <vTaskStartScheduler+0xd0>
}
 8008aca:	bf00      	nop
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	0800d984 	.word	0x0800d984
 8008ad8:	080092b1 	.word	0x080092b1
 8008adc:	20026858 	.word	0x20026858
 8008ae0:	20026854 	.word	0x20026854
 8008ae4:	20026840 	.word	0x20026840
 8008ae8:	20026838 	.word	0x20026838
 8008aec:	20026360 	.word	0x20026360

08008af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008af4:	4b04      	ldr	r3, [pc, #16]	; (8008b08 <vTaskSuspendAll+0x18>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	4a03      	ldr	r2, [pc, #12]	; (8008b08 <vTaskSuspendAll+0x18>)
 8008afc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008afe:	bf00      	nop
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	2002685c 	.word	0x2002685c

08008b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b084      	sub	sp, #16
 8008b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b1a:	4b44      	ldr	r3, [pc, #272]	; (8008c2c <xTaskResumeAll+0x120>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	603b      	str	r3, [r7, #0]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b38:	f001 fc64 	bl	800a404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b3c:	4b3b      	ldr	r3, [pc, #236]	; (8008c2c <xTaskResumeAll+0x120>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3b01      	subs	r3, #1
 8008b42:	4a3a      	ldr	r2, [pc, #232]	; (8008c2c <xTaskResumeAll+0x120>)
 8008b44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b46:	4b39      	ldr	r3, [pc, #228]	; (8008c2c <xTaskResumeAll+0x120>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d166      	bne.n	8008c1c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b4e:	4b38      	ldr	r3, [pc, #224]	; (8008c30 <xTaskResumeAll+0x124>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d062      	beq.n	8008c1c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b56:	e033      	b.n	8008bc0 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b58:	4b36      	ldr	r3, [pc, #216]	; (8008c34 <xTaskResumeAll+0x128>)
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3318      	adds	r3, #24
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fb7d 	bl	8007264 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fb78 	bl	8007264 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f003 f954 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b80:	4b2d      	ldr	r3, [pc, #180]	; (8008c38 <xTaskResumeAll+0x12c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d903      	bls.n	8008b90 <xTaskResumeAll+0x84>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8c:	4a2a      	ldr	r2, [pc, #168]	; (8008c38 <xTaskResumeAll+0x12c>)
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4a27      	ldr	r2, [pc, #156]	; (8008c3c <xTaskResumeAll+0x130>)
 8008b9e:	441a      	add	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3304      	adds	r3, #4
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f7fe faff 	bl	80071aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb0:	4b23      	ldr	r3, [pc, #140]	; (8008c40 <xTaskResumeAll+0x134>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d302      	bcc.n	8008bc0 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8008bba:	4b22      	ldr	r3, [pc, #136]	; (8008c44 <xTaskResumeAll+0x138>)
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bc0:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <xTaskResumeAll+0x128>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1c7      	bne.n	8008b58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d001      	beq.n	8008bd2 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bce:	f000 fc5d 	bl	800948c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bd2:	4b1d      	ldr	r3, [pc, #116]	; (8008c48 <xTaskResumeAll+0x13c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d010      	beq.n	8008c00 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bde:	f000 f859 	bl	8008c94 <xTaskIncrementTick>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8008be8:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <xTaskResumeAll+0x138>)
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1f1      	bne.n	8008bde <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <xTaskResumeAll+0x13c>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c00:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <xTaskResumeAll+0x138>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <xTaskResumeAll+0x140>)
 8008c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c12:	601a      	str	r2, [r3, #0]
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c1c:	f001 fc22 	bl	800a464 <vPortExitCritical>

	return xAlreadyYielded;
 8008c20:	68bb      	ldr	r3, [r7, #8]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	2002685c 	.word	0x2002685c
 8008c30:	20026834 	.word	0x20026834
 8008c34:	200267f4 	.word	0x200267f4
 8008c38:	2002683c 	.word	0x2002683c
 8008c3c:	20026364 	.word	0x20026364
 8008c40:	20026360 	.word	0x20026360
 8008c44:	20026848 	.word	0x20026848
 8008c48:	20026844 	.word	0x20026844
 8008c4c:	e000ed04 	.word	0xe000ed04

08008c50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <xTaskGetTickCount+0x1c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c5c:	687b      	ldr	r3, [r7, #4]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20026838 	.word	0x20026838

08008c70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c76:	f001 fca7 	bl	800a5c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008c7e:	4b04      	ldr	r3, [pc, #16]	; (8008c90 <xTaskGetTickCountFromISR+0x20>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c84:	683b      	ldr	r3, [r7, #0]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20026838 	.word	0x20026838

08008c94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c9e:	4b51      	ldr	r3, [pc, #324]	; (8008de4 <xTaskIncrementTick+0x150>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f040 8093 	bne.w	8008dce <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ca8:	4b4f      	ldr	r3, [pc, #316]	; (8008de8 <xTaskIncrementTick+0x154>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3301      	adds	r3, #1
 8008cae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cb0:	4a4d      	ldr	r2, [pc, #308]	; (8008de8 <xTaskIncrementTick+0x154>)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d120      	bne.n	8008cfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008cbc:	4b4b      	ldr	r3, [pc, #300]	; (8008dec <xTaskIncrementTick+0x158>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <xTaskIncrementTick+0x48>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	603b      	str	r3, [r7, #0]
}
 8008cd8:	bf00      	nop
 8008cda:	e7fe      	b.n	8008cda <xTaskIncrementTick+0x46>
 8008cdc:	4b43      	ldr	r3, [pc, #268]	; (8008dec <xTaskIncrementTick+0x158>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60fb      	str	r3, [r7, #12]
 8008ce2:	4b43      	ldr	r3, [pc, #268]	; (8008df0 <xTaskIncrementTick+0x15c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a41      	ldr	r2, [pc, #260]	; (8008dec <xTaskIncrementTick+0x158>)
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	4a41      	ldr	r2, [pc, #260]	; (8008df0 <xTaskIncrementTick+0x15c>)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	4b40      	ldr	r3, [pc, #256]	; (8008df4 <xTaskIncrementTick+0x160>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	4a3f      	ldr	r2, [pc, #252]	; (8008df4 <xTaskIncrementTick+0x160>)
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	f000 fbc7 	bl	800948c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cfe:	4b3e      	ldr	r3, [pc, #248]	; (8008df8 <xTaskIncrementTick+0x164>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d34d      	bcc.n	8008da4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d08:	4b38      	ldr	r3, [pc, #224]	; (8008dec <xTaskIncrementTick+0x158>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d12:	4b39      	ldr	r3, [pc, #228]	; (8008df8 <xTaskIncrementTick+0x164>)
 8008d14:	f04f 32ff 	mov.w	r2, #4294967295
 8008d18:	601a      	str	r2, [r3, #0]
					break;
 8008d1a:	e043      	b.n	8008da4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d1c:	4b33      	ldr	r3, [pc, #204]	; (8008dec <xTaskIncrementTick+0x158>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d203      	bcs.n	8008d3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d34:	4a30      	ldr	r2, [pc, #192]	; (8008df8 <xTaskIncrementTick+0x164>)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d3a:	e033      	b.n	8008da4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fa8f 	bl	8007264 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3318      	adds	r3, #24
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fa86 	bl	8007264 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f003 f862 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	4b25      	ldr	r3, [pc, #148]	; (8008dfc <xTaskIncrementTick+0x168>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d903      	bls.n	8008d74 <xTaskIncrementTick+0xe0>
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d70:	4a22      	ldr	r2, [pc, #136]	; (8008dfc <xTaskIncrementTick+0x168>)
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d78:	4613      	mov	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4a1f      	ldr	r2, [pc, #124]	; (8008e00 <xTaskIncrementTick+0x16c>)
 8008d82:	441a      	add	r2, r3
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	3304      	adds	r3, #4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f7fe fa0d 	bl	80071aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d94:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <xTaskIncrementTick+0x170>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d3b4      	bcc.n	8008d08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008da2:	e7b1      	b.n	8008d08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008da4:	4b17      	ldr	r3, [pc, #92]	; (8008e04 <xTaskIncrementTick+0x170>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008daa:	4915      	ldr	r1, [pc, #84]	; (8008e00 <xTaskIncrementTick+0x16c>)
 8008dac:	4613      	mov	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	440b      	add	r3, r1
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d901      	bls.n	8008dc0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008dc0:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <xTaskIncrementTick+0x174>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	617b      	str	r3, [r7, #20]
 8008dcc:	e004      	b.n	8008dd8 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <xTaskIncrementTick+0x178>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	4a0d      	ldr	r2, [pc, #52]	; (8008e0c <xTaskIncrementTick+0x178>)
 8008dd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008dd8:	697b      	ldr	r3, [r7, #20]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	2002685c 	.word	0x2002685c
 8008de8:	20026838 	.word	0x20026838
 8008dec:	200267ec 	.word	0x200267ec
 8008df0:	200267f0 	.word	0x200267f0
 8008df4:	2002684c 	.word	0x2002684c
 8008df8:	20026854 	.word	0x20026854
 8008dfc:	2002683c 	.word	0x2002683c
 8008e00:	20026364 	.word	0x20026364
 8008e04:	20026360 	.word	0x20026360
 8008e08:	20026848 	.word	0x20026848
 8008e0c:	20026844 	.word	0x20026844

08008e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e16:	4b30      	ldr	r3, [pc, #192]	; (8008ed8 <vTaskSwitchContext+0xc8>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e1e:	4b2f      	ldr	r3, [pc, #188]	; (8008edc <vTaskSwitchContext+0xcc>)
 8008e20:	2201      	movs	r2, #1
 8008e22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e24:	e054      	b.n	8008ed0 <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 8008e26:	4b2d      	ldr	r3, [pc, #180]	; (8008edc <vTaskSwitchContext+0xcc>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e2c:	4b2c      	ldr	r3, [pc, #176]	; (8008ee0 <vTaskSwitchContext+0xd0>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	60fb      	str	r3, [r7, #12]
 8008e32:	e010      	b.n	8008e56 <vTaskSwitchContext+0x46>
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <vTaskSwitchContext+0x40>
	__asm volatile
 8008e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3e:	f383 8811 	msr	BASEPRI, r3
 8008e42:	f3bf 8f6f 	isb	sy
 8008e46:	f3bf 8f4f 	dsb	sy
 8008e4a:	607b      	str	r3, [r7, #4]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <vTaskSwitchContext+0x3e>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	4923      	ldr	r1, [pc, #140]	; (8008ee4 <vTaskSwitchContext+0xd4>)
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d0e4      	beq.n	8008e34 <vTaskSwitchContext+0x24>
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4413      	add	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4a1b      	ldr	r2, [pc, #108]	; (8008ee4 <vTaskSwitchContext+0xd4>)
 8008e76:	4413      	add	r3, r2
 8008e78:	60bb      	str	r3, [r7, #8]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	605a      	str	r2, [r3, #4]
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d104      	bne.n	8008e9a <vTaskSwitchContext+0x8a>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	685a      	ldr	r2, [r3, #4]
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	4a11      	ldr	r2, [pc, #68]	; (8008ee8 <vTaskSwitchContext+0xd8>)
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	4a0e      	ldr	r2, [pc, #56]	; (8008ee0 <vTaskSwitchContext+0xd0>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <vTaskSwitchContext+0xd8>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3334      	adds	r3, #52	; 0x34
 8008eb0:	2205      	movs	r2, #5
 8008eb2:	490e      	ldr	r1, [pc, #56]	; (8008eec <vTaskSwitchContext+0xdc>)
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f003 fc82 	bl	800c7be <memcmp>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <vTaskSwitchContext+0xbc>
 8008ec0:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <vTaskSwitchContext+0xd8>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f002 ff6b 	bl	800bda0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8008eca:	e001      	b.n	8008ed0 <vTaskSwitchContext+0xc0>
		traceTASK_SWITCHED_IN();
 8008ecc:	f002 ff0a 	bl	800bce4 <SEGGER_SYSVIEW_OnIdle>
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	2002685c 	.word	0x2002685c
 8008edc:	20026848 	.word	0x20026848
 8008ee0:	2002683c 	.word	0x2002683c
 8008ee4:	20026364 	.word	0x20026364
 8008ee8:	20026360 	.word	0x20026360
 8008eec:	0800d984 	.word	0x0800d984

08008ef0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60fb      	str	r3, [r7, #12]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f16:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <vTaskPlaceOnEventList+0x44>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	3318      	adds	r3, #24
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fe f967 	bl	80071f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f24:	2101      	movs	r1, #1
 8008f26:	6838      	ldr	r0, [r7, #0]
 8008f28:	f000 fc9c 	bl	8009864 <prvAddCurrentTaskToDelayedList>
}
 8008f2c:	bf00      	nop
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20026360 	.word	0x20026360

08008f38 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	617b      	str	r3, [r7, #20]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008f60:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	613b      	str	r3, [r7, #16]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f7e:	4b0b      	ldr	r3, [pc, #44]	; (8008fac <vTaskPlaceOnUnorderedEventList+0x74>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008f88:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f8a:	4b08      	ldr	r3, [pc, #32]	; (8008fac <vTaskPlaceOnUnorderedEventList+0x74>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3318      	adds	r3, #24
 8008f90:	4619      	mov	r1, r3
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f7fe f909 	bl	80071aa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f98:	2101      	movs	r1, #1
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fc62 	bl	8009864 <prvAddCurrentTaskToDelayedList>
}
 8008fa0:	bf00      	nop
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	2002685c 	.word	0x2002685c
 8008fac:	20026360 	.word	0x20026360

08008fb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10a      	bne.n	8008fd8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	617b      	str	r3, [r7, #20]
}
 8008fd4:	bf00      	nop
 8008fd6:	e7fe      	b.n	8008fd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <vTaskPlaceOnEventListRestricted+0x58>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	3318      	adds	r3, #24
 8008fde:	4619      	mov	r1, r3
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f7fe f8e2 	bl	80071aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008fec:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008ff2:	2024      	movs	r0, #36	; 0x24
 8008ff4:	f002 f938 	bl	800b268 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	68b8      	ldr	r0, [r7, #8]
 8008ffc:	f000 fc32 	bl	8009864 <prvAddCurrentTaskToDelayedList>
	}
 8009000:	bf00      	nop
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20026360 	.word	0x20026360

0800900c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	60fb      	str	r3, [r7, #12]
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	3318      	adds	r3, #24
 800903c:	4618      	mov	r0, r3
 800903e:	f7fe f911 	bl	8007264 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009042:	4b20      	ldr	r3, [pc, #128]	; (80090c4 <xTaskRemoveFromEventList+0xb8>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d121      	bne.n	800908e <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe f908 	bl	8007264 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	4618      	mov	r0, r3
 8009058:	f002 fee4 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	4b19      	ldr	r3, [pc, #100]	; (80090c8 <xTaskRemoveFromEventList+0xbc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d903      	bls.n	8009070 <xTaskRemoveFromEventList+0x64>
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	4a16      	ldr	r2, [pc, #88]	; (80090c8 <xTaskRemoveFromEventList+0xbc>)
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4613      	mov	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4a13      	ldr	r2, [pc, #76]	; (80090cc <xTaskRemoveFromEventList+0xc0>)
 800907e:	441a      	add	r2, r3
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	3304      	adds	r3, #4
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fe f88f 	bl	80071aa <vListInsertEnd>
 800908c:	e005      	b.n	800909a <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	3318      	adds	r3, #24
 8009092:	4619      	mov	r1, r3
 8009094:	480e      	ldr	r0, [pc, #56]	; (80090d0 <xTaskRemoveFromEventList+0xc4>)
 8009096:	f7fe f888 	bl	80071aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909e:	4b0d      	ldr	r3, [pc, #52]	; (80090d4 <xTaskRemoveFromEventList+0xc8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d905      	bls.n	80090b4 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090a8:	2301      	movs	r3, #1
 80090aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <xTaskRemoveFromEventList+0xcc>)
 80090ae:	2201      	movs	r2, #1
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	e001      	b.n	80090b8 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090b8:	697b      	ldr	r3, [r7, #20]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3718      	adds	r7, #24
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	2002685c 	.word	0x2002685c
 80090c8:	2002683c 	.word	0x2002683c
 80090cc:	20026364 	.word	0x20026364
 80090d0:	200267f4 	.word	0x200267f4
 80090d4:	20026360 	.word	0x20026360
 80090d8:	20026848 	.word	0x20026848

080090dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80090e6:	4b2b      	ldr	r3, [pc, #172]	; (8009194 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	613b      	str	r3, [r7, #16]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10a      	bne.n	8009130 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800911a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	60fb      	str	r3, [r7, #12]
}
 800912c:	bf00      	nop
 800912e:	e7fe      	b.n	800912e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7fe f897 	bl	8007264 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	3304      	adds	r3, #4
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe f892 	bl	8007264 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	4618      	mov	r0, r3
 8009144:	f002 fe6e 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914c:	4b12      	ldr	r3, [pc, #72]	; (8009198 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d903      	bls.n	800915c <vTaskRemoveFromUnorderedEventList+0x80>
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	4a0f      	ldr	r2, [pc, #60]	; (8009198 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	4a0c      	ldr	r2, [pc, #48]	; (800919c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800916a:	441a      	add	r2, r3
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3304      	adds	r3, #4
 8009170:	4619      	mov	r1, r3
 8009172:	4610      	mov	r0, r2
 8009174:	f7fe f819 	bl	80071aa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800917c:	4b08      	ldr	r3, [pc, #32]	; (80091a0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009182:	429a      	cmp	r2, r3
 8009184:	d902      	bls.n	800918c <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009186:	4b07      	ldr	r3, [pc, #28]	; (80091a4 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8009188:	2201      	movs	r2, #1
 800918a:	601a      	str	r2, [r3, #0]
	}
}
 800918c:	bf00      	nop
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	2002685c 	.word	0x2002685c
 8009198:	2002683c 	.word	0x2002683c
 800919c:	20026364 	.word	0x20026364
 80091a0:	20026360 	.word	0x20026360
 80091a4:	20026848 	.word	0x20026848

080091a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <vTaskInternalSetTimeOutState+0x24>)
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <vTaskInternalSetTimeOutState+0x28>)
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	605a      	str	r2, [r3, #4]
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	2002684c 	.word	0x2002684c
 80091d0:	20026838 	.word	0x20026838

080091d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b088      	sub	sp, #32
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d10a      	bne.n	80091fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80091e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e8:	f383 8811 	msr	BASEPRI, r3
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	613b      	str	r3, [r7, #16]
}
 80091f6:	bf00      	nop
 80091f8:	e7fe      	b.n	80091f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10a      	bne.n	8009216 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009216:	f001 f8f5 	bl	800a404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800921a:	4b1d      	ldr	r3, [pc, #116]	; (8009290 <xTaskCheckForTimeOut+0xbc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009232:	d102      	bne.n	800923a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009234:	2300      	movs	r3, #0
 8009236:	61fb      	str	r3, [r7, #28]
 8009238:	e023      	b.n	8009282 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	4b15      	ldr	r3, [pc, #84]	; (8009294 <xTaskCheckForTimeOut+0xc0>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	429a      	cmp	r2, r3
 8009244:	d007      	beq.n	8009256 <xTaskCheckForTimeOut+0x82>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	429a      	cmp	r2, r3
 800924e:	d302      	bcc.n	8009256 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009250:	2301      	movs	r3, #1
 8009252:	61fb      	str	r3, [r7, #28]
 8009254:	e015      	b.n	8009282 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	429a      	cmp	r2, r3
 800925e:	d20b      	bcs.n	8009278 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff ff9b 	bl	80091a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	e004      	b.n	8009282 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800927e:	2301      	movs	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009282:	f001 f8ef 	bl	800a464 <vPortExitCritical>

	return xReturn;
 8009286:	69fb      	ldr	r3, [r7, #28]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3720      	adds	r7, #32
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	20026838 	.word	0x20026838
 8009294:	2002684c 	.word	0x2002684c

08009298 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800929c:	4b03      	ldr	r3, [pc, #12]	; (80092ac <vTaskMissedYield+0x14>)
 800929e:	2201      	movs	r2, #1
 80092a0:	601a      	str	r2, [r3, #0]
}
 80092a2:	bf00      	nop
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	20026848 	.word	0x20026848

080092b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80092b8:	f000 f852 	bl	8009360 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <prvIdleTask+0x28>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d9f9      	bls.n	80092b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80092c4:	4b05      	ldr	r3, [pc, #20]	; (80092dc <prvIdleTask+0x2c>)
 80092c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80092d4:	e7f0      	b.n	80092b8 <prvIdleTask+0x8>
 80092d6:	bf00      	nop
 80092d8:	20026364 	.word	0x20026364
 80092dc:	e000ed04 	.word	0xe000ed04

080092e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80092e6:	2300      	movs	r3, #0
 80092e8:	607b      	str	r3, [r7, #4]
 80092ea:	e00c      	b.n	8009306 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4a12      	ldr	r2, [pc, #72]	; (8009340 <prvInitialiseTaskLists+0x60>)
 80092f8:	4413      	add	r3, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fd ff28 	bl	8007150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3301      	adds	r3, #1
 8009304:	607b      	str	r3, [r7, #4]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b37      	cmp	r3, #55	; 0x37
 800930a:	d9ef      	bls.n	80092ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800930c:	480d      	ldr	r0, [pc, #52]	; (8009344 <prvInitialiseTaskLists+0x64>)
 800930e:	f7fd ff1f 	bl	8007150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009312:	480d      	ldr	r0, [pc, #52]	; (8009348 <prvInitialiseTaskLists+0x68>)
 8009314:	f7fd ff1c 	bl	8007150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009318:	480c      	ldr	r0, [pc, #48]	; (800934c <prvInitialiseTaskLists+0x6c>)
 800931a:	f7fd ff19 	bl	8007150 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800931e:	480c      	ldr	r0, [pc, #48]	; (8009350 <prvInitialiseTaskLists+0x70>)
 8009320:	f7fd ff16 	bl	8007150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009324:	480b      	ldr	r0, [pc, #44]	; (8009354 <prvInitialiseTaskLists+0x74>)
 8009326:	f7fd ff13 	bl	8007150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800932a:	4b0b      	ldr	r3, [pc, #44]	; (8009358 <prvInitialiseTaskLists+0x78>)
 800932c:	4a05      	ldr	r2, [pc, #20]	; (8009344 <prvInitialiseTaskLists+0x64>)
 800932e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <prvInitialiseTaskLists+0x7c>)
 8009332:	4a05      	ldr	r2, [pc, #20]	; (8009348 <prvInitialiseTaskLists+0x68>)
 8009334:	601a      	str	r2, [r3, #0]
}
 8009336:	bf00      	nop
 8009338:	3708      	adds	r7, #8
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20026364 	.word	0x20026364
 8009344:	200267c4 	.word	0x200267c4
 8009348:	200267d8 	.word	0x200267d8
 800934c:	200267f4 	.word	0x200267f4
 8009350:	20026808 	.word	0x20026808
 8009354:	20026820 	.word	0x20026820
 8009358:	200267ec 	.word	0x200267ec
 800935c:	200267f0 	.word	0x200267f0

08009360 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009366:	e019      	b.n	800939c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009368:	f001 f84c 	bl	800a404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936c:	4b10      	ldr	r3, [pc, #64]	; (80093b0 <prvCheckTasksWaitingTermination+0x50>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3304      	adds	r3, #4
 8009378:	4618      	mov	r0, r3
 800937a:	f7fd ff73 	bl	8007264 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800937e:	4b0d      	ldr	r3, [pc, #52]	; (80093b4 <prvCheckTasksWaitingTermination+0x54>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3b01      	subs	r3, #1
 8009384:	4a0b      	ldr	r2, [pc, #44]	; (80093b4 <prvCheckTasksWaitingTermination+0x54>)
 8009386:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009388:	4b0b      	ldr	r3, [pc, #44]	; (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3b01      	subs	r3, #1
 800938e:	4a0a      	ldr	r2, [pc, #40]	; (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 8009390:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009392:	f001 f867 	bl	800a464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f848 	bl	800942c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <prvCheckTasksWaitingTermination+0x58>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e1      	bne.n	8009368 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80093a4:	bf00      	nop
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	20026808 	.word	0x20026808
 80093b4:	20026834 	.word	0x20026834
 80093b8:	2002681c 	.word	0x2002681c

080093bc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80093c8:	e005      	b.n	80093d6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3301      	adds	r3, #1
 80093ce:	607b      	str	r3, [r7, #4]
			ulCount++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2ba5      	cmp	r3, #165	; 0xa5
 80093dc:	d0f5      	beq.n	80093ca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	089b      	lsrs	r3, r3, #2
 80093e2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	b29b      	uxth	r3, r3
	}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d102      	bne.n	8009408 <uxTaskGetStackHighWaterMark+0x14>
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <uxTaskGetStackHighWaterMark+0x34>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	e000      	b.n	800940a <uxTaskGetStackHighWaterMark+0x16>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009412:	6938      	ldr	r0, [r7, #16]
 8009414:	f7ff ffd2 	bl	80093bc <prvTaskCheckFreeStackSpace>
 8009418:	4603      	mov	r3, r0
 800941a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800941c:	68fb      	ldr	r3, [r7, #12]
	}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20026360 	.word	0x20026360

0800942c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 800943a:	2b00      	cmp	r3, #0
 800943c:	d108      	bne.n	8009450 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009442:	4618      	mov	r0, r3
 8009444:	f001 f9cc 	bl	800a7e0 <vPortFree>
				vPortFree( pxTCB );
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f001 f9c9 	bl	800a7e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800944e:	e018      	b.n	8009482 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8009456:	2b01      	cmp	r3, #1
 8009458:	d103      	bne.n	8009462 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 f9c0 	bl	800a7e0 <vPortFree>
	}
 8009460:	e00f      	b.n	8009482 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8009468:	2b02      	cmp	r3, #2
 800946a:	d00a      	beq.n	8009482 <prvDeleteTCB+0x56>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60fb      	str	r3, [r7, #12]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <prvDeleteTCB+0x54>
	}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009492:	4b0c      	ldr	r3, [pc, #48]	; (80094c4 <prvResetNextTaskUnblockTime+0x38>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d104      	bne.n	80094a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <prvResetNextTaskUnblockTime+0x3c>)
 800949e:	f04f 32ff 	mov.w	r2, #4294967295
 80094a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094a4:	e008      	b.n	80094b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <prvResetNextTaskUnblockTime+0x38>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4a04      	ldr	r2, [pc, #16]	; (80094c8 <prvResetNextTaskUnblockTime+0x3c>)
 80094b6:	6013      	str	r3, [r2, #0]
}
 80094b8:	bf00      	nop
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	200267ec 	.word	0x200267ec
 80094c8:	20026854 	.word	0x20026854

080094cc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <xTaskGetCurrentTaskHandle+0x1c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80094d8:	687b      	ldr	r3, [r7, #4]
	}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	20026360 	.word	0x20026360

080094ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094f2:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <xTaskGetSchedulerState+0x34>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d102      	bne.n	8009500 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094fa:	2301      	movs	r3, #1
 80094fc:	607b      	str	r3, [r7, #4]
 80094fe:	e008      	b.n	8009512 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009500:	4b08      	ldr	r3, [pc, #32]	; (8009524 <xTaskGetSchedulerState+0x38>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d102      	bne.n	800950e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009508:	2302      	movs	r3, #2
 800950a:	607b      	str	r3, [r7, #4]
 800950c:	e001      	b.n	8009512 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800950e:	2300      	movs	r3, #0
 8009510:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009512:	687b      	ldr	r3, [r7, #4]
	}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	20026840 	.word	0x20026840
 8009524:	2002685c 	.word	0x2002685c

08009528 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009534:	2300      	movs	r3, #0
 8009536:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d05a      	beq.n	80095f4 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	4b2f      	ldr	r3, [pc, #188]	; (8009600 <xTaskPriorityInherit+0xd8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	429a      	cmp	r2, r3
 800954a:	d24a      	bcs.n	80095e2 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	699b      	ldr	r3, [r3, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	db06      	blt.n	8009562 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009554:	4b2a      	ldr	r3, [pc, #168]	; (8009600 <xTaskPriorityInherit+0xd8>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6959      	ldr	r1, [r3, #20]
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800956a:	4613      	mov	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4a24      	ldr	r2, [pc, #144]	; (8009604 <xTaskPriorityInherit+0xdc>)
 8009574:	4413      	add	r3, r2
 8009576:	4299      	cmp	r1, r3
 8009578:	d126      	bne.n	80095c8 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	3304      	adds	r3, #4
 800957e:	4618      	mov	r0, r3
 8009580:	f7fd fe70 	bl	8007264 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009584:	4b1e      	ldr	r3, [pc, #120]	; (8009600 <xTaskPriorityInherit+0xd8>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	4618      	mov	r0, r3
 8009592:	f002 fc47 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959a:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <xTaskPriorityInherit+0xe0>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	429a      	cmp	r2, r3
 80095a0:	d903      	bls.n	80095aa <xTaskPriorityInherit+0x82>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	4a18      	ldr	r2, [pc, #96]	; (8009608 <xTaskPriorityInherit+0xe0>)
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	4613      	mov	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4a13      	ldr	r2, [pc, #76]	; (8009604 <xTaskPriorityInherit+0xdc>)
 80095b8:	441a      	add	r2, r3
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	3304      	adds	r3, #4
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fd fdf2 	bl	80071aa <vListInsertEnd>
 80095c6:	e004      	b.n	80095d2 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80095c8:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <xTaskPriorityInherit+0xd8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4619      	mov	r1, r3
 80095d6:	2049      	movs	r0, #73	; 0x49
 80095d8:	f001 fe64 	bl	800b2a4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80095dc:	2301      	movs	r3, #1
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	e008      	b.n	80095f4 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <xTaskPriorityInherit+0xd8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d201      	bcs.n	80095f4 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80095f0:	2301      	movs	r3, #1
 80095f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095f4:	68fb      	ldr	r3, [r7, #12]
	}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	20026360 	.word	0x20026360
 8009604:	20026364 	.word	0x20026364
 8009608:	2002683c 	.word	0x2002683c

0800960c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009618:	2300      	movs	r3, #0
 800961a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d05f      	beq.n	80096e2 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009622:	4b32      	ldr	r3, [pc, #200]	; (80096ec <xTaskPriorityDisinherit+0xe0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	429a      	cmp	r2, r3
 800962a:	d00a      	beq.n	8009642 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	60fb      	str	r3, [r7, #12]
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	60bb      	str	r3, [r7, #8]
}
 800965c:	bf00      	nop
 800965e:	e7fe      	b.n	800965e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009664:	1e5a      	subs	r2, r3, #1
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009672:	429a      	cmp	r2, r3
 8009674:	d035      	beq.n	80096e2 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800967a:	2b00      	cmp	r3, #0
 800967c:	d131      	bne.n	80096e2 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	3304      	adds	r3, #4
 8009682:	4618      	mov	r0, r3
 8009684:	f7fd fdee 	bl	8007264 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4619      	mov	r1, r3
 800968c:	204a      	movs	r0, #74	; 0x4a
 800968e:	f001 fe09 	bl	800b2a4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f002 fbbb 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b2:	4b0f      	ldr	r3, [pc, #60]	; (80096f0 <xTaskPriorityDisinherit+0xe4>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d903      	bls.n	80096c2 <xTaskPriorityDisinherit+0xb6>
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096be:	4a0c      	ldr	r2, [pc, #48]	; (80096f0 <xTaskPriorityDisinherit+0xe4>)
 80096c0:	6013      	str	r3, [r2, #0]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c6:	4613      	mov	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4a09      	ldr	r2, [pc, #36]	; (80096f4 <xTaskPriorityDisinherit+0xe8>)
 80096d0:	441a      	add	r2, r3
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4619      	mov	r1, r3
 80096d8:	4610      	mov	r0, r2
 80096da:	f7fd fd66 	bl	80071aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80096de:	2301      	movs	r3, #1
 80096e0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80096e2:	697b      	ldr	r3, [r7, #20]
	}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	20026360 	.word	0x20026360
 80096f0:	2002683c 	.word	0x2002683c
 80096f4:	20026364 	.word	0x20026364

080096f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009706:	2301      	movs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d073      	beq.n	80097f8 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	60fb      	str	r3, [r7, #12]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d902      	bls.n	800973e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	61fb      	str	r3, [r7, #28]
 800973c:	e002      	b.n	8009744 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009742:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	69fa      	ldr	r2, [r7, #28]
 800974a:	429a      	cmp	r2, r3
 800974c:	d054      	beq.n	80097f8 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	429a      	cmp	r2, r3
 8009756:	d14f      	bne.n	80097f8 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009758:	4b29      	ldr	r3, [pc, #164]	; (8009800 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	429a      	cmp	r2, r3
 8009760:	d10a      	bne.n	8009778 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60bb      	str	r3, [r7, #8]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4619      	mov	r1, r3
 800977c:	204a      	movs	r0, #74	; 0x4a
 800977e:	f001 fd91 	bl	800b2a4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009786:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	2b00      	cmp	r3, #0
 8009794:	db04      	blt.n	80097a0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	6959      	ldr	r1, [r3, #20]
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4a15      	ldr	r2, [pc, #84]	; (8009804 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80097b0:	4413      	add	r3, r2
 80097b2:	4299      	cmp	r1, r3
 80097b4:	d120      	bne.n	80097f8 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fd fd52 	bl	8007264 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f002 fb2e 	bl	800be24 <SEGGER_SYSVIEW_OnTaskStartReady>
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097cc:	4b0e      	ldr	r3, [pc, #56]	; (8009808 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d903      	bls.n	80097dc <vTaskPriorityDisinheritAfterTimeout+0xe4>
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	4a0b      	ldr	r2, [pc, #44]	; (8009808 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80097da:	6013      	str	r3, [r2, #0]
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4a06      	ldr	r2, [pc, #24]	; (8009804 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80097ea:	441a      	add	r2, r3
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	3304      	adds	r3, #4
 80097f0:	4619      	mov	r1, r3
 80097f2:	4610      	mov	r0, r2
 80097f4:	f7fd fcd9 	bl	80071aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097f8:	bf00      	nop
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20026360 	.word	0x20026360
 8009804:	20026364 	.word	0x20026364
 8009808:	2002683c 	.word	0x2002683c

0800980c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009812:	4b09      	ldr	r3, [pc, #36]	; (8009838 <uxTaskResetEventItemValue+0x2c>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800981a:	4b07      	ldr	r3, [pc, #28]	; (8009838 <uxTaskResetEventItemValue+0x2c>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4b05      	ldr	r3, [pc, #20]	; (8009838 <uxTaskResetEventItemValue+0x2c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8009828:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800982a:	687b      	ldr	r3, [r7, #4]
}
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	20026360 	.word	0x20026360

0800983c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <pvTaskIncrementMutexHeldCount+0x24>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <pvTaskIncrementMutexHeldCount+0x24>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800984e:	3201      	adds	r2, #1
 8009850:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8009852:	4b03      	ldr	r3, [pc, #12]	; (8009860 <pvTaskIncrementMutexHeldCount+0x24>)
 8009854:	681b      	ldr	r3, [r3, #0]
	}
 8009856:	4618      	mov	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr
 8009860:	20026360 	.word	0x20026360

08009864 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800986e:	4b21      	ldr	r3, [pc, #132]	; (80098f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009874:	4b20      	ldr	r3, [pc, #128]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3304      	adds	r3, #4
 800987a:	4618      	mov	r0, r3
 800987c:	f7fd fcf2 	bl	8007264 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009886:	d10a      	bne.n	800989e <prvAddCurrentTaskToDelayedList+0x3a>
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800988e:	4b1a      	ldr	r3, [pc, #104]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4819      	ldr	r0, [pc, #100]	; (80098fc <prvAddCurrentTaskToDelayedList+0x98>)
 8009898:	f7fd fc87 	bl	80071aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800989c:	e026      	b.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4413      	add	r3, r2
 80098a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098a6:	4b14      	ldr	r3, [pc, #80]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d209      	bcs.n	80098ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b6:	4b12      	ldr	r3, [pc, #72]	; (8009900 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b0f      	ldr	r3, [pc, #60]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3304      	adds	r3, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7fd fc95 	bl	80071f2 <vListInsert>
}
 80098c8:	e010      	b.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ca:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3304      	adds	r3, #4
 80098d4:	4619      	mov	r1, r3
 80098d6:	4610      	mov	r0, r2
 80098d8:	f7fd fc8b 	bl	80071f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098dc:	4b0a      	ldr	r3, [pc, #40]	; (8009908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d202      	bcs.n	80098ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098e6:	4a08      	ldr	r2, [pc, #32]	; (8009908 <prvAddCurrentTaskToDelayedList+0xa4>)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	6013      	str	r3, [r2, #0]
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20026838 	.word	0x20026838
 80098f8:	20026360 	.word	0x20026360
 80098fc:	20026820 	.word	0x20026820
 8009900:	200267f0 	.word	0x200267f0
 8009904:	200267ec 	.word	0x200267ec
 8009908:	20026854 	.word	0x20026854

0800990c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009912:	2300      	movs	r3, #0
 8009914:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009916:	f000 fba1 	bl	800a05c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800991a:	4b1c      	ldr	r3, [pc, #112]	; (800998c <xTimerCreateTimerTask+0x80>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d021      	beq.n	8009966 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800992a:	1d3a      	adds	r2, r7, #4
 800992c:	f107 0108 	add.w	r1, r7, #8
 8009930:	f107 030c 	add.w	r3, r7, #12
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd f985 	bl	8006c44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	9202      	str	r2, [sp, #8]
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	2302      	movs	r3, #2
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	460a      	mov	r2, r1
 800994c:	4910      	ldr	r1, [pc, #64]	; (8009990 <xTimerCreateTimerTask+0x84>)
 800994e:	4811      	ldr	r0, [pc, #68]	; (8009994 <xTimerCreateTimerTask+0x88>)
 8009950:	f7fe fe5a 	bl	8008608 <xTaskCreateStatic>
 8009954:	4603      	mov	r3, r0
 8009956:	4a10      	ldr	r2, [pc, #64]	; (8009998 <xTimerCreateTimerTask+0x8c>)
 8009958:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800995a:	4b0f      	ldr	r3, [pc, #60]	; (8009998 <xTimerCreateTimerTask+0x8c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009962:	2301      	movs	r3, #1
 8009964:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	613b      	str	r3, [r7, #16]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009982:	697b      	ldr	r3, [r7, #20]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20026890 	.word	0x20026890
 8009990:	0800d98c 	.word	0x0800d98c
 8009994:	08009c05 	.word	0x08009c05
 8009998:	20026894 	.word	0x20026894

0800999c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80099aa:	202c      	movs	r0, #44	; 0x2c
 80099ac:	f000 fe4c 	bl	800a648 <pvPortMalloc>
 80099b0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00d      	beq.n	80099d4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f843 	bl	8009a5a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80099d4:	697b      	ldr	r3, [r7, #20]
	}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b08a      	sub	sp, #40	; 0x28
 80099e2:	af02      	add	r7, sp, #8
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	607a      	str	r2, [r7, #4]
 80099ea:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80099ec:	232c      	movs	r3, #44	; 0x2c
 80099ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	2b2c      	cmp	r3, #44	; 0x2c
 80099f4:	d00a      	beq.n	8009a0c <xTimerCreateStatic+0x2e>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	61bb      	str	r3, [r7, #24]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xTimerCreateStatic+0x4c>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	617b      	str	r3, [r7, #20]
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00d      	beq.n	8009a50 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f000 f805 	bl	8009a5a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009a50:	69fb      	ldr	r3, [r7, #28]
	}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009a5a:	b580      	push	{r7, lr}
 8009a5c:	b086      	sub	sp, #24
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	60f8      	str	r0, [r7, #12]
 8009a62:	60b9      	str	r1, [r7, #8]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d10a      	bne.n	8009a84 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	617b      	str	r3, [r7, #20]
}
 8009a80:	bf00      	nop
 8009a82:	e7fe      	b.n	8009a82 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d01e      	beq.n	8009ac8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009a8a:	f000 fae7 	bl	800a05c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	68fa      	ldr	r2, [r7, #12]
 8009a92:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	6a3a      	ldr	r2, [r7, #32]
 8009aa4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fd fb70 	bl	8007190 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009abc:	f043 0304 	orr.w	r3, r3, #4
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009ac8:	bf00      	nop
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	623b      	str	r3, [r7, #32]
}
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009afe:	4b1a      	ldr	r3, [pc, #104]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d02a      	beq.n	8009b5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b05      	cmp	r3, #5
 8009b16:	dc18      	bgt.n	8009b4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b18:	f7ff fce8 	bl	80094ec <xTaskGetSchedulerState>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d109      	bne.n	8009b36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b22:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f107 0110 	add.w	r1, r7, #16
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b2e:	f7fd fe27 	bl	8007780 <xQueueGenericSend>
 8009b32:	6278      	str	r0, [r7, #36]	; 0x24
 8009b34:	e012      	b.n	8009b5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f107 0110 	add.w	r1, r7, #16
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2200      	movs	r2, #0
 8009b42:	f7fd fe1d 	bl	8007780 <xQueueGenericSend>
 8009b46:	6278      	str	r0, [r7, #36]	; 0x24
 8009b48:	e008      	b.n	8009b5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b4a:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <xTimerGenericCommand+0x98>)
 8009b4c:	6818      	ldr	r0, [r3, #0]
 8009b4e:	f107 0110 	add.w	r1, r7, #16
 8009b52:	2300      	movs	r3, #0
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	f7fd ff39 	bl	80079cc <xQueueGenericSendFromISR>
 8009b5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3728      	adds	r7, #40	; 0x28
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20026890 	.word	0x20026890

08009b6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b088      	sub	sp, #32
 8009b70:	af02      	add	r7, sp, #8
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b76:	4b22      	ldr	r3, [pc, #136]	; (8009c00 <prvProcessExpiredTimer+0x94>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fd fb6d 	bl	8007264 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d022      	beq.n	8009bde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	699a      	ldr	r2, [r3, #24]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	18d1      	adds	r1, r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	683a      	ldr	r2, [r7, #0]
 8009ba4:	6978      	ldr	r0, [r7, #20]
 8009ba6:	f000 f8d1 	bl	8009d4c <prvInsertTimerInActiveList>
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01f      	beq.n	8009bf0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6978      	ldr	r0, [r7, #20]
 8009bbc:	f7ff ff88 	bl	8009ad0 <xTimerGenericCommand>
 8009bc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d113      	bne.n	8009bf0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bcc:	f383 8811 	msr	BASEPRI, r3
 8009bd0:	f3bf 8f6f 	isb	sy
 8009bd4:	f3bf 8f4f 	dsb	sy
 8009bd8:	60fb      	str	r3, [r7, #12]
}
 8009bda:	bf00      	nop
 8009bdc:	e7fe      	b.n	8009bdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	6978      	ldr	r0, [r7, #20]
 8009bf6:	4798      	blx	r3
}
 8009bf8:	bf00      	nop
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	20026888 	.word	0x20026888

08009c04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f857 	bl	8009cc4 <prvGetNextExpireTime>
 8009c16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 f803 	bl	8009c28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c22:	f000 f8d5 	bl	8009dd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c26:	e7f1      	b.n	8009c0c <prvTimerTask+0x8>

08009c28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c32:	f7fe ff5d 	bl	8008af0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c36:	f107 0308 	add.w	r3, r7, #8
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f866 	bl	8009d0c <prvSampleTimeNow>
 8009c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d130      	bne.n	8009caa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d10a      	bne.n	8009c64 <prvProcessTimerOrBlockTask+0x3c>
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d806      	bhi.n	8009c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009c56:	f7fe ff59 	bl	8008b0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c5a:	68f9      	ldr	r1, [r7, #12]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff ff85 	bl	8009b6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009c62:	e024      	b.n	8009cae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d008      	beq.n	8009c7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c6a:	4b13      	ldr	r3, [pc, #76]	; (8009cb8 <prvProcessTimerOrBlockTask+0x90>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <prvProcessTimerOrBlockTask+0x50>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e000      	b.n	8009c7a <prvProcessTimerOrBlockTask+0x52>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c7c:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <prvProcessTimerOrBlockTask+0x94>)
 8009c7e:	6818      	ldr	r0, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	f7fe fc89 	bl	80085a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c8e:	f7fe ff3d 	bl	8008b0c <xTaskResumeAll>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c98:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <prvProcessTimerOrBlockTask+0x98>)
 8009c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c9e:	601a      	str	r2, [r3, #0]
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	f3bf 8f6f 	isb	sy
}
 8009ca8:	e001      	b.n	8009cae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009caa:	f7fe ff2f 	bl	8008b0c <xTaskResumeAll>
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2002688c 	.word	0x2002688c
 8009cbc:	20026890 	.word	0x20026890
 8009cc0:	e000ed04 	.word	0xe000ed04

08009cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <prvGetNextExpireTime+0x44>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <prvGetNextExpireTime+0x16>
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	e000      	b.n	8009cdc <prvGetNextExpireTime+0x18>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d105      	bne.n	8009cf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ce8:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <prvGetNextExpireTime+0x44>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	60fb      	str	r3, [r7, #12]
 8009cf2:	e001      	b.n	8009cf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3714      	adds	r7, #20
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr
 8009d06:	bf00      	nop
 8009d08:	20026888 	.word	0x20026888

08009d0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d14:	f7fe ff9c 	bl	8008c50 <xTaskGetTickCount>
 8009d18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d1a:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <prvSampleTimeNow+0x3c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d205      	bcs.n	8009d30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d24:	f000 f936 	bl	8009f94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e002      	b.n	8009d36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d36:	4a04      	ldr	r2, [pc, #16]	; (8009d48 <prvSampleTimeNow+0x3c>)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20026898 	.word	0x20026898

08009d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d812      	bhi.n	8009d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	1ad2      	subs	r2, r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d302      	bcc.n	8009d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	e01b      	b.n	8009dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d86:	4b10      	ldr	r3, [pc, #64]	; (8009dc8 <prvInsertTimerInActiveList+0x7c>)
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	4619      	mov	r1, r3
 8009d90:	4610      	mov	r0, r2
 8009d92:	f7fd fa2e 	bl	80071f2 <vListInsert>
 8009d96:	e012      	b.n	8009dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d206      	bcs.n	8009dae <prvInsertTimerInActiveList+0x62>
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d302      	bcc.n	8009dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009da8:	2301      	movs	r3, #1
 8009daa:	617b      	str	r3, [r7, #20]
 8009dac:	e007      	b.n	8009dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <prvInsertTimerInActiveList+0x80>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3304      	adds	r3, #4
 8009db6:	4619      	mov	r1, r3
 8009db8:	4610      	mov	r0, r2
 8009dba:	f7fd fa1a 	bl	80071f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009dbe:	697b      	ldr	r3, [r7, #20]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	2002688c 	.word	0x2002688c
 8009dcc:	20026888 	.word	0x20026888

08009dd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08e      	sub	sp, #56	; 0x38
 8009dd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009dd6:	e0ca      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da18      	bge.n	8009e10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009dde:	1d3b      	adds	r3, r7, #4
 8009de0:	3304      	adds	r3, #4
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	61fb      	str	r3, [r7, #28]
}
 8009dfc:	bf00      	nop
 8009dfe:	e7fe      	b.n	8009dfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e06:	6850      	ldr	r0, [r2, #4]
 8009e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e0a:	6892      	ldr	r2, [r2, #8]
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f2c0 80ab 	blt.w	8009f6e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d004      	beq.n	8009e2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	3304      	adds	r3, #4
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7fd fa1b 	bl	8007264 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e2e:	463b      	mov	r3, r7
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7ff ff6b 	bl	8009d0c <prvSampleTimeNow>
 8009e36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b09      	cmp	r3, #9
 8009e3c:	f200 8096 	bhi.w	8009f6c <prvProcessReceivedCommands+0x19c>
 8009e40:	a201      	add	r2, pc, #4	; (adr r2, 8009e48 <prvProcessReceivedCommands+0x78>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009e71 	.word	0x08009e71
 8009e4c:	08009e71 	.word	0x08009e71
 8009e50:	08009e71 	.word	0x08009e71
 8009e54:	08009ee5 	.word	0x08009ee5
 8009e58:	08009ef9 	.word	0x08009ef9
 8009e5c:	08009f43 	.word	0x08009f43
 8009e60:	08009e71 	.word	0x08009e71
 8009e64:	08009e71 	.word	0x08009e71
 8009e68:	08009ee5 	.word	0x08009ee5
 8009e6c:	08009ef9 	.word	0x08009ef9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e76:	f043 0301 	orr.w	r3, r3, #1
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	699b      	ldr	r3, [r3, #24]
 8009e88:	18d1      	adds	r1, r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e90:	f7ff ff5c 	bl	8009d4c <prvInsertTimerInActiveList>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d069      	beq.n	8009f6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d05e      	beq.n	8009f6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	441a      	add	r2, r3
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ec2:	f7ff fe05 	bl	8009ad0 <xTimerGenericCommand>
 8009ec6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d14f      	bne.n	8009f6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	61bb      	str	r3, [r7, #24]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eea:	f023 0301 	bic.w	r3, r3, #1
 8009eee:	b2da      	uxtb	r2, r3
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009ef6:	e03a      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	617b      	str	r3, [r7, #20]
}
 8009f2a:	bf00      	nop
 8009f2c:	e7fe      	b.n	8009f2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f30:	699a      	ldr	r2, [r3, #24]
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	18d1      	adds	r1, r2, r3
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3c:	f7ff ff06 	bl	8009d4c <prvInsertTimerInActiveList>
					break;
 8009f40:	e015      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d103      	bne.n	8009f58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f52:	f000 fc45 	bl	800a7e0 <vPortFree>
 8009f56:	e00a      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5e:	f023 0301 	bic.w	r3, r3, #1
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f6a:	e000      	b.n	8009f6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009f6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f6e:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <prvProcessReceivedCommands+0x1c0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	1d39      	adds	r1, r7, #4
 8009f74:	2200      	movs	r2, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fd fe78 	bl	8007c6c <xQueueReceive>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f47f af2a 	bne.w	8009dd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop
 8009f88:	3730      	adds	r7, #48	; 0x30
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20026890 	.word	0x20026890

08009f94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f9a:	e048      	b.n	800a02e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f9c:	4b2d      	ldr	r3, [pc, #180]	; (800a054 <prvSwitchTimerLists+0xc0>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa6:	4b2b      	ldr	r3, [pc, #172]	; (800a054 <prvSwitchTimerLists+0xc0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fd f955 	bl	8007264 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d02e      	beq.n	800a02e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	699b      	ldr	r3, [r3, #24]
 8009fd4:	693a      	ldr	r2, [r7, #16]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d90e      	bls.n	800a000 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fee:	4b19      	ldr	r3, [pc, #100]	; (800a054 <prvSwitchTimerLists+0xc0>)
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f7fd f8fa 	bl	80071f2 <vListInsert>
 8009ffe:	e016      	b.n	800a02e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a000:	2300      	movs	r3, #0
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2300      	movs	r3, #0
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	2100      	movs	r1, #0
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7ff fd60 	bl	8009ad0 <xTimerGenericCommand>
 800a010:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10a      	bne.n	800a02e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	603b      	str	r3, [r7, #0]
}
 800a02a:	bf00      	nop
 800a02c:	e7fe      	b.n	800a02c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvSwitchTimerLists+0xc0>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1b1      	bne.n	8009f9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a038:	4b06      	ldr	r3, [pc, #24]	; (800a054 <prvSwitchTimerLists+0xc0>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a03e:	4b06      	ldr	r3, [pc, #24]	; (800a058 <prvSwitchTimerLists+0xc4>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a04      	ldr	r2, [pc, #16]	; (800a054 <prvSwitchTimerLists+0xc0>)
 800a044:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a046:	4a04      	ldr	r2, [pc, #16]	; (800a058 <prvSwitchTimerLists+0xc4>)
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	6013      	str	r3, [r2, #0]
}
 800a04c:	bf00      	nop
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	20026888 	.word	0x20026888
 800a058:	2002688c 	.word	0x2002688c

0800a05c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a062:	f000 f9cf 	bl	800a404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a066:	4b15      	ldr	r3, [pc, #84]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d120      	bne.n	800a0b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a06e:	4814      	ldr	r0, [pc, #80]	; (800a0c0 <prvCheckForValidListAndQueue+0x64>)
 800a070:	f7fd f86e 	bl	8007150 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a074:	4813      	ldr	r0, [pc, #76]	; (800a0c4 <prvCheckForValidListAndQueue+0x68>)
 800a076:	f7fd f86b 	bl	8007150 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <prvCheckForValidListAndQueue+0x6c>)
 800a07c:	4a10      	ldr	r2, [pc, #64]	; (800a0c0 <prvCheckForValidListAndQueue+0x64>)
 800a07e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a080:	4b12      	ldr	r3, [pc, #72]	; (800a0cc <prvCheckForValidListAndQueue+0x70>)
 800a082:	4a10      	ldr	r2, [pc, #64]	; (800a0c4 <prvCheckForValidListAndQueue+0x68>)
 800a084:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a086:	2300      	movs	r3, #0
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <prvCheckForValidListAndQueue+0x74>)
 800a08c:	4a11      	ldr	r2, [pc, #68]	; (800a0d4 <prvCheckForValidListAndQueue+0x78>)
 800a08e:	2110      	movs	r1, #16
 800a090:	200a      	movs	r0, #10
 800a092:	f7fd f979 	bl	8007388 <xQueueGenericCreateStatic>
 800a096:	4603      	mov	r3, r0
 800a098:	4a08      	ldr	r2, [pc, #32]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a09a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a09c:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d005      	beq.n	800a0b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a0a4:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <prvCheckForValidListAndQueue+0x60>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	490b      	ldr	r1, [pc, #44]	; (800a0d8 <prvCheckForValidListAndQueue+0x7c>)
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe fa1c 	bl	80084e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0b0:	f000 f9d8 	bl	800a464 <vPortExitCritical>
}
 800a0b4:	bf00      	nop
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	20026890 	.word	0x20026890
 800a0c0:	20026860 	.word	0x20026860
 800a0c4:	20026874 	.word	0x20026874
 800a0c8:	20026888 	.word	0x20026888
 800a0cc:	2002688c 	.word	0x2002688c
 800a0d0:	2002693c 	.word	0x2002693c
 800a0d4:	2002689c 	.word	0x2002689c
 800a0d8:	0800d994 	.word	0x0800d994

0800a0dc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d10a      	bne.n	800a104 <xTimerIsTimerActive+0x28>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	60fb      	str	r3, [r7, #12]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a104:	f000 f97e 	bl	800a404 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a10e:	f003 0301 	and.w	r3, r3, #1
 800a112:	2b00      	cmp	r3, #0
 800a114:	d102      	bne.n	800a11c <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800a116:	2300      	movs	r3, #0
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e001      	b.n	800a120 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a120:	f000 f9a0 	bl	800a464 <vPortExitCritical>

	return xReturn;
 800a124:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b086      	sub	sp, #24
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <pvTimerGetTimerID+0x28>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	60fb      	str	r3, [r7, #12]
}
 800a152:	bf00      	nop
 800a154:	e7fe      	b.n	800a154 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a156:	f000 f955 	bl	800a404 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	69db      	ldr	r3, [r3, #28]
 800a15e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a160:	f000 f980 	bl	800a464 <vPortExitCritical>

	return pvReturn;
 800a164:	693b      	ldr	r3, [r7, #16]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08a      	sub	sp, #40	; 0x28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a17e:	f06f 0301 	mvn.w	r3, #1
 800a182:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a190:	4b06      	ldr	r3, [pc, #24]	; (800a1ac <xTimerPendFunctionCallFromISR+0x3c>)
 800a192:	6818      	ldr	r0, [r3, #0]
 800a194:	f107 0114 	add.w	r1, r7, #20
 800a198:	2300      	movs	r3, #0
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	f7fd fc16 	bl	80079cc <xQueueGenericSendFromISR>
 800a1a0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3728      	adds	r7, #40	; 0x28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20026890 	.word	0x20026890

0800a1b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3b04      	subs	r3, #4
 800a1c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a1c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	3b04      	subs	r3, #4
 800a1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f023 0201 	bic.w	r2, r3, #1
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3b04      	subs	r3, #4
 800a1de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1e0:	4a0c      	ldr	r2, [pc, #48]	; (800a214 <pxPortInitialiseStack+0x64>)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3b14      	subs	r3, #20
 800a1ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3b04      	subs	r3, #4
 800a1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f06f 0202 	mvn.w	r2, #2
 800a1fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	3b20      	subs	r3, #32
 800a204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a206:	68fb      	ldr	r3, [r7, #12]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3714      	adds	r7, #20
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	0800a219 	.word	0x0800a219

0800a218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a222:	4b12      	ldr	r3, [pc, #72]	; (800a26c <prvTaskExitError+0x54>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22a:	d00a      	beq.n	800a242 <prvTaskExitError+0x2a>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	60fb      	str	r3, [r7, #12]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <prvTaskExitError+0x28>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60bb      	str	r3, [r7, #8]
}
 800a254:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a256:	bf00      	nop
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0fc      	beq.n	800a258 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a25e:	bf00      	nop
 800a260:	bf00      	nop
 800a262:	3714      	adds	r7, #20
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr
 800a26c:	20000020 	.word	0x20000020

0800a270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a270:	4b07      	ldr	r3, [pc, #28]	; (800a290 <pxCurrentTCBConst2>)
 800a272:	6819      	ldr	r1, [r3, #0]
 800a274:	6808      	ldr	r0, [r1, #0]
 800a276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27a:	f380 8809 	msr	PSP, r0
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f04f 0000 	mov.w	r0, #0
 800a286:	f380 8811 	msr	BASEPRI, r0
 800a28a:	4770      	bx	lr
 800a28c:	f3af 8000 	nop.w

0800a290 <pxCurrentTCBConst2>:
 800a290:	20026360 	.word	0x20026360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop

0800a298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a298:	4808      	ldr	r0, [pc, #32]	; (800a2bc <prvPortStartFirstTask+0x24>)
 800a29a:	6800      	ldr	r0, [r0, #0]
 800a29c:	6800      	ldr	r0, [r0, #0]
 800a29e:	f380 8808 	msr	MSP, r0
 800a2a2:	f04f 0000 	mov.w	r0, #0
 800a2a6:	f380 8814 	msr	CONTROL, r0
 800a2aa:	b662      	cpsie	i
 800a2ac:	b661      	cpsie	f
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	df00      	svc	0
 800a2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2ba:	bf00      	nop
 800a2bc:	e000ed08 	.word	0xe000ed08

0800a2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2c6:	4b46      	ldr	r3, [pc, #280]	; (800a3e0 <xPortStartScheduler+0x120>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a46      	ldr	r2, [pc, #280]	; (800a3e4 <xPortStartScheduler+0x124>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d10a      	bne.n	800a2e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	613b      	str	r3, [r7, #16]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a2e6:	4b3e      	ldr	r3, [pc, #248]	; (800a3e0 <xPortStartScheduler+0x120>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a3f      	ldr	r2, [pc, #252]	; (800a3e8 <xPortStartScheduler+0x128>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d10a      	bne.n	800a306 <xPortStartScheduler+0x46>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	60fb      	str	r3, [r7, #12]
}
 800a302:	bf00      	nop
 800a304:	e7fe      	b.n	800a304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a306:	4b39      	ldr	r3, [pc, #228]	; (800a3ec <xPortStartScheduler+0x12c>)
 800a308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	22ff      	movs	r2, #255	; 0xff
 800a316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a328:	b2da      	uxtb	r2, r3
 800a32a:	4b31      	ldr	r3, [pc, #196]	; (800a3f0 <xPortStartScheduler+0x130>)
 800a32c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a32e:	4b31      	ldr	r3, [pc, #196]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a330:	2207      	movs	r2, #7
 800a332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a334:	e009      	b.n	800a34a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a336:	4b2f      	ldr	r3, [pc, #188]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	4a2d      	ldr	r2, [pc, #180]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a33e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a340:	78fb      	ldrb	r3, [r7, #3]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	b2db      	uxtb	r3, r3
 800a348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a34a:	78fb      	ldrb	r3, [r7, #3]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a352:	2b80      	cmp	r3, #128	; 0x80
 800a354:	d0ef      	beq.n	800a336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a356:	4b27      	ldr	r3, [pc, #156]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f1c3 0307 	rsb	r3, r3, #7
 800a35e:	2b04      	cmp	r3, #4
 800a360:	d00a      	beq.n	800a378 <xPortStartScheduler+0xb8>
	__asm volatile
 800a362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a366:	f383 8811 	msr	BASEPRI, r3
 800a36a:	f3bf 8f6f 	isb	sy
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	60bb      	str	r3, [r7, #8]
}
 800a374:	bf00      	nop
 800a376:	e7fe      	b.n	800a376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a378:	4b1e      	ldr	r3, [pc, #120]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	4a1d      	ldr	r2, [pc, #116]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a382:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a38a:	4a1a      	ldr	r2, [pc, #104]	; (800a3f4 <xPortStartScheduler+0x134>)
 800a38c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	b2da      	uxtb	r2, r3
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a396:	4b18      	ldr	r3, [pc, #96]	; (800a3f8 <xPortStartScheduler+0x138>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a17      	ldr	r2, [pc, #92]	; (800a3f8 <xPortStartScheduler+0x138>)
 800a39c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3a2:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <xPortStartScheduler+0x138>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a14      	ldr	r2, [pc, #80]	; (800a3f8 <xPortStartScheduler+0x138>)
 800a3a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3ae:	f000 f8dd 	bl	800a56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3b2:	4b12      	ldr	r3, [pc, #72]	; (800a3fc <xPortStartScheduler+0x13c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3b8:	f000 f8fc 	bl	800a5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3bc:	4b10      	ldr	r3, [pc, #64]	; (800a400 <xPortStartScheduler+0x140>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0f      	ldr	r2, [pc, #60]	; (800a400 <xPortStartScheduler+0x140>)
 800a3c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3c8:	f7ff ff66 	bl	800a298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3cc:	f7fe fd20 	bl	8008e10 <vTaskSwitchContext>
	prvTaskExitError();
 800a3d0:	f7ff ff22 	bl	800a218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	e000ed00 	.word	0xe000ed00
 800a3e4:	410fc271 	.word	0x410fc271
 800a3e8:	410fc270 	.word	0x410fc270
 800a3ec:	e000e400 	.word	0xe000e400
 800a3f0:	2002698c 	.word	0x2002698c
 800a3f4:	20026990 	.word	0x20026990
 800a3f8:	e000ed20 	.word	0xe000ed20
 800a3fc:	20000020 	.word	0x20000020
 800a400:	e000ef34 	.word	0xe000ef34

0800a404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	607b      	str	r3, [r7, #4]
}
 800a41c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a41e:	4b0f      	ldr	r3, [pc, #60]	; (800a45c <vPortEnterCritical+0x58>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	3301      	adds	r3, #1
 800a424:	4a0d      	ldr	r2, [pc, #52]	; (800a45c <vPortEnterCritical+0x58>)
 800a426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a428:	4b0c      	ldr	r3, [pc, #48]	; (800a45c <vPortEnterCritical+0x58>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d10f      	bne.n	800a450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a430:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <vPortEnterCritical+0x5c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00a      	beq.n	800a450 <vPortEnterCritical+0x4c>
	__asm volatile
 800a43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43e:	f383 8811 	msr	BASEPRI, r3
 800a442:	f3bf 8f6f 	isb	sy
 800a446:	f3bf 8f4f 	dsb	sy
 800a44a:	603b      	str	r3, [r7, #0]
}
 800a44c:	bf00      	nop
 800a44e:	e7fe      	b.n	800a44e <vPortEnterCritical+0x4a>
	}
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	20000020 	.word	0x20000020
 800a460:	e000ed04 	.word	0xe000ed04

0800a464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a46a:	4b12      	ldr	r3, [pc, #72]	; (800a4b4 <vPortExitCritical+0x50>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10a      	bne.n	800a488 <vPortExitCritical+0x24>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	607b      	str	r3, [r7, #4]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a488:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <vPortExitCritical+0x50>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	4a09      	ldr	r2, [pc, #36]	; (800a4b4 <vPortExitCritical+0x50>)
 800a490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a492:	4b08      	ldr	r3, [pc, #32]	; (800a4b4 <vPortExitCritical+0x50>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d105      	bne.n	800a4a6 <vPortExitCritical+0x42>
 800a49a:	2300      	movs	r3, #0
 800a49c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	f383 8811 	msr	BASEPRI, r3
}
 800a4a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr
 800a4b2:	bf00      	nop
 800a4b4:	20000020 	.word	0x20000020
	...

0800a4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4c0:	f3ef 8009 	mrs	r0, PSP
 800a4c4:	f3bf 8f6f 	isb	sy
 800a4c8:	4b15      	ldr	r3, [pc, #84]	; (800a520 <pxCurrentTCBConst>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	f01e 0f10 	tst.w	lr, #16
 800a4d0:	bf08      	it	eq
 800a4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4da:	6010      	str	r0, [r2, #0]
 800a4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4e4:	f380 8811 	msr	BASEPRI, r0
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	f3bf 8f6f 	isb	sy
 800a4f0:	f7fe fc8e 	bl	8008e10 <vTaskSwitchContext>
 800a4f4:	f04f 0000 	mov.w	r0, #0
 800a4f8:	f380 8811 	msr	BASEPRI, r0
 800a4fc:	bc09      	pop	{r0, r3}
 800a4fe:	6819      	ldr	r1, [r3, #0]
 800a500:	6808      	ldr	r0, [r1, #0]
 800a502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a506:	f01e 0f10 	tst.w	lr, #16
 800a50a:	bf08      	it	eq
 800a50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a510:	f380 8809 	msr	PSP, r0
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	f3af 8000 	nop.w

0800a520 <pxCurrentTCBConst>:
 800a520:	20026360 	.word	0x20026360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a524:	bf00      	nop
 800a526:	bf00      	nop

0800a528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	607b      	str	r3, [r7, #4]
}
 800a540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a542:	f7fe fba7 	bl	8008c94 <xTaskIncrementTick>
 800a546:	4603      	mov	r3, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d003      	beq.n	800a554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <xPortSysTickHandler+0x40>)
 800a54e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	2300      	movs	r3, #0
 800a556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	f383 8811 	msr	BASEPRI, r3
}
 800a55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a560:	bf00      	nop
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	e000ed04 	.word	0xe000ed04

0800a56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a56c:	b480      	push	{r7}
 800a56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a570:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <vPortSetupTimerInterrupt+0x34>)
 800a572:	2200      	movs	r2, #0
 800a574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a576:	4b0b      	ldr	r3, [pc, #44]	; (800a5a4 <vPortSetupTimerInterrupt+0x38>)
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a57c:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <vPortSetupTimerInterrupt+0x3c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a0a      	ldr	r2, [pc, #40]	; (800a5ac <vPortSetupTimerInterrupt+0x40>)
 800a582:	fba2 2303 	umull	r2, r3, r2, r3
 800a586:	099b      	lsrs	r3, r3, #6
 800a588:	4a09      	ldr	r2, [pc, #36]	; (800a5b0 <vPortSetupTimerInterrupt+0x44>)
 800a58a:	3b01      	subs	r3, #1
 800a58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a58e:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <vPortSetupTimerInterrupt+0x34>)
 800a590:	2207      	movs	r2, #7
 800a592:	601a      	str	r2, [r3, #0]
}
 800a594:	bf00      	nop
 800a596:	46bd      	mov	sp, r7
 800a598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	e000e010 	.word	0xe000e010
 800a5a4:	e000e018 	.word	0xe000e018
 800a5a8:	20000014 	.word	0x20000014
 800a5ac:	10624dd3 	.word	0x10624dd3
 800a5b0:	e000e014 	.word	0xe000e014

0800a5b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5c4 <vPortEnableVFP+0x10>
 800a5b8:	6801      	ldr	r1, [r0, #0]
 800a5ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5be:	6001      	str	r1, [r0, #0]
 800a5c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5c2:	bf00      	nop
 800a5c4:	e000ed88 	.word	0xe000ed88

0800a5c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5ce:	f3ef 8305 	mrs	r3, IPSR
 800a5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b0f      	cmp	r3, #15
 800a5d8:	d914      	bls.n	800a604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5da:	4a17      	ldr	r2, [pc, #92]	; (800a638 <vPortValidateInterruptPriority+0x70>)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4413      	add	r3, r2
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5e4:	4b15      	ldr	r3, [pc, #84]	; (800a63c <vPortValidateInterruptPriority+0x74>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	7afa      	ldrb	r2, [r7, #11]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d20a      	bcs.n	800a604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	607b      	str	r3, [r7, #4]
}
 800a600:	bf00      	nop
 800a602:	e7fe      	b.n	800a602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a604:	4b0e      	ldr	r3, [pc, #56]	; (800a640 <vPortValidateInterruptPriority+0x78>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a60c:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <vPortValidateInterruptPriority+0x7c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d90a      	bls.n	800a62a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	603b      	str	r3, [r7, #0]
}
 800a626:	bf00      	nop
 800a628:	e7fe      	b.n	800a628 <vPortValidateInterruptPriority+0x60>
	}
 800a62a:	bf00      	nop
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	e000e3f0 	.word	0xe000e3f0
 800a63c:	2002698c 	.word	0x2002698c
 800a640:	e000ed0c 	.word	0xe000ed0c
 800a644:	20026990 	.word	0x20026990

0800a648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b08a      	sub	sp, #40	; 0x28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a654:	f7fe fa4c 	bl	8008af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a658:	4b5b      	ldr	r3, [pc, #364]	; (800a7c8 <pvPortMalloc+0x180>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a660:	f000 f920 	bl	800a8a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a664:	4b59      	ldr	r3, [pc, #356]	; (800a7cc <pvPortMalloc+0x184>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4013      	ands	r3, r2
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f040 8093 	bne.w	800a798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d01d      	beq.n	800a6b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a678:	2208      	movs	r2, #8
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4413      	add	r3, r2
 800a67e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	2b00      	cmp	r3, #0
 800a688:	d014      	beq.n	800a6b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f023 0307 	bic.w	r3, r3, #7
 800a690:	3308      	adds	r3, #8
 800a692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f003 0307 	and.w	r3, r3, #7
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00a      	beq.n	800a6b4 <pvPortMalloc+0x6c>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	617b      	str	r3, [r7, #20]
}
 800a6b0:	bf00      	nop
 800a6b2:	e7fe      	b.n	800a6b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d06e      	beq.n	800a798 <pvPortMalloc+0x150>
 800a6ba:	4b45      	ldr	r3, [pc, #276]	; (800a7d0 <pvPortMalloc+0x188>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d869      	bhi.n	800a798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6c4:	4b43      	ldr	r3, [pc, #268]	; (800a7d4 <pvPortMalloc+0x18c>)
 800a6c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6c8:	4b42      	ldr	r3, [pc, #264]	; (800a7d4 <pvPortMalloc+0x18c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ce:	e004      	b.n	800a6da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d903      	bls.n	800a6ec <pvPortMalloc+0xa4>
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d1f1      	bne.n	800a6d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6ec:	4b36      	ldr	r3, [pc, #216]	; (800a7c8 <pvPortMalloc+0x180>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d050      	beq.n	800a798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	4413      	add	r3, r2
 800a6fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	1ad2      	subs	r2, r2, r3
 800a710:	2308      	movs	r3, #8
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	429a      	cmp	r2, r3
 800a716:	d91f      	bls.n	800a758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4413      	add	r3, r2
 800a71e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	f003 0307 	and.w	r3, r3, #7
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00a      	beq.n	800a740 <pvPortMalloc+0xf8>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	613b      	str	r3, [r7, #16]
}
 800a73c:	bf00      	nop
 800a73e:	e7fe      	b.n	800a73e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	1ad2      	subs	r2, r2, r3
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a752:	69b8      	ldr	r0, [r7, #24]
 800a754:	f000 f908 	bl	800a968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a758:	4b1d      	ldr	r3, [pc, #116]	; (800a7d0 <pvPortMalloc+0x188>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	4a1b      	ldr	r2, [pc, #108]	; (800a7d0 <pvPortMalloc+0x188>)
 800a764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a766:	4b1a      	ldr	r3, [pc, #104]	; (800a7d0 <pvPortMalloc+0x188>)
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	4b1b      	ldr	r3, [pc, #108]	; (800a7d8 <pvPortMalloc+0x190>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d203      	bcs.n	800a77a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a772:	4b17      	ldr	r3, [pc, #92]	; (800a7d0 <pvPortMalloc+0x188>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a18      	ldr	r2, [pc, #96]	; (800a7d8 <pvPortMalloc+0x190>)
 800a778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <pvPortMalloc+0x184>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	431a      	orrs	r2, r3
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <pvPortMalloc+0x194>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3301      	adds	r3, #1
 800a794:	4a11      	ldr	r2, [pc, #68]	; (800a7dc <pvPortMalloc+0x194>)
 800a796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a798:	f7fe f9b8 	bl	8008b0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	f003 0307 	and.w	r3, r3, #7
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <pvPortMalloc+0x174>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	60fb      	str	r3, [r7, #12]
}
 800a7b8:	bf00      	nop
 800a7ba:	e7fe      	b.n	800a7ba <pvPortMalloc+0x172>
	return pvReturn;
 800a7bc:	69fb      	ldr	r3, [r7, #28]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3728      	adds	r7, #40	; 0x28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	2002a59c 	.word	0x2002a59c
 800a7cc:	2002a5b0 	.word	0x2002a5b0
 800a7d0:	2002a5a0 	.word	0x2002a5a0
 800a7d4:	2002a594 	.word	0x2002a594
 800a7d8:	2002a5a4 	.word	0x2002a5a4
 800a7dc:	2002a5a8 	.word	0x2002a5a8

0800a7e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b086      	sub	sp, #24
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d04d      	beq.n	800a88e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7f2:	2308      	movs	r3, #8
 800a7f4:	425b      	negs	r3, r3
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	4b24      	ldr	r3, [pc, #144]	; (800a898 <vPortFree+0xb8>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4013      	ands	r3, r2
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <vPortFree+0x44>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60fb      	str	r3, [r7, #12]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d00a      	beq.n	800a842 <vPortFree+0x62>
	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	60bb      	str	r3, [r7, #8]
}
 800a83e:	bf00      	nop
 800a840:	e7fe      	b.n	800a840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	4b14      	ldr	r3, [pc, #80]	; (800a898 <vPortFree+0xb8>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4013      	ands	r3, r2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d01e      	beq.n	800a88e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d11a      	bne.n	800a88e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	4b0e      	ldr	r3, [pc, #56]	; (800a898 <vPortFree+0xb8>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	43db      	mvns	r3, r3
 800a862:	401a      	ands	r2, r3
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a868:	f7fe f942 	bl	8008af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <vPortFree+0xbc>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4413      	add	r3, r2
 800a876:	4a09      	ldr	r2, [pc, #36]	; (800a89c <vPortFree+0xbc>)
 800a878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a87a:	6938      	ldr	r0, [r7, #16]
 800a87c:	f000 f874 	bl	800a968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a880:	4b07      	ldr	r3, [pc, #28]	; (800a8a0 <vPortFree+0xc0>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3301      	adds	r3, #1
 800a886:	4a06      	ldr	r2, [pc, #24]	; (800a8a0 <vPortFree+0xc0>)
 800a888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a88a:	f7fe f93f 	bl	8008b0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a88e:	bf00      	nop
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	2002a5b0 	.word	0x2002a5b0
 800a89c:	2002a5a0 	.word	0x2002a5a0
 800a8a0:	2002a5ac 	.word	0x2002a5ac

0800a8a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a8ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8b0:	4b27      	ldr	r3, [pc, #156]	; (800a950 <prvHeapInit+0xac>)
 800a8b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00c      	beq.n	800a8d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3307      	adds	r3, #7
 800a8c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f023 0307 	bic.w	r3, r3, #7
 800a8ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	4a1f      	ldr	r2, [pc, #124]	; (800a950 <prvHeapInit+0xac>)
 800a8d4:	4413      	add	r3, r2
 800a8d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8dc:	4a1d      	ldr	r2, [pc, #116]	; (800a954 <prvHeapInit+0xb0>)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8e2:	4b1c      	ldr	r3, [pc, #112]	; (800a954 <prvHeapInit+0xb0>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8f0:	2208      	movs	r2, #8
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1a9b      	subs	r3, r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0307 	bic.w	r3, r3, #7
 800a8fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4a15      	ldr	r2, [pc, #84]	; (800a958 <prvHeapInit+0xb4>)
 800a904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a906:	4b14      	ldr	r3, [pc, #80]	; (800a958 <prvHeapInit+0xb4>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	2200      	movs	r2, #0
 800a90c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a90e:	4b12      	ldr	r3, [pc, #72]	; (800a958 <prvHeapInit+0xb4>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	1ad2      	subs	r2, r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a924:	4b0c      	ldr	r3, [pc, #48]	; (800a958 <prvHeapInit+0xb4>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	4a0a      	ldr	r2, [pc, #40]	; (800a95c <prvHeapInit+0xb8>)
 800a932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	4a09      	ldr	r2, [pc, #36]	; (800a960 <prvHeapInit+0xbc>)
 800a93a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <prvHeapInit+0xc0>)
 800a93e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a942:	601a      	str	r2, [r3, #0]
}
 800a944:	bf00      	nop
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	20026994 	.word	0x20026994
 800a954:	2002a594 	.word	0x2002a594
 800a958:	2002a59c 	.word	0x2002a59c
 800a95c:	2002a5a4 	.word	0x2002a5a4
 800a960:	2002a5a0 	.word	0x2002a5a0
 800a964:	2002a5b0 	.word	0x2002a5b0

0800a968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a970:	4b28      	ldr	r3, [pc, #160]	; (800aa14 <prvInsertBlockIntoFreeList+0xac>)
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	e002      	b.n	800a97c <prvInsertBlockIntoFreeList+0x14>
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	429a      	cmp	r2, r3
 800a984:	d8f7      	bhi.n	800a976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	4413      	add	r3, r2
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	429a      	cmp	r2, r3
 800a996:	d108      	bne.n	800a9aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	441a      	add	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	441a      	add	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d118      	bne.n	800a9f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <prvInsertBlockIntoFreeList+0xb0>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d00d      	beq.n	800a9e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	441a      	add	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	601a      	str	r2, [r3, #0]
 800a9e4:	e008      	b.n	800a9f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9e6:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <prvInsertBlockIntoFreeList+0xb0>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	e003      	b.n	800a9f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d002      	beq.n	800aa06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa06:	bf00      	nop
 800aa08:	3714      	adds	r7, #20
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	2002a594 	.word	0x2002a594
 800aa18:	2002a59c 	.word	0x2002a59c

0800aa1c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800aa22:	4b24      	ldr	r3, [pc, #144]	; (800aab4 <_DoInit+0x98>)
 800aa24:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2203      	movs	r2, #3
 800aa2a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2203      	movs	r2, #3
 800aa30:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a20      	ldr	r2, [pc, #128]	; (800aab8 <_DoInit+0x9c>)
 800aa36:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a20      	ldr	r2, [pc, #128]	; (800aabc <_DoInit+0xa0>)
 800aa3c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa44:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a17      	ldr	r2, [pc, #92]	; (800aab8 <_DoInit+0x9c>)
 800aa5c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a17      	ldr	r2, [pc, #92]	; (800aac0 <_DoInit+0xa4>)
 800aa62:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2210      	movs	r2, #16
 800aa68:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	3307      	adds	r3, #7
 800aa80:	4a10      	ldr	r2, [pc, #64]	; (800aac4 <_DoInit+0xa8>)
 800aa82:	6810      	ldr	r0, [r2, #0]
 800aa84:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800aa86:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a0e      	ldr	r2, [pc, #56]	; (800aac8 <_DoInit+0xac>)
 800aa8e:	6810      	ldr	r0, [r2, #0]
 800aa90:	6018      	str	r0, [r3, #0]
 800aa92:	8891      	ldrh	r1, [r2, #4]
 800aa94:	7992      	ldrb	r2, [r2, #6]
 800aa96:	8099      	strh	r1, [r3, #4]
 800aa98:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800aa9a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800aaa4:	f3bf 8f5f 	dmb	sy
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	2002a5b4 	.word	0x2002a5b4
 800aab8:	0800d99c 	.word	0x0800d99c
 800aabc:	2002a65c 	.word	0x2002a65c
 800aac0:	2002aa5c 	.word	0x2002aa5c
 800aac4:	0800d9a8 	.word	0x0800d9a8
 800aac8:	0800d9ac 	.word	0x0800d9ac

0800aacc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	b08c      	sub	sp, #48	; 0x30
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800aad8:	4b3e      	ldr	r3, [pc, #248]	; (800abd4 <SEGGER_RTT_ReadNoLock+0x108>)
 800aada:	623b      	str	r3, [r7, #32]
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <SEGGER_RTT_ReadNoLock+0x1e>
 800aae6:	f7ff ff99 	bl	800aa1c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	4613      	mov	r3, r2
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	4413      	add	r3, r2
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	3360      	adds	r3, #96	; 0x60
 800aaf6:	4a37      	ldr	r2, [pc, #220]	; (800abd4 <SEGGER_RTT_ReadNoLock+0x108>)
 800aaf8:	4413      	add	r3, r2
 800aafa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800ab10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d92b      	bls.n	800ab70 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ab22:	697a      	ldr	r2, [r7, #20]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	bf28      	it	cs
 800ab2a:	4613      	movcs	r3, r2
 800ab2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	4413      	add	r3, r2
 800ab36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	6939      	ldr	r1, [r7, #16]
 800ab3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab3e:	f001 feca 	bl	800c8d6 <memcpy>
    NumBytesRead += NumBytesRem;
 800ab42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	4413      	add	r3, r2
 800ab48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800ab4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	4413      	add	r3, r2
 800ab50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800ab5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	4413      	add	r3, r2
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d101      	bne.n	800ab70 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800ab70:	69ba      	ldr	r2, [r7, #24]
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	bf28      	it	cs
 800ab80:	4613      	movcs	r3, r2
 800ab82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d019      	beq.n	800abbe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab90:	4413      	add	r3, r2
 800ab92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	6939      	ldr	r1, [r7, #16]
 800ab98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab9a:	f001 fe9c 	bl	800c8d6 <memcpy>
    NumBytesRead += NumBytesRem;
 800ab9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	4413      	add	r3, r2
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800aba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	4413      	add	r3, r2
 800abac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800abb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	4413      	add	r3, r2
 800abbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d002      	beq.n	800abca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800abca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3730      	adds	r7, #48	; 0x30
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	2002a5b4 	.word	0x2002a5b4

0800abd8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
 800abe4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800abe6:	4b3d      	ldr	r3, [pc, #244]	; (800acdc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800abe8:	61bb      	str	r3, [r7, #24]
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <SEGGER_RTT_AllocUpBuffer+0x20>
 800abf4:	f7ff ff12 	bl	800aa1c <_DoInit>
  SEGGER_RTT_LOCK();
 800abf8:	f3ef 8311 	mrs	r3, BASEPRI
 800abfc:	f04f 0120 	mov.w	r1, #32
 800ac00:	f381 8811 	msr	BASEPRI, r1
 800ac04:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ac06:	4b35      	ldr	r3, [pc, #212]	; (800acdc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800ac08:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800ac0e:	6939      	ldr	r1, [r7, #16]
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	1c5a      	adds	r2, r3, #1
 800ac14:	4613      	mov	r3, r2
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	4413      	add	r3, r2
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	440b      	add	r3, r1
 800ac1e:	3304      	adds	r3, #4
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d008      	beq.n	800ac38 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	69fa      	ldr	r2, [r7, #28]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	dbeb      	blt.n	800ac0e <SEGGER_RTT_AllocUpBuffer+0x36>
 800ac36:	e000      	b.n	800ac3a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800ac38:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	69fa      	ldr	r2, [r7, #28]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	da3f      	bge.n	800acc4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800ac44:	6939      	ldr	r1, [r7, #16]
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	1c5a      	adds	r2, r3, #1
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	4413      	add	r3, r2
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	440b      	add	r3, r1
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800ac58:	6939      	ldr	r1, [r7, #16]
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	4613      	mov	r3, r2
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	4413      	add	r3, r2
 800ac64:	00db      	lsls	r3, r3, #3
 800ac66:	440b      	add	r3, r1
 800ac68:	3304      	adds	r3, #4
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800ac6e:	6939      	ldr	r1, [r7, #16]
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	4613      	mov	r3, r2
 800ac74:	005b      	lsls	r3, r3, #1
 800ac76:	4413      	add	r3, r2
 800ac78:	00db      	lsls	r3, r3, #3
 800ac7a:	440b      	add	r3, r1
 800ac7c:	3320      	adds	r3, #32
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800ac82:	6939      	ldr	r1, [r7, #16]
 800ac84:	69fa      	ldr	r2, [r7, #28]
 800ac86:	4613      	mov	r3, r2
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	4413      	add	r3, r2
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	440b      	add	r3, r1
 800ac90:	3328      	adds	r3, #40	; 0x28
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800ac96:	6939      	ldr	r1, [r7, #16]
 800ac98:	69fa      	ldr	r2, [r7, #28]
 800ac9a:	4613      	mov	r3, r2
 800ac9c:	005b      	lsls	r3, r3, #1
 800ac9e:	4413      	add	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	440b      	add	r3, r1
 800aca4:	3324      	adds	r3, #36	; 0x24
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800acaa:	6939      	ldr	r1, [r7, #16]
 800acac:	69fa      	ldr	r2, [r7, #28]
 800acae:	4613      	mov	r3, r2
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	4413      	add	r3, r2
 800acb4:	00db      	lsls	r3, r3, #3
 800acb6:	440b      	add	r3, r1
 800acb8:	332c      	adds	r3, #44	; 0x2c
 800acba:	683a      	ldr	r2, [r7, #0]
 800acbc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800acbe:	f3bf 8f5f 	dmb	sy
 800acc2:	e002      	b.n	800acca <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800acc4:	f04f 33ff 	mov.w	r3, #4294967295
 800acc8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800acd0:	69fb      	ldr	r3, [r7, #28]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	2002a5b4 	.word	0x2002a5b4

0800ace0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08a      	sub	sp, #40	; 0x28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800acee:	4b21      	ldr	r3, [pc, #132]	; (800ad74 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800acf0:	623b      	str	r3, [r7, #32]
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800acfc:	f7ff fe8e 	bl	800aa1c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ad00:	4b1c      	ldr	r3, [pc, #112]	; (800ad74 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800ad02:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d82c      	bhi.n	800ad64 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800ad0a:	f3ef 8311 	mrs	r3, BASEPRI
 800ad0e:	f04f 0120 	mov.w	r1, #32
 800ad12:	f381 8811 	msr	BASEPRI, r1
 800ad16:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	005b      	lsls	r3, r3, #1
 800ad1e:	4413      	add	r3, r2
 800ad20:	00db      	lsls	r3, r3, #3
 800ad22:	3360      	adds	r3, #96	; 0x60
 800ad24:	69fa      	ldr	r2, [r7, #28]
 800ad26:	4413      	add	r3, r2
 800ad28:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00e      	beq.n	800ad4e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2200      	movs	r2, #0
 800ad46:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad52:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ad54:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	627b      	str	r3, [r7, #36]	; 0x24
 800ad62:	e002      	b.n	800ad6a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800ad64:	f04f 33ff 	mov.w	r3, #4294967295
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3728      	adds	r7, #40	; 0x28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	2002a5b4 	.word	0x2002a5b4

0800ad78 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00f      	beq.n	800adae <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800ad8e:	e002      	b.n	800ad96 <_EncodeStr+0x1e>
      Len++;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	3301      	adds	r3, #1
 800ad94:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f6      	bne.n	800ad90 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d901      	bls.n	800adae <_EncodeStr+0x36>
      Len = Limit;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	2bfe      	cmp	r3, #254	; 0xfe
 800adb2:	d806      	bhi.n	800adc2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	1c5a      	adds	r2, r3, #1
 800adb8:	60fa      	str	r2, [r7, #12]
 800adba:	693a      	ldr	r2, [r7, #16]
 800adbc:	b2d2      	uxtb	r2, r2
 800adbe:	701a      	strb	r2, [r3, #0]
 800adc0:	e011      	b.n	800ade6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	1c5a      	adds	r2, r3, #1
 800adc6:	60fa      	str	r2, [r7, #12]
 800adc8:	22ff      	movs	r2, #255	; 0xff
 800adca:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	60fa      	str	r2, [r7, #12]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	b2d2      	uxtb	r2, r2
 800add6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	0a19      	lsrs	r1, r3, #8
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	60fa      	str	r2, [r7, #12]
 800ade2:	b2ca      	uxtb	r2, r1
 800ade4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800adea:	e00a      	b.n	800ae02 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	1c53      	adds	r3, r2, #1
 800adf0:	60bb      	str	r3, [r7, #8]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	1c59      	adds	r1, r3, #1
 800adf6:	60f9      	str	r1, [r7, #12]
 800adf8:	7812      	ldrb	r2, [r2, #0]
 800adfa:	701a      	strb	r2, [r3, #0]
    n++;
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	3301      	adds	r3, #1
 800ae00:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d3f0      	bcc.n	800adec <_EncodeStr+0x74>
  }
  return pPayload;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3304      	adds	r3, #4
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ae36:	4b35      	ldr	r3, [pc, #212]	; (800af0c <_HandleIncomingPacket+0xdc>)
 800ae38:	7e1b      	ldrb	r3, [r3, #24]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	1cfb      	adds	r3, r7, #3
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7ff fe43 	bl	800aacc <SEGGER_RTT_ReadNoLock>
 800ae46:	4603      	mov	r3, r0
 800ae48:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd59      	ble.n	800af04 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800ae50:	78fb      	ldrb	r3, [r7, #3]
 800ae52:	2b80      	cmp	r3, #128	; 0x80
 800ae54:	d032      	beq.n	800aebc <_HandleIncomingPacket+0x8c>
 800ae56:	2b80      	cmp	r3, #128	; 0x80
 800ae58:	dc42      	bgt.n	800aee0 <_HandleIncomingPacket+0xb0>
 800ae5a:	2b07      	cmp	r3, #7
 800ae5c:	dc16      	bgt.n	800ae8c <_HandleIncomingPacket+0x5c>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	dd3e      	ble.n	800aee0 <_HandleIncomingPacket+0xb0>
 800ae62:	3b01      	subs	r3, #1
 800ae64:	2b06      	cmp	r3, #6
 800ae66:	d83b      	bhi.n	800aee0 <_HandleIncomingPacket+0xb0>
 800ae68:	a201      	add	r2, pc, #4	; (adr r2, 800ae70 <_HandleIncomingPacket+0x40>)
 800ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800ae93 	.word	0x0800ae93
 800ae74:	0800ae99 	.word	0x0800ae99
 800ae78:	0800ae9f 	.word	0x0800ae9f
 800ae7c:	0800aea5 	.word	0x0800aea5
 800ae80:	0800aeab 	.word	0x0800aeab
 800ae84:	0800aeb1 	.word	0x0800aeb1
 800ae88:	0800aeb7 	.word	0x0800aeb7
 800ae8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ae8e:	d034      	beq.n	800aefa <_HandleIncomingPacket+0xca>
 800ae90:	e026      	b.n	800aee0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800ae92:	f000 fba5 	bl	800b5e0 <SEGGER_SYSVIEW_Start>
      break;
 800ae96:	e035      	b.n	800af04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800ae98:	f000 fc5c 	bl	800b754 <SEGGER_SYSVIEW_Stop>
      break;
 800ae9c:	e032      	b.n	800af04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800ae9e:	f000 fe35 	bl	800bb0c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800aea2:	e02f      	b.n	800af04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800aea4:	f000 fdfa 	bl	800ba9c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800aea8:	e02c      	b.n	800af04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800aeaa:	f000 fc79 	bl	800b7a0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800aeae:	e029      	b.n	800af04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800aeb0:	f001 f8a8 	bl	800c004 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800aeb4:	e026      	b.n	800af04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800aeb6:	f001 f887 	bl	800bfc8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800aeba:	e023      	b.n	800af04 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800aebc:	4b13      	ldr	r3, [pc, #76]	; (800af0c <_HandleIncomingPacket+0xdc>)
 800aebe:	7e1b      	ldrb	r3, [r3, #24]
 800aec0:	4618      	mov	r0, r3
 800aec2:	1cfb      	adds	r3, r7, #3
 800aec4:	2201      	movs	r2, #1
 800aec6:	4619      	mov	r1, r3
 800aec8:	f7ff fe00 	bl	800aacc <SEGGER_RTT_ReadNoLock>
 800aecc:	4603      	mov	r3, r0
 800aece:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	dd13      	ble.n	800aefe <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 fff5 	bl	800bec8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800aede:	e00e      	b.n	800aefe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	b25b      	sxtb	r3, r3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	da0c      	bge.n	800af02 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800aee8:	4b08      	ldr	r3, [pc, #32]	; (800af0c <_HandleIncomingPacket+0xdc>)
 800aeea:	7e1b      	ldrb	r3, [r3, #24]
 800aeec:	4618      	mov	r0, r3
 800aeee:	1cfb      	adds	r3, r7, #3
 800aef0:	2201      	movs	r2, #1
 800aef2:	4619      	mov	r1, r3
 800aef4:	f7ff fdea 	bl	800aacc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800aef8:	e003      	b.n	800af02 <_HandleIncomingPacket+0xd2>
      break;
 800aefa:	bf00      	nop
 800aefc:	e002      	b.n	800af04 <_HandleIncomingPacket+0xd4>
      break;
 800aefe:	bf00      	nop
 800af00:	e000      	b.n	800af04 <_HandleIncomingPacket+0xd4>
      break;
 800af02:	bf00      	nop
    }
  }
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	2002ae78 	.word	0x2002ae78

0800af10 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800af10:	b580      	push	{r7, lr}
 800af12:	b08c      	sub	sp, #48	; 0x30
 800af14:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800af16:	2301      	movs	r3, #1
 800af18:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800af1a:	1d3b      	adds	r3, r7, #4
 800af1c:	3301      	adds	r3, #1
 800af1e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af24:	4b31      	ldr	r3, [pc, #196]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	62bb      	str	r3, [r7, #40]	; 0x28
 800af2a:	e00b      	b.n	800af44 <_TrySendOverflowPacket+0x34>
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	1c59      	adds	r1, r3, #1
 800af34:	62f9      	str	r1, [r7, #44]	; 0x2c
 800af36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	09db      	lsrs	r3, r3, #7
 800af42:	62bb      	str	r3, [r7, #40]	; 0x28
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	2b7f      	cmp	r3, #127	; 0x7f
 800af48:	d8f0      	bhi.n	800af2c <_TrySendOverflowPacket+0x1c>
 800af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
 800af56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af58:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800af5a:	4b25      	ldr	r3, [pc, #148]	; (800aff0 <_TrySendOverflowPacket+0xe0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800af60:	4b22      	ldr	r3, [pc, #136]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	1ad3      	subs	r3, r2, r3
 800af68:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	623b      	str	r3, [r7, #32]
 800af72:	e00b      	b.n	800af8c <_TrySendOverflowPacket+0x7c>
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	b2da      	uxtb	r2, r3
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	1c59      	adds	r1, r3, #1
 800af7c:	6279      	str	r1, [r7, #36]	; 0x24
 800af7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af82:	b2d2      	uxtb	r2, r2
 800af84:	701a      	strb	r2, [r3, #0]
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	09db      	lsrs	r3, r3, #7
 800af8a:	623b      	str	r3, [r7, #32]
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	2b7f      	cmp	r3, #127	; 0x7f
 800af90:	d8f0      	bhi.n	800af74 <_TrySendOverflowPacket+0x64>
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	1c5a      	adds	r2, r3, #1
 800af96:	627a      	str	r2, [r7, #36]	; 0x24
 800af98:	6a3a      	ldr	r2, [r7, #32]
 800af9a:	b2d2      	uxtb	r2, r2
 800af9c:	701a      	strb	r2, [r3, #0]
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800afa2:	4b12      	ldr	r3, [pc, #72]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	4618      	mov	r0, r3
 800afa8:	1d3b      	adds	r3, r7, #4
 800afaa:	69fa      	ldr	r2, [r7, #28]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	461a      	mov	r2, r3
 800afb0:	1d3b      	adds	r3, r7, #4
 800afb2:	4619      	mov	r1, r3
 800afb4:	f7f5 f91c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800afb8:	4603      	mov	r3, r0
 800afba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d009      	beq.n	800afd6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800afc2:	4a0a      	ldr	r2, [pc, #40]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800afc8:	4b08      	ldr	r3, [pc, #32]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	3b01      	subs	r3, #1
 800afce:	b2da      	uxtb	r2, r3
 800afd0:	4b06      	ldr	r3, [pc, #24]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800afd2:	701a      	strb	r2, [r3, #0]
 800afd4:	e004      	b.n	800afe0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800afd6:	4b05      	ldr	r3, [pc, #20]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800afd8:	695b      	ldr	r3, [r3, #20]
 800afda:	3301      	adds	r3, #1
 800afdc:	4a03      	ldr	r2, [pc, #12]	; (800afec <_TrySendOverflowPacket+0xdc>)
 800afde:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800afe0:	693b      	ldr	r3, [r7, #16]
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3730      	adds	r7, #48	; 0x30
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	2002ae78 	.word	0x2002ae78
 800aff0:	e0001004 	.word	0xe0001004

0800aff4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b000:	4b6c      	ldr	r3, [pc, #432]	; (800b1b4 <_SendPacket+0x1c0>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d010      	beq.n	800b02a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b008:	4b6a      	ldr	r3, [pc, #424]	; (800b1b4 <_SendPacket+0x1c0>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 80a3 	beq.w	800b158 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b012:	4b68      	ldr	r3, [pc, #416]	; (800b1b4 <_SendPacket+0x1c0>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d109      	bne.n	800b02e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b01a:	f7ff ff79 	bl	800af10 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b01e:	4b65      	ldr	r3, [pc, #404]	; (800b1b4 <_SendPacket+0x1c0>)
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	2b01      	cmp	r3, #1
 800b024:	f040 809a 	bne.w	800b15c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800b028:	e001      	b.n	800b02e <_SendPacket+0x3a>
    goto Send;
 800b02a:	bf00      	nop
 800b02c:	e000      	b.n	800b030 <_SendPacket+0x3c>
Send:
 800b02e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b1f      	cmp	r3, #31
 800b034:	d809      	bhi.n	800b04a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b036:	4b5f      	ldr	r3, [pc, #380]	; (800b1b4 <_SendPacket+0x1c0>)
 800b038:	69da      	ldr	r2, [r3, #28]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	fa22 f303 	lsr.w	r3, r2, r3
 800b040:	f003 0301 	and.w	r3, r3, #1
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 808b 	bne.w	800b160 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b17      	cmp	r3, #23
 800b04e:	d807      	bhi.n	800b060 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3b01      	subs	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e03d      	b.n	800b0dc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800b060:	68ba      	ldr	r2, [r7, #8]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2b7f      	cmp	r3, #127	; 0x7f
 800b06c:	d912      	bls.n	800b094 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	09da      	lsrs	r2, r3, #7
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3b01      	subs	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	b2d2      	uxtb	r2, r2
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	3a01      	subs	r2, #1
 800b086:	60fa      	str	r2, [r7, #12]
 800b088:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	701a      	strb	r2, [r3, #0]
 800b092:	e006      	b.n	800b0a2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	3b01      	subs	r3, #1
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	b2da      	uxtb	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2b7f      	cmp	r3, #127	; 0x7f
 800b0a6:	d912      	bls.n	800b0ce <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	09da      	lsrs	r2, r3, #7
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	b2d2      	uxtb	r2, r2
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	3a01      	subs	r2, #1
 800b0c0:	60fa      	str	r2, [r7, #12]
 800b0c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	e006      	b.n	800b0dc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b0dc:	4b36      	ldr	r3, [pc, #216]	; (800b1b8 <_SendPacket+0x1c4>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b0e2:	4b34      	ldr	r3, [pc, #208]	; (800b1b4 <_SendPacket+0x1c0>)
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	623b      	str	r3, [r7, #32]
 800b0f4:	e00b      	b.n	800b10e <_SendPacket+0x11a>
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	b2da      	uxtb	r2, r3
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	1c59      	adds	r1, r3, #1
 800b0fe:	6279      	str	r1, [r7, #36]	; 0x24
 800b100:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b104:	b2d2      	uxtb	r2, r2
 800b106:	701a      	strb	r2, [r3, #0]
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	09db      	lsrs	r3, r3, #7
 800b10c:	623b      	str	r3, [r7, #32]
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	2b7f      	cmp	r3, #127	; 0x7f
 800b112:	d8f0      	bhi.n	800b0f6 <_SendPacket+0x102>
 800b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	627a      	str	r2, [r7, #36]	; 0x24
 800b11a:	6a3a      	ldr	r2, [r7, #32]
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	701a      	strb	r2, [r3, #0]
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800b124:	4b23      	ldr	r3, [pc, #140]	; (800b1b4 <_SendPacket+0x1c0>)
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	4618      	mov	r0, r3
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	461a      	mov	r2, r3
 800b132:	68f9      	ldr	r1, [r7, #12]
 800b134:	f7f5 f85c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b138:	4603      	mov	r3, r0
 800b13a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b13c:	693b      	ldr	r3, [r7, #16]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d003      	beq.n	800b14a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b142:	4a1c      	ldr	r2, [pc, #112]	; (800b1b4 <_SendPacket+0x1c0>)
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	60d3      	str	r3, [r2, #12]
 800b148:	e00b      	b.n	800b162 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b14a:	4b1a      	ldr	r3, [pc, #104]	; (800b1b4 <_SendPacket+0x1c0>)
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	b2da      	uxtb	r2, r3
 800b152:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <_SendPacket+0x1c0>)
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	e004      	b.n	800b162 <_SendPacket+0x16e>
    goto SendDone;
 800b158:	bf00      	nop
 800b15a:	e002      	b.n	800b162 <_SendPacket+0x16e>
      goto SendDone;
 800b15c:	bf00      	nop
 800b15e:	e000      	b.n	800b162 <_SendPacket+0x16e>
      goto SendDone;
 800b160:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b162:	4b14      	ldr	r3, [pc, #80]	; (800b1b4 <_SendPacket+0x1c0>)
 800b164:	7e1b      	ldrb	r3, [r3, #24]
 800b166:	4619      	mov	r1, r3
 800b168:	4a14      	ldr	r2, [pc, #80]	; (800b1bc <_SendPacket+0x1c8>)
 800b16a:	460b      	mov	r3, r1
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	440b      	add	r3, r1
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	4413      	add	r3, r2
 800b174:	336c      	adds	r3, #108	; 0x6c
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	4b0e      	ldr	r3, [pc, #56]	; (800b1b4 <_SendPacket+0x1c0>)
 800b17a:	7e1b      	ldrb	r3, [r3, #24]
 800b17c:	4618      	mov	r0, r3
 800b17e:	490f      	ldr	r1, [pc, #60]	; (800b1bc <_SendPacket+0x1c8>)
 800b180:	4603      	mov	r3, r0
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	4403      	add	r3, r0
 800b186:	00db      	lsls	r3, r3, #3
 800b188:	440b      	add	r3, r1
 800b18a:	3370      	adds	r3, #112	; 0x70
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d00b      	beq.n	800b1aa <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b192:	4b08      	ldr	r3, [pc, #32]	; (800b1b4 <_SendPacket+0x1c0>)
 800b194:	789b      	ldrb	r3, [r3, #2]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d107      	bne.n	800b1aa <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b19a:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <_SendPacket+0x1c0>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b1a0:	f7ff fe46 	bl	800ae30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b1a4:	4b03      	ldr	r3, [pc, #12]	; (800b1b4 <_SendPacket+0x1c0>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b1aa:	bf00      	nop
 800b1ac:	3728      	adds	r7, #40	; 0x28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	2002ae78 	.word	0x2002ae78
 800b1b8:	e0001004 	.word	0xe0001004
 800b1bc:	2002a5b4 	.word	0x2002a5b4

0800b1c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1d4:	4917      	ldr	r1, [pc, #92]	; (800b234 <SEGGER_SYSVIEW_Init+0x74>)
 800b1d6:	4818      	ldr	r0, [pc, #96]	; (800b238 <SEGGER_SYSVIEW_Init+0x78>)
 800b1d8:	f7ff fcfe 	bl	800abd8 <SEGGER_RTT_AllocUpBuffer>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	4b16      	ldr	r3, [pc, #88]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b1e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800b1e4:	4b15      	ldr	r3, [pc, #84]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b1e6:	785a      	ldrb	r2, [r3, #1]
 800b1e8:	4b14      	ldr	r3, [pc, #80]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b1ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b1ec:	4b13      	ldr	r3, [pc, #76]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b1ee:	7e1b      	ldrb	r3, [r3, #24]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	2308      	movs	r3, #8
 800b1f8:	4a11      	ldr	r2, [pc, #68]	; (800b240 <SEGGER_SYSVIEW_Init+0x80>)
 800b1fa:	490f      	ldr	r1, [pc, #60]	; (800b238 <SEGGER_SYSVIEW_Init+0x78>)
 800b1fc:	f7ff fd70 	bl	800ace0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b200:	4b0e      	ldr	r3, [pc, #56]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b202:	2200      	movs	r2, #0
 800b204:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b206:	4b0f      	ldr	r3, [pc, #60]	; (800b244 <SEGGER_SYSVIEW_Init+0x84>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a0c      	ldr	r2, [pc, #48]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b20c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b20e:	4a0b      	ldr	r2, [pc, #44]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b214:	4a09      	ldr	r2, [pc, #36]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b21a:	4a08      	ldr	r2, [pc, #32]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b220:	4a06      	ldr	r2, [pc, #24]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <SEGGER_SYSVIEW_Init+0x7c>)
 800b228:	2200      	movs	r2, #0
 800b22a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b22c:	bf00      	nop
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	2002aa70 	.word	0x2002aa70
 800b238:	0800d9b4 	.word	0x0800d9b4
 800b23c:	2002ae78 	.word	0x2002ae78
 800b240:	2002ae70 	.word	0x2002ae70
 800b244:	e0001004 	.word	0xe0001004

0800b248 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800b250:	4a04      	ldr	r2, [pc, #16]	; (800b264 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6113      	str	r3, [r2, #16]
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	2002ae78 	.word	0x2002ae78

0800b268 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b270:	f3ef 8311 	mrs	r3, BASEPRI
 800b274:	f04f 0120 	mov.w	r1, #32
 800b278:	f381 8811 	msr	BASEPRI, r1
 800b27c:	60fb      	str	r3, [r7, #12]
 800b27e:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b280:	f7ff fdca 	bl	800ae18 <_PreparePacket>
 800b284:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	68b8      	ldr	r0, [r7, #8]
 800b28c:	f7ff feb2 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f383 8811 	msr	BASEPRI, r3
}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	bf00      	nop
 800b2a0:	2002aea8 	.word	0x2002aea8

0800b2a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b088      	sub	sp, #32
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b2ae:	f3ef 8311 	mrs	r3, BASEPRI
 800b2b2:	f04f 0120 	mov.w	r1, #32
 800b2b6:	f381 8811 	msr	BASEPRI, r1
 800b2ba:	617b      	str	r3, [r7, #20]
 800b2bc:	4816      	ldr	r0, [pc, #88]	; (800b318 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b2be:	f7ff fdab 	bl	800ae18 <_PreparePacket>
 800b2c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	61bb      	str	r3, [r7, #24]
 800b2d0:	e00b      	b.n	800b2ea <SEGGER_SYSVIEW_RecordU32+0x46>
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	1c59      	adds	r1, r3, #1
 800b2da:	61f9      	str	r1, [r7, #28]
 800b2dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b2e0:	b2d2      	uxtb	r2, r2
 800b2e2:	701a      	strb	r2, [r3, #0]
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	09db      	lsrs	r3, r3, #7
 800b2e8:	61bb      	str	r3, [r7, #24]
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	2b7f      	cmp	r3, #127	; 0x7f
 800b2ee:	d8f0      	bhi.n	800b2d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	61fa      	str	r2, [r7, #28]
 800b2f6:	69ba      	ldr	r2, [r7, #24]
 800b2f8:	b2d2      	uxtb	r2, r2
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	68f9      	ldr	r1, [r7, #12]
 800b304:	6938      	ldr	r0, [r7, #16]
 800b306:	f7ff fe75 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f383 8811 	msr	BASEPRI, r3
}
 800b310:	bf00      	nop
 800b312:	3720      	adds	r7, #32
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	2002aea8 	.word	0x2002aea8

0800b31c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08c      	sub	sp, #48	; 0x30
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b328:	f3ef 8311 	mrs	r3, BASEPRI
 800b32c:	f04f 0120 	mov.w	r1, #32
 800b330:	f381 8811 	msr	BASEPRI, r1
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	4825      	ldr	r0, [pc, #148]	; (800b3cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b338:	f7ff fd6e 	bl	800ae18 <_PreparePacket>
 800b33c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	62bb      	str	r3, [r7, #40]	; 0x28
 800b34a:	e00b      	b.n	800b364 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	b2da      	uxtb	r2, r3
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	1c59      	adds	r1, r3, #1
 800b354:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b356:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b35a:	b2d2      	uxtb	r2, r2
 800b35c:	701a      	strb	r2, [r3, #0]
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	09db      	lsrs	r3, r3, #7
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	2b7f      	cmp	r3, #127	; 0x7f
 800b368:	d8f0      	bhi.n	800b34c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36c:	1c5a      	adds	r2, r3, #1
 800b36e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b372:	b2d2      	uxtb	r2, r2
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b378:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	623b      	str	r3, [r7, #32]
 800b382:	e00b      	b.n	800b39c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	b2da      	uxtb	r2, r3
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	1c59      	adds	r1, r3, #1
 800b38c:	6279      	str	r1, [r7, #36]	; 0x24
 800b38e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	09db      	lsrs	r3, r3, #7
 800b39a:	623b      	str	r3, [r7, #32]
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	2b7f      	cmp	r3, #127	; 0x7f
 800b3a0:	d8f0      	bhi.n	800b384 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	627a      	str	r2, [r7, #36]	; 0x24
 800b3a8:	6a3a      	ldr	r2, [r7, #32]
 800b3aa:	b2d2      	uxtb	r2, r2
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	6979      	ldr	r1, [r7, #20]
 800b3b6:	69b8      	ldr	r0, [r7, #24]
 800b3b8:	f7ff fe1c 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	f383 8811 	msr	BASEPRI, r3
}
 800b3c2:	bf00      	nop
 800b3c4:	3730      	adds	r7, #48	; 0x30
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	2002aea8 	.word	0x2002aea8

0800b3d0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08e      	sub	sp, #56	; 0x38
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
 800b3dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800b3de:	f3ef 8311 	mrs	r3, BASEPRI
 800b3e2:	f04f 0120 	mov.w	r1, #32
 800b3e6:	f381 8811 	msr	BASEPRI, r1
 800b3ea:	61fb      	str	r3, [r7, #28]
 800b3ec:	4832      	ldr	r0, [pc, #200]	; (800b4b8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800b3ee:	f7ff fd13 	bl	800ae18 <_PreparePacket>
 800b3f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	633b      	str	r3, [r7, #48]	; 0x30
 800b400:	e00b      	b.n	800b41a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800b402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b404:	b2da      	uxtb	r2, r3
 800b406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b408:	1c59      	adds	r1, r3, #1
 800b40a:	6379      	str	r1, [r7, #52]	; 0x34
 800b40c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b410:	b2d2      	uxtb	r2, r2
 800b412:	701a      	strb	r2, [r3, #0]
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	09db      	lsrs	r3, r3, #7
 800b418:	633b      	str	r3, [r7, #48]	; 0x30
 800b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41c:	2b7f      	cmp	r3, #127	; 0x7f
 800b41e:	d8f0      	bhi.n	800b402 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800b420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b422:	1c5a      	adds	r2, r3, #1
 800b424:	637a      	str	r2, [r7, #52]	; 0x34
 800b426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b428:	b2d2      	uxtb	r2, r2
 800b42a:	701a      	strb	r2, [r3, #0]
 800b42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	62bb      	str	r3, [r7, #40]	; 0x28
 800b438:	e00b      	b.n	800b452 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b440:	1c59      	adds	r1, r3, #1
 800b442:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	701a      	strb	r2, [r3, #0]
 800b44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44e:	09db      	lsrs	r3, r3, #7
 800b450:	62bb      	str	r3, [r7, #40]	; 0x28
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	2b7f      	cmp	r3, #127	; 0x7f
 800b456:	d8f0      	bhi.n	800b43a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800b458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b460:	b2d2      	uxtb	r2, r2
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b466:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	627b      	str	r3, [r7, #36]	; 0x24
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	623b      	str	r3, [r7, #32]
 800b470:	e00b      	b.n	800b48a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	b2da      	uxtb	r2, r3
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	1c59      	adds	r1, r3, #1
 800b47a:	6279      	str	r1, [r7, #36]	; 0x24
 800b47c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b480:	b2d2      	uxtb	r2, r2
 800b482:	701a      	strb	r2, [r3, #0]
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	09db      	lsrs	r3, r3, #7
 800b488:	623b      	str	r3, [r7, #32]
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	2b7f      	cmp	r3, #127	; 0x7f
 800b48e:	d8f0      	bhi.n	800b472 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	627a      	str	r2, [r7, #36]	; 0x24
 800b496:	6a3a      	ldr	r2, [r7, #32]
 800b498:	b2d2      	uxtb	r2, r2
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	6979      	ldr	r1, [r7, #20]
 800b4a4:	69b8      	ldr	r0, [r7, #24]
 800b4a6:	f7ff fda5 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	f383 8811 	msr	BASEPRI, r3
}
 800b4b0:	bf00      	nop
 800b4b2:	3738      	adds	r7, #56	; 0x38
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	2002aea8 	.word	0x2002aea8

0800b4bc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b090      	sub	sp, #64	; 0x40
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
 800b4c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b4ca:	f3ef 8311 	mrs	r3, BASEPRI
 800b4ce:	f04f 0120 	mov.w	r1, #32
 800b4d2:	f381 8811 	msr	BASEPRI, r1
 800b4d6:	61fb      	str	r3, [r7, #28]
 800b4d8:	4840      	ldr	r0, [pc, #256]	; (800b5dc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800b4da:	f7ff fc9d 	bl	800ae18 <_PreparePacket>
 800b4de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b4e0:	69bb      	ldr	r3, [r7, #24]
 800b4e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4ec:	e00b      	b.n	800b506 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800b4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f4:	1c59      	adds	r1, r3, #1
 800b4f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b4f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b4fc:	b2d2      	uxtb	r2, r2
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	09db      	lsrs	r3, r3, #7
 800b504:	63bb      	str	r3, [r7, #56]	; 0x38
 800b506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b508:	2b7f      	cmp	r3, #127	; 0x7f
 800b50a:	d8f0      	bhi.n	800b4ee <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800b50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b51a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	637b      	str	r3, [r7, #52]	; 0x34
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	633b      	str	r3, [r7, #48]	; 0x30
 800b524:	e00b      	b.n	800b53e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52c:	1c59      	adds	r1, r3, #1
 800b52e:	6379      	str	r1, [r7, #52]	; 0x34
 800b530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	09db      	lsrs	r3, r3, #7
 800b53c:	633b      	str	r3, [r7, #48]	; 0x30
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	2b7f      	cmp	r3, #127	; 0x7f
 800b542:	d8f0      	bhi.n	800b526 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	637a      	str	r2, [r7, #52]	; 0x34
 800b54a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	701a      	strb	r2, [r3, #0]
 800b550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b552:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b55c:	e00b      	b.n	800b576 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	b2da      	uxtb	r2, r3
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	1c59      	adds	r1, r3, #1
 800b566:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b568:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b56c:	b2d2      	uxtb	r2, r2
 800b56e:	701a      	strb	r2, [r3, #0]
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	09db      	lsrs	r3, r3, #7
 800b574:	62bb      	str	r3, [r7, #40]	; 0x28
 800b576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b578:	2b7f      	cmp	r3, #127	; 0x7f
 800b57a:	d8f0      	bhi.n	800b55e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800b57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b584:	b2d2      	uxtb	r2, r2
 800b586:	701a      	strb	r2, [r3, #0]
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	627b      	str	r3, [r7, #36]	; 0x24
 800b590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b592:	623b      	str	r3, [r7, #32]
 800b594:	e00b      	b.n	800b5ae <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800b596:	6a3b      	ldr	r3, [r7, #32]
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59c:	1c59      	adds	r1, r3, #1
 800b59e:	6279      	str	r1, [r7, #36]	; 0x24
 800b5a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b5a4:	b2d2      	uxtb	r2, r2
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	09db      	lsrs	r3, r3, #7
 800b5ac:	623b      	str	r3, [r7, #32]
 800b5ae:	6a3b      	ldr	r3, [r7, #32]
 800b5b0:	2b7f      	cmp	r3, #127	; 0x7f
 800b5b2:	d8f0      	bhi.n	800b596 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	627a      	str	r2, [r7, #36]	; 0x24
 800b5ba:	6a3a      	ldr	r2, [r7, #32]
 800b5bc:	b2d2      	uxtb	r2, r2
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	6979      	ldr	r1, [r7, #20]
 800b5c8:	69b8      	ldr	r0, [r7, #24]
 800b5ca:	f7ff fd13 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	f383 8811 	msr	BASEPRI, r3
}
 800b5d4:	bf00      	nop
 800b5d6:	3740      	adds	r7, #64	; 0x40
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	2002aea8 	.word	0x2002aea8

0800b5e0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08c      	sub	sp, #48	; 0x30
 800b5e4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b5e6:	4b58      	ldr	r3, [pc, #352]	; (800b748 <SEGGER_SYSVIEW_Start+0x168>)
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800b5ec:	f3ef 8311 	mrs	r3, BASEPRI
 800b5f0:	f04f 0120 	mov.w	r1, #32
 800b5f4:	f381 8811 	msr	BASEPRI, r1
 800b5f8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800b5fa:	4b53      	ldr	r3, [pc, #332]	; (800b748 <SEGGER_SYSVIEW_Start+0x168>)
 800b5fc:	785b      	ldrb	r3, [r3, #1]
 800b5fe:	220a      	movs	r2, #10
 800b600:	4952      	ldr	r1, [pc, #328]	; (800b74c <SEGGER_SYSVIEW_Start+0x16c>)
 800b602:	4618      	mov	r0, r3
 800b604:	f7f4 fdf4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800b60e:	200a      	movs	r0, #10
 800b610:	f7ff fe2a 	bl	800b268 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b614:	f3ef 8311 	mrs	r3, BASEPRI
 800b618:	f04f 0120 	mov.w	r1, #32
 800b61c:	f381 8811 	msr	BASEPRI, r1
 800b620:	60bb      	str	r3, [r7, #8]
 800b622:	484b      	ldr	r0, [pc, #300]	; (800b750 <SEGGER_SYSVIEW_Start+0x170>)
 800b624:	f7ff fbf8 	bl	800ae18 <_PreparePacket>
 800b628:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b632:	4b45      	ldr	r3, [pc, #276]	; (800b748 <SEGGER_SYSVIEW_Start+0x168>)
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	62bb      	str	r3, [r7, #40]	; 0x28
 800b638:	e00b      	b.n	800b652 <SEGGER_SYSVIEW_Start+0x72>
 800b63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63c:	b2da      	uxtb	r2, r3
 800b63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b640:	1c59      	adds	r1, r3, #1
 800b642:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b648:	b2d2      	uxtb	r2, r2
 800b64a:	701a      	strb	r2, [r3, #0]
 800b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64e:	09db      	lsrs	r3, r3, #7
 800b650:	62bb      	str	r3, [r7, #40]	; 0x28
 800b652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b654:	2b7f      	cmp	r3, #127	; 0x7f
 800b656:	d8f0      	bhi.n	800b63a <SEGGER_SYSVIEW_Start+0x5a>
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b65e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b660:	b2d2      	uxtb	r2, r2
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b666:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
 800b66c:	4b36      	ldr	r3, [pc, #216]	; (800b748 <SEGGER_SYSVIEW_Start+0x168>)
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	623b      	str	r3, [r7, #32]
 800b672:	e00b      	b.n	800b68c <SEGGER_SYSVIEW_Start+0xac>
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	b2da      	uxtb	r2, r3
 800b678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67a:	1c59      	adds	r1, r3, #1
 800b67c:	6279      	str	r1, [r7, #36]	; 0x24
 800b67e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	701a      	strb	r2, [r3, #0]
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	09db      	lsrs	r3, r3, #7
 800b68a:	623b      	str	r3, [r7, #32]
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	2b7f      	cmp	r3, #127	; 0x7f
 800b690:	d8f0      	bhi.n	800b674 <SEGGER_SYSVIEW_Start+0x94>
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	1c5a      	adds	r2, r3, #1
 800b696:	627a      	str	r2, [r7, #36]	; 0x24
 800b698:	6a3a      	ldr	r2, [r7, #32]
 800b69a:	b2d2      	uxtb	r2, r2
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	61fb      	str	r3, [r7, #28]
 800b6a6:	4b28      	ldr	r3, [pc, #160]	; (800b748 <SEGGER_SYSVIEW_Start+0x168>)
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	61bb      	str	r3, [r7, #24]
 800b6ac:	e00b      	b.n	800b6c6 <SEGGER_SYSVIEW_Start+0xe6>
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	b2da      	uxtb	r2, r3
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	1c59      	adds	r1, r3, #1
 800b6b6:	61f9      	str	r1, [r7, #28]
 800b6b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b6bc:	b2d2      	uxtb	r2, r2
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	09db      	lsrs	r3, r3, #7
 800b6c4:	61bb      	str	r3, [r7, #24]
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	2b7f      	cmp	r3, #127	; 0x7f
 800b6ca:	d8f0      	bhi.n	800b6ae <SEGGER_SYSVIEW_Start+0xce>
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	61fa      	str	r2, [r7, #28]
 800b6d2:	69ba      	ldr	r2, [r7, #24]
 800b6d4:	b2d2      	uxtb	r2, r2
 800b6d6:	701a      	strb	r2, [r3, #0]
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	617b      	str	r3, [r7, #20]
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	613b      	str	r3, [r7, #16]
 800b6e4:	e00b      	b.n	800b6fe <SEGGER_SYSVIEW_Start+0x11e>
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	1c59      	adds	r1, r3, #1
 800b6ee:	6179      	str	r1, [r7, #20]
 800b6f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b6f4:	b2d2      	uxtb	r2, r2
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	09db      	lsrs	r3, r3, #7
 800b6fc:	613b      	str	r3, [r7, #16]
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	2b7f      	cmp	r3, #127	; 0x7f
 800b702:	d8f0      	bhi.n	800b6e6 <SEGGER_SYSVIEW_Start+0x106>
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	1c5a      	adds	r2, r3, #1
 800b708:	617a      	str	r2, [r7, #20]
 800b70a:	693a      	ldr	r2, [r7, #16]
 800b70c:	b2d2      	uxtb	r2, r2
 800b70e:	701a      	strb	r2, [r3, #0]
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b714:	2218      	movs	r2, #24
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff fc6b 	bl	800aff4 <_SendPacket>
      RECORD_END();
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b724:	4b08      	ldr	r3, [pc, #32]	; (800b748 <SEGGER_SYSVIEW_Start+0x168>)
 800b726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b72c:	4b06      	ldr	r3, [pc, #24]	; (800b748 <SEGGER_SYSVIEW_Start+0x168>)
 800b72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b730:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b732:	f000 f9eb 	bl	800bb0c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b736:	f000 f9b1 	bl	800ba9c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b73a:	f000 fc63 	bl	800c004 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b73e:	bf00      	nop
 800b740:	3730      	adds	r7, #48	; 0x30
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	2002ae78 	.word	0x2002ae78
 800b74c:	0800ef74 	.word	0x0800ef74
 800b750:	2002aea8 	.word	0x2002aea8

0800b754 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b75a:	f3ef 8311 	mrs	r3, BASEPRI
 800b75e:	f04f 0120 	mov.w	r1, #32
 800b762:	f381 8811 	msr	BASEPRI, r1
 800b766:	607b      	str	r3, [r7, #4]
 800b768:	480b      	ldr	r0, [pc, #44]	; (800b798 <SEGGER_SYSVIEW_Stop+0x44>)
 800b76a:	f7ff fb55 	bl	800ae18 <_PreparePacket>
 800b76e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b770:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <SEGGER_SYSVIEW_Stop+0x48>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d007      	beq.n	800b788 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b778:	220b      	movs	r2, #11
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6838      	ldr	r0, [r7, #0]
 800b77e:	f7ff fc39 	bl	800aff4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b782:	4b06      	ldr	r3, [pc, #24]	; (800b79c <SEGGER_SYSVIEW_Stop+0x48>)
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f383 8811 	msr	BASEPRI, r3
}
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	2002aea8 	.word	0x2002aea8
 800b79c:	2002ae78 	.word	0x2002ae78

0800b7a0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08c      	sub	sp, #48	; 0x30
 800b7a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b7a6:	f3ef 8311 	mrs	r3, BASEPRI
 800b7aa:	f04f 0120 	mov.w	r1, #32
 800b7ae:	f381 8811 	msr	BASEPRI, r1
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	4845      	ldr	r0, [pc, #276]	; (800b8cc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b7b6:	f7ff fb2f 	bl	800ae18 <_PreparePacket>
 800b7ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c4:	4b42      	ldr	r3, [pc, #264]	; (800b8d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7ca:	e00b      	b.n	800b7e4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d2:	1c59      	adds	r1, r3, #1
 800b7d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b7d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7da:	b2d2      	uxtb	r2, r2
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e0:	09db      	lsrs	r3, r3, #7
 800b7e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	2b7f      	cmp	r3, #127	; 0x7f
 800b7e8:	d8f0      	bhi.n	800b7cc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ec:	1c5a      	adds	r2, r3, #1
 800b7ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7f2:	b2d2      	uxtb	r2, r2
 800b7f4:	701a      	strb	r2, [r3, #0]
 800b7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7fe:	4b34      	ldr	r3, [pc, #208]	; (800b8d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	623b      	str	r3, [r7, #32]
 800b804:	e00b      	b.n	800b81e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80c:	1c59      	adds	r1, r3, #1
 800b80e:	6279      	str	r1, [r7, #36]	; 0x24
 800b810:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b814:	b2d2      	uxtb	r2, r2
 800b816:	701a      	strb	r2, [r3, #0]
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	09db      	lsrs	r3, r3, #7
 800b81c:	623b      	str	r3, [r7, #32]
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	2b7f      	cmp	r3, #127	; 0x7f
 800b822:	d8f0      	bhi.n	800b806 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	627a      	str	r2, [r7, #36]	; 0x24
 800b82a:	6a3a      	ldr	r2, [r7, #32]
 800b82c:	b2d2      	uxtb	r2, r2
 800b82e:	701a      	strb	r2, [r3, #0]
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	61fb      	str	r3, [r7, #28]
 800b838:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	e00b      	b.n	800b858 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	b2da      	uxtb	r2, r3
 800b844:	69fb      	ldr	r3, [r7, #28]
 800b846:	1c59      	adds	r1, r3, #1
 800b848:	61f9      	str	r1, [r7, #28]
 800b84a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b84e:	b2d2      	uxtb	r2, r2
 800b850:	701a      	strb	r2, [r3, #0]
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	09db      	lsrs	r3, r3, #7
 800b856:	61bb      	str	r3, [r7, #24]
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	2b7f      	cmp	r3, #127	; 0x7f
 800b85c:	d8f0      	bhi.n	800b840 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	61fa      	str	r2, [r7, #28]
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	b2d2      	uxtb	r2, r2
 800b868:	701a      	strb	r2, [r3, #0]
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	617b      	str	r3, [r7, #20]
 800b872:	2300      	movs	r3, #0
 800b874:	613b      	str	r3, [r7, #16]
 800b876:	e00b      	b.n	800b890 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	6179      	str	r1, [r7, #20]
 800b882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b886:	b2d2      	uxtb	r2, r2
 800b888:	701a      	strb	r2, [r3, #0]
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	09db      	lsrs	r3, r3, #7
 800b88e:	613b      	str	r3, [r7, #16]
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	2b7f      	cmp	r3, #127	; 0x7f
 800b894:	d8f0      	bhi.n	800b878 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	617a      	str	r2, [r7, #20]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	b2d2      	uxtb	r2, r2
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b8a6:	2218      	movs	r2, #24
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	68b8      	ldr	r0, [r7, #8]
 800b8ac:	f7ff fba2 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b8b6:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b8be:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c2:	4798      	blx	r3
  }
}
 800b8c4:	bf00      	nop
 800b8c6:	3730      	adds	r7, #48	; 0x30
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	2002aea8 	.word	0x2002aea8
 800b8d0:	2002ae78 	.word	0x2002ae78

0800b8d4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b092      	sub	sp, #72	; 0x48
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b8dc:	f3ef 8311 	mrs	r3, BASEPRI
 800b8e0:	f04f 0120 	mov.w	r1, #32
 800b8e4:	f381 8811 	msr	BASEPRI, r1
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	486a      	ldr	r0, [pc, #424]	; (800ba94 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b8ec:	f7ff fa94 	bl	800ae18 <_PreparePacket>
 800b8f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	4b66      	ldr	r3, [pc, #408]	; (800ba98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	643b      	str	r3, [r7, #64]	; 0x40
 800b906:	e00b      	b.n	800b920 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b90e:	1c59      	adds	r1, r3, #1
 800b910:	6479      	str	r1, [r7, #68]	; 0x44
 800b912:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b916:	b2d2      	uxtb	r2, r2
 800b918:	701a      	strb	r2, [r3, #0]
 800b91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b91c:	09db      	lsrs	r3, r3, #7
 800b91e:	643b      	str	r3, [r7, #64]	; 0x40
 800b920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b922:	2b7f      	cmp	r3, #127	; 0x7f
 800b924:	d8f0      	bhi.n	800b908 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b928:	1c5a      	adds	r2, r3, #1
 800b92a:	647a      	str	r2, [r7, #68]	; 0x44
 800b92c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b92e:	b2d2      	uxtb	r2, r2
 800b930:	701a      	strb	r2, [r3, #0]
 800b932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b934:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b940:	e00b      	b.n	800b95a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	b2da      	uxtb	r2, r3
 800b946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b948:	1c59      	adds	r1, r3, #1
 800b94a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b94c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b950:	b2d2      	uxtb	r2, r2
 800b952:	701a      	strb	r2, [r3, #0]
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	09db      	lsrs	r3, r3, #7
 800b958:	63bb      	str	r3, [r7, #56]	; 0x38
 800b95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95c:	2b7f      	cmp	r3, #127	; 0x7f
 800b95e:	d8f0      	bhi.n	800b942 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b966:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b968:	b2d2      	uxtb	r2, r2
 800b96a:	701a      	strb	r2, [r3, #0]
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	2220      	movs	r2, #32
 800b976:	4619      	mov	r1, r3
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff f9fd 	bl	800ad78 <_EncodeStr>
 800b97e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b980:	2209      	movs	r2, #9
 800b982:	68f9      	ldr	r1, [r7, #12]
 800b984:	6938      	ldr	r0, [r7, #16]
 800b986:	f7ff fb35 	bl	800aff4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	637b      	str	r3, [r7, #52]	; 0x34
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	4b40      	ldr	r3, [pc, #256]	; (800ba98 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	1ad3      	subs	r3, r2, r3
 800b99c:	633b      	str	r3, [r7, #48]	; 0x30
 800b99e:	e00b      	b.n	800b9b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a6:	1c59      	adds	r1, r3, #1
 800b9a8:	6379      	str	r1, [r7, #52]	; 0x34
 800b9aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b9ae:	b2d2      	uxtb	r2, r2
 800b9b0:	701a      	strb	r2, [r3, #0]
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	09db      	lsrs	r3, r3, #7
 800b9b6:	633b      	str	r3, [r7, #48]	; 0x30
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	2b7f      	cmp	r3, #127	; 0x7f
 800b9bc:	d8f0      	bhi.n	800b9a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	637a      	str	r2, [r7, #52]	; 0x34
 800b9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9c6:	b2d2      	uxtb	r2, r2
 800b9c8:	701a      	strb	r2, [r3, #0]
 800b9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9d8:	e00b      	b.n	800b9f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e0:	1c59      	adds	r1, r3, #1
 800b9e2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b9e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b9e8:	b2d2      	uxtb	r2, r2
 800b9ea:	701a      	strb	r2, [r3, #0]
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	09db      	lsrs	r3, r3, #7
 800b9f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f4:	2b7f      	cmp	r3, #127	; 0x7f
 800b9f6:	d8f0      	bhi.n	800b9da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba00:	b2d2      	uxtb	r2, r2
 800ba02:	701a      	strb	r2, [r3, #0]
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba06:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	691b      	ldr	r3, [r3, #16]
 800ba10:	623b      	str	r3, [r7, #32]
 800ba12:	e00b      	b.n	800ba2c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	b2da      	uxtb	r2, r3
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	1c59      	adds	r1, r3, #1
 800ba1c:	6279      	str	r1, [r7, #36]	; 0x24
 800ba1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba22:	b2d2      	uxtb	r2, r2
 800ba24:	701a      	strb	r2, [r3, #0]
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	09db      	lsrs	r3, r3, #7
 800ba2a:	623b      	str	r3, [r7, #32]
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	2b7f      	cmp	r3, #127	; 0x7f
 800ba30:	d8f0      	bhi.n	800ba14 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	627a      	str	r2, [r7, #36]	; 0x24
 800ba38:	6a3a      	ldr	r2, [r7, #32]
 800ba3a:	b2d2      	uxtb	r2, r2
 800ba3c:	701a      	strb	r2, [r3, #0]
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	61fb      	str	r3, [r7, #28]
 800ba46:	2300      	movs	r3, #0
 800ba48:	61bb      	str	r3, [r7, #24]
 800ba4a:	e00b      	b.n	800ba64 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	1c59      	adds	r1, r3, #1
 800ba54:	61f9      	str	r1, [r7, #28]
 800ba56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba5a:	b2d2      	uxtb	r2, r2
 800ba5c:	701a      	strb	r2, [r3, #0]
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	09db      	lsrs	r3, r3, #7
 800ba62:	61bb      	str	r3, [r7, #24]
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	2b7f      	cmp	r3, #127	; 0x7f
 800ba68:	d8f0      	bhi.n	800ba4c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	1c5a      	adds	r2, r3, #1
 800ba6e:	61fa      	str	r2, [r7, #28]
 800ba70:	69ba      	ldr	r2, [r7, #24]
 800ba72:	b2d2      	uxtb	r2, r2
 800ba74:	701a      	strb	r2, [r3, #0]
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800ba7a:	2215      	movs	r2, #21
 800ba7c:	68f9      	ldr	r1, [r7, #12]
 800ba7e:	6938      	ldr	r0, [r7, #16]
 800ba80:	f7ff fab8 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f383 8811 	msr	BASEPRI, r3
}
 800ba8a:	bf00      	nop
 800ba8c:	3748      	adds	r7, #72	; 0x48
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	2002aea8 	.word	0x2002aea8
 800ba98:	2002ae78 	.word	0x2002ae78

0800ba9c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d008      	beq.n	800baba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800baa8:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800baaa:	6a1b      	ldr	r3, [r3, #32]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d003      	beq.n	800baba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800bab2:	4b03      	ldr	r3, [pc, #12]	; (800bac0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800bab4:	6a1b      	ldr	r3, [r3, #32]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	4798      	blx	r3
  }
}
 800baba:	bf00      	nop
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	2002ae78 	.word	0x2002ae78

0800bac4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bacc:	f3ef 8311 	mrs	r3, BASEPRI
 800bad0:	f04f 0120 	mov.w	r1, #32
 800bad4:	f381 8811 	msr	BASEPRI, r1
 800bad8:	617b      	str	r3, [r7, #20]
 800bada:	480b      	ldr	r0, [pc, #44]	; (800bb08 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800badc:	f7ff f99c 	bl	800ae18 <_PreparePacket>
 800bae0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bae2:	2280      	movs	r2, #128	; 0x80
 800bae4:	6879      	ldr	r1, [r7, #4]
 800bae6:	6938      	ldr	r0, [r7, #16]
 800bae8:	f7ff f946 	bl	800ad78 <_EncodeStr>
 800baec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800baee:	220e      	movs	r2, #14
 800baf0:	68f9      	ldr	r1, [r7, #12]
 800baf2:	6938      	ldr	r0, [r7, #16]
 800baf4:	f7ff fa7e 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	f383 8811 	msr	BASEPRI, r3
}
 800bafe:	bf00      	nop
 800bb00:	3718      	adds	r7, #24
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2002aea8 	.word	0x2002aea8

0800bb0c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800bb12:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d01a      	beq.n	800bb50 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800bb1a:	4b13      	ldr	r3, [pc, #76]	; (800bb68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d015      	beq.n	800bb50 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800bb24:	4b10      	ldr	r3, [pc, #64]	; (800bb68 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bb26:	6a1b      	ldr	r3, [r3, #32]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4798      	blx	r3
 800bb2c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800bb30:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800bb32:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	f04f 0300 	mov.w	r3, #0
 800bb3e:	000a      	movs	r2, r1
 800bb40:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800bb42:	4613      	mov	r3, r2
 800bb44:	461a      	mov	r2, r3
 800bb46:	4621      	mov	r1, r4
 800bb48:	200d      	movs	r0, #13
 800bb4a:	f7ff fbe7 	bl	800b31c <SEGGER_SYSVIEW_RecordU32x2>
 800bb4e:	e006      	b.n	800bb5e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800bb50:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4619      	mov	r1, r3
 800bb56:	200c      	movs	r0, #12
 800bb58:	f7ff fba4 	bl	800b2a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800bb5c:	bf00      	nop
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd90      	pop	{r4, r7, pc}
 800bb66:	bf00      	nop
 800bb68:	2002ae78 	.word	0x2002ae78
 800bb6c:	e0001004 	.word	0xe0001004

0800bb70 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bb76:	f3ef 8311 	mrs	r3, BASEPRI
 800bb7a:	f04f 0120 	mov.w	r1, #32
 800bb7e:	f381 8811 	msr	BASEPRI, r1
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	4819      	ldr	r0, [pc, #100]	; (800bbec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800bb86:	f7ff f947 	bl	800ae18 <_PreparePacket>
 800bb8a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800bb90:	4b17      	ldr	r3, [pc, #92]	; (800bbf0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb98:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	617b      	str	r3, [r7, #20]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	613b      	str	r3, [r7, #16]
 800bba2:	e00b      	b.n	800bbbc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	1c59      	adds	r1, r3, #1
 800bbac:	6179      	str	r1, [r7, #20]
 800bbae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbb2:	b2d2      	uxtb	r2, r2
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	09db      	lsrs	r3, r3, #7
 800bbba:	613b      	str	r3, [r7, #16]
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	2b7f      	cmp	r3, #127	; 0x7f
 800bbc0:	d8f0      	bhi.n	800bba4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	617a      	str	r2, [r7, #20]
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800bbd2:	2202      	movs	r2, #2
 800bbd4:	6879      	ldr	r1, [r7, #4]
 800bbd6:	68b8      	ldr	r0, [r7, #8]
 800bbd8:	f7ff fa0c 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f383 8811 	msr	BASEPRI, r3
}
 800bbe2:	bf00      	nop
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	2002aea8 	.word	0x2002aea8
 800bbf0:	e000ed04 	.word	0xe000ed04

0800bbf4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bbfa:	f3ef 8311 	mrs	r3, BASEPRI
 800bbfe:	f04f 0120 	mov.w	r1, #32
 800bc02:	f381 8811 	msr	BASEPRI, r1
 800bc06:	607b      	str	r3, [r7, #4]
 800bc08:	4807      	ldr	r0, [pc, #28]	; (800bc28 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800bc0a:	f7ff f905 	bl	800ae18 <_PreparePacket>
 800bc0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800bc10:	2203      	movs	r2, #3
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6838      	ldr	r0, [r7, #0]
 800bc16:	f7ff f9ed 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f383 8811 	msr	BASEPRI, r3
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	2002aea8 	.word	0x2002aea8

0800bc2c <SEGGER_SYSVIEW_RecordEnterTimer>:
*    Format and send a Timer entry event.
*  
*  Parameters
*    TimerId - Id of the timer which starts.
*/
void SEGGER_SYSVIEW_RecordEnterTimer(U32 TimerId) {
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b088      	sub	sp, #32
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bc34:	f3ef 8311 	mrs	r3, BASEPRI
 800bc38:	f04f 0120 	mov.w	r1, #32
 800bc3c:	f381 8811 	msr	BASEPRI, r1
 800bc40:	617b      	str	r3, [r7, #20]
 800bc42:	4818      	ldr	r0, [pc, #96]	; (800bca4 <SEGGER_SYSVIEW_RecordEnterTimer+0x78>)
 800bc44:	f7ff f8e8 	bl	800ae18 <_PreparePacket>
 800bc48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(TimerId));
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	61fb      	str	r3, [r7, #28]
 800bc52:	4b15      	ldr	r3, [pc, #84]	; (800bca8 <SEGGER_SYSVIEW_RecordEnterTimer+0x7c>)
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	61bb      	str	r3, [r7, #24]
 800bc5c:	e00b      	b.n	800bc76 <SEGGER_SYSVIEW_RecordEnterTimer+0x4a>
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	1c59      	adds	r1, r3, #1
 800bc66:	61f9      	str	r1, [r7, #28]
 800bc68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc6c:	b2d2      	uxtb	r2, r2
 800bc6e:	701a      	strb	r2, [r3, #0]
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	09db      	lsrs	r3, r3, #7
 800bc74:	61bb      	str	r3, [r7, #24]
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	2b7f      	cmp	r3, #127	; 0x7f
 800bc7a:	d8f0      	bhi.n	800bc5e <SEGGER_SYSVIEW_RecordEnterTimer+0x32>
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	61fa      	str	r2, [r7, #28]
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	b2d2      	uxtb	r2, r2
 800bc86:	701a      	strb	r2, [r3, #0]
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TIMER_ENTER);
 800bc8c:	2213      	movs	r2, #19
 800bc8e:	68f9      	ldr	r1, [r7, #12]
 800bc90:	6938      	ldr	r0, [r7, #16]
 800bc92:	f7ff f9af 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	f383 8811 	msr	BASEPRI, r3
}
 800bc9c:	bf00      	nop
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	2002aea8 	.word	0x2002aea8
 800bca8:	2002ae78 	.word	0x2002ae78

0800bcac <SEGGER_SYSVIEW_RecordExitTimer>:
*       SEGGER_SYSVIEW_RecordExitTimer()
*
*  Function description
*    Format and send a Timer exit event.
*/
void SEGGER_SYSVIEW_RecordExitTimer(void) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bcb2:	f3ef 8311 	mrs	r3, BASEPRI
 800bcb6:	f04f 0120 	mov.w	r1, #32
 800bcba:	f381 8811 	msr	BASEPRI, r1
 800bcbe:	607b      	str	r3, [r7, #4]
 800bcc0:	4807      	ldr	r0, [pc, #28]	; (800bce0 <SEGGER_SYSVIEW_RecordExitTimer+0x34>)
 800bcc2:	f7ff f8a9 	bl	800ae18 <_PreparePacket>
 800bcc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TIMER_EXIT);
 800bcc8:	2214      	movs	r2, #20
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6838      	ldr	r0, [r7, #0]
 800bcce:	f7ff f991 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f383 8811 	msr	BASEPRI, r3
}
 800bcd8:	bf00      	nop
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	2002aea8 	.word	0x2002aea8

0800bce4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bcea:	f3ef 8311 	mrs	r3, BASEPRI
 800bcee:	f04f 0120 	mov.w	r1, #32
 800bcf2:	f381 8811 	msr	BASEPRI, r1
 800bcf6:	607b      	str	r3, [r7, #4]
 800bcf8:	4807      	ldr	r0, [pc, #28]	; (800bd18 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800bcfa:	f7ff f88d 	bl	800ae18 <_PreparePacket>
 800bcfe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800bd00:	2211      	movs	r2, #17
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6838      	ldr	r0, [r7, #0]
 800bd06:	f7ff f975 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f383 8811 	msr	BASEPRI, r3
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	2002aea8 	.word	0x2002aea8

0800bd1c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b088      	sub	sp, #32
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bd24:	f3ef 8311 	mrs	r3, BASEPRI
 800bd28:	f04f 0120 	mov.w	r1, #32
 800bd2c:	f381 8811 	msr	BASEPRI, r1
 800bd30:	617b      	str	r3, [r7, #20]
 800bd32:	4819      	ldr	r0, [pc, #100]	; (800bd98 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800bd34:	f7ff f870 	bl	800ae18 <_PreparePacket>
 800bd38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bd3e:	4b17      	ldr	r3, [pc, #92]	; (800bd9c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	61fb      	str	r3, [r7, #28]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	61bb      	str	r3, [r7, #24]
 800bd50:	e00b      	b.n	800bd6a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	b2da      	uxtb	r2, r3
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	1c59      	adds	r1, r3, #1
 800bd5a:	61f9      	str	r1, [r7, #28]
 800bd5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd60:	b2d2      	uxtb	r2, r2
 800bd62:	701a      	strb	r2, [r3, #0]
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	09db      	lsrs	r3, r3, #7
 800bd68:	61bb      	str	r3, [r7, #24]
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	2b7f      	cmp	r3, #127	; 0x7f
 800bd6e:	d8f0      	bhi.n	800bd52 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	1c5a      	adds	r2, r3, #1
 800bd74:	61fa      	str	r2, [r7, #28]
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	b2d2      	uxtb	r2, r2
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800bd80:	2208      	movs	r2, #8
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	6938      	ldr	r0, [r7, #16]
 800bd86:	f7ff f935 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f383 8811 	msr	BASEPRI, r3
}
 800bd90:	bf00      	nop
 800bd92:	3720      	adds	r7, #32
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	2002aea8 	.word	0x2002aea8
 800bd9c:	2002ae78 	.word	0x2002ae78

0800bda0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bda8:	f3ef 8311 	mrs	r3, BASEPRI
 800bdac:	f04f 0120 	mov.w	r1, #32
 800bdb0:	f381 8811 	msr	BASEPRI, r1
 800bdb4:	617b      	str	r3, [r7, #20]
 800bdb6:	4819      	ldr	r0, [pc, #100]	; (800be1c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800bdb8:	f7ff f82e 	bl	800ae18 <_PreparePacket>
 800bdbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bdc2:	4b17      	ldr	r3, [pc, #92]	; (800be20 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	61fb      	str	r3, [r7, #28]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	e00b      	b.n	800bdee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	69fb      	ldr	r3, [r7, #28]
 800bddc:	1c59      	adds	r1, r3, #1
 800bdde:	61f9      	str	r1, [r7, #28]
 800bde0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bde4:	b2d2      	uxtb	r2, r2
 800bde6:	701a      	strb	r2, [r3, #0]
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	09db      	lsrs	r3, r3, #7
 800bdec:	61bb      	str	r3, [r7, #24]
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	2b7f      	cmp	r3, #127	; 0x7f
 800bdf2:	d8f0      	bhi.n	800bdd6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	61fa      	str	r2, [r7, #28]
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	b2d2      	uxtb	r2, r2
 800bdfe:	701a      	strb	r2, [r3, #0]
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800be04:	2204      	movs	r2, #4
 800be06:	68f9      	ldr	r1, [r7, #12]
 800be08:	6938      	ldr	r0, [r7, #16]
 800be0a:	f7ff f8f3 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f383 8811 	msr	BASEPRI, r3
}
 800be14:	bf00      	nop
 800be16:	3720      	adds	r7, #32
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	2002aea8 	.word	0x2002aea8
 800be20:	2002ae78 	.word	0x2002ae78

0800be24 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800be2c:	f3ef 8311 	mrs	r3, BASEPRI
 800be30:	f04f 0120 	mov.w	r1, #32
 800be34:	f381 8811 	msr	BASEPRI, r1
 800be38:	617b      	str	r3, [r7, #20]
 800be3a:	4819      	ldr	r0, [pc, #100]	; (800bea0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800be3c:	f7fe ffec 	bl	800ae18 <_PreparePacket>
 800be40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800be46:	4b17      	ldr	r3, [pc, #92]	; (800bea4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	1ad3      	subs	r3, r2, r3
 800be4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	61fb      	str	r3, [r7, #28]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	61bb      	str	r3, [r7, #24]
 800be58:	e00b      	b.n	800be72 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	1c59      	adds	r1, r3, #1
 800be62:	61f9      	str	r1, [r7, #28]
 800be64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be68:	b2d2      	uxtb	r2, r2
 800be6a:	701a      	strb	r2, [r3, #0]
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	09db      	lsrs	r3, r3, #7
 800be70:	61bb      	str	r3, [r7, #24]
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b7f      	cmp	r3, #127	; 0x7f
 800be76:	d8f0      	bhi.n	800be5a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	61fa      	str	r2, [r7, #28]
 800be7e:	69ba      	ldr	r2, [r7, #24]
 800be80:	b2d2      	uxtb	r2, r2
 800be82:	701a      	strb	r2, [r3, #0]
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800be88:	2206      	movs	r2, #6
 800be8a:	68f9      	ldr	r1, [r7, #12]
 800be8c:	6938      	ldr	r0, [r7, #16]
 800be8e:	f7ff f8b1 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f383 8811 	msr	BASEPRI, r3
}
 800be98:	bf00      	nop
 800be9a:	3720      	adds	r7, #32
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	2002aea8 	.word	0x2002aea8
 800bea4:	2002ae78 	.word	0x2002ae78

0800bea8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800bea8:	b480      	push	{r7}
 800beaa:	b083      	sub	sp, #12
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800beb0:	4b04      	ldr	r3, [pc, #16]	; (800bec4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	1ad3      	subs	r3, r2, r3
}
 800beb8:	4618      	mov	r0, r3
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr
 800bec4:	2002ae78 	.word	0x2002ae78

0800bec8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800bec8:	b580      	push	{r7, lr}
 800beca:	b08c      	sub	sp, #48	; 0x30
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800bed2:	4b3b      	ldr	r3, [pc, #236]	; (800bfc0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d06d      	beq.n	800bfb6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800beda:	4b39      	ldr	r3, [pc, #228]	; (800bfc0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800bee0:	2300      	movs	r3, #0
 800bee2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bee4:	e008      	b.n	800bef8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800bee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800beec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d007      	beq.n	800bf02 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800bef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef4:	3301      	adds	r3, #1
 800bef6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bef8:	79fb      	ldrb	r3, [r7, #7]
 800befa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800befc:	429a      	cmp	r2, r3
 800befe:	d3f2      	bcc.n	800bee6 <SEGGER_SYSVIEW_SendModule+0x1e>
 800bf00:	e000      	b.n	800bf04 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800bf02:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d055      	beq.n	800bfb6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bf0a:	f3ef 8311 	mrs	r3, BASEPRI
 800bf0e:	f04f 0120 	mov.w	r1, #32
 800bf12:	f381 8811 	msr	BASEPRI, r1
 800bf16:	617b      	str	r3, [r7, #20]
 800bf18:	482a      	ldr	r0, [pc, #168]	; (800bfc4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800bf1a:	f7fe ff7d 	bl	800ae18 <_PreparePacket>
 800bf1e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	627b      	str	r3, [r7, #36]	; 0x24
 800bf28:	79fb      	ldrb	r3, [r7, #7]
 800bf2a:	623b      	str	r3, [r7, #32]
 800bf2c:	e00b      	b.n	800bf46 <SEGGER_SYSVIEW_SendModule+0x7e>
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf34:	1c59      	adds	r1, r3, #1
 800bf36:	6279      	str	r1, [r7, #36]	; 0x24
 800bf38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf3c:	b2d2      	uxtb	r2, r2
 800bf3e:	701a      	strb	r2, [r3, #0]
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	09db      	lsrs	r3, r3, #7
 800bf44:	623b      	str	r3, [r7, #32]
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	2b7f      	cmp	r3, #127	; 0x7f
 800bf4a:	d8f0      	bhi.n	800bf2e <SEGGER_SYSVIEW_SendModule+0x66>
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	1c5a      	adds	r2, r3, #1
 800bf50:	627a      	str	r2, [r7, #36]	; 0x24
 800bf52:	6a3a      	ldr	r2, [r7, #32]
 800bf54:	b2d2      	uxtb	r2, r2
 800bf56:	701a      	strb	r2, [r3, #0]
 800bf58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	61fb      	str	r3, [r7, #28]
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	61bb      	str	r3, [r7, #24]
 800bf66:	e00b      	b.n	800bf80 <SEGGER_SYSVIEW_SendModule+0xb8>
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	1c59      	adds	r1, r3, #1
 800bf70:	61f9      	str	r1, [r7, #28]
 800bf72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf76:	b2d2      	uxtb	r2, r2
 800bf78:	701a      	strb	r2, [r3, #0]
 800bf7a:	69bb      	ldr	r3, [r7, #24]
 800bf7c:	09db      	lsrs	r3, r3, #7
 800bf7e:	61bb      	str	r3, [r7, #24]
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	2b7f      	cmp	r3, #127	; 0x7f
 800bf84:	d8f0      	bhi.n	800bf68 <SEGGER_SYSVIEW_SendModule+0xa0>
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	61fa      	str	r2, [r7, #28]
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2280      	movs	r2, #128	; 0x80
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f7fe feea 	bl	800ad78 <_EncodeStr>
 800bfa4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800bfa6:	2216      	movs	r2, #22
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f7ff f822 	bl	800aff4 <_SendPacket>
      RECORD_END();
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800bfb6:	bf00      	nop
 800bfb8:	3730      	adds	r7, #48	; 0x30
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}
 800bfbe:	bf00      	nop
 800bfc0:	2002aea0 	.word	0x2002aea0
 800bfc4:	2002aea8 	.word	0x2002aea8

0800bfc8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800bfce:	4b0c      	ldr	r3, [pc, #48]	; (800c000 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00f      	beq.n	800bff6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	691b      	ldr	r3, [r3, #16]
 800bfee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1f2      	bne.n	800bfdc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800bff6:	bf00      	nop
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	2002aea0 	.word	0x2002aea0

0800c004 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c00a:	f3ef 8311 	mrs	r3, BASEPRI
 800c00e:	f04f 0120 	mov.w	r1, #32
 800c012:	f381 8811 	msr	BASEPRI, r1
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	4817      	ldr	r0, [pc, #92]	; (800c078 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c01a:	f7fe fefd 	bl	800ae18 <_PreparePacket>
 800c01e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	4b14      	ldr	r3, [pc, #80]	; (800c07c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	613b      	str	r3, [r7, #16]
 800c02e:	e00b      	b.n	800c048 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	b2da      	uxtb	r2, r3
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	6179      	str	r1, [r7, #20]
 800c03a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c03e:	b2d2      	uxtb	r2, r2
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	09db      	lsrs	r3, r3, #7
 800c046:	613b      	str	r3, [r7, #16]
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	2b7f      	cmp	r3, #127	; 0x7f
 800c04c:	d8f0      	bhi.n	800c030 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	617a      	str	r2, [r7, #20]
 800c054:	693a      	ldr	r2, [r7, #16]
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c05e:	221b      	movs	r2, #27
 800c060:	6879      	ldr	r1, [r7, #4]
 800c062:	68b8      	ldr	r0, [r7, #8]
 800c064:	f7fe ffc6 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f383 8811 	msr	BASEPRI, r3
}
 800c06e:	bf00      	nop
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	2002aea8 	.word	0x2002aea8
 800c07c:	2002aea4 	.word	0x2002aea4

0800c080 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c080:	b580      	push	{r7, lr}
 800c082:	b08a      	sub	sp, #40	; 0x28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c088:	f3ef 8311 	mrs	r3, BASEPRI
 800c08c:	f04f 0120 	mov.w	r1, #32
 800c090:	f381 8811 	msr	BASEPRI, r1
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	4827      	ldr	r0, [pc, #156]	; (800c134 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c098:	f7fe febe 	bl	800ae18 <_PreparePacket>
 800c09c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c09e:	2280      	movs	r2, #128	; 0x80
 800c0a0:	6879      	ldr	r1, [r7, #4]
 800c0a2:	6938      	ldr	r0, [r7, #16]
 800c0a4:	f7fe fe68 	bl	800ad78 <_EncodeStr>
 800c0a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	623b      	str	r3, [r7, #32]
 800c0b2:	e00b      	b.n	800c0cc <SEGGER_SYSVIEW_Warn+0x4c>
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ba:	1c59      	adds	r1, r3, #1
 800c0bc:	6279      	str	r1, [r7, #36]	; 0x24
 800c0be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0c2:	b2d2      	uxtb	r2, r2
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	09db      	lsrs	r3, r3, #7
 800c0ca:	623b      	str	r3, [r7, #32]
 800c0cc:	6a3b      	ldr	r3, [r7, #32]
 800c0ce:	2b7f      	cmp	r3, #127	; 0x7f
 800c0d0:	d8f0      	bhi.n	800c0b4 <SEGGER_SYSVIEW_Warn+0x34>
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	627a      	str	r2, [r7, #36]	; 0x24
 800c0d8:	6a3a      	ldr	r2, [r7, #32]
 800c0da:	b2d2      	uxtb	r2, r2
 800c0dc:	701a      	strb	r2, [r3, #0]
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	61fb      	str	r3, [r7, #28]
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	61bb      	str	r3, [r7, #24]
 800c0ea:	e00b      	b.n	800c104 <SEGGER_SYSVIEW_Warn+0x84>
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	1c59      	adds	r1, r3, #1
 800c0f4:	61f9      	str	r1, [r7, #28]
 800c0f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0fa:	b2d2      	uxtb	r2, r2
 800c0fc:	701a      	strb	r2, [r3, #0]
 800c0fe:	69bb      	ldr	r3, [r7, #24]
 800c100:	09db      	lsrs	r3, r3, #7
 800c102:	61bb      	str	r3, [r7, #24]
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	2b7f      	cmp	r3, #127	; 0x7f
 800c108:	d8f0      	bhi.n	800c0ec <SEGGER_SYSVIEW_Warn+0x6c>
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	61fa      	str	r2, [r7, #28]
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	b2d2      	uxtb	r2, r2
 800c114:	701a      	strb	r2, [r3, #0]
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c11a:	221a      	movs	r2, #26
 800c11c:	68f9      	ldr	r1, [r7, #12]
 800c11e:	6938      	ldr	r0, [r7, #16]
 800c120:	f7fe ff68 	bl	800aff4 <_SendPacket>
  RECORD_END();
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	f383 8811 	msr	BASEPRI, r3
}
 800c12a:	bf00      	nop
 800c12c:	3728      	adds	r7, #40	; 0x28
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	2002aea8 	.word	0x2002aea8

0800c138 <__NVIC_EnableIRQ>:
{
 800c138:	b480      	push	{r7}
 800c13a:	b083      	sub	sp, #12
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	4603      	mov	r3, r0
 800c140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c146:	2b00      	cmp	r3, #0
 800c148:	db0b      	blt.n	800c162 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c14a:	79fb      	ldrb	r3, [r7, #7]
 800c14c:	f003 021f 	and.w	r2, r3, #31
 800c150:	4907      	ldr	r1, [pc, #28]	; (800c170 <__NVIC_EnableIRQ+0x38>)
 800c152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c156:	095b      	lsrs	r3, r3, #5
 800c158:	2001      	movs	r0, #1
 800c15a:	fa00 f202 	lsl.w	r2, r0, r2
 800c15e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	e000e100 	.word	0xe000e100

0800c174 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800c17c:	4b08      	ldr	r3, [pc, #32]	; (800c1a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c17e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c180:	4907      	ldr	r1, [pc, #28]	; (800c1a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4313      	orrs	r3, r2
 800c186:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c188:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c18a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4013      	ands	r3, r2
 800c190:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c192:	68fb      	ldr	r3, [r7, #12]
}
 800c194:	bf00      	nop
 800c196:	3714      	adds	r7, #20
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	40023800 	.word	0x40023800

0800c1a4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f043 0201 	orr.w	r2, r3, #1
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f06f 0201 	mvn.w	r2, #1
 800c1ee:	611a      	str	r2, [r3, #16]
}
 800c1f0:	bf00      	nop
 800c1f2:	370c      	adds	r7, #12
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	f003 0301 	and.w	r3, r3, #1
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d101      	bne.n	800c214 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800c210:	2301      	movs	r3, #1
 800c212:	e000      	b.n	800c216 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800c214:	2300      	movs	r3, #0
}
 800c216:	4618      	mov	r0, r3
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f043 0201 	orr.w	r2, r3, #1
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	60da      	str	r2, [r3, #12]
}
 800c236:	bf00      	nop
 800c238:	370c      	adds	r7, #12
 800c23a:	46bd      	mov	sp, r7
 800c23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c240:	4770      	bx	lr
	...

0800c244 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c248:	4802      	ldr	r0, [pc, #8]	; (800c254 <_cbSendSystemDesc+0x10>)
 800c24a:	f7ff fc3b 	bl	800bac4 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800c24e:	bf00      	nop
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	0800d9bc 	.word	0x0800d9bc

0800c258 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800c25c:	4807      	ldr	r0, [pc, #28]	; (800c27c <TIM7_IRQHandler+0x24>)
 800c25e:	f7ff ffcd 	bl	800c1fc <LL_TIM_IsActiveFlag_UPDATE>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d007      	beq.n	800c278 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800c268:	4804      	ldr	r0, [pc, #16]	; (800c27c <TIM7_IRQHandler+0x24>)
 800c26a:	f7ff ffb9 	bl	800c1e0 <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800c26e:	4b04      	ldr	r3, [pc, #16]	; (800c280 <TIM7_IRQHandler+0x28>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3301      	adds	r3, #1
 800c274:	4a02      	ldr	r2, [pc, #8]	; (800c280 <TIM7_IRQHandler+0x28>)
 800c276:	6013      	str	r3, [r2, #0]
	}
}
 800c278:	bf00      	nop
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	40001400 	.word	0x40001400
 800c280:	2002aa6c 	.word	0x2002aa6c

0800c284 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800c288:	2020      	movs	r0, #32
 800c28a:	f7ff ff73 	bl	800c174 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800c28e:	4b0d      	ldr	r3, [pc, #52]	; (800c2c4 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	085a      	lsrs	r2, r3, #1
 800c294:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	441a      	add	r2, r3
 800c29a:	4b0a      	ldr	r3, [pc, #40]	; (800c2c4 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4808      	ldr	r0, [pc, #32]	; (800c2c8 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c2a8:	f7ff ff8c 	bl	800c1c4 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800c2ac:	2037      	movs	r0, #55	; 0x37
 800c2ae:	f7ff ff43 	bl	800c138 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800c2b2:	4805      	ldr	r0, [pc, #20]	; (800c2c8 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c2b4:	f7ff ffb5 	bl	800c222 <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800c2b8:	4803      	ldr	r0, [pc, #12]	; (800c2c8 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c2ba:	f7ff ff73 	bl	800c1a4 <LL_TIM_EnableCounter>
}
 800c2be:	bf00      	nop
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	20000014 	.word	0x20000014
 800c2c8:	40001400 	.word	0x40001400

0800c2cc <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800c2d0:	f7ff ffd8 	bl	800c284 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800c2d4:	4b06      	ldr	r3, [pc, #24]	; (800c2f0 <SEGGER_SYSVIEW_Conf+0x24>)
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	4b05      	ldr	r3, [pc, #20]	; (800c2f0 <SEGGER_SYSVIEW_Conf+0x24>)
 800c2da:	6819      	ldr	r1, [r3, #0]
 800c2dc:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <SEGGER_SYSVIEW_Conf+0x28>)
 800c2de:	4a06      	ldr	r2, [pc, #24]	; (800c2f8 <SEGGER_SYSVIEW_Conf+0x2c>)
 800c2e0:	f7fe ff6e 	bl	800b1c0 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c2e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c2e8:	f7fe ffae 	bl	800b248 <SEGGER_SYSVIEW_SetRAMBase>
}
 800c2ec:	bf00      	nop
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	20000014 	.word	0x20000014
 800c2f4:	0800c245 	.word	0x0800c245
 800c2f8:	0800ef80 	.word	0x0800ef80

0800c2fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c302:	2300      	movs	r3, #0
 800c304:	607b      	str	r3, [r7, #4]
 800c306:	e048      	b.n	800c39a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800c308:	4929      	ldr	r1, [pc, #164]	; (800c3b0 <_cbSendTaskList+0xb4>)
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	4613      	mov	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	4413      	add	r3, r2
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	440b      	add	r3, r1
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fd f86b 	bl	80093f4 <uxTaskGetStackHighWaterMark>
 800c31e:	4601      	mov	r1, r0
 800c320:	4823      	ldr	r0, [pc, #140]	; (800c3b0 <_cbSendTaskList+0xb4>)
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4403      	add	r3, r0
 800c32e:	3310      	adds	r3, #16
 800c330:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c332:	491f      	ldr	r1, [pc, #124]	; (800c3b0 <_cbSendTaskList+0xb4>)
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	4613      	mov	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4413      	add	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	440b      	add	r3, r1
 800c340:	6818      	ldr	r0, [r3, #0]
 800c342:	491b      	ldr	r1, [pc, #108]	; (800c3b0 <_cbSendTaskList+0xb4>)
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	440b      	add	r3, r1
 800c350:	3304      	adds	r3, #4
 800c352:	6819      	ldr	r1, [r3, #0]
 800c354:	4c16      	ldr	r4, [pc, #88]	; (800c3b0 <_cbSendTaskList+0xb4>)
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	4613      	mov	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4413      	add	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4423      	add	r3, r4
 800c362:	3308      	adds	r3, #8
 800c364:	681c      	ldr	r4, [r3, #0]
 800c366:	4d12      	ldr	r5, [pc, #72]	; (800c3b0 <_cbSendTaskList+0xb4>)
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	4613      	mov	r3, r2
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	4413      	add	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	442b      	add	r3, r5
 800c374:	330c      	adds	r3, #12
 800c376:	681d      	ldr	r5, [r3, #0]
 800c378:	4e0d      	ldr	r6, [pc, #52]	; (800c3b0 <_cbSendTaskList+0xb4>)
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	4613      	mov	r3, r2
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4433      	add	r3, r6
 800c386:	3310      	adds	r3, #16
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	9300      	str	r3, [sp, #0]
 800c38c:	462b      	mov	r3, r5
 800c38e:	4622      	mov	r2, r4
 800c390:	f000 f8be 	bl	800c510 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3301      	adds	r3, #1
 800c398:	607b      	str	r3, [r7, #4]
 800c39a:	4b06      	ldr	r3, [pc, #24]	; (800c3b4 <_cbSendTaskList+0xb8>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d3b1      	bcc.n	800c308 <_cbSendTaskList+0xc>
  }
}
 800c3a4:	bf00      	nop
 800c3a6:	bf00      	nop
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	2002af8c 	.word	0x2002af8c
 800c3b4:	2002b11c 	.word	0x2002b11c

0800c3b8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c3b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c3c0:	f7fc fc56 	bl	8008c70 <xTaskGetTickCountFromISR>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	469a      	mov	sl, r3
 800c3ca:	4693      	mov	fp, r2
 800c3cc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c3d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	f04f 0a00 	mov.w	sl, #0
 800c3dc:	f04f 0b00 	mov.w	fp, #0
 800c3e0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c3e4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c3e8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c3ec:	4652      	mov	r2, sl
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	1a14      	subs	r4, r2, r0
 800c3f2:	eb63 0501 	sbc.w	r5, r3, r1
 800c3f6:	f04f 0200 	mov.w	r2, #0
 800c3fa:	f04f 0300 	mov.w	r3, #0
 800c3fe:	00ab      	lsls	r3, r5, #2
 800c400:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c404:	00a2      	lsls	r2, r4, #2
 800c406:	4614      	mov	r4, r2
 800c408:	461d      	mov	r5, r3
 800c40a:	eb14 0800 	adds.w	r8, r4, r0
 800c40e:	eb45 0901 	adc.w	r9, r5, r1
 800c412:	f04f 0200 	mov.w	r2, #0
 800c416:	f04f 0300 	mov.w	r3, #0
 800c41a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c41e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c426:	4690      	mov	r8, r2
 800c428:	4699      	mov	r9, r3
 800c42a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800c42e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c432:	4610      	mov	r0, r2
 800c434:	4619      	mov	r1, r3
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c440 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af02      	add	r7, sp, #8
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c44e:	2205      	movs	r2, #5
 800c450:	492b      	ldr	r1, [pc, #172]	; (800c500 <SYSVIEW_AddTask+0xc0>)
 800c452:	68b8      	ldr	r0, [r7, #8]
 800c454:	f000 f9b3 	bl	800c7be <memcmp>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d04b      	beq.n	800c4f6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c45e:	4b29      	ldr	r3, [pc, #164]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b13      	cmp	r3, #19
 800c464:	d903      	bls.n	800c46e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c466:	4828      	ldr	r0, [pc, #160]	; (800c508 <SYSVIEW_AddTask+0xc8>)
 800c468:	f7ff fe0a 	bl	800c080 <SEGGER_SYSVIEW_Warn>
    return;
 800c46c:	e044      	b.n	800c4f8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c46e:	4b25      	ldr	r3, [pc, #148]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	4926      	ldr	r1, [pc, #152]	; (800c50c <SYSVIEW_AddTask+0xcc>)
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c482:	4b20      	ldr	r3, [pc, #128]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	4921      	ldr	r1, [pc, #132]	; (800c50c <SYSVIEW_AddTask+0xcc>)
 800c488:	4613      	mov	r3, r2
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	440b      	add	r3, r1
 800c492:	3304      	adds	r3, #4
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800c498:	4b1a      	ldr	r3, [pc, #104]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	491b      	ldr	r1, [pc, #108]	; (800c50c <SYSVIEW_AddTask+0xcc>)
 800c49e:	4613      	mov	r3, r2
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	440b      	add	r3, r1
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800c4ae:	4b15      	ldr	r3, [pc, #84]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	4916      	ldr	r1, [pc, #88]	; (800c50c <SYSVIEW_AddTask+0xcc>)
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	440b      	add	r3, r1
 800c4be:	330c      	adds	r3, #12
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	4910      	ldr	r1, [pc, #64]	; (800c50c <SYSVIEW_AddTask+0xcc>)
 800c4ca:	4613      	mov	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	009b      	lsls	r3, r3, #2
 800c4d2:	440b      	add	r3, r1
 800c4d4:	3310      	adds	r3, #16
 800c4d6:	69ba      	ldr	r2, [r7, #24]
 800c4d8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800c4da:	4b0a      	ldr	r3, [pc, #40]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	4a08      	ldr	r2, [pc, #32]	; (800c504 <SYSVIEW_AddTask+0xc4>)
 800c4e2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	68b9      	ldr	r1, [r7, #8]
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f000 f80e 	bl	800c510 <SYSVIEW_SendTaskInfo>
 800c4f4:	e000      	b.n	800c4f8 <SYSVIEW_AddTask+0xb8>
    return;
 800c4f6:	bf00      	nop

}
 800c4f8:	3710      	adds	r7, #16
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	0800d9f0 	.word	0x0800d9f0
 800c504:	2002b11c 	.word	0x2002b11c
 800c508:	0800d9f8 	.word	0x0800d9f8
 800c50c:	2002af8c 	.word	0x2002af8c

0800c510 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800c510:	b580      	push	{r7, lr}
 800c512:	b08a      	sub	sp, #40	; 0x28
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
 800c51c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800c51e:	f107 0314 	add.w	r3, r7, #20
 800c522:	2214      	movs	r2, #20
 800c524:	2100      	movs	r1, #0
 800c526:	4618      	mov	r0, r3
 800c528:	f000 f959 	bl	800c7de <memset>
  TaskInfo.TaskID     = TaskID;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800c53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c53e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800c540:	f107 0314 	add.w	r3, r7, #20
 800c544:	4618      	mov	r0, r3
 800c546:	f7ff f9c5 	bl	800b8d4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800c54a:	bf00      	nop
 800c54c:	3728      	adds	r7, #40	; 0x28
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <__assert_func>:
 800c554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c556:	4614      	mov	r4, r2
 800c558:	461a      	mov	r2, r3
 800c55a:	4b09      	ldr	r3, [pc, #36]	; (800c580 <__assert_func+0x2c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4605      	mov	r5, r0
 800c560:	68d8      	ldr	r0, [r3, #12]
 800c562:	b14c      	cbz	r4, 800c578 <__assert_func+0x24>
 800c564:	4b07      	ldr	r3, [pc, #28]	; (800c584 <__assert_func+0x30>)
 800c566:	9100      	str	r1, [sp, #0]
 800c568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c56c:	4906      	ldr	r1, [pc, #24]	; (800c588 <__assert_func+0x34>)
 800c56e:	462b      	mov	r3, r5
 800c570:	f000 f8b2 	bl	800c6d8 <fiprintf>
 800c574:	f000 f9bd 	bl	800c8f2 <abort>
 800c578:	4b04      	ldr	r3, [pc, #16]	; (800c58c <__assert_func+0x38>)
 800c57a:	461c      	mov	r4, r3
 800c57c:	e7f3      	b.n	800c566 <__assert_func+0x12>
 800c57e:	bf00      	nop
 800c580:	2000007c 	.word	0x2000007c
 800c584:	0800ef88 	.word	0x0800ef88
 800c588:	0800ef95 	.word	0x0800ef95
 800c58c:	0800efc3 	.word	0x0800efc3

0800c590 <std>:
 800c590:	2300      	movs	r3, #0
 800c592:	b510      	push	{r4, lr}
 800c594:	4604      	mov	r4, r0
 800c596:	e9c0 3300 	strd	r3, r3, [r0]
 800c59a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c59e:	6083      	str	r3, [r0, #8]
 800c5a0:	8181      	strh	r1, [r0, #12]
 800c5a2:	6643      	str	r3, [r0, #100]	; 0x64
 800c5a4:	81c2      	strh	r2, [r0, #14]
 800c5a6:	6183      	str	r3, [r0, #24]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	305c      	adds	r0, #92	; 0x5c
 800c5ae:	f000 f916 	bl	800c7de <memset>
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <std+0x58>)
 800c5b4:	6263      	str	r3, [r4, #36]	; 0x24
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	; (800c5ec <std+0x5c>)
 800c5b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5ba:	4b0d      	ldr	r3, [pc, #52]	; (800c5f0 <std+0x60>)
 800c5bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5be:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <std+0x64>)
 800c5c0:	6323      	str	r3, [r4, #48]	; 0x30
 800c5c2:	4b0d      	ldr	r3, [pc, #52]	; (800c5f8 <std+0x68>)
 800c5c4:	6224      	str	r4, [r4, #32]
 800c5c6:	429c      	cmp	r4, r3
 800c5c8:	d006      	beq.n	800c5d8 <std+0x48>
 800c5ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c5ce:	4294      	cmp	r4, r2
 800c5d0:	d002      	beq.n	800c5d8 <std+0x48>
 800c5d2:	33d0      	adds	r3, #208	; 0xd0
 800c5d4:	429c      	cmp	r4, r3
 800c5d6:	d105      	bne.n	800c5e4 <std+0x54>
 800c5d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5e0:	f000 b976 	b.w	800c8d0 <__retarget_lock_init_recursive>
 800c5e4:	bd10      	pop	{r4, pc}
 800c5e6:	bf00      	nop
 800c5e8:	0800c739 	.word	0x0800c739
 800c5ec:	0800c75b 	.word	0x0800c75b
 800c5f0:	0800c793 	.word	0x0800c793
 800c5f4:	0800c7b7 	.word	0x0800c7b7
 800c5f8:	2002b120 	.word	0x2002b120

0800c5fc <stdio_exit_handler>:
 800c5fc:	4a02      	ldr	r2, [pc, #8]	; (800c608 <stdio_exit_handler+0xc>)
 800c5fe:	4903      	ldr	r1, [pc, #12]	; (800c60c <stdio_exit_handler+0x10>)
 800c600:	4803      	ldr	r0, [pc, #12]	; (800c610 <stdio_exit_handler+0x14>)
 800c602:	f000 b87b 	b.w	800c6fc <_fwalk_sglue>
 800c606:	bf00      	nop
 800c608:	20000024 	.word	0x20000024
 800c60c:	0800d1a5 	.word	0x0800d1a5
 800c610:	20000030 	.word	0x20000030

0800c614 <cleanup_stdio>:
 800c614:	6841      	ldr	r1, [r0, #4]
 800c616:	4b0c      	ldr	r3, [pc, #48]	; (800c648 <cleanup_stdio+0x34>)
 800c618:	4299      	cmp	r1, r3
 800c61a:	b510      	push	{r4, lr}
 800c61c:	4604      	mov	r4, r0
 800c61e:	d001      	beq.n	800c624 <cleanup_stdio+0x10>
 800c620:	f000 fdc0 	bl	800d1a4 <_fflush_r>
 800c624:	68a1      	ldr	r1, [r4, #8]
 800c626:	4b09      	ldr	r3, [pc, #36]	; (800c64c <cleanup_stdio+0x38>)
 800c628:	4299      	cmp	r1, r3
 800c62a:	d002      	beq.n	800c632 <cleanup_stdio+0x1e>
 800c62c:	4620      	mov	r0, r4
 800c62e:	f000 fdb9 	bl	800d1a4 <_fflush_r>
 800c632:	68e1      	ldr	r1, [r4, #12]
 800c634:	4b06      	ldr	r3, [pc, #24]	; (800c650 <cleanup_stdio+0x3c>)
 800c636:	4299      	cmp	r1, r3
 800c638:	d004      	beq.n	800c644 <cleanup_stdio+0x30>
 800c63a:	4620      	mov	r0, r4
 800c63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c640:	f000 bdb0 	b.w	800d1a4 <_fflush_r>
 800c644:	bd10      	pop	{r4, pc}
 800c646:	bf00      	nop
 800c648:	2002b120 	.word	0x2002b120
 800c64c:	2002b188 	.word	0x2002b188
 800c650:	2002b1f0 	.word	0x2002b1f0

0800c654 <global_stdio_init.part.0>:
 800c654:	b510      	push	{r4, lr}
 800c656:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <global_stdio_init.part.0+0x30>)
 800c658:	4c0b      	ldr	r4, [pc, #44]	; (800c688 <global_stdio_init.part.0+0x34>)
 800c65a:	4a0c      	ldr	r2, [pc, #48]	; (800c68c <global_stdio_init.part.0+0x38>)
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	4620      	mov	r0, r4
 800c660:	2200      	movs	r2, #0
 800c662:	2104      	movs	r1, #4
 800c664:	f7ff ff94 	bl	800c590 <std>
 800c668:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c66c:	2201      	movs	r2, #1
 800c66e:	2109      	movs	r1, #9
 800c670:	f7ff ff8e 	bl	800c590 <std>
 800c674:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c678:	2202      	movs	r2, #2
 800c67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c67e:	2112      	movs	r1, #18
 800c680:	f7ff bf86 	b.w	800c590 <std>
 800c684:	2002b258 	.word	0x2002b258
 800c688:	2002b120 	.word	0x2002b120
 800c68c:	0800c5fd 	.word	0x0800c5fd

0800c690 <__sfp_lock_acquire>:
 800c690:	4801      	ldr	r0, [pc, #4]	; (800c698 <__sfp_lock_acquire+0x8>)
 800c692:	f000 b91e 	b.w	800c8d2 <__retarget_lock_acquire_recursive>
 800c696:	bf00      	nop
 800c698:	2002b261 	.word	0x2002b261

0800c69c <__sfp_lock_release>:
 800c69c:	4801      	ldr	r0, [pc, #4]	; (800c6a4 <__sfp_lock_release+0x8>)
 800c69e:	f000 b919 	b.w	800c8d4 <__retarget_lock_release_recursive>
 800c6a2:	bf00      	nop
 800c6a4:	2002b261 	.word	0x2002b261

0800c6a8 <__sinit>:
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	f7ff fff0 	bl	800c690 <__sfp_lock_acquire>
 800c6b0:	6a23      	ldr	r3, [r4, #32]
 800c6b2:	b11b      	cbz	r3, 800c6bc <__sinit+0x14>
 800c6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b8:	f7ff bff0 	b.w	800c69c <__sfp_lock_release>
 800c6bc:	4b04      	ldr	r3, [pc, #16]	; (800c6d0 <__sinit+0x28>)
 800c6be:	6223      	str	r3, [r4, #32]
 800c6c0:	4b04      	ldr	r3, [pc, #16]	; (800c6d4 <__sinit+0x2c>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1f5      	bne.n	800c6b4 <__sinit+0xc>
 800c6c8:	f7ff ffc4 	bl	800c654 <global_stdio_init.part.0>
 800c6cc:	e7f2      	b.n	800c6b4 <__sinit+0xc>
 800c6ce:	bf00      	nop
 800c6d0:	0800c615 	.word	0x0800c615
 800c6d4:	2002b258 	.word	0x2002b258

0800c6d8 <fiprintf>:
 800c6d8:	b40e      	push	{r1, r2, r3}
 800c6da:	b503      	push	{r0, r1, lr}
 800c6dc:	4601      	mov	r1, r0
 800c6de:	ab03      	add	r3, sp, #12
 800c6e0:	4805      	ldr	r0, [pc, #20]	; (800c6f8 <fiprintf+0x20>)
 800c6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6e6:	6800      	ldr	r0, [r0, #0]
 800c6e8:	9301      	str	r3, [sp, #4]
 800c6ea:	f000 fa2b 	bl	800cb44 <_vfiprintf_r>
 800c6ee:	b002      	add	sp, #8
 800c6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6f4:	b003      	add	sp, #12
 800c6f6:	4770      	bx	lr
 800c6f8:	2000007c 	.word	0x2000007c

0800c6fc <_fwalk_sglue>:
 800c6fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c700:	4607      	mov	r7, r0
 800c702:	4688      	mov	r8, r1
 800c704:	4614      	mov	r4, r2
 800c706:	2600      	movs	r6, #0
 800c708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c70c:	f1b9 0901 	subs.w	r9, r9, #1
 800c710:	d505      	bpl.n	800c71e <_fwalk_sglue+0x22>
 800c712:	6824      	ldr	r4, [r4, #0]
 800c714:	2c00      	cmp	r4, #0
 800c716:	d1f7      	bne.n	800c708 <_fwalk_sglue+0xc>
 800c718:	4630      	mov	r0, r6
 800c71a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d907      	bls.n	800c734 <_fwalk_sglue+0x38>
 800c724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c728:	3301      	adds	r3, #1
 800c72a:	d003      	beq.n	800c734 <_fwalk_sglue+0x38>
 800c72c:	4629      	mov	r1, r5
 800c72e:	4638      	mov	r0, r7
 800c730:	47c0      	blx	r8
 800c732:	4306      	orrs	r6, r0
 800c734:	3568      	adds	r5, #104	; 0x68
 800c736:	e7e9      	b.n	800c70c <_fwalk_sglue+0x10>

0800c738 <__sread>:
 800c738:	b510      	push	{r4, lr}
 800c73a:	460c      	mov	r4, r1
 800c73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c740:	f000 f878 	bl	800c834 <_read_r>
 800c744:	2800      	cmp	r0, #0
 800c746:	bfab      	itete	ge
 800c748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c74a:	89a3      	ldrhlt	r3, [r4, #12]
 800c74c:	181b      	addge	r3, r3, r0
 800c74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c752:	bfac      	ite	ge
 800c754:	6563      	strge	r3, [r4, #84]	; 0x54
 800c756:	81a3      	strhlt	r3, [r4, #12]
 800c758:	bd10      	pop	{r4, pc}

0800c75a <__swrite>:
 800c75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75e:	461f      	mov	r7, r3
 800c760:	898b      	ldrh	r3, [r1, #12]
 800c762:	05db      	lsls	r3, r3, #23
 800c764:	4605      	mov	r5, r0
 800c766:	460c      	mov	r4, r1
 800c768:	4616      	mov	r6, r2
 800c76a:	d505      	bpl.n	800c778 <__swrite+0x1e>
 800c76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c770:	2302      	movs	r3, #2
 800c772:	2200      	movs	r2, #0
 800c774:	f000 f84c 	bl	800c810 <_lseek_r>
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	4632      	mov	r2, r6
 800c786:	463b      	mov	r3, r7
 800c788:	4628      	mov	r0, r5
 800c78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c78e:	f000 b863 	b.w	800c858 <_write_r>

0800c792 <__sseek>:
 800c792:	b510      	push	{r4, lr}
 800c794:	460c      	mov	r4, r1
 800c796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c79a:	f000 f839 	bl	800c810 <_lseek_r>
 800c79e:	1c43      	adds	r3, r0, #1
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	bf15      	itete	ne
 800c7a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7ae:	81a3      	strheq	r3, [r4, #12]
 800c7b0:	bf18      	it	ne
 800c7b2:	81a3      	strhne	r3, [r4, #12]
 800c7b4:	bd10      	pop	{r4, pc}

0800c7b6 <__sclose>:
 800c7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ba:	f000 b819 	b.w	800c7f0 <_close_r>

0800c7be <memcmp>:
 800c7be:	b510      	push	{r4, lr}
 800c7c0:	3901      	subs	r1, #1
 800c7c2:	4402      	add	r2, r0
 800c7c4:	4290      	cmp	r0, r2
 800c7c6:	d101      	bne.n	800c7cc <memcmp+0xe>
 800c7c8:	2000      	movs	r0, #0
 800c7ca:	e005      	b.n	800c7d8 <memcmp+0x1a>
 800c7cc:	7803      	ldrb	r3, [r0, #0]
 800c7ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c7d2:	42a3      	cmp	r3, r4
 800c7d4:	d001      	beq.n	800c7da <memcmp+0x1c>
 800c7d6:	1b18      	subs	r0, r3, r4
 800c7d8:	bd10      	pop	{r4, pc}
 800c7da:	3001      	adds	r0, #1
 800c7dc:	e7f2      	b.n	800c7c4 <memcmp+0x6>

0800c7de <memset>:
 800c7de:	4402      	add	r2, r0
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d100      	bne.n	800c7e8 <memset+0xa>
 800c7e6:	4770      	bx	lr
 800c7e8:	f803 1b01 	strb.w	r1, [r3], #1
 800c7ec:	e7f9      	b.n	800c7e2 <memset+0x4>
	...

0800c7f0 <_close_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4d06      	ldr	r5, [pc, #24]	; (800c80c <_close_r+0x1c>)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	4608      	mov	r0, r1
 800c7fa:	602b      	str	r3, [r5, #0]
 800c7fc:	f7f6 fbf0 	bl	8002fe0 <_close>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d102      	bne.n	800c80a <_close_r+0x1a>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	b103      	cbz	r3, 800c80a <_close_r+0x1a>
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	2002b25c 	.word	0x2002b25c

0800c810 <_lseek_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4d07      	ldr	r5, [pc, #28]	; (800c830 <_lseek_r+0x20>)
 800c814:	4604      	mov	r4, r0
 800c816:	4608      	mov	r0, r1
 800c818:	4611      	mov	r1, r2
 800c81a:	2200      	movs	r2, #0
 800c81c:	602a      	str	r2, [r5, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	f7f6 fc05 	bl	800302e <_lseek>
 800c824:	1c43      	adds	r3, r0, #1
 800c826:	d102      	bne.n	800c82e <_lseek_r+0x1e>
 800c828:	682b      	ldr	r3, [r5, #0]
 800c82a:	b103      	cbz	r3, 800c82e <_lseek_r+0x1e>
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	bd38      	pop	{r3, r4, r5, pc}
 800c830:	2002b25c 	.word	0x2002b25c

0800c834 <_read_r>:
 800c834:	b538      	push	{r3, r4, r5, lr}
 800c836:	4d07      	ldr	r5, [pc, #28]	; (800c854 <_read_r+0x20>)
 800c838:	4604      	mov	r4, r0
 800c83a:	4608      	mov	r0, r1
 800c83c:	4611      	mov	r1, r2
 800c83e:	2200      	movs	r2, #0
 800c840:	602a      	str	r2, [r5, #0]
 800c842:	461a      	mov	r2, r3
 800c844:	f7f6 fb93 	bl	8002f6e <_read>
 800c848:	1c43      	adds	r3, r0, #1
 800c84a:	d102      	bne.n	800c852 <_read_r+0x1e>
 800c84c:	682b      	ldr	r3, [r5, #0]
 800c84e:	b103      	cbz	r3, 800c852 <_read_r+0x1e>
 800c850:	6023      	str	r3, [r4, #0]
 800c852:	bd38      	pop	{r3, r4, r5, pc}
 800c854:	2002b25c 	.word	0x2002b25c

0800c858 <_write_r>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	4d07      	ldr	r5, [pc, #28]	; (800c878 <_write_r+0x20>)
 800c85c:	4604      	mov	r4, r0
 800c85e:	4608      	mov	r0, r1
 800c860:	4611      	mov	r1, r2
 800c862:	2200      	movs	r2, #0
 800c864:	602a      	str	r2, [r5, #0]
 800c866:	461a      	mov	r2, r3
 800c868:	f7f6 fb9e 	bl	8002fa8 <_write>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <_write_r+0x1e>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	b103      	cbz	r3, 800c876 <_write_r+0x1e>
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	2002b25c 	.word	0x2002b25c

0800c87c <__errno>:
 800c87c:	4b01      	ldr	r3, [pc, #4]	; (800c884 <__errno+0x8>)
 800c87e:	6818      	ldr	r0, [r3, #0]
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	2000007c 	.word	0x2000007c

0800c888 <__libc_init_array>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	4d0d      	ldr	r5, [pc, #52]	; (800c8c0 <__libc_init_array+0x38>)
 800c88c:	4c0d      	ldr	r4, [pc, #52]	; (800c8c4 <__libc_init_array+0x3c>)
 800c88e:	1b64      	subs	r4, r4, r5
 800c890:	10a4      	asrs	r4, r4, #2
 800c892:	2600      	movs	r6, #0
 800c894:	42a6      	cmp	r6, r4
 800c896:	d109      	bne.n	800c8ac <__libc_init_array+0x24>
 800c898:	4d0b      	ldr	r5, [pc, #44]	; (800c8c8 <__libc_init_array+0x40>)
 800c89a:	4c0c      	ldr	r4, [pc, #48]	; (800c8cc <__libc_init_array+0x44>)
 800c89c:	f000 fe18 	bl	800d4d0 <_init>
 800c8a0:	1b64      	subs	r4, r4, r5
 800c8a2:	10a4      	asrs	r4, r4, #2
 800c8a4:	2600      	movs	r6, #0
 800c8a6:	42a6      	cmp	r6, r4
 800c8a8:	d105      	bne.n	800c8b6 <__libc_init_array+0x2e>
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8b0:	4798      	blx	r3
 800c8b2:	3601      	adds	r6, #1
 800c8b4:	e7ee      	b.n	800c894 <__libc_init_array+0xc>
 800c8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ba:	4798      	blx	r3
 800c8bc:	3601      	adds	r6, #1
 800c8be:	e7f2      	b.n	800c8a6 <__libc_init_array+0x1e>
 800c8c0:	0800f000 	.word	0x0800f000
 800c8c4:	0800f000 	.word	0x0800f000
 800c8c8:	0800f000 	.word	0x0800f000
 800c8cc:	0800f004 	.word	0x0800f004

0800c8d0 <__retarget_lock_init_recursive>:
 800c8d0:	4770      	bx	lr

0800c8d2 <__retarget_lock_acquire_recursive>:
 800c8d2:	4770      	bx	lr

0800c8d4 <__retarget_lock_release_recursive>:
 800c8d4:	4770      	bx	lr

0800c8d6 <memcpy>:
 800c8d6:	440a      	add	r2, r1
 800c8d8:	4291      	cmp	r1, r2
 800c8da:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8de:	d100      	bne.n	800c8e2 <memcpy+0xc>
 800c8e0:	4770      	bx	lr
 800c8e2:	b510      	push	{r4, lr}
 800c8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8ec:	4291      	cmp	r1, r2
 800c8ee:	d1f9      	bne.n	800c8e4 <memcpy+0xe>
 800c8f0:	bd10      	pop	{r4, pc}

0800c8f2 <abort>:
 800c8f2:	b508      	push	{r3, lr}
 800c8f4:	2006      	movs	r0, #6
 800c8f6:	f000 fd3b 	bl	800d370 <raise>
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	f7f6 fb2d 	bl	8002f5a <_exit>

0800c900 <_free_r>:
 800c900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c902:	2900      	cmp	r1, #0
 800c904:	d044      	beq.n	800c990 <_free_r+0x90>
 800c906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c90a:	9001      	str	r0, [sp, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f1a1 0404 	sub.w	r4, r1, #4
 800c912:	bfb8      	it	lt
 800c914:	18e4      	addlt	r4, r4, r3
 800c916:	f000 f8df 	bl	800cad8 <__malloc_lock>
 800c91a:	4a1e      	ldr	r2, [pc, #120]	; (800c994 <_free_r+0x94>)
 800c91c:	9801      	ldr	r0, [sp, #4]
 800c91e:	6813      	ldr	r3, [r2, #0]
 800c920:	b933      	cbnz	r3, 800c930 <_free_r+0x30>
 800c922:	6063      	str	r3, [r4, #4]
 800c924:	6014      	str	r4, [r2, #0]
 800c926:	b003      	add	sp, #12
 800c928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c92c:	f000 b8da 	b.w	800cae4 <__malloc_unlock>
 800c930:	42a3      	cmp	r3, r4
 800c932:	d908      	bls.n	800c946 <_free_r+0x46>
 800c934:	6825      	ldr	r5, [r4, #0]
 800c936:	1961      	adds	r1, r4, r5
 800c938:	428b      	cmp	r3, r1
 800c93a:	bf01      	itttt	eq
 800c93c:	6819      	ldreq	r1, [r3, #0]
 800c93e:	685b      	ldreq	r3, [r3, #4]
 800c940:	1949      	addeq	r1, r1, r5
 800c942:	6021      	streq	r1, [r4, #0]
 800c944:	e7ed      	b.n	800c922 <_free_r+0x22>
 800c946:	461a      	mov	r2, r3
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	b10b      	cbz	r3, 800c950 <_free_r+0x50>
 800c94c:	42a3      	cmp	r3, r4
 800c94e:	d9fa      	bls.n	800c946 <_free_r+0x46>
 800c950:	6811      	ldr	r1, [r2, #0]
 800c952:	1855      	adds	r5, r2, r1
 800c954:	42a5      	cmp	r5, r4
 800c956:	d10b      	bne.n	800c970 <_free_r+0x70>
 800c958:	6824      	ldr	r4, [r4, #0]
 800c95a:	4421      	add	r1, r4
 800c95c:	1854      	adds	r4, r2, r1
 800c95e:	42a3      	cmp	r3, r4
 800c960:	6011      	str	r1, [r2, #0]
 800c962:	d1e0      	bne.n	800c926 <_free_r+0x26>
 800c964:	681c      	ldr	r4, [r3, #0]
 800c966:	685b      	ldr	r3, [r3, #4]
 800c968:	6053      	str	r3, [r2, #4]
 800c96a:	440c      	add	r4, r1
 800c96c:	6014      	str	r4, [r2, #0]
 800c96e:	e7da      	b.n	800c926 <_free_r+0x26>
 800c970:	d902      	bls.n	800c978 <_free_r+0x78>
 800c972:	230c      	movs	r3, #12
 800c974:	6003      	str	r3, [r0, #0]
 800c976:	e7d6      	b.n	800c926 <_free_r+0x26>
 800c978:	6825      	ldr	r5, [r4, #0]
 800c97a:	1961      	adds	r1, r4, r5
 800c97c:	428b      	cmp	r3, r1
 800c97e:	bf04      	itt	eq
 800c980:	6819      	ldreq	r1, [r3, #0]
 800c982:	685b      	ldreq	r3, [r3, #4]
 800c984:	6063      	str	r3, [r4, #4]
 800c986:	bf04      	itt	eq
 800c988:	1949      	addeq	r1, r1, r5
 800c98a:	6021      	streq	r1, [r4, #0]
 800c98c:	6054      	str	r4, [r2, #4]
 800c98e:	e7ca      	b.n	800c926 <_free_r+0x26>
 800c990:	b003      	add	sp, #12
 800c992:	bd30      	pop	{r4, r5, pc}
 800c994:	2002b264 	.word	0x2002b264

0800c998 <sbrk_aligned>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	4e0e      	ldr	r6, [pc, #56]	; (800c9d4 <sbrk_aligned+0x3c>)
 800c99c:	460c      	mov	r4, r1
 800c99e:	6831      	ldr	r1, [r6, #0]
 800c9a0:	4605      	mov	r5, r0
 800c9a2:	b911      	cbnz	r1, 800c9aa <sbrk_aligned+0x12>
 800c9a4:	f000 fd00 	bl	800d3a8 <_sbrk_r>
 800c9a8:	6030      	str	r0, [r6, #0]
 800c9aa:	4621      	mov	r1, r4
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	f000 fcfb 	bl	800d3a8 <_sbrk_r>
 800c9b2:	1c43      	adds	r3, r0, #1
 800c9b4:	d00a      	beq.n	800c9cc <sbrk_aligned+0x34>
 800c9b6:	1cc4      	adds	r4, r0, #3
 800c9b8:	f024 0403 	bic.w	r4, r4, #3
 800c9bc:	42a0      	cmp	r0, r4
 800c9be:	d007      	beq.n	800c9d0 <sbrk_aligned+0x38>
 800c9c0:	1a21      	subs	r1, r4, r0
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f000 fcf0 	bl	800d3a8 <_sbrk_r>
 800c9c8:	3001      	adds	r0, #1
 800c9ca:	d101      	bne.n	800c9d0 <sbrk_aligned+0x38>
 800c9cc:	f04f 34ff 	mov.w	r4, #4294967295
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	2002b268 	.word	0x2002b268

0800c9d8 <_malloc_r>:
 800c9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9dc:	1ccd      	adds	r5, r1, #3
 800c9de:	f025 0503 	bic.w	r5, r5, #3
 800c9e2:	3508      	adds	r5, #8
 800c9e4:	2d0c      	cmp	r5, #12
 800c9e6:	bf38      	it	cc
 800c9e8:	250c      	movcc	r5, #12
 800c9ea:	2d00      	cmp	r5, #0
 800c9ec:	4607      	mov	r7, r0
 800c9ee:	db01      	blt.n	800c9f4 <_malloc_r+0x1c>
 800c9f0:	42a9      	cmp	r1, r5
 800c9f2:	d905      	bls.n	800ca00 <_malloc_r+0x28>
 800c9f4:	230c      	movs	r3, #12
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	2600      	movs	r6, #0
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cad4 <_malloc_r+0xfc>
 800ca04:	f000 f868 	bl	800cad8 <__malloc_lock>
 800ca08:	f8d8 3000 	ldr.w	r3, [r8]
 800ca0c:	461c      	mov	r4, r3
 800ca0e:	bb5c      	cbnz	r4, 800ca68 <_malloc_r+0x90>
 800ca10:	4629      	mov	r1, r5
 800ca12:	4638      	mov	r0, r7
 800ca14:	f7ff ffc0 	bl	800c998 <sbrk_aligned>
 800ca18:	1c43      	adds	r3, r0, #1
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	d155      	bne.n	800caca <_malloc_r+0xf2>
 800ca1e:	f8d8 4000 	ldr.w	r4, [r8]
 800ca22:	4626      	mov	r6, r4
 800ca24:	2e00      	cmp	r6, #0
 800ca26:	d145      	bne.n	800cab4 <_malloc_r+0xdc>
 800ca28:	2c00      	cmp	r4, #0
 800ca2a:	d048      	beq.n	800cabe <_malloc_r+0xe6>
 800ca2c:	6823      	ldr	r3, [r4, #0]
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4638      	mov	r0, r7
 800ca32:	eb04 0903 	add.w	r9, r4, r3
 800ca36:	f000 fcb7 	bl	800d3a8 <_sbrk_r>
 800ca3a:	4581      	cmp	r9, r0
 800ca3c:	d13f      	bne.n	800cabe <_malloc_r+0xe6>
 800ca3e:	6821      	ldr	r1, [r4, #0]
 800ca40:	1a6d      	subs	r5, r5, r1
 800ca42:	4629      	mov	r1, r5
 800ca44:	4638      	mov	r0, r7
 800ca46:	f7ff ffa7 	bl	800c998 <sbrk_aligned>
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	d037      	beq.n	800cabe <_malloc_r+0xe6>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	442b      	add	r3, r5
 800ca52:	6023      	str	r3, [r4, #0]
 800ca54:	f8d8 3000 	ldr.w	r3, [r8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d038      	beq.n	800cace <_malloc_r+0xf6>
 800ca5c:	685a      	ldr	r2, [r3, #4]
 800ca5e:	42a2      	cmp	r2, r4
 800ca60:	d12b      	bne.n	800caba <_malloc_r+0xe2>
 800ca62:	2200      	movs	r2, #0
 800ca64:	605a      	str	r2, [r3, #4]
 800ca66:	e00f      	b.n	800ca88 <_malloc_r+0xb0>
 800ca68:	6822      	ldr	r2, [r4, #0]
 800ca6a:	1b52      	subs	r2, r2, r5
 800ca6c:	d41f      	bmi.n	800caae <_malloc_r+0xd6>
 800ca6e:	2a0b      	cmp	r2, #11
 800ca70:	d917      	bls.n	800caa2 <_malloc_r+0xca>
 800ca72:	1961      	adds	r1, r4, r5
 800ca74:	42a3      	cmp	r3, r4
 800ca76:	6025      	str	r5, [r4, #0]
 800ca78:	bf18      	it	ne
 800ca7a:	6059      	strne	r1, [r3, #4]
 800ca7c:	6863      	ldr	r3, [r4, #4]
 800ca7e:	bf08      	it	eq
 800ca80:	f8c8 1000 	streq.w	r1, [r8]
 800ca84:	5162      	str	r2, [r4, r5]
 800ca86:	604b      	str	r3, [r1, #4]
 800ca88:	4638      	mov	r0, r7
 800ca8a:	f104 060b 	add.w	r6, r4, #11
 800ca8e:	f000 f829 	bl	800cae4 <__malloc_unlock>
 800ca92:	f026 0607 	bic.w	r6, r6, #7
 800ca96:	1d23      	adds	r3, r4, #4
 800ca98:	1af2      	subs	r2, r6, r3
 800ca9a:	d0ae      	beq.n	800c9fa <_malloc_r+0x22>
 800ca9c:	1b9b      	subs	r3, r3, r6
 800ca9e:	50a3      	str	r3, [r4, r2]
 800caa0:	e7ab      	b.n	800c9fa <_malloc_r+0x22>
 800caa2:	42a3      	cmp	r3, r4
 800caa4:	6862      	ldr	r2, [r4, #4]
 800caa6:	d1dd      	bne.n	800ca64 <_malloc_r+0x8c>
 800caa8:	f8c8 2000 	str.w	r2, [r8]
 800caac:	e7ec      	b.n	800ca88 <_malloc_r+0xb0>
 800caae:	4623      	mov	r3, r4
 800cab0:	6864      	ldr	r4, [r4, #4]
 800cab2:	e7ac      	b.n	800ca0e <_malloc_r+0x36>
 800cab4:	4634      	mov	r4, r6
 800cab6:	6876      	ldr	r6, [r6, #4]
 800cab8:	e7b4      	b.n	800ca24 <_malloc_r+0x4c>
 800caba:	4613      	mov	r3, r2
 800cabc:	e7cc      	b.n	800ca58 <_malloc_r+0x80>
 800cabe:	230c      	movs	r3, #12
 800cac0:	603b      	str	r3, [r7, #0]
 800cac2:	4638      	mov	r0, r7
 800cac4:	f000 f80e 	bl	800cae4 <__malloc_unlock>
 800cac8:	e797      	b.n	800c9fa <_malloc_r+0x22>
 800caca:	6025      	str	r5, [r4, #0]
 800cacc:	e7dc      	b.n	800ca88 <_malloc_r+0xb0>
 800cace:	605b      	str	r3, [r3, #4]
 800cad0:	deff      	udf	#255	; 0xff
 800cad2:	bf00      	nop
 800cad4:	2002b264 	.word	0x2002b264

0800cad8 <__malloc_lock>:
 800cad8:	4801      	ldr	r0, [pc, #4]	; (800cae0 <__malloc_lock+0x8>)
 800cada:	f7ff befa 	b.w	800c8d2 <__retarget_lock_acquire_recursive>
 800cade:	bf00      	nop
 800cae0:	2002b260 	.word	0x2002b260

0800cae4 <__malloc_unlock>:
 800cae4:	4801      	ldr	r0, [pc, #4]	; (800caec <__malloc_unlock+0x8>)
 800cae6:	f7ff bef5 	b.w	800c8d4 <__retarget_lock_release_recursive>
 800caea:	bf00      	nop
 800caec:	2002b260 	.word	0x2002b260

0800caf0 <__sfputc_r>:
 800caf0:	6893      	ldr	r3, [r2, #8]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	b410      	push	{r4}
 800caf8:	6093      	str	r3, [r2, #8]
 800cafa:	da08      	bge.n	800cb0e <__sfputc_r+0x1e>
 800cafc:	6994      	ldr	r4, [r2, #24]
 800cafe:	42a3      	cmp	r3, r4
 800cb00:	db01      	blt.n	800cb06 <__sfputc_r+0x16>
 800cb02:	290a      	cmp	r1, #10
 800cb04:	d103      	bne.n	800cb0e <__sfputc_r+0x1e>
 800cb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb0a:	f000 bb73 	b.w	800d1f4 <__swbuf_r>
 800cb0e:	6813      	ldr	r3, [r2, #0]
 800cb10:	1c58      	adds	r0, r3, #1
 800cb12:	6010      	str	r0, [r2, #0]
 800cb14:	7019      	strb	r1, [r3, #0]
 800cb16:	4608      	mov	r0, r1
 800cb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <__sfputs_r>:
 800cb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb20:	4606      	mov	r6, r0
 800cb22:	460f      	mov	r7, r1
 800cb24:	4614      	mov	r4, r2
 800cb26:	18d5      	adds	r5, r2, r3
 800cb28:	42ac      	cmp	r4, r5
 800cb2a:	d101      	bne.n	800cb30 <__sfputs_r+0x12>
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	e007      	b.n	800cb40 <__sfputs_r+0x22>
 800cb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb34:	463a      	mov	r2, r7
 800cb36:	4630      	mov	r0, r6
 800cb38:	f7ff ffda 	bl	800caf0 <__sfputc_r>
 800cb3c:	1c43      	adds	r3, r0, #1
 800cb3e:	d1f3      	bne.n	800cb28 <__sfputs_r+0xa>
 800cb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb44 <_vfiprintf_r>:
 800cb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb48:	460d      	mov	r5, r1
 800cb4a:	b09d      	sub	sp, #116	; 0x74
 800cb4c:	4614      	mov	r4, r2
 800cb4e:	4698      	mov	r8, r3
 800cb50:	4606      	mov	r6, r0
 800cb52:	b118      	cbz	r0, 800cb5c <_vfiprintf_r+0x18>
 800cb54:	6a03      	ldr	r3, [r0, #32]
 800cb56:	b90b      	cbnz	r3, 800cb5c <_vfiprintf_r+0x18>
 800cb58:	f7ff fda6 	bl	800c6a8 <__sinit>
 800cb5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb5e:	07d9      	lsls	r1, r3, #31
 800cb60:	d405      	bmi.n	800cb6e <_vfiprintf_r+0x2a>
 800cb62:	89ab      	ldrh	r3, [r5, #12]
 800cb64:	059a      	lsls	r2, r3, #22
 800cb66:	d402      	bmi.n	800cb6e <_vfiprintf_r+0x2a>
 800cb68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb6a:	f7ff feb2 	bl	800c8d2 <__retarget_lock_acquire_recursive>
 800cb6e:	89ab      	ldrh	r3, [r5, #12]
 800cb70:	071b      	lsls	r3, r3, #28
 800cb72:	d501      	bpl.n	800cb78 <_vfiprintf_r+0x34>
 800cb74:	692b      	ldr	r3, [r5, #16]
 800cb76:	b99b      	cbnz	r3, 800cba0 <_vfiprintf_r+0x5c>
 800cb78:	4629      	mov	r1, r5
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f000 fb78 	bl	800d270 <__swsetup_r>
 800cb80:	b170      	cbz	r0, 800cba0 <_vfiprintf_r+0x5c>
 800cb82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb84:	07dc      	lsls	r4, r3, #31
 800cb86:	d504      	bpl.n	800cb92 <_vfiprintf_r+0x4e>
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8c:	b01d      	add	sp, #116	; 0x74
 800cb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb92:	89ab      	ldrh	r3, [r5, #12]
 800cb94:	0598      	lsls	r0, r3, #22
 800cb96:	d4f7      	bmi.n	800cb88 <_vfiprintf_r+0x44>
 800cb98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb9a:	f7ff fe9b 	bl	800c8d4 <__retarget_lock_release_recursive>
 800cb9e:	e7f3      	b.n	800cb88 <_vfiprintf_r+0x44>
 800cba0:	2300      	movs	r3, #0
 800cba2:	9309      	str	r3, [sp, #36]	; 0x24
 800cba4:	2320      	movs	r3, #32
 800cba6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbae:	2330      	movs	r3, #48	; 0x30
 800cbb0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cd64 <_vfiprintf_r+0x220>
 800cbb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbb8:	f04f 0901 	mov.w	r9, #1
 800cbbc:	4623      	mov	r3, r4
 800cbbe:	469a      	mov	sl, r3
 800cbc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbc4:	b10a      	cbz	r2, 800cbca <_vfiprintf_r+0x86>
 800cbc6:	2a25      	cmp	r2, #37	; 0x25
 800cbc8:	d1f9      	bne.n	800cbbe <_vfiprintf_r+0x7a>
 800cbca:	ebba 0b04 	subs.w	fp, sl, r4
 800cbce:	d00b      	beq.n	800cbe8 <_vfiprintf_r+0xa4>
 800cbd0:	465b      	mov	r3, fp
 800cbd2:	4622      	mov	r2, r4
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	4630      	mov	r0, r6
 800cbd8:	f7ff ffa1 	bl	800cb1e <__sfputs_r>
 800cbdc:	3001      	adds	r0, #1
 800cbde:	f000 80a9 	beq.w	800cd34 <_vfiprintf_r+0x1f0>
 800cbe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbe4:	445a      	add	r2, fp
 800cbe6:	9209      	str	r2, [sp, #36]	; 0x24
 800cbe8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80a1 	beq.w	800cd34 <_vfiprintf_r+0x1f0>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbfc:	f10a 0a01 	add.w	sl, sl, #1
 800cc00:	9304      	str	r3, [sp, #16]
 800cc02:	9307      	str	r3, [sp, #28]
 800cc04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc08:	931a      	str	r3, [sp, #104]	; 0x68
 800cc0a:	4654      	mov	r4, sl
 800cc0c:	2205      	movs	r2, #5
 800cc0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc12:	4854      	ldr	r0, [pc, #336]	; (800cd64 <_vfiprintf_r+0x220>)
 800cc14:	f7f3 fb3c 	bl	8000290 <memchr>
 800cc18:	9a04      	ldr	r2, [sp, #16]
 800cc1a:	b9d8      	cbnz	r0, 800cc54 <_vfiprintf_r+0x110>
 800cc1c:	06d1      	lsls	r1, r2, #27
 800cc1e:	bf44      	itt	mi
 800cc20:	2320      	movmi	r3, #32
 800cc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc26:	0713      	lsls	r3, r2, #28
 800cc28:	bf44      	itt	mi
 800cc2a:	232b      	movmi	r3, #43	; 0x2b
 800cc2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc30:	f89a 3000 	ldrb.w	r3, [sl]
 800cc34:	2b2a      	cmp	r3, #42	; 0x2a
 800cc36:	d015      	beq.n	800cc64 <_vfiprintf_r+0x120>
 800cc38:	9a07      	ldr	r2, [sp, #28]
 800cc3a:	4654      	mov	r4, sl
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	f04f 0c0a 	mov.w	ip, #10
 800cc42:	4621      	mov	r1, r4
 800cc44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc48:	3b30      	subs	r3, #48	; 0x30
 800cc4a:	2b09      	cmp	r3, #9
 800cc4c:	d94d      	bls.n	800ccea <_vfiprintf_r+0x1a6>
 800cc4e:	b1b0      	cbz	r0, 800cc7e <_vfiprintf_r+0x13a>
 800cc50:	9207      	str	r2, [sp, #28]
 800cc52:	e014      	b.n	800cc7e <_vfiprintf_r+0x13a>
 800cc54:	eba0 0308 	sub.w	r3, r0, r8
 800cc58:	fa09 f303 	lsl.w	r3, r9, r3
 800cc5c:	4313      	orrs	r3, r2
 800cc5e:	9304      	str	r3, [sp, #16]
 800cc60:	46a2      	mov	sl, r4
 800cc62:	e7d2      	b.n	800cc0a <_vfiprintf_r+0xc6>
 800cc64:	9b03      	ldr	r3, [sp, #12]
 800cc66:	1d19      	adds	r1, r3, #4
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	9103      	str	r1, [sp, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	bfbb      	ittet	lt
 800cc70:	425b      	neglt	r3, r3
 800cc72:	f042 0202 	orrlt.w	r2, r2, #2
 800cc76:	9307      	strge	r3, [sp, #28]
 800cc78:	9307      	strlt	r3, [sp, #28]
 800cc7a:	bfb8      	it	lt
 800cc7c:	9204      	strlt	r2, [sp, #16]
 800cc7e:	7823      	ldrb	r3, [r4, #0]
 800cc80:	2b2e      	cmp	r3, #46	; 0x2e
 800cc82:	d10c      	bne.n	800cc9e <_vfiprintf_r+0x15a>
 800cc84:	7863      	ldrb	r3, [r4, #1]
 800cc86:	2b2a      	cmp	r3, #42	; 0x2a
 800cc88:	d134      	bne.n	800ccf4 <_vfiprintf_r+0x1b0>
 800cc8a:	9b03      	ldr	r3, [sp, #12]
 800cc8c:	1d1a      	adds	r2, r3, #4
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	9203      	str	r2, [sp, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	bfb8      	it	lt
 800cc96:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc9a:	3402      	adds	r4, #2
 800cc9c:	9305      	str	r3, [sp, #20]
 800cc9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cd74 <_vfiprintf_r+0x230>
 800cca2:	7821      	ldrb	r1, [r4, #0]
 800cca4:	2203      	movs	r2, #3
 800cca6:	4650      	mov	r0, sl
 800cca8:	f7f3 faf2 	bl	8000290 <memchr>
 800ccac:	b138      	cbz	r0, 800ccbe <_vfiprintf_r+0x17a>
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	eba0 000a 	sub.w	r0, r0, sl
 800ccb4:	2240      	movs	r2, #64	; 0x40
 800ccb6:	4082      	lsls	r2, r0
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	3401      	adds	r4, #1
 800ccbc:	9304      	str	r3, [sp, #16]
 800ccbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc2:	4829      	ldr	r0, [pc, #164]	; (800cd68 <_vfiprintf_r+0x224>)
 800ccc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccc8:	2206      	movs	r2, #6
 800ccca:	f7f3 fae1 	bl	8000290 <memchr>
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d03f      	beq.n	800cd52 <_vfiprintf_r+0x20e>
 800ccd2:	4b26      	ldr	r3, [pc, #152]	; (800cd6c <_vfiprintf_r+0x228>)
 800ccd4:	bb1b      	cbnz	r3, 800cd1e <_vfiprintf_r+0x1da>
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	3307      	adds	r3, #7
 800ccda:	f023 0307 	bic.w	r3, r3, #7
 800ccde:	3308      	adds	r3, #8
 800cce0:	9303      	str	r3, [sp, #12]
 800cce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce4:	443b      	add	r3, r7
 800cce6:	9309      	str	r3, [sp, #36]	; 0x24
 800cce8:	e768      	b.n	800cbbc <_vfiprintf_r+0x78>
 800ccea:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccee:	460c      	mov	r4, r1
 800ccf0:	2001      	movs	r0, #1
 800ccf2:	e7a6      	b.n	800cc42 <_vfiprintf_r+0xfe>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	3401      	adds	r4, #1
 800ccf8:	9305      	str	r3, [sp, #20]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f04f 0c0a 	mov.w	ip, #10
 800cd00:	4620      	mov	r0, r4
 800cd02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd06:	3a30      	subs	r2, #48	; 0x30
 800cd08:	2a09      	cmp	r2, #9
 800cd0a:	d903      	bls.n	800cd14 <_vfiprintf_r+0x1d0>
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d0c6      	beq.n	800cc9e <_vfiprintf_r+0x15a>
 800cd10:	9105      	str	r1, [sp, #20]
 800cd12:	e7c4      	b.n	800cc9e <_vfiprintf_r+0x15a>
 800cd14:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd18:	4604      	mov	r4, r0
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e7f0      	b.n	800cd00 <_vfiprintf_r+0x1bc>
 800cd1e:	ab03      	add	r3, sp, #12
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	462a      	mov	r2, r5
 800cd24:	4b12      	ldr	r3, [pc, #72]	; (800cd70 <_vfiprintf_r+0x22c>)
 800cd26:	a904      	add	r1, sp, #16
 800cd28:	4630      	mov	r0, r6
 800cd2a:	f3af 8000 	nop.w
 800cd2e:	4607      	mov	r7, r0
 800cd30:	1c78      	adds	r0, r7, #1
 800cd32:	d1d6      	bne.n	800cce2 <_vfiprintf_r+0x19e>
 800cd34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd36:	07d9      	lsls	r1, r3, #31
 800cd38:	d405      	bmi.n	800cd46 <_vfiprintf_r+0x202>
 800cd3a:	89ab      	ldrh	r3, [r5, #12]
 800cd3c:	059a      	lsls	r2, r3, #22
 800cd3e:	d402      	bmi.n	800cd46 <_vfiprintf_r+0x202>
 800cd40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd42:	f7ff fdc7 	bl	800c8d4 <__retarget_lock_release_recursive>
 800cd46:	89ab      	ldrh	r3, [r5, #12]
 800cd48:	065b      	lsls	r3, r3, #25
 800cd4a:	f53f af1d 	bmi.w	800cb88 <_vfiprintf_r+0x44>
 800cd4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd50:	e71c      	b.n	800cb8c <_vfiprintf_r+0x48>
 800cd52:	ab03      	add	r3, sp, #12
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	462a      	mov	r2, r5
 800cd58:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <_vfiprintf_r+0x22c>)
 800cd5a:	a904      	add	r1, sp, #16
 800cd5c:	4630      	mov	r0, r6
 800cd5e:	f000 f879 	bl	800ce54 <_printf_i>
 800cd62:	e7e4      	b.n	800cd2e <_vfiprintf_r+0x1ea>
 800cd64:	0800efc4 	.word	0x0800efc4
 800cd68:	0800efce 	.word	0x0800efce
 800cd6c:	00000000 	.word	0x00000000
 800cd70:	0800cb1f 	.word	0x0800cb1f
 800cd74:	0800efca 	.word	0x0800efca

0800cd78 <_printf_common>:
 800cd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd7c:	4616      	mov	r6, r2
 800cd7e:	4699      	mov	r9, r3
 800cd80:	688a      	ldr	r2, [r1, #8]
 800cd82:	690b      	ldr	r3, [r1, #16]
 800cd84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	bfb8      	it	lt
 800cd8c:	4613      	movlt	r3, r2
 800cd8e:	6033      	str	r3, [r6, #0]
 800cd90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd94:	4607      	mov	r7, r0
 800cd96:	460c      	mov	r4, r1
 800cd98:	b10a      	cbz	r2, 800cd9e <_printf_common+0x26>
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	6033      	str	r3, [r6, #0]
 800cd9e:	6823      	ldr	r3, [r4, #0]
 800cda0:	0699      	lsls	r1, r3, #26
 800cda2:	bf42      	ittt	mi
 800cda4:	6833      	ldrmi	r3, [r6, #0]
 800cda6:	3302      	addmi	r3, #2
 800cda8:	6033      	strmi	r3, [r6, #0]
 800cdaa:	6825      	ldr	r5, [r4, #0]
 800cdac:	f015 0506 	ands.w	r5, r5, #6
 800cdb0:	d106      	bne.n	800cdc0 <_printf_common+0x48>
 800cdb2:	f104 0a19 	add.w	sl, r4, #25
 800cdb6:	68e3      	ldr	r3, [r4, #12]
 800cdb8:	6832      	ldr	r2, [r6, #0]
 800cdba:	1a9b      	subs	r3, r3, r2
 800cdbc:	42ab      	cmp	r3, r5
 800cdbe:	dc26      	bgt.n	800ce0e <_printf_common+0x96>
 800cdc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdc4:	1e13      	subs	r3, r2, #0
 800cdc6:	6822      	ldr	r2, [r4, #0]
 800cdc8:	bf18      	it	ne
 800cdca:	2301      	movne	r3, #1
 800cdcc:	0692      	lsls	r2, r2, #26
 800cdce:	d42b      	bmi.n	800ce28 <_printf_common+0xb0>
 800cdd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	47c0      	blx	r8
 800cdda:	3001      	adds	r0, #1
 800cddc:	d01e      	beq.n	800ce1c <_printf_common+0xa4>
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	6922      	ldr	r2, [r4, #16]
 800cde2:	f003 0306 	and.w	r3, r3, #6
 800cde6:	2b04      	cmp	r3, #4
 800cde8:	bf02      	ittt	eq
 800cdea:	68e5      	ldreq	r5, [r4, #12]
 800cdec:	6833      	ldreq	r3, [r6, #0]
 800cdee:	1aed      	subeq	r5, r5, r3
 800cdf0:	68a3      	ldr	r3, [r4, #8]
 800cdf2:	bf0c      	ite	eq
 800cdf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cdf8:	2500      	movne	r5, #0
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	bfc4      	itt	gt
 800cdfe:	1a9b      	subgt	r3, r3, r2
 800ce00:	18ed      	addgt	r5, r5, r3
 800ce02:	2600      	movs	r6, #0
 800ce04:	341a      	adds	r4, #26
 800ce06:	42b5      	cmp	r5, r6
 800ce08:	d11a      	bne.n	800ce40 <_printf_common+0xc8>
 800ce0a:	2000      	movs	r0, #0
 800ce0c:	e008      	b.n	800ce20 <_printf_common+0xa8>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	4652      	mov	r2, sl
 800ce12:	4649      	mov	r1, r9
 800ce14:	4638      	mov	r0, r7
 800ce16:	47c0      	blx	r8
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d103      	bne.n	800ce24 <_printf_common+0xac>
 800ce1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce24:	3501      	adds	r5, #1
 800ce26:	e7c6      	b.n	800cdb6 <_printf_common+0x3e>
 800ce28:	18e1      	adds	r1, r4, r3
 800ce2a:	1c5a      	adds	r2, r3, #1
 800ce2c:	2030      	movs	r0, #48	; 0x30
 800ce2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce32:	4422      	add	r2, r4
 800ce34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce3c:	3302      	adds	r3, #2
 800ce3e:	e7c7      	b.n	800cdd0 <_printf_common+0x58>
 800ce40:	2301      	movs	r3, #1
 800ce42:	4622      	mov	r2, r4
 800ce44:	4649      	mov	r1, r9
 800ce46:	4638      	mov	r0, r7
 800ce48:	47c0      	blx	r8
 800ce4a:	3001      	adds	r0, #1
 800ce4c:	d0e6      	beq.n	800ce1c <_printf_common+0xa4>
 800ce4e:	3601      	adds	r6, #1
 800ce50:	e7d9      	b.n	800ce06 <_printf_common+0x8e>
	...

0800ce54 <_printf_i>:
 800ce54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce58:	7e0f      	ldrb	r7, [r1, #24]
 800ce5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ce5c:	2f78      	cmp	r7, #120	; 0x78
 800ce5e:	4691      	mov	r9, r2
 800ce60:	4680      	mov	r8, r0
 800ce62:	460c      	mov	r4, r1
 800ce64:	469a      	mov	sl, r3
 800ce66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce6a:	d807      	bhi.n	800ce7c <_printf_i+0x28>
 800ce6c:	2f62      	cmp	r7, #98	; 0x62
 800ce6e:	d80a      	bhi.n	800ce86 <_printf_i+0x32>
 800ce70:	2f00      	cmp	r7, #0
 800ce72:	f000 80d4 	beq.w	800d01e <_printf_i+0x1ca>
 800ce76:	2f58      	cmp	r7, #88	; 0x58
 800ce78:	f000 80c0 	beq.w	800cffc <_printf_i+0x1a8>
 800ce7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce84:	e03a      	b.n	800cefc <_printf_i+0xa8>
 800ce86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce8a:	2b15      	cmp	r3, #21
 800ce8c:	d8f6      	bhi.n	800ce7c <_printf_i+0x28>
 800ce8e:	a101      	add	r1, pc, #4	; (adr r1, 800ce94 <_printf_i+0x40>)
 800ce90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce94:	0800ceed 	.word	0x0800ceed
 800ce98:	0800cf01 	.word	0x0800cf01
 800ce9c:	0800ce7d 	.word	0x0800ce7d
 800cea0:	0800ce7d 	.word	0x0800ce7d
 800cea4:	0800ce7d 	.word	0x0800ce7d
 800cea8:	0800ce7d 	.word	0x0800ce7d
 800ceac:	0800cf01 	.word	0x0800cf01
 800ceb0:	0800ce7d 	.word	0x0800ce7d
 800ceb4:	0800ce7d 	.word	0x0800ce7d
 800ceb8:	0800ce7d 	.word	0x0800ce7d
 800cebc:	0800ce7d 	.word	0x0800ce7d
 800cec0:	0800d005 	.word	0x0800d005
 800cec4:	0800cf2d 	.word	0x0800cf2d
 800cec8:	0800cfbf 	.word	0x0800cfbf
 800cecc:	0800ce7d 	.word	0x0800ce7d
 800ced0:	0800ce7d 	.word	0x0800ce7d
 800ced4:	0800d027 	.word	0x0800d027
 800ced8:	0800ce7d 	.word	0x0800ce7d
 800cedc:	0800cf2d 	.word	0x0800cf2d
 800cee0:	0800ce7d 	.word	0x0800ce7d
 800cee4:	0800ce7d 	.word	0x0800ce7d
 800cee8:	0800cfc7 	.word	0x0800cfc7
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	1d1a      	adds	r2, r3, #4
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	602a      	str	r2, [r5, #0]
 800cef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cefc:	2301      	movs	r3, #1
 800cefe:	e09f      	b.n	800d040 <_printf_i+0x1ec>
 800cf00:	6820      	ldr	r0, [r4, #0]
 800cf02:	682b      	ldr	r3, [r5, #0]
 800cf04:	0607      	lsls	r7, r0, #24
 800cf06:	f103 0104 	add.w	r1, r3, #4
 800cf0a:	6029      	str	r1, [r5, #0]
 800cf0c:	d501      	bpl.n	800cf12 <_printf_i+0xbe>
 800cf0e:	681e      	ldr	r6, [r3, #0]
 800cf10:	e003      	b.n	800cf1a <_printf_i+0xc6>
 800cf12:	0646      	lsls	r6, r0, #25
 800cf14:	d5fb      	bpl.n	800cf0e <_printf_i+0xba>
 800cf16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cf1a:	2e00      	cmp	r6, #0
 800cf1c:	da03      	bge.n	800cf26 <_printf_i+0xd2>
 800cf1e:	232d      	movs	r3, #45	; 0x2d
 800cf20:	4276      	negs	r6, r6
 800cf22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf26:	485a      	ldr	r0, [pc, #360]	; (800d090 <_printf_i+0x23c>)
 800cf28:	230a      	movs	r3, #10
 800cf2a:	e012      	b.n	800cf52 <_printf_i+0xfe>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	6820      	ldr	r0, [r4, #0]
 800cf30:	1d19      	adds	r1, r3, #4
 800cf32:	6029      	str	r1, [r5, #0]
 800cf34:	0605      	lsls	r5, r0, #24
 800cf36:	d501      	bpl.n	800cf3c <_printf_i+0xe8>
 800cf38:	681e      	ldr	r6, [r3, #0]
 800cf3a:	e002      	b.n	800cf42 <_printf_i+0xee>
 800cf3c:	0641      	lsls	r1, r0, #25
 800cf3e:	d5fb      	bpl.n	800cf38 <_printf_i+0xe4>
 800cf40:	881e      	ldrh	r6, [r3, #0]
 800cf42:	4853      	ldr	r0, [pc, #332]	; (800d090 <_printf_i+0x23c>)
 800cf44:	2f6f      	cmp	r7, #111	; 0x6f
 800cf46:	bf0c      	ite	eq
 800cf48:	2308      	moveq	r3, #8
 800cf4a:	230a      	movne	r3, #10
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf52:	6865      	ldr	r5, [r4, #4]
 800cf54:	60a5      	str	r5, [r4, #8]
 800cf56:	2d00      	cmp	r5, #0
 800cf58:	bfa2      	ittt	ge
 800cf5a:	6821      	ldrge	r1, [r4, #0]
 800cf5c:	f021 0104 	bicge.w	r1, r1, #4
 800cf60:	6021      	strge	r1, [r4, #0]
 800cf62:	b90e      	cbnz	r6, 800cf68 <_printf_i+0x114>
 800cf64:	2d00      	cmp	r5, #0
 800cf66:	d04b      	beq.n	800d000 <_printf_i+0x1ac>
 800cf68:	4615      	mov	r5, r2
 800cf6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf6e:	fb03 6711 	mls	r7, r3, r1, r6
 800cf72:	5dc7      	ldrb	r7, [r0, r7]
 800cf74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf78:	4637      	mov	r7, r6
 800cf7a:	42bb      	cmp	r3, r7
 800cf7c:	460e      	mov	r6, r1
 800cf7e:	d9f4      	bls.n	800cf6a <_printf_i+0x116>
 800cf80:	2b08      	cmp	r3, #8
 800cf82:	d10b      	bne.n	800cf9c <_printf_i+0x148>
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	07de      	lsls	r6, r3, #31
 800cf88:	d508      	bpl.n	800cf9c <_printf_i+0x148>
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	6861      	ldr	r1, [r4, #4]
 800cf8e:	4299      	cmp	r1, r3
 800cf90:	bfde      	ittt	le
 800cf92:	2330      	movle	r3, #48	; 0x30
 800cf94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf9c:	1b52      	subs	r2, r2, r5
 800cf9e:	6122      	str	r2, [r4, #16]
 800cfa0:	f8cd a000 	str.w	sl, [sp]
 800cfa4:	464b      	mov	r3, r9
 800cfa6:	aa03      	add	r2, sp, #12
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	4640      	mov	r0, r8
 800cfac:	f7ff fee4 	bl	800cd78 <_printf_common>
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d14a      	bne.n	800d04a <_printf_i+0x1f6>
 800cfb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb8:	b004      	add	sp, #16
 800cfba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfbe:	6823      	ldr	r3, [r4, #0]
 800cfc0:	f043 0320 	orr.w	r3, r3, #32
 800cfc4:	6023      	str	r3, [r4, #0]
 800cfc6:	4833      	ldr	r0, [pc, #204]	; (800d094 <_printf_i+0x240>)
 800cfc8:	2778      	movs	r7, #120	; 0x78
 800cfca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cfce:	6823      	ldr	r3, [r4, #0]
 800cfd0:	6829      	ldr	r1, [r5, #0]
 800cfd2:	061f      	lsls	r7, r3, #24
 800cfd4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cfd8:	d402      	bmi.n	800cfe0 <_printf_i+0x18c>
 800cfda:	065f      	lsls	r7, r3, #25
 800cfdc:	bf48      	it	mi
 800cfde:	b2b6      	uxthmi	r6, r6
 800cfe0:	07df      	lsls	r7, r3, #31
 800cfe2:	bf48      	it	mi
 800cfe4:	f043 0320 	orrmi.w	r3, r3, #32
 800cfe8:	6029      	str	r1, [r5, #0]
 800cfea:	bf48      	it	mi
 800cfec:	6023      	strmi	r3, [r4, #0]
 800cfee:	b91e      	cbnz	r6, 800cff8 <_printf_i+0x1a4>
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	f023 0320 	bic.w	r3, r3, #32
 800cff6:	6023      	str	r3, [r4, #0]
 800cff8:	2310      	movs	r3, #16
 800cffa:	e7a7      	b.n	800cf4c <_printf_i+0xf8>
 800cffc:	4824      	ldr	r0, [pc, #144]	; (800d090 <_printf_i+0x23c>)
 800cffe:	e7e4      	b.n	800cfca <_printf_i+0x176>
 800d000:	4615      	mov	r5, r2
 800d002:	e7bd      	b.n	800cf80 <_printf_i+0x12c>
 800d004:	682b      	ldr	r3, [r5, #0]
 800d006:	6826      	ldr	r6, [r4, #0]
 800d008:	6961      	ldr	r1, [r4, #20]
 800d00a:	1d18      	adds	r0, r3, #4
 800d00c:	6028      	str	r0, [r5, #0]
 800d00e:	0635      	lsls	r5, r6, #24
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	d501      	bpl.n	800d018 <_printf_i+0x1c4>
 800d014:	6019      	str	r1, [r3, #0]
 800d016:	e002      	b.n	800d01e <_printf_i+0x1ca>
 800d018:	0670      	lsls	r0, r6, #25
 800d01a:	d5fb      	bpl.n	800d014 <_printf_i+0x1c0>
 800d01c:	8019      	strh	r1, [r3, #0]
 800d01e:	2300      	movs	r3, #0
 800d020:	6123      	str	r3, [r4, #16]
 800d022:	4615      	mov	r5, r2
 800d024:	e7bc      	b.n	800cfa0 <_printf_i+0x14c>
 800d026:	682b      	ldr	r3, [r5, #0]
 800d028:	1d1a      	adds	r2, r3, #4
 800d02a:	602a      	str	r2, [r5, #0]
 800d02c:	681d      	ldr	r5, [r3, #0]
 800d02e:	6862      	ldr	r2, [r4, #4]
 800d030:	2100      	movs	r1, #0
 800d032:	4628      	mov	r0, r5
 800d034:	f7f3 f92c 	bl	8000290 <memchr>
 800d038:	b108      	cbz	r0, 800d03e <_printf_i+0x1ea>
 800d03a:	1b40      	subs	r0, r0, r5
 800d03c:	6060      	str	r0, [r4, #4]
 800d03e:	6863      	ldr	r3, [r4, #4]
 800d040:	6123      	str	r3, [r4, #16]
 800d042:	2300      	movs	r3, #0
 800d044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d048:	e7aa      	b.n	800cfa0 <_printf_i+0x14c>
 800d04a:	6923      	ldr	r3, [r4, #16]
 800d04c:	462a      	mov	r2, r5
 800d04e:	4649      	mov	r1, r9
 800d050:	4640      	mov	r0, r8
 800d052:	47d0      	blx	sl
 800d054:	3001      	adds	r0, #1
 800d056:	d0ad      	beq.n	800cfb4 <_printf_i+0x160>
 800d058:	6823      	ldr	r3, [r4, #0]
 800d05a:	079b      	lsls	r3, r3, #30
 800d05c:	d413      	bmi.n	800d086 <_printf_i+0x232>
 800d05e:	68e0      	ldr	r0, [r4, #12]
 800d060:	9b03      	ldr	r3, [sp, #12]
 800d062:	4298      	cmp	r0, r3
 800d064:	bfb8      	it	lt
 800d066:	4618      	movlt	r0, r3
 800d068:	e7a6      	b.n	800cfb8 <_printf_i+0x164>
 800d06a:	2301      	movs	r3, #1
 800d06c:	4632      	mov	r2, r6
 800d06e:	4649      	mov	r1, r9
 800d070:	4640      	mov	r0, r8
 800d072:	47d0      	blx	sl
 800d074:	3001      	adds	r0, #1
 800d076:	d09d      	beq.n	800cfb4 <_printf_i+0x160>
 800d078:	3501      	adds	r5, #1
 800d07a:	68e3      	ldr	r3, [r4, #12]
 800d07c:	9903      	ldr	r1, [sp, #12]
 800d07e:	1a5b      	subs	r3, r3, r1
 800d080:	42ab      	cmp	r3, r5
 800d082:	dcf2      	bgt.n	800d06a <_printf_i+0x216>
 800d084:	e7eb      	b.n	800d05e <_printf_i+0x20a>
 800d086:	2500      	movs	r5, #0
 800d088:	f104 0619 	add.w	r6, r4, #25
 800d08c:	e7f5      	b.n	800d07a <_printf_i+0x226>
 800d08e:	bf00      	nop
 800d090:	0800efd5 	.word	0x0800efd5
 800d094:	0800efe6 	.word	0x0800efe6

0800d098 <__sflush_r>:
 800d098:	898a      	ldrh	r2, [r1, #12]
 800d09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d09e:	4605      	mov	r5, r0
 800d0a0:	0710      	lsls	r0, r2, #28
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	d458      	bmi.n	800d158 <__sflush_r+0xc0>
 800d0a6:	684b      	ldr	r3, [r1, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	dc05      	bgt.n	800d0b8 <__sflush_r+0x20>
 800d0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	dc02      	bgt.n	800d0b8 <__sflush_r+0x20>
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	d0f9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0c4:	682f      	ldr	r7, [r5, #0]
 800d0c6:	6a21      	ldr	r1, [r4, #32]
 800d0c8:	602b      	str	r3, [r5, #0]
 800d0ca:	d032      	beq.n	800d132 <__sflush_r+0x9a>
 800d0cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	075a      	lsls	r2, r3, #29
 800d0d2:	d505      	bpl.n	800d0e0 <__sflush_r+0x48>
 800d0d4:	6863      	ldr	r3, [r4, #4]
 800d0d6:	1ac0      	subs	r0, r0, r3
 800d0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0da:	b10b      	cbz	r3, 800d0e0 <__sflush_r+0x48>
 800d0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0de:	1ac0      	subs	r0, r0, r3
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0e6:	6a21      	ldr	r1, [r4, #32]
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	47b0      	blx	r6
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	89a3      	ldrh	r3, [r4, #12]
 800d0f0:	d106      	bne.n	800d100 <__sflush_r+0x68>
 800d0f2:	6829      	ldr	r1, [r5, #0]
 800d0f4:	291d      	cmp	r1, #29
 800d0f6:	d82b      	bhi.n	800d150 <__sflush_r+0xb8>
 800d0f8:	4a29      	ldr	r2, [pc, #164]	; (800d1a0 <__sflush_r+0x108>)
 800d0fa:	410a      	asrs	r2, r1
 800d0fc:	07d6      	lsls	r6, r2, #31
 800d0fe:	d427      	bmi.n	800d150 <__sflush_r+0xb8>
 800d100:	2200      	movs	r2, #0
 800d102:	6062      	str	r2, [r4, #4]
 800d104:	04d9      	lsls	r1, r3, #19
 800d106:	6922      	ldr	r2, [r4, #16]
 800d108:	6022      	str	r2, [r4, #0]
 800d10a:	d504      	bpl.n	800d116 <__sflush_r+0x7e>
 800d10c:	1c42      	adds	r2, r0, #1
 800d10e:	d101      	bne.n	800d114 <__sflush_r+0x7c>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b903      	cbnz	r3, 800d116 <__sflush_r+0x7e>
 800d114:	6560      	str	r0, [r4, #84]	; 0x54
 800d116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d118:	602f      	str	r7, [r5, #0]
 800d11a:	2900      	cmp	r1, #0
 800d11c:	d0c9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d122:	4299      	cmp	r1, r3
 800d124:	d002      	beq.n	800d12c <__sflush_r+0x94>
 800d126:	4628      	mov	r0, r5
 800d128:	f7ff fbea 	bl	800c900 <_free_r>
 800d12c:	2000      	movs	r0, #0
 800d12e:	6360      	str	r0, [r4, #52]	; 0x34
 800d130:	e7c0      	b.n	800d0b4 <__sflush_r+0x1c>
 800d132:	2301      	movs	r3, #1
 800d134:	4628      	mov	r0, r5
 800d136:	47b0      	blx	r6
 800d138:	1c41      	adds	r1, r0, #1
 800d13a:	d1c8      	bne.n	800d0ce <__sflush_r+0x36>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d0c5      	beq.n	800d0ce <__sflush_r+0x36>
 800d142:	2b1d      	cmp	r3, #29
 800d144:	d001      	beq.n	800d14a <__sflush_r+0xb2>
 800d146:	2b16      	cmp	r3, #22
 800d148:	d101      	bne.n	800d14e <__sflush_r+0xb6>
 800d14a:	602f      	str	r7, [r5, #0]
 800d14c:	e7b1      	b.n	800d0b2 <__sflush_r+0x1a>
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d154:	81a3      	strh	r3, [r4, #12]
 800d156:	e7ad      	b.n	800d0b4 <__sflush_r+0x1c>
 800d158:	690f      	ldr	r7, [r1, #16]
 800d15a:	2f00      	cmp	r7, #0
 800d15c:	d0a9      	beq.n	800d0b2 <__sflush_r+0x1a>
 800d15e:	0793      	lsls	r3, r2, #30
 800d160:	680e      	ldr	r6, [r1, #0]
 800d162:	bf08      	it	eq
 800d164:	694b      	ldreq	r3, [r1, #20]
 800d166:	600f      	str	r7, [r1, #0]
 800d168:	bf18      	it	ne
 800d16a:	2300      	movne	r3, #0
 800d16c:	eba6 0807 	sub.w	r8, r6, r7
 800d170:	608b      	str	r3, [r1, #8]
 800d172:	f1b8 0f00 	cmp.w	r8, #0
 800d176:	dd9c      	ble.n	800d0b2 <__sflush_r+0x1a>
 800d178:	6a21      	ldr	r1, [r4, #32]
 800d17a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d17c:	4643      	mov	r3, r8
 800d17e:	463a      	mov	r2, r7
 800d180:	4628      	mov	r0, r5
 800d182:	47b0      	blx	r6
 800d184:	2800      	cmp	r0, #0
 800d186:	dc06      	bgt.n	800d196 <__sflush_r+0xfe>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18e:	81a3      	strh	r3, [r4, #12]
 800d190:	f04f 30ff 	mov.w	r0, #4294967295
 800d194:	e78e      	b.n	800d0b4 <__sflush_r+0x1c>
 800d196:	4407      	add	r7, r0
 800d198:	eba8 0800 	sub.w	r8, r8, r0
 800d19c:	e7e9      	b.n	800d172 <__sflush_r+0xda>
 800d19e:	bf00      	nop
 800d1a0:	dfbffffe 	.word	0xdfbffffe

0800d1a4 <_fflush_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	690b      	ldr	r3, [r1, #16]
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	b913      	cbnz	r3, 800d1b4 <_fflush_r+0x10>
 800d1ae:	2500      	movs	r5, #0
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	b118      	cbz	r0, 800d1be <_fflush_r+0x1a>
 800d1b6:	6a03      	ldr	r3, [r0, #32]
 800d1b8:	b90b      	cbnz	r3, 800d1be <_fflush_r+0x1a>
 800d1ba:	f7ff fa75 	bl	800c6a8 <__sinit>
 800d1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0f3      	beq.n	800d1ae <_fflush_r+0xa>
 800d1c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1c8:	07d0      	lsls	r0, r2, #31
 800d1ca:	d404      	bmi.n	800d1d6 <_fflush_r+0x32>
 800d1cc:	0599      	lsls	r1, r3, #22
 800d1ce:	d402      	bmi.n	800d1d6 <_fflush_r+0x32>
 800d1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1d2:	f7ff fb7e 	bl	800c8d2 <__retarget_lock_acquire_recursive>
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	4621      	mov	r1, r4
 800d1da:	f7ff ff5d 	bl	800d098 <__sflush_r>
 800d1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1e0:	07da      	lsls	r2, r3, #31
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	d4e4      	bmi.n	800d1b0 <_fflush_r+0xc>
 800d1e6:	89a3      	ldrh	r3, [r4, #12]
 800d1e8:	059b      	lsls	r3, r3, #22
 800d1ea:	d4e1      	bmi.n	800d1b0 <_fflush_r+0xc>
 800d1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ee:	f7ff fb71 	bl	800c8d4 <__retarget_lock_release_recursive>
 800d1f2:	e7dd      	b.n	800d1b0 <_fflush_r+0xc>

0800d1f4 <__swbuf_r>:
 800d1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f6:	460e      	mov	r6, r1
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	4605      	mov	r5, r0
 800d1fc:	b118      	cbz	r0, 800d206 <__swbuf_r+0x12>
 800d1fe:	6a03      	ldr	r3, [r0, #32]
 800d200:	b90b      	cbnz	r3, 800d206 <__swbuf_r+0x12>
 800d202:	f7ff fa51 	bl	800c6a8 <__sinit>
 800d206:	69a3      	ldr	r3, [r4, #24]
 800d208:	60a3      	str	r3, [r4, #8]
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	071a      	lsls	r2, r3, #28
 800d20e:	d525      	bpl.n	800d25c <__swbuf_r+0x68>
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	b31b      	cbz	r3, 800d25c <__swbuf_r+0x68>
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	6922      	ldr	r2, [r4, #16]
 800d218:	1a98      	subs	r0, r3, r2
 800d21a:	6963      	ldr	r3, [r4, #20]
 800d21c:	b2f6      	uxtb	r6, r6
 800d21e:	4283      	cmp	r3, r0
 800d220:	4637      	mov	r7, r6
 800d222:	dc04      	bgt.n	800d22e <__swbuf_r+0x3a>
 800d224:	4621      	mov	r1, r4
 800d226:	4628      	mov	r0, r5
 800d228:	f7ff ffbc 	bl	800d1a4 <_fflush_r>
 800d22c:	b9e0      	cbnz	r0, 800d268 <__swbuf_r+0x74>
 800d22e:	68a3      	ldr	r3, [r4, #8]
 800d230:	3b01      	subs	r3, #1
 800d232:	60a3      	str	r3, [r4, #8]
 800d234:	6823      	ldr	r3, [r4, #0]
 800d236:	1c5a      	adds	r2, r3, #1
 800d238:	6022      	str	r2, [r4, #0]
 800d23a:	701e      	strb	r6, [r3, #0]
 800d23c:	6962      	ldr	r2, [r4, #20]
 800d23e:	1c43      	adds	r3, r0, #1
 800d240:	429a      	cmp	r2, r3
 800d242:	d004      	beq.n	800d24e <__swbuf_r+0x5a>
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	07db      	lsls	r3, r3, #31
 800d248:	d506      	bpl.n	800d258 <__swbuf_r+0x64>
 800d24a:	2e0a      	cmp	r6, #10
 800d24c:	d104      	bne.n	800d258 <__swbuf_r+0x64>
 800d24e:	4621      	mov	r1, r4
 800d250:	4628      	mov	r0, r5
 800d252:	f7ff ffa7 	bl	800d1a4 <_fflush_r>
 800d256:	b938      	cbnz	r0, 800d268 <__swbuf_r+0x74>
 800d258:	4638      	mov	r0, r7
 800d25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d25c:	4621      	mov	r1, r4
 800d25e:	4628      	mov	r0, r5
 800d260:	f000 f806 	bl	800d270 <__swsetup_r>
 800d264:	2800      	cmp	r0, #0
 800d266:	d0d5      	beq.n	800d214 <__swbuf_r+0x20>
 800d268:	f04f 37ff 	mov.w	r7, #4294967295
 800d26c:	e7f4      	b.n	800d258 <__swbuf_r+0x64>
	...

0800d270 <__swsetup_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4b2a      	ldr	r3, [pc, #168]	; (800d31c <__swsetup_r+0xac>)
 800d274:	4605      	mov	r5, r0
 800d276:	6818      	ldr	r0, [r3, #0]
 800d278:	460c      	mov	r4, r1
 800d27a:	b118      	cbz	r0, 800d284 <__swsetup_r+0x14>
 800d27c:	6a03      	ldr	r3, [r0, #32]
 800d27e:	b90b      	cbnz	r3, 800d284 <__swsetup_r+0x14>
 800d280:	f7ff fa12 	bl	800c6a8 <__sinit>
 800d284:	89a3      	ldrh	r3, [r4, #12]
 800d286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d28a:	0718      	lsls	r0, r3, #28
 800d28c:	d422      	bmi.n	800d2d4 <__swsetup_r+0x64>
 800d28e:	06d9      	lsls	r1, r3, #27
 800d290:	d407      	bmi.n	800d2a2 <__swsetup_r+0x32>
 800d292:	2309      	movs	r3, #9
 800d294:	602b      	str	r3, [r5, #0]
 800d296:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d29a:	81a3      	strh	r3, [r4, #12]
 800d29c:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a0:	e034      	b.n	800d30c <__swsetup_r+0x9c>
 800d2a2:	0758      	lsls	r0, r3, #29
 800d2a4:	d512      	bpl.n	800d2cc <__swsetup_r+0x5c>
 800d2a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2a8:	b141      	cbz	r1, 800d2bc <__swsetup_r+0x4c>
 800d2aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2ae:	4299      	cmp	r1, r3
 800d2b0:	d002      	beq.n	800d2b8 <__swsetup_r+0x48>
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7ff fb24 	bl	800c900 <_free_r>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	6363      	str	r3, [r4, #52]	; 0x34
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2c2:	81a3      	strh	r3, [r4, #12]
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	6063      	str	r3, [r4, #4]
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	6023      	str	r3, [r4, #0]
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	f043 0308 	orr.w	r3, r3, #8
 800d2d2:	81a3      	strh	r3, [r4, #12]
 800d2d4:	6923      	ldr	r3, [r4, #16]
 800d2d6:	b94b      	cbnz	r3, 800d2ec <__swsetup_r+0x7c>
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2e2:	d003      	beq.n	800d2ec <__swsetup_r+0x7c>
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	4628      	mov	r0, r5
 800d2e8:	f000 f894 	bl	800d414 <__smakebuf_r>
 800d2ec:	89a0      	ldrh	r0, [r4, #12]
 800d2ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2f2:	f010 0301 	ands.w	r3, r0, #1
 800d2f6:	d00a      	beq.n	800d30e <__swsetup_r+0x9e>
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	60a3      	str	r3, [r4, #8]
 800d2fc:	6963      	ldr	r3, [r4, #20]
 800d2fe:	425b      	negs	r3, r3
 800d300:	61a3      	str	r3, [r4, #24]
 800d302:	6923      	ldr	r3, [r4, #16]
 800d304:	b943      	cbnz	r3, 800d318 <__swsetup_r+0xa8>
 800d306:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d30a:	d1c4      	bne.n	800d296 <__swsetup_r+0x26>
 800d30c:	bd38      	pop	{r3, r4, r5, pc}
 800d30e:	0781      	lsls	r1, r0, #30
 800d310:	bf58      	it	pl
 800d312:	6963      	ldrpl	r3, [r4, #20]
 800d314:	60a3      	str	r3, [r4, #8]
 800d316:	e7f4      	b.n	800d302 <__swsetup_r+0x92>
 800d318:	2000      	movs	r0, #0
 800d31a:	e7f7      	b.n	800d30c <__swsetup_r+0x9c>
 800d31c:	2000007c 	.word	0x2000007c

0800d320 <_raise_r>:
 800d320:	291f      	cmp	r1, #31
 800d322:	b538      	push	{r3, r4, r5, lr}
 800d324:	4604      	mov	r4, r0
 800d326:	460d      	mov	r5, r1
 800d328:	d904      	bls.n	800d334 <_raise_r+0x14>
 800d32a:	2316      	movs	r3, #22
 800d32c:	6003      	str	r3, [r0, #0]
 800d32e:	f04f 30ff 	mov.w	r0, #4294967295
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d336:	b112      	cbz	r2, 800d33e <_raise_r+0x1e>
 800d338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d33c:	b94b      	cbnz	r3, 800d352 <_raise_r+0x32>
 800d33e:	4620      	mov	r0, r4
 800d340:	f000 f830 	bl	800d3a4 <_getpid_r>
 800d344:	462a      	mov	r2, r5
 800d346:	4601      	mov	r1, r0
 800d348:	4620      	mov	r0, r4
 800d34a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d34e:	f000 b817 	b.w	800d380 <_kill_r>
 800d352:	2b01      	cmp	r3, #1
 800d354:	d00a      	beq.n	800d36c <_raise_r+0x4c>
 800d356:	1c59      	adds	r1, r3, #1
 800d358:	d103      	bne.n	800d362 <_raise_r+0x42>
 800d35a:	2316      	movs	r3, #22
 800d35c:	6003      	str	r3, [r0, #0]
 800d35e:	2001      	movs	r0, #1
 800d360:	e7e7      	b.n	800d332 <_raise_r+0x12>
 800d362:	2400      	movs	r4, #0
 800d364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d368:	4628      	mov	r0, r5
 800d36a:	4798      	blx	r3
 800d36c:	2000      	movs	r0, #0
 800d36e:	e7e0      	b.n	800d332 <_raise_r+0x12>

0800d370 <raise>:
 800d370:	4b02      	ldr	r3, [pc, #8]	; (800d37c <raise+0xc>)
 800d372:	4601      	mov	r1, r0
 800d374:	6818      	ldr	r0, [r3, #0]
 800d376:	f7ff bfd3 	b.w	800d320 <_raise_r>
 800d37a:	bf00      	nop
 800d37c:	2000007c 	.word	0x2000007c

0800d380 <_kill_r>:
 800d380:	b538      	push	{r3, r4, r5, lr}
 800d382:	4d07      	ldr	r5, [pc, #28]	; (800d3a0 <_kill_r+0x20>)
 800d384:	2300      	movs	r3, #0
 800d386:	4604      	mov	r4, r0
 800d388:	4608      	mov	r0, r1
 800d38a:	4611      	mov	r1, r2
 800d38c:	602b      	str	r3, [r5, #0]
 800d38e:	f7f5 fdd4 	bl	8002f3a <_kill>
 800d392:	1c43      	adds	r3, r0, #1
 800d394:	d102      	bne.n	800d39c <_kill_r+0x1c>
 800d396:	682b      	ldr	r3, [r5, #0]
 800d398:	b103      	cbz	r3, 800d39c <_kill_r+0x1c>
 800d39a:	6023      	str	r3, [r4, #0]
 800d39c:	bd38      	pop	{r3, r4, r5, pc}
 800d39e:	bf00      	nop
 800d3a0:	2002b25c 	.word	0x2002b25c

0800d3a4 <_getpid_r>:
 800d3a4:	f7f5 bdc1 	b.w	8002f2a <_getpid>

0800d3a8 <_sbrk_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4d06      	ldr	r5, [pc, #24]	; (800d3c4 <_sbrk_r+0x1c>)
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	4608      	mov	r0, r1
 800d3b2:	602b      	str	r3, [r5, #0]
 800d3b4:	f7f5 fe48 	bl	8003048 <_sbrk>
 800d3b8:	1c43      	adds	r3, r0, #1
 800d3ba:	d102      	bne.n	800d3c2 <_sbrk_r+0x1a>
 800d3bc:	682b      	ldr	r3, [r5, #0]
 800d3be:	b103      	cbz	r3, 800d3c2 <_sbrk_r+0x1a>
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	2002b25c 	.word	0x2002b25c

0800d3c8 <__swhatbuf_r>:
 800d3c8:	b570      	push	{r4, r5, r6, lr}
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3d0:	2900      	cmp	r1, #0
 800d3d2:	b096      	sub	sp, #88	; 0x58
 800d3d4:	4615      	mov	r5, r2
 800d3d6:	461e      	mov	r6, r3
 800d3d8:	da0d      	bge.n	800d3f6 <__swhatbuf_r+0x2e>
 800d3da:	89a3      	ldrh	r3, [r4, #12]
 800d3dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d3e0:	f04f 0100 	mov.w	r1, #0
 800d3e4:	bf0c      	ite	eq
 800d3e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d3ea:	2340      	movne	r3, #64	; 0x40
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	6031      	str	r1, [r6, #0]
 800d3f0:	602b      	str	r3, [r5, #0]
 800d3f2:	b016      	add	sp, #88	; 0x58
 800d3f4:	bd70      	pop	{r4, r5, r6, pc}
 800d3f6:	466a      	mov	r2, sp
 800d3f8:	f000 f848 	bl	800d48c <_fstat_r>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	dbec      	blt.n	800d3da <__swhatbuf_r+0x12>
 800d400:	9901      	ldr	r1, [sp, #4]
 800d402:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d406:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d40a:	4259      	negs	r1, r3
 800d40c:	4159      	adcs	r1, r3
 800d40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d412:	e7eb      	b.n	800d3ec <__swhatbuf_r+0x24>

0800d414 <__smakebuf_r>:
 800d414:	898b      	ldrh	r3, [r1, #12]
 800d416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d418:	079d      	lsls	r5, r3, #30
 800d41a:	4606      	mov	r6, r0
 800d41c:	460c      	mov	r4, r1
 800d41e:	d507      	bpl.n	800d430 <__smakebuf_r+0x1c>
 800d420:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	6123      	str	r3, [r4, #16]
 800d428:	2301      	movs	r3, #1
 800d42a:	6163      	str	r3, [r4, #20]
 800d42c:	b002      	add	sp, #8
 800d42e:	bd70      	pop	{r4, r5, r6, pc}
 800d430:	ab01      	add	r3, sp, #4
 800d432:	466a      	mov	r2, sp
 800d434:	f7ff ffc8 	bl	800d3c8 <__swhatbuf_r>
 800d438:	9900      	ldr	r1, [sp, #0]
 800d43a:	4605      	mov	r5, r0
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff facb 	bl	800c9d8 <_malloc_r>
 800d442:	b948      	cbnz	r0, 800d458 <__smakebuf_r+0x44>
 800d444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d448:	059a      	lsls	r2, r3, #22
 800d44a:	d4ef      	bmi.n	800d42c <__smakebuf_r+0x18>
 800d44c:	f023 0303 	bic.w	r3, r3, #3
 800d450:	f043 0302 	orr.w	r3, r3, #2
 800d454:	81a3      	strh	r3, [r4, #12]
 800d456:	e7e3      	b.n	800d420 <__smakebuf_r+0xc>
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	6020      	str	r0, [r4, #0]
 800d45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	9b00      	ldr	r3, [sp, #0]
 800d464:	6163      	str	r3, [r4, #20]
 800d466:	9b01      	ldr	r3, [sp, #4]
 800d468:	6120      	str	r0, [r4, #16]
 800d46a:	b15b      	cbz	r3, 800d484 <__smakebuf_r+0x70>
 800d46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d470:	4630      	mov	r0, r6
 800d472:	f000 f81d 	bl	800d4b0 <_isatty_r>
 800d476:	b128      	cbz	r0, 800d484 <__smakebuf_r+0x70>
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	f023 0303 	bic.w	r3, r3, #3
 800d47e:	f043 0301 	orr.w	r3, r3, #1
 800d482:	81a3      	strh	r3, [r4, #12]
 800d484:	89a3      	ldrh	r3, [r4, #12]
 800d486:	431d      	orrs	r5, r3
 800d488:	81a5      	strh	r5, [r4, #12]
 800d48a:	e7cf      	b.n	800d42c <__smakebuf_r+0x18>

0800d48c <_fstat_r>:
 800d48c:	b538      	push	{r3, r4, r5, lr}
 800d48e:	4d07      	ldr	r5, [pc, #28]	; (800d4ac <_fstat_r+0x20>)
 800d490:	2300      	movs	r3, #0
 800d492:	4604      	mov	r4, r0
 800d494:	4608      	mov	r0, r1
 800d496:	4611      	mov	r1, r2
 800d498:	602b      	str	r3, [r5, #0]
 800d49a:	f7f5 fdad 	bl	8002ff8 <_fstat>
 800d49e:	1c43      	adds	r3, r0, #1
 800d4a0:	d102      	bne.n	800d4a8 <_fstat_r+0x1c>
 800d4a2:	682b      	ldr	r3, [r5, #0]
 800d4a4:	b103      	cbz	r3, 800d4a8 <_fstat_r+0x1c>
 800d4a6:	6023      	str	r3, [r4, #0]
 800d4a8:	bd38      	pop	{r3, r4, r5, pc}
 800d4aa:	bf00      	nop
 800d4ac:	2002b25c 	.word	0x2002b25c

0800d4b0 <_isatty_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	4d06      	ldr	r5, [pc, #24]	; (800d4cc <_isatty_r+0x1c>)
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	4604      	mov	r4, r0
 800d4b8:	4608      	mov	r0, r1
 800d4ba:	602b      	str	r3, [r5, #0]
 800d4bc:	f7f5 fdac 	bl	8003018 <_isatty>
 800d4c0:	1c43      	adds	r3, r0, #1
 800d4c2:	d102      	bne.n	800d4ca <_isatty_r+0x1a>
 800d4c4:	682b      	ldr	r3, [r5, #0]
 800d4c6:	b103      	cbz	r3, 800d4ca <_isatty_r+0x1a>
 800d4c8:	6023      	str	r3, [r4, #0]
 800d4ca:	bd38      	pop	{r3, r4, r5, pc}
 800d4cc:	2002b25c 	.word	0x2002b25c

0800d4d0 <_init>:
 800d4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d2:	bf00      	nop
 800d4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4d6:	bc08      	pop	{r3}
 800d4d8:	469e      	mov	lr, r3
 800d4da:	4770      	bx	lr

0800d4dc <_fini>:
 800d4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4de:	bf00      	nop
 800d4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4e2:	bc08      	pop	{r3}
 800d4e4:	469e      	mov	lr, r3
 800d4e6:	4770      	bx	lr
