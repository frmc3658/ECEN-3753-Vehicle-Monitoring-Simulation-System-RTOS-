
McDermott_Frank_RTOS_Lab7_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d4  0800d2a4  0800d2a4  0001d2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec78  0800ec78  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec78  0800ec78  0001ec78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec80  0800ec80  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec80  0800ec80  0001ec80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec84  0800ec84  0001ec84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800ec88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0002b1f0  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2002b26c  2002b26c  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025df9  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000052a8  00000000  00000000  00045ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002208  00000000  00000000  0004b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a2e  00000000  00000000  0004d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007809  00000000  00000000  0004edc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026b3e  00000000  00000000  000565cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fbf73  00000000  00000000  0007d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000995c  00000000  00000000  00179080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ee  00000000  00000000  001829dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d28c 	.word	0x0800d28c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800d28c 	.word	0x0800d28c

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2002a6a4 	.word	0x2002a6a4
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8000630:	f000 f80a 	bl	8000648 <Gyro_Power_On>
	osDelay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f005 feb7 	bl	80063a8 <osDelay>
	Gyro_Config_Regs();
 800063a:	f000 f8b7 	bl	80007ac <Gyro_Config_Regs>
	Gyro_Reboot();
 800063e:	f000 f847 	bl	80006d0 <Gyro_Reboot>


}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000656:	f000 f921 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800065a:	bf00      	nop
 800065c:	2102      	movs	r1, #2
 800065e:	481a      	ldr	r0, [pc, #104]	; (80006c8 <Gyro_Power_On+0x80>)
 8000660:	f003 faee 	bl	8003c40 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f8      	bne.n	800065c <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f947 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f929 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800067a:	f000 f91b 	bl	80008b4 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 800067e:	2320      	movs	r3, #32
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	b2db      	uxtb	r3, r3
 800068a:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 800068c:	f000 f906 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000690:	bf00      	nop
 8000692:	2102      	movs	r1, #2
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <Gyro_Power_On+0x80>)
 8000696:	f003 fad3 	bl	8003c40 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f8      	bne.n	8000692 <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f92c 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 80006a8:	1d7b      	adds	r3, r7, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f928 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80006b0:	f000 f900 	bl	80008b4 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <Gyro_Power_On+0x84>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d000      	beq.n	80006be <Gyro_Power_On+0x76>
	{
		while(1);
 80006bc:	e7fe      	b.n	80006bc <Gyro_Power_On+0x74>
	}
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020800 	.word	0x40020800
 80006cc:	20000098 	.word	0x20000098

080006d0 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 80006d6:	23a4      	movs	r3, #164	; 0xa4
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80006de:	f000 f8dd 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80006e2:	bf00      	nop
 80006e4:	2102      	movs	r1, #2
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <Gyro_Reboot+0x74>)
 80006e8:	f003 faaa 	bl	8003c40 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f8      	bne.n	80006e4 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f903 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f8e5 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000702:	f000 f8d7 	bl	80008b4 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 8000706:	2324      	movs	r3, #36	; 0x24
 8000708:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000710:	b2db      	uxtb	r3, r3
 8000712:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8000714:	f000 f8c2 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000718:	bf00      	nop
 800071a:	2102      	movs	r1, #2
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <Gyro_Reboot+0x74>)
 800071e:	f003 fa8f 	bl	8003c40 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f8      	bne.n	800071a <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8e8 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000730:	1d7b      	adds	r3, r7, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f8e4 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000738:	f000 f8bc 	bl	80008b4 <Gyro_Slave_Disable>

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020800 	.word	0x40020800

08000748 <Gyro_Get_Velocity>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 8000752:	23ea      	movs	r3, #234	; 0xea
 8000754:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800075e:	f000 f89d 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000762:	bf00      	nop
 8000764:	2102      	movs	r1, #2
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <Gyro_Get_Velocity+0x60>)
 8000768:	f003 fa6a 	bl	8003c40 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <Gyro_Get_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 8000772:	1d7b      	adds	r3, r7, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f8c3 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f8a5 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 8000782:	1cfb      	adds	r3, r7, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f8a1 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800078a:	f000 f893 	bl	80008b4 <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	793b      	ldrb	r3, [r7, #4]
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]

	return yval;
 800079c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]



}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40020800 	.word	0x40020800

080007ac <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 80007b2:	2320      	movs	r3, #32
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 80007b6:	231a      	movs	r3, #26
 80007b8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007ba:	f000 f86f 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007be:	bf00      	nop
 80007c0:	2102      	movs	r1, #2
 80007c2:	482e      	ldr	r0, [pc, #184]	; (800087c <Gyro_Config_Regs+0xd0>)
 80007c4:	f003 fa3c 	bl	8003c40 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f8      	bne.n	80007c0 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f895 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f891 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80007de:	f000 f869 	bl	80008b4 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 80007e2:	2323      	movs	r3, #35	; 0x23
 80007e4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 80007e6:	2310      	movs	r3, #16
 80007e8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007ea:	f000 f857 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007ee:	bf00      	nop
 80007f0:	2102      	movs	r1, #2
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <Gyro_Config_Regs+0xd0>)
 80007f4:	f003 fa24 	bl	8003c40 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f8      	bne.n	80007f0 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f87d 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f879 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800080e:	f000 f851 	bl	80008b4 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8000812:	2324      	movs	r3, #36	; 0x24
 8000814:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 8000816:	23c0      	movs	r3, #192	; 0xc0
 8000818:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800081a:	f000 f83f 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800081e:	bf00      	nop
 8000820:	2102      	movs	r1, #2
 8000822:	4816      	ldr	r0, [pc, #88]	; (800087c <Gyro_Config_Regs+0xd0>)
 8000824:	f003 fa0c 	bl	8003c40 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f8      	bne.n	8000820 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f865 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f861 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800083e:	f000 f839 	bl	80008b4 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8000842:	232e      	movs	r3, #46	; 0x2e
 8000844:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8000846:	2300      	movs	r3, #0
 8000848:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800084a:	f000 f827 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800084e:	bf00      	nop
 8000850:	2102      	movs	r1, #2
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <Gyro_Config_Regs+0xd0>)
 8000854:	f003 f9f4 	bl	8003c40 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f8      	bne.n	8000850 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f84d 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f849 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800086e:	f000 f821 	bl	80008b4 <Gyro_Slave_Disable>




}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020800 	.word	0x40020800

08000880 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <Gyro_HAL_Check+0x18>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d000      	beq.n	800088e <Gyro_HAL_Check+0xe>
		while(1);
 800088c:	e7fe      	b.n	800088c <Gyro_HAL_Check+0xc>
	}
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	20000098 	.word	0x20000098

0800089c <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2102      	movs	r1, #2
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <Gyro_Slave_Enable+0x14>)
 80008a6:	f003 f9e3 	bl	8003c70 <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40020800 	.word	0x40020800

080008b4 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2102      	movs	r1, #2
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <Gyro_Slave_Disable+0x14>)
 80008be:	f003 f9d7 	bl	8003c70 <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40020800 	.word	0x40020800

080008cc <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 80008d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008d8:	2201      	movs	r2, #1
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <Gyro_Receive_Data+0x2c>)
 80008de:	f004 feac 	bl	800563a <HAL_SPI_Receive>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <Gyro_Receive_Data+0x30>)
 80008e8:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 80008ea:	f7ff ffc9 	bl	8000880 <Gyro_HAL_Check>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20025c70 	.word	0x20025c70
 80008fc:	20000098 	.word	0x20000098

08000900 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8000908:	f644 6320 	movw	r3, #20000	; 0x4e20
 800090c:	2201      	movs	r2, #1
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <Gyro_Transmit_Data+0x2c>)
 8000912:	f004 fd56 	bl	80053c2 <HAL_SPI_Transmit>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <Gyro_Transmit_Data+0x30>)
 800091c:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 800091e:	f7ff ffaf 	bl	8000880 <Gyro_HAL_Check>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20025c70 	.word	0x20025c70
 8000930:	20000098 	.word	0x20000098

08000934 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a59      	ldr	r2, [pc, #356]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	4b53      	ldr	r3, [pc, #332]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a4b      	ldr	r2, [pc, #300]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b49      	ldr	r3, [pc, #292]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80009fe:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a02:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a10:	230e      	movs	r3, #14
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4824      	ldr	r0, [pc, #144]	; (8000aac <LCD_GPIO_Init+0x178>)
 8000a1c:	f002 fe58 	bl	80036d0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a24:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <LCD_GPIO_Init+0x17c>)
 8000a2e:	f002 fe4f 	bl	80036d0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a32:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481d      	ldr	r0, [pc, #116]	; (8000ab4 <LCD_GPIO_Init+0x180>)
 8000a40:	f002 fe46 	bl	80036d0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000a44:	2348      	movs	r3, #72	; 0x48
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <LCD_GPIO_Init+0x184>)
 8000a50:	f002 fe3e 	bl	80036d0 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <LCD_GPIO_Init+0x188>)
 8000a62:	f002 fe35 	bl	80036d0 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a6a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <LCD_GPIO_Init+0x18c>)
 8000a74:	f002 fe2c 	bl	80036d0 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a7c:	2309      	movs	r3, #9
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <LCD_GPIO_Init+0x17c>)
 8000a88:	f002 fe22 	bl	80036d0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <LCD_GPIO_Init+0x18c>)
 8000a9a:	f002 fe19 	bl	80036d0 <HAL_GPIO_Init>
}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40021400 	.word	0x40021400
 8000ac0:	40021800 	.word	0x40021800

08000ac4 <LTCD__Init>:


void LTCD__Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <LTCD__Init+0xb0>)
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <LTCD__Init+0xb4>)
 8000acc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <LTCD__Init+0xb0>)
 8000ad0:	2209      	movs	r2, #9
 8000ad2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <LTCD__Init+0xb0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <LTCD__Init+0xb0>)
 8000adc:	221d      	movs	r2, #29
 8000ade:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <LTCD__Init+0xb0>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <LTCD__Init+0xb0>)
 8000ae8:	f240 120d 	movw	r2, #269	; 0x10d
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <LTCD__Init+0xb0>)
 8000af0:	f240 1243 	movw	r2, #323	; 0x143
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <LTCD__Init+0xb0>)
 8000af8:	f240 1217 	movw	r2, #279	; 0x117
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <LTCD__Init+0xb0>)
 8000b00:	f240 1247 	movw	r2, #327	; 0x147
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <LTCD__Init+0xb0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <LTCD__Init+0xb0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <LTCD__Init+0xb0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <LTCD__Init+0xb8>)
 8000b20:	2208      	movs	r2, #8
 8000b22:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <LTCD__Init+0xb8>)
 8000b26:	22c0      	movs	r2, #192	; 0xc0
 8000b28:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <LTCD__Init+0xb8>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <LTCD__Init+0xb8>)
 8000b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <LTCD__Init+0xb8>)
 8000b3a:	f004 f99d 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <LTCD__Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LTCD__Init+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <LTCD__Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <LTCD__Init+0xb0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b56:	f7ff feed 	bl	8000934 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <LTCD__Init+0xb0>)
 8000b5c:	f003 fa62 	bl	8004024 <HAL_LTDC_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b66:	f000 f9f7 	bl	8000f58 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b6a:	f000 f9f8 	bl	8000f5e <ili9341_Init>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	40016800 	.word	0x40016800
 8000b7c:	20000144 	.word	0x20000144

08000b80 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	; 0x40
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b8e:	23f0      	movs	r3, #240	; 0xf0
 8000b90:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b9a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000ba0:	23ff      	movs	r3, #255	; 0xff
 8000ba2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <LTCD_Layer_Init+0x78>)
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000bbc:	23f0      	movs	r3, #240	; 0xf0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000bc0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <LTCD_Layer_Init+0x7c>)
 8000be2:	f003 faef 	bl	80041c4 <HAL_LTDC_ConfigLayer>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000bec:	f000 f9b4 	bl	8000f58 <LCD_Error_Handler>
	}

}
 8000bf0:	bf00      	nop
 8000bf2:	3740      	adds	r7, #64	; 0x40
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001d0 	.word	0x200001d0
 8000bfc:	2000009c 	.word	0x2000009c

08000c00 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000c12:	88ba      	ldrh	r2, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	4413      	add	r3, r2
 8000c22:	4905      	ldr	r1, [pc, #20]	; (8000c38 <LCD_Draw_Pixel+0x38>)
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200001d0 	.word	0x200001d0

08000c3c <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	603a      	str	r2, [r7, #0]
 8000c46:	80fb      	strh	r3, [r7, #6]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e04c      	b.n	8000cf4 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	e03f      	b.n	8000ce0 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	889b      	ldrh	r3, [r3, #4]
 8000c72:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <LCD_DrawChar+0xd4>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	08db      	lsrs	r3, r3, #3
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	409a      	lsls	r2, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	fa42 f303 	asr.w	r3, r2, r3
 8000c88:	400b      	ands	r3, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d104      	bne.n	8000c98 <LCD_DrawChar+0x5c>
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	889b      	ldrh	r3, [r3, #4]
 8000c94:	2b0c      	cmp	r3, #12
 8000c96:	d920      	bls.n	8000cda <LCD_DrawChar+0x9e>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	fa42 f303 	asr.w	r3, r2, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d104      	bne.n	8000cbc <LCD_DrawChar+0x80>
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	889b      	ldrh	r3, [r3, #4]
 8000cb8:	2b0c      	cmp	r3, #12
 8000cba:	d80e      	bhi.n	8000cda <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b298      	uxth	r0, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <LCD_DrawChar+0xd8>)
 8000cd2:	8812      	ldrh	r2, [r2, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff ff93 	bl	8000c00 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	889b      	ldrh	r3, [r3, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d3b8      	bcc.n	8000c60 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	88db      	ldrh	r3, [r3, #6]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d3ab      	bcc.n	8000c5a <LCD_DrawChar+0x1e>
      }
    }
  }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000174 	.word	0x20000174
 8000d10:	aaaaaaab 	.word	0xaaaaaaab
 8000d14:	20000000 	.word	0x20000000

08000d18 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
 8000d22:	460b      	mov	r3, r1
 8000d24:	80bb      	strh	r3, [r7, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	3b20      	subs	r3, #32
 8000d2e:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <LCD_DisplayChar+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <LCD_DisplayChar+0x40>)
 8000d3a:	6809      	ldr	r1, [r1, #0]
 8000d3c:	88c9      	ldrh	r1, [r1, #6]
 8000d3e:	fb01 f303 	mul.w	r3, r1, r3
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	441a      	add	r2, r3
 8000d46:	88b9      	ldrh	r1, [r7, #4]
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff76 	bl	8000c3c <LCD_DrawChar>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000174 	.word	0x20000174

08000d5c <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, char *string){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	603a      	str	r2, [r7, #0]
 8000d66:	80fb      	strh	r3, [r7, #6]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	80bb      	strh	r3, [r7, #4]
	if(string == NULL) return;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d017      	beq.n	8000da2 <LCD_DisplayString+0x46>
	uint16_t offset = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 8000d76:	e00f      	b.n	8000d98 <LCD_DisplayString+0x3c>
		LCD_DisplayChar(Xpos+offset, Ypos, *string);
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b298      	uxth	r0, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	4619      	mov	r1, r3
 8000d88:	f7ff ffc6 	bl	8000d18 <LCD_DisplayChar>
		string++;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	603b      	str	r3, [r7, #0]
		offset+=15;
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	330f      	adds	r3, #15
 8000d96:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1eb      	bne.n	8000d78 <LCD_DisplayString+0x1c>
 8000da0:	e000      	b.n	8000da4 <LCD_DisplayString+0x48>
	if(string == NULL) return;
 8000da2:	bf00      	nop
	}
}
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <LCD_DisplayNumber>:

//Displays Number, size is the number of digits in the number you want to Display
void LCD_DisplayNumber(uint16_t Xpos, uint16_t Ypos, uint16_t Number){
 8000dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000db0:	b089      	sub	sp, #36	; 0x24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	80fb      	strh	r3, [r7, #6]
 8000db8:	460b      	mov	r3, r1
 8000dba:	80bb      	strh	r3, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	466b      	mov	r3, sp
 8000dc2:	461e      	mov	r6, r3

	uint8_t numDigits = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	77fb      	strb	r3, [r7, #31]
	if(Number == 0){
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d107      	bne.n	8000dde <LCD_DisplayNumber+0x32>
		LCD_DisplayChar(Xpos,Ypos,'0');
 8000dce:	88b9      	ldrh	r1, [r7, #4]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	2230      	movs	r2, #48	; 0x30
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff9f 	bl	8000d18 <LCD_DisplayChar>
		return;
 8000dda:	46b5      	mov	sp, r6
 8000ddc:	e074      	b.n	8000ec8 <LCD_DisplayNumber+0x11c>
	}
	else{
		uint16_t temp = Number;
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	83bb      	strh	r3, [r7, #28]
		while (temp > 0) {
 8000de2:	e008      	b.n	8000df6 <LCD_DisplayNumber+0x4a>
			temp /= 10;
 8000de4:	8bbb      	ldrh	r3, [r7, #28]
 8000de6:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <LCD_DisplayNumber+0x124>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	83bb      	strh	r3, [r7, #28]
			numDigits++;
 8000df0:	7ffb      	ldrb	r3, [r7, #31]
 8000df2:	3301      	adds	r3, #1
 8000df4:	77fb      	strb	r3, [r7, #31]
		while (temp > 0) {
 8000df6:	8bbb      	ldrh	r3, [r7, #28]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f3      	bne.n	8000de4 <LCD_DisplayNumber+0x38>
		}
	}



	uint8_t num_ascii[numDigits];
 8000dfc:	7ff9      	ldrb	r1, [r7, #31]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	b2cb      	uxtb	r3, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	4698      	mov	r8, r3
 8000e0a:	4691      	mov	r9, r2
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e20:	b2cb      	uxtb	r3, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	461c      	mov	r4, r3
 8000e26:	4615      	mov	r5, r2
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	00eb      	lsls	r3, r5, #3
 8000e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e36:	00e2      	lsls	r2, r4, #3
 8000e38:	460b      	mov	r3, r1
 8000e3a:	3307      	adds	r3, #7
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	ebad 0d03 	sub.w	sp, sp, r3
 8000e44:	466b      	mov	r3, sp
 8000e46:	3300      	adds	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
	// Convert each digit to a character and print it with standard spacing.
	for (int i = numDigits - 1; i >= 0; i--) {
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	e01b      	b.n	8000e8a <LCD_DisplayNumber+0xde>
		num_ascii[i] = '0' + (Number % 10);
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <LCD_DisplayNumber+0x124>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	08d9      	lsrs	r1, r3, #3
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	3330      	adds	r3, #48	; 0x30
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	4413      	add	r3, r2
 8000e74:	460a      	mov	r2, r1
 8000e76:	701a      	strb	r2, [r3, #0]

		Number /= 10;
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <LCD_DisplayNumber+0x124>)
 8000e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	807b      	strh	r3, [r7, #2]
	for (int i = numDigits - 1; i >= 0; i--) {
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	dae0      	bge.n	8000e52 <LCD_DisplayNumber+0xa6>
	}

	//print numbers with offset on x-axis
	uint16_t offset = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e011      	b.n	8000ebe <LCD_DisplayNumber+0x112>
		LCD_DisplayChar(Xpos+offset,Ypos,num_ascii[i]);
 8000e9a:	88fa      	ldrh	r2, [r7, #6]
 8000e9c:	8afb      	ldrh	r3, [r7, #22]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff ff33 	bl	8000d18 <LCD_DisplayChar>
		offset+=12;
 8000eb2:	8afb      	ldrh	r3, [r7, #22]
 8000eb4:	330c      	adds	r3, #12
 8000eb6:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	7ffb      	ldrb	r3, [r7, #31]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dbe9      	blt.n	8000e9a <LCD_DisplayNumber+0xee>
 8000ec6:	46b5      	mov	sp, r6
	}

}
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ed0:	cccccccd 	.word	0xcccccccd

08000ed4 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <LCD_SetTextColor+0x1c>)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	8013      	strh	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <LCD_SetFont+0x1c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000174 	.word	0x20000174

08000f14 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10e      	bne.n	8000f48 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e007      	b.n	8000f40 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <LCD_Clear+0x40>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	88ba      	ldrh	r2, [r7, #4]
 8000f36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000f46:	d3f3      	bcc.n	8000f30 <LCD_Clear+0x1c>
		}
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	200001d0 	.word	0x200001d0

08000f58 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8000f5c:	e7fe      	b.n	8000f5c <LCD_Error_Handler+0x4>

08000f5e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000f62:	f000 f9ff 	bl	8001364 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000f66:	20ca      	movs	r0, #202	; 0xca
 8000f68:	f000 f943 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000f6c:	20c3      	movs	r0, #195	; 0xc3
 8000f6e:	f000 f94d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000f72:	2008      	movs	r0, #8
 8000f74:	f000 f94a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000f78:	2050      	movs	r0, #80	; 0x50
 8000f7a:	f000 f947 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000f7e:	20cf      	movs	r0, #207	; 0xcf
 8000f80:	f000 f937 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f941 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000f8a:	20c1      	movs	r0, #193	; 0xc1
 8000f8c:	f000 f93e 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000f90:	2030      	movs	r0, #48	; 0x30
 8000f92:	f000 f93b 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000f96:	20ed      	movs	r0, #237	; 0xed
 8000f98:	f000 f92b 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f000 f935 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f000 f932 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000fa8:	2012      	movs	r0, #18
 8000faa:	f000 f92f 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000fae:	2081      	movs	r0, #129	; 0x81
 8000fb0:	f000 f92c 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000fb4:	20e8      	movs	r0, #232	; 0xe8
 8000fb6:	f000 f91c 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000fba:	2085      	movs	r0, #133	; 0x85
 8000fbc:	f000 f926 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f923 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000fc6:	2078      	movs	r0, #120	; 0x78
 8000fc8:	f000 f920 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000fcc:	20cb      	movs	r0, #203	; 0xcb
 8000fce:	f000 f910 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000fd2:	2039      	movs	r0, #57	; 0x39
 8000fd4:	f000 f91a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000fd8:	202c      	movs	r0, #44	; 0x2c
 8000fda:	f000 f917 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f914 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000fe4:	2034      	movs	r0, #52	; 0x34
 8000fe6:	f000 f911 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000fea:	2002      	movs	r0, #2
 8000fec:	f000 f90e 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000ff0:	20f7      	movs	r0, #247	; 0xf7
 8000ff2:	f000 f8fe 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	f000 f908 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000ffc:	20ea      	movs	r0, #234	; 0xea
 8000ffe:	f000 f8f8 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f902 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f8ff 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800100e:	20b1      	movs	r0, #177	; 0xb1
 8001010:	f000 f8ef 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f8f9 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800101a:	201b      	movs	r0, #27
 800101c:	f000 f8f6 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001020:	20b6      	movs	r0, #182	; 0xb6
 8001022:	f000 f8e6 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001026:	200a      	movs	r0, #10
 8001028:	f000 f8f0 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800102c:	20a2      	movs	r0, #162	; 0xa2
 800102e:	f000 f8ed 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001032:	20c0      	movs	r0, #192	; 0xc0
 8001034:	f000 f8dd 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001038:	2010      	movs	r0, #16
 800103a:	f000 f8e7 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800103e:	20c1      	movs	r0, #193	; 0xc1
 8001040:	f000 f8d7 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001044:	2010      	movs	r0, #16
 8001046:	f000 f8e1 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800104a:	20c5      	movs	r0, #197	; 0xc5
 800104c:	f000 f8d1 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001050:	2045      	movs	r0, #69	; 0x45
 8001052:	f000 f8db 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001056:	2015      	movs	r0, #21
 8001058:	f000 f8d8 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800105c:	20c7      	movs	r0, #199	; 0xc7
 800105e:	f000 f8c8 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001062:	2090      	movs	r0, #144	; 0x90
 8001064:	f000 f8d2 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001068:	2036      	movs	r0, #54	; 0x36
 800106a:	f000 f8c2 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f000 f8cc 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001074:	20f2      	movs	r0, #242	; 0xf2
 8001076:	f000 f8bc 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f8c6 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001080:	20b0      	movs	r0, #176	; 0xb0
 8001082:	f000 f8b6 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001086:	20c2      	movs	r0, #194	; 0xc2
 8001088:	f000 f8c0 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800108c:	20b6      	movs	r0, #182	; 0xb6
 800108e:	f000 f8b0 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001092:	200a      	movs	r0, #10
 8001094:	f000 f8ba 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001098:	20a7      	movs	r0, #167	; 0xa7
 800109a:	f000 f8b7 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800109e:	2027      	movs	r0, #39	; 0x27
 80010a0:	f000 f8b4 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80010a4:	2004      	movs	r0, #4
 80010a6:	f000 f8b1 	bl	800120c <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80010aa:	202a      	movs	r0, #42	; 0x2a
 80010ac:	f000 f8a1 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f8ab 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 f8a8 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 f8a5 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80010c2:	20ef      	movs	r0, #239	; 0xef
 80010c4:	f000 f8a2 	bl	800120c <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80010c8:	202b      	movs	r0, #43	; 0x2b
 80010ca:	f000 f892 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f89c 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f899 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 f896 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80010e0:	203f      	movs	r0, #63	; 0x3f
 80010e2:	f000 f893 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80010e6:	20f6      	movs	r0, #246	; 0xf6
 80010e8:	f000 f883 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 f88d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f88a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80010f8:	2006      	movs	r0, #6
 80010fa:	f000 f887 	bl	800120c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80010fe:	202c      	movs	r0, #44	; 0x2c
 8001100:	f000 f877 	bl	80011f2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001104:	20c8      	movs	r0, #200	; 0xc8
 8001106:	f000 f9e9 	bl	80014dc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800110a:	2026      	movs	r0, #38	; 0x26
 800110c:	f000 f871 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001110:	2001      	movs	r0, #1
 8001112:	f000 f87b 	bl	800120c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001116:	20e0      	movs	r0, #224	; 0xe0
 8001118:	f000 f86b 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800111c:	200f      	movs	r0, #15
 800111e:	f000 f875 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001122:	2029      	movs	r0, #41	; 0x29
 8001124:	f000 f872 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001128:	2024      	movs	r0, #36	; 0x24
 800112a:	f000 f86f 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800112e:	200c      	movs	r0, #12
 8001130:	f000 f86c 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001134:	200e      	movs	r0, #14
 8001136:	f000 f869 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800113a:	2009      	movs	r0, #9
 800113c:	f000 f866 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001140:	204e      	movs	r0, #78	; 0x4e
 8001142:	f000 f863 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001146:	2078      	movs	r0, #120	; 0x78
 8001148:	f000 f860 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800114c:	203c      	movs	r0, #60	; 0x3c
 800114e:	f000 f85d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001152:	2009      	movs	r0, #9
 8001154:	f000 f85a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001158:	2013      	movs	r0, #19
 800115a:	f000 f857 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800115e:	2005      	movs	r0, #5
 8001160:	f000 f854 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001164:	2017      	movs	r0, #23
 8001166:	f000 f851 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800116a:	2011      	movs	r0, #17
 800116c:	f000 f84e 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f84b 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001176:	20e1      	movs	r0, #225	; 0xe1
 8001178:	f000 f83b 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f845 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001182:	2016      	movs	r0, #22
 8001184:	f000 f842 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001188:	201b      	movs	r0, #27
 800118a:	f000 f83f 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800118e:	2004      	movs	r0, #4
 8001190:	f000 f83c 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001194:	2011      	movs	r0, #17
 8001196:	f000 f839 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800119a:	2007      	movs	r0, #7
 800119c:	f000 f836 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80011a0:	2031      	movs	r0, #49	; 0x31
 80011a2:	f000 f833 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80011a6:	2033      	movs	r0, #51	; 0x33
 80011a8:	f000 f830 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80011ac:	2042      	movs	r0, #66	; 0x42
 80011ae:	f000 f82d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 f82a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80011b8:	200c      	movs	r0, #12
 80011ba:	f000 f827 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 f824 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80011c4:	2028      	movs	r0, #40	; 0x28
 80011c6:	f000 f821 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80011ca:	202f      	movs	r0, #47	; 0x2f
 80011cc:	f000 f81e 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80011d0:	200f      	movs	r0, #15
 80011d2:	f000 f81b 	bl	800120c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80011d6:	2011      	movs	r0, #17
 80011d8:	f000 f80b 	bl	80011f2 <ili9341_Write_Reg>
  LCD_Delay(200);
 80011dc:	20c8      	movs	r0, #200	; 0xc8
 80011de:	f000 f97d 	bl	80014dc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80011e2:	2029      	movs	r0, #41	; 0x29
 80011e4:	f000 f805 	bl	80011f2 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80011e8:	202c      	movs	r0, #44	; 0x2c
 80011ea:	f000 f802 	bl	80011f2 <ili9341_Write_Reg>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f94a 	bl	8001498 <LCD_IO_WriteReg>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f91b 	bl	8001454 <LCD_IO_WriteData>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800122c:	4819      	ldr	r0, [pc, #100]	; (8001294 <SPI_Init+0x6c>)
 800122e:	f004 fcb7 	bl	8005ba0 <HAL_SPI_GetState>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d12b      	bne.n	8001290 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <SPI_Init+0x6c>)
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <SPI_Init+0x70>)
 800123c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <SPI_Init+0x6c>)
 8001240:	2218      	movs	r2, #24
 8001242:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <SPI_Init+0x6c>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <SPI_Init+0x6c>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <SPI_Init+0x6c>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <SPI_Init+0x6c>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <SPI_Init+0x6c>)
 800125e:	2207      	movs	r2, #7
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <SPI_Init+0x6c>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <SPI_Init+0x6c>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <SPI_Init+0x6c>)
 8001270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001274:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <SPI_Init+0x6c>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SPI_Init+0x6c>)
 800127e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001282:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <SPI_Init+0x6c>)
 8001286:	f000 f833 	bl	80012f0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800128a:	4802      	ldr	r0, [pc, #8]	; (8001294 <SPI_Init+0x6c>)
 800128c:	f003 ffe8 	bl	8005260 <HAL_SPI_Init>
  }
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000178 	.word	0x20000178
 8001298:	40015000 	.word	0x40015000

0800129c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <SPI_Write+0x34>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1db9      	adds	r1, r7, #6
 80012b0:	2201      	movs	r2, #1
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <SPI_Write+0x38>)
 80012b4:	f004 f885 	bl	80053c2 <HAL_SPI_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80012c2:	f000 f809 	bl	80012d8 <SPI_Error>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000178 	.word	0x20000178

080012d8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <SPI_Error+0x14>)
 80012de:	f004 f848 	bl	8005372 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80012e2:	f7ff ffa1 	bl	8001228 <SPI_Init>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000178 	.word	0x20000178

080012f0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <SPI_MspInit+0x6c>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	4a16      	ldr	r2, [pc, #88]	; (800135c <SPI_MspInit+0x6c>)
 8001302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001306:	6453      	str	r3, [r2, #68]	; 0x44
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <SPI_MspInit+0x6c>)
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <SPI_MspInit+0x6c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <SPI_MspInit+0x6c>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SPI_MspInit+0x6c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001330:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800133a:	2302      	movs	r3, #2
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <SPI_MspInit+0x70>)
 800134e:	f002 f9bf 	bl	80036d0 <HAL_GPIO_Init>
}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40021400 	.word	0x40021400

08001364 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <LCD_IO_Init+0xe0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d164      	bne.n	800143c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <LCD_IO_Init+0xe0>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <LCD_IO_Init+0xe4>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4a31      	ldr	r2, [pc, #196]	; (8001448 <LCD_IO_Init+0xe4>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6313      	str	r3, [r2, #48]	; 0x30
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <LCD_IO_Init+0xe4>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <LCD_IO_Init+0xe8>)
 80013ae:	f002 f98f 	bl	80036d0 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <LCD_IO_Init+0xe4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <LCD_IO_Init+0xe4>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <LCD_IO_Init+0xe4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4819      	ldr	r0, [pc, #100]	; (800144c <LCD_IO_Init+0xe8>)
 80013e8:	f002 f972 	bl	80036d0 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <LCD_IO_Init+0xe4>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <LCD_IO_Init+0xe4>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <LCD_IO_Init+0xe4>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001408:	2304      	movs	r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <LCD_IO_Init+0xec>)
 8001420:	f002 f956 	bl	80036d0 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <LCD_IO_Init+0xec>)
 800142a:	f002 fc21 	bl	8003c70 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800142e:	2201      	movs	r2, #1
 8001430:	2104      	movs	r1, #4
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <LCD_IO_Init+0xec>)
 8001434:	f002 fc1c 	bl	8003c70 <HAL_GPIO_WritePin>

    SPI_Init();
 8001438:	f7ff fef6 	bl	8001228 <SPI_Init>
  }
}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200259d0 	.word	0x200259d0
 8001448:	40023800 	.word	0x40023800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020800 	.word	0x40020800

08001454 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <LCD_IO_WriteData+0x3c>)
 8001466:	f002 fc03 	bl	8003c70 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <LCD_IO_WriteData+0x40>)
 8001470:	f002 fbfe 	bl	8003c70 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff10 	bl	800129c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800147c:	2201      	movs	r2, #1
 800147e:	2104      	movs	r1, #4
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <LCD_IO_WriteData+0x40>)
 8001482:	f002 fbf5 	bl	8003c70 <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40020800 	.word	0x40020800

08001498 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <LCD_IO_WriteReg+0x3c>)
 80014aa:	f002 fbe1 	bl	8003c70 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80014ae:	2200      	movs	r2, #0
 80014b0:	2104      	movs	r1, #4
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <LCD_IO_WriteReg+0x40>)
 80014b4:	f002 fbdc 	bl	8003c70 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff feed 	bl	800129c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014c2:	2201      	movs	r2, #1
 80014c4:	2104      	movs	r1, #4
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <LCD_IO_WriteReg+0x40>)
 80014c8:	f002 fbd2 	bl	8003c70 <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40020800 	.word	0x40020800

080014dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f004 ff5f 	bl	80063a8 <osDelay>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <appInit>:

/*
 * @brief Initialize the application
 */
void appInit(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
	// Initialize Tasks, Timers, and ITC structures
	initTimers();
 80014f6:	f000 f89b 	bl	8001630 <initTimers>
	initSempahores();
 80014fa:	f000 f90d 	bl	8001718 <initSempahores>
	initMutexes();
 80014fe:	f000 f95b 	bl	80017b8 <initMutexes>
	initEventFlags();
 8001502:	f000 f98d 	bl	8001820 <initEventFlags>

	// Initialize the LTCD
	lcdInit();
 8001506:	f000 f9f7 	bl	80018f8 <lcdInit>

	// Initialize the Gyro
	Gyro_Init();
 800150a:	f7ff f88f 	bl	800062c <Gyro_Init>

	// Start timers
	initTasks();
 800150e:	f000 f805 	bl	800151c <initTasks>
	startTimers();
 8001512:	f000 f9bb 	bl	800188c <startTimers>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <initTasks>:

/*
 * @brief Initialize all tasks
 */
void initTasks(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	// Create new task threads
	speedSetpointTaskID = osThreadNew(speedSetpointTask, NULL, &speedSetpointTaskAttr);
 8001520:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <initTasks+0xbc>)
 8001522:	2100      	movs	r1, #0
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <initTasks+0xc0>)
 8001526:	f004 fead 	bl	8006284 <osThreadNew>
 800152a:	4603      	mov	r3, r0
 800152c:	4a2c      	ldr	r2, [pc, #176]	; (80015e0 <initTasks+0xc4>)
 800152e:	6013      	str	r3, [r2, #0]
	vehicleDirectionTaskID = osThreadNew(vehicleDirectionTask, NULL, &vehicleDirectionTaskAttr);
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <initTasks+0xc8>)
 8001532:	2100      	movs	r1, #0
 8001534:	482c      	ldr	r0, [pc, #176]	; (80015e8 <initTasks+0xcc>)
 8001536:	f004 fea5 	bl	8006284 <osThreadNew>
 800153a:	4603      	mov	r3, r0
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <initTasks+0xd0>)
 800153e:	6013      	str	r3, [r2, #0]
	vehicleMonitorTaskID = osThreadNew(vehicleMonitorTask, NULL, &vehicleMonitorTaskAttr);
 8001540:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <initTasks+0xd4>)
 8001542:	2100      	movs	r1, #0
 8001544:	482b      	ldr	r0, [pc, #172]	; (80015f4 <initTasks+0xd8>)
 8001546:	f004 fe9d 	bl	8006284 <osThreadNew>
 800154a:	4603      	mov	r3, r0
 800154c:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <initTasks+0xdc>)
 800154e:	6013      	str	r3, [r2, #0]
	lcdDisplayTaskID = osThreadNew(lcdDisplayTask, NULL, &lcdDisplayTaskAttr);
 8001550:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <initTasks+0xe0>)
 8001552:	2100      	movs	r1, #0
 8001554:	482a      	ldr	r0, [pc, #168]	; (8001600 <initTasks+0xe4>)
 8001556:	f004 fe95 	bl	8006284 <osThreadNew>
 800155a:	4603      	mov	r3, r0
 800155c:	4a29      	ldr	r2, [pc, #164]	; (8001604 <initTasks+0xe8>)
 800155e:	6013      	str	r3, [r2, #0]
	ledOutputTaskID = osThreadNew(ledOutputTask, NULL, &ledOutputTaskAttr);
 8001560:	4a29      	ldr	r2, [pc, #164]	; (8001608 <initTasks+0xec>)
 8001562:	2100      	movs	r1, #0
 8001564:	4829      	ldr	r0, [pc, #164]	; (800160c <initTasks+0xf0>)
 8001566:	f004 fe8d 	bl	8006284 <osThreadNew>
 800156a:	4603      	mov	r3, r0
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <initTasks+0xf4>)
 800156e:	6013      	str	r3, [r2, #0]

	// Verify that all task threads were created successfully
	assert(speedSetpointTaskID != NULL);
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <initTasks+0xc4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <initTasks+0x68>
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <initTasks+0xf8>)
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <initTasks+0xfc>)
 800157c:	21b7      	movs	r1, #183	; 0xb7
 800157e:	4827      	ldr	r0, [pc, #156]	; (800161c <initTasks+0x100>)
 8001580:	f00a fec6 	bl	800c310 <__assert_func>
	assert(vehicleDirectionTaskID != NULL);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <initTasks+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <initTasks+0x7c>
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <initTasks+0x104>)
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <initTasks+0xfc>)
 8001590:	21b8      	movs	r1, #184	; 0xb8
 8001592:	4822      	ldr	r0, [pc, #136]	; (800161c <initTasks+0x100>)
 8001594:	f00a febc 	bl	800c310 <__assert_func>
	assert(vehicleMonitorTaskID != NULL);
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <initTasks+0xdc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <initTasks+0x90>
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <initTasks+0x108>)
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <initTasks+0xfc>)
 80015a4:	21b9      	movs	r1, #185	; 0xb9
 80015a6:	481d      	ldr	r0, [pc, #116]	; (800161c <initTasks+0x100>)
 80015a8:	f00a feb2 	bl	800c310 <__assert_func>
	assert(lcdDisplayTaskID != NULL);
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <initTasks+0xe8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <initTasks+0xa4>
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <initTasks+0x10c>)
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <initTasks+0xfc>)
 80015b8:	21ba      	movs	r1, #186	; 0xba
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <initTasks+0x100>)
 80015bc:	f00a fea8 	bl	800c310 <__assert_func>
	assert(ledOutputTaskID != NULL);
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <initTasks+0xf4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <initTasks+0xb8>
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <initTasks+0x110>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <initTasks+0xfc>)
 80015cc:	21bb      	movs	r1, #187	; 0xbb
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <initTasks+0x100>)
 80015d0:	f00a fe9e 	bl	800c310 <__assert_func>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	0800d790 	.word	0x0800d790
 80015dc:	08001aa9 	.word	0x08001aa9
 80015e0:	200259dc 	.word	0x200259dc
 80015e4:	0800d7b4 	.word	0x0800d7b4
 80015e8:	08001bd9 	.word	0x08001bd9
 80015ec:	200259e0 	.word	0x200259e0
 80015f0:	0800d7d8 	.word	0x0800d7d8
 80015f4:	08001ced 	.word	0x08001ced
 80015f8:	200259e4 	.word	0x200259e4
 80015fc:	0800d820 	.word	0x0800d820
 8001600:	08001fb1 	.word	0x08001fb1
 8001604:	200259ec 	.word	0x200259ec
 8001608:	0800d7fc 	.word	0x0800d7fc
 800160c:	08001ed1 	.word	0x08001ed1
 8001610:	200259e8 	.word	0x200259e8
 8001614:	0800d3e4 	.word	0x0800d3e4
 8001618:	0800d8f4 	.word	0x0800d8f4
 800161c:	0800d400 	.word	0x0800d400
 8001620:	0800d414 	.word	0x0800d414
 8001624:	0800d434 	.word	0x0800d434
 8001628:	0800d454 	.word	0x0800d454
 800162c:	0800d470 	.word	0x0800d470

08001630 <initTimers>:

/*
 * @brief Initalize app timers
 */
void initTimers(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	// Create timers
	holdButtonTimerID = osTimerNew(holdButtonTimerCallback, osTimerOnce, NULL, &holdButtonTimerAttr);
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <initTimers+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	4826      	ldr	r0, [pc, #152]	; (80016d4 <initTimers+0xa4>)
 800163c:	f004 fee4 	bl	8006408 <osTimerNew>
 8001640:	4603      	mov	r3, r0
 8001642:	4a25      	ldr	r2, [pc, #148]	; (80016d8 <initTimers+0xa8>)
 8001644:	6013      	str	r3, [r2, #0]
	vehicleDirWakeupTimerID = osTimerNew(vehicleDirWakeupTimerCallback, osTimerPeriodic, NULL, &vehicleDirWakeupTimerAttr);
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <initTimers+0xac>)
 8001648:	2200      	movs	r2, #0
 800164a:	2101      	movs	r1, #1
 800164c:	4824      	ldr	r0, [pc, #144]	; (80016e0 <initTimers+0xb0>)
 800164e:	f004 fedb 	bl	8006408 <osTimerNew>
 8001652:	4603      	mov	r3, r0
 8001654:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <initTimers+0xb4>)
 8001656:	6013      	str	r3, [r2, #0]
	lcdDisplayWakeupTimerID = osTimerNew(lcdDisplayWakeupTimerCallback, osTimerPeriodic, NULL, &lcdDisplayWakeupTimerAttr);
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <initTimers+0xb8>)
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <initTimers+0xbc>)
 8001660:	f004 fed2 	bl	8006408 <osTimerNew>
 8001664:	4603      	mov	r3, r0
 8001666:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <initTimers+0xc0>)
 8001668:	6013      	str	r3, [r2, #0]
	directionAlertTimerID = osTimerNew(directionAlertTimerCallback, osTimerOnce, NULL, &directionAlertTimerAttr);
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <initTimers+0xc4>)
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	4821      	ldr	r0, [pc, #132]	; (80016f8 <initTimers+0xc8>)
 8001672:	f004 fec9 	bl	8006408 <osTimerNew>
 8001676:	4603      	mov	r3, r0
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <initTimers+0xcc>)
 800167a:	6013      	str	r3, [r2, #0]

	// Verify each of the timers was setup properly
	assert(holdButtonTimerID != NULL);
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <initTimers+0xa8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <initTimers+0x60>
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <initTimers+0xd0>)
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <initTimers+0xd4>)
 8001688:	21cb      	movs	r1, #203	; 0xcb
 800168a:	481f      	ldr	r0, [pc, #124]	; (8001708 <initTimers+0xd8>)
 800168c:	f00a fe40 	bl	800c310 <__assert_func>
	assert(vehicleDirWakeupTimerID != NULL);
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <initTimers+0xb4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <initTimers+0x74>
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <initTimers+0xdc>)
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <initTimers+0xd4>)
 800169c:	21cc      	movs	r1, #204	; 0xcc
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <initTimers+0xd8>)
 80016a0:	f00a fe36 	bl	800c310 <__assert_func>
	assert(lcdDisplayWakeupTimerID != NULL);
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <initTimers+0xc0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <initTimers+0x88>
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <initTimers+0xe0>)
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <initTimers+0xd4>)
 80016b0:	21cd      	movs	r1, #205	; 0xcd
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <initTimers+0xd8>)
 80016b4:	f00a fe2c 	bl	800c310 <__assert_func>
	assert(directionAlertTimerID != NULL);
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <initTimers+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <initTimers+0x9c>
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <initTimers+0xe4>)
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <initTimers+0xd4>)
 80016c4:	21ce      	movs	r1, #206	; 0xce
 80016c6:	4810      	ldr	r0, [pc, #64]	; (8001708 <initTimers+0xd8>)
 80016c8:	f00a fe22 	bl	800c310 <__assert_func>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0800d844 	.word	0x0800d844
 80016d4:	080020a5 	.word	0x080020a5
 80016d8:	200259f0 	.word	0x200259f0
 80016dc:	0800d854 	.word	0x0800d854
 80016e0:	080020c5 	.word	0x080020c5
 80016e4:	200259f4 	.word	0x200259f4
 80016e8:	0800d864 	.word	0x0800d864
 80016ec:	08002105 	.word	0x08002105
 80016f0:	200259f8 	.word	0x200259f8
 80016f4:	0800d874 	.word	0x0800d874
 80016f8:	08002145 	.word	0x08002145
 80016fc:	200259fc 	.word	0x200259fc
 8001700:	0800d488 	.word	0x0800d488
 8001704:	0800d900 	.word	0x0800d900
 8001708:	0800d400 	.word	0x0800d400
 800170c:	0800d4a4 	.word	0x0800d4a4
 8001710:	0800d4c4 	.word	0x0800d4c4
 8001714:	0800d4e4 	.word	0x0800d4e4

08001718 <initSempahores>:

/*
 * @brief Initialize app semaphores
 */
void initSempahores(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	// Create new app semaphores
	buttonStateSemaphorID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <initSempahores+0x74>)
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f005 f965 	bl	80069f0 <osSemaphoreNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <initSempahores+0x78>)
 800172a:	6013      	str	r3, [r2, #0]
										   &buttonStateSemaphorAttr);
	vehicleDirSemaphoreID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <initSempahores+0x7c>)
 800172e:	2100      	movs	r1, #0
 8001730:	2001      	movs	r0, #1
 8001732:	f005 f95d 	bl	80069f0 <osSemaphoreNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <initSempahores+0x80>)
 800173a:	6013      	str	r3, [r2, #0]
										   &vehicleDirSemaphoreAttr);
	lcdDisplaySemaphoreID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 800173c:	4a17      	ldr	r2, [pc, #92]	; (800179c <initSempahores+0x84>)
 800173e:	2100      	movs	r1, #0
 8001740:	2001      	movs	r0, #1
 8001742:	f005 f955 	bl	80069f0 <osSemaphoreNew>
 8001746:	4603      	mov	r3, r0
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <initSempahores+0x88>)
 800174a:	6013      	str	r3, [r2, #0]
										   &lcdDisplaySemaphoreAttr);

	// Verify each semaphore was initialized sucessfully
	assert(buttonStateSemaphorID != NULL);
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <initSempahores+0x78>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <initSempahores+0x48>
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <initSempahores+0x8c>)
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <initSempahores+0x90>)
 8001758:	21e0      	movs	r1, #224	; 0xe0
 800175a:	4814      	ldr	r0, [pc, #80]	; (80017ac <initSempahores+0x94>)
 800175c:	f00a fdd8 	bl	800c310 <__assert_func>
	assert(vehicleDirSemaphoreID != NULL);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <initSempahores+0x80>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <initSempahores+0x5c>
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <initSempahores+0x98>)
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <initSempahores+0x90>)
 800176c:	21e1      	movs	r1, #225	; 0xe1
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <initSempahores+0x94>)
 8001770:	f00a fdce 	bl	800c310 <__assert_func>
	assert(lcdDisplaySemaphoreID != NULL);
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <initSempahores+0x88>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <initSempahores+0x70>
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <initSempahores+0x9c>)
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <initSempahores+0x90>)
 8001780:	21e2      	movs	r1, #226	; 0xe2
 8001782:	480a      	ldr	r0, [pc, #40]	; (80017ac <initSempahores+0x94>)
 8001784:	f00a fdc4 	bl	800c310 <__assert_func>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	0800d884 	.word	0x0800d884
 8001790:	20025a5c 	.word	0x20025a5c
 8001794:	0800d894 	.word	0x0800d894
 8001798:	20025abc 	.word	0x20025abc
 800179c:	0800d8a4 	.word	0x0800d8a4
 80017a0:	20025b1c 	.word	0x20025b1c
 80017a4:	0800d504 	.word	0x0800d504
 80017a8:	0800d90c 	.word	0x0800d90c
 80017ac:	0800d400 	.word	0x0800d400
 80017b0:	0800d524 	.word	0x0800d524
 80017b4:	0800d544 	.word	0x0800d544

080017b8 <initMutexes>:

/*
 * @brief Initialize app mutexes
 */
void initMutexes(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	// Create app mutexes
	speedDataMutexID = osMutexNew(&speedDataMutexAttr);
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <initMutexes+0x48>)
 80017be:	f005 f809 	bl	80067d4 <osMutexNew>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <initMutexes+0x4c>)
 80017c6:	6013      	str	r3, [r2, #0]
	vehicleDirDataMutexID = osMutexNew(&vehicleDirDataMutexAttr);
 80017c8:	480f      	ldr	r0, [pc, #60]	; (8001808 <initMutexes+0x50>)
 80017ca:	f005 f803 	bl	80067d4 <osMutexNew>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <initMutexes+0x54>)
 80017d2:	6013      	str	r3, [r2, #0]

	// Verifiy that the mutexes were created successfully
	assert(speedDataMutexID != NULL);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <initMutexes+0x4c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <initMutexes+0x30>
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <initMutexes+0x58>)
 80017de:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <initMutexes+0x5c>)
 80017e0:	21f0      	movs	r1, #240	; 0xf0
 80017e2:	480d      	ldr	r0, [pc, #52]	; (8001818 <initMutexes+0x60>)
 80017e4:	f00a fd94 	bl	800c310 <__assert_func>
	assert(vehicleDirDataMutexID != NULL);
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <initMutexes+0x54>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <initMutexes+0x44>
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <initMutexes+0x64>)
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <initMutexes+0x5c>)
 80017f4:	21f1      	movs	r1, #241	; 0xf1
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <initMutexes+0x60>)
 80017f8:	f00a fd8a 	bl	800c310 <__assert_func>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0800d8b4 	.word	0x0800d8b4
 8001804:	20025b20 	.word	0x20025b20
 8001808:	0800d8c4 	.word	0x0800d8c4
 800180c:	20025b24 	.word	0x20025b24
 8001810:	0800d564 	.word	0x0800d564
 8001814:	0800d91c 	.word	0x0800d91c
 8001818:	0800d400 	.word	0x0800d400
 800181c:	0800d580 	.word	0x0800d580

08001820 <initEventFlags>:

/*
 * @brief Initialize app event flags
 */
void initEventFlags(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	// Create app event flags
	vehicleMonitorEventFlagID = osEventFlagsNew(&vehicleMonitorEventFlagAttr);
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <initEventFlags+0x4c>)
 8001826:	f004 feec 	bl	8006602 <osEventFlagsNew>
 800182a:	4603      	mov	r3, r0
 800182c:	4a10      	ldr	r2, [pc, #64]	; (8001870 <initEventFlags+0x50>)
 800182e:	6013      	str	r3, [r2, #0]
	ledOutputEventFlagID = osEventFlagsNew(&ledOutputEventFlagAttr);
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <initEventFlags+0x54>)
 8001832:	f004 fee6 	bl	8006602 <osEventFlagsNew>
 8001836:	4603      	mov	r3, r0
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <initEventFlags+0x58>)
 800183a:	6013      	str	r3, [r2, #0]

	// Verify that the event flags were created successfully
	assert(vehicleMonitorEventFlagID != NULL);
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <initEventFlags+0x50>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <initEventFlags+0x30>
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <initEventFlags+0x5c>)
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <initEventFlags+0x60>)
 8001848:	21ff      	movs	r1, #255	; 0xff
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <initEventFlags+0x64>)
 800184c:	f00a fd60 	bl	800c310 <__assert_func>
	assert(ledOutputEventFlagID != NULL);
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <initEventFlags+0x58>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <initEventFlags+0x46>
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <initEventFlags+0x68>)
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <initEventFlags+0x60>)
 800185c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <initEventFlags+0x64>)
 8001862:	f00a fd55 	bl	800c310 <__assert_func>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	0800d8d4 	.word	0x0800d8d4
 8001870:	20025b28 	.word	0x20025b28
 8001874:	0800d8e4 	.word	0x0800d8e4
 8001878:	20025b2c 	.word	0x20025b2c
 800187c:	0800d5a0 	.word	0x0800d5a0
 8001880:	0800d928 	.word	0x0800d928
 8001884:	0800d400 	.word	0x0800d400
 8001888:	0800d5c4 	.word	0x0800d5c4

0800188c <startTimers>:

/*
 * @brief Starts the task wakeup timers
 */
void startTimers(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	// Start task wakeup timers
	osStatus_t dirWakeupTimerStatus = osTimerStart(vehicleDirWakeupTimerID, VEHICLE_DIR_WAKEUP_TIMER_TICKS);
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <startTimers+0x54>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2164      	movs	r1, #100	; 0x64
 8001898:	4618      	mov	r0, r3
 800189a:	f004 fe31 	bl	8006500 <osTimerStart>
 800189e:	6078      	str	r0, [r7, #4]
	osStatus_t lcdWakeupTimerStatus = osTimerStart(lcdDisplayWakeupTimerID, LCD_DISPLAY_TIMER_TICKS);
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <startTimers+0x58>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	21c8      	movs	r1, #200	; 0xc8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 fe2a 	bl	8006500 <osTimerStart>
 80018ac:	6038      	str	r0, [r7, #0]

	// Verify that the timers were started successfully
	assert(dirWakeupTimerStatus == osOK);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <startTimers+0x36>
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <startTimers+0x5c>)
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <startTimers+0x60>)
 80018b8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <startTimers+0x64>)
 80018be:	f00a fd27 	bl	800c310 <__assert_func>
	assert(lcdWakeupTimerStatus == osOK);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <startTimers+0x4a>
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <startTimers+0x68>)
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <startTimers+0x60>)
 80018cc:	f240 110f 	movw	r1, #271	; 0x10f
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <startTimers+0x64>)
 80018d2:	f00a fd1d 	bl	800c310 <__assert_func>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200259f4 	.word	0x200259f4
 80018e4:	200259f8 	.word	0x200259f8
 80018e8:	0800d5e4 	.word	0x0800d5e4
 80018ec:	0800d938 	.word	0x0800d938
 80018f0:	0800d400 	.word	0x0800d400
 80018f4:	0800d604 	.word	0x0800d604

080018f8 <lcdInit>:

/*
 * @brief Initialize the LCD
 */
void lcdInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	LTCD__Init();
 80018fc:	f7ff f8e2 	bl	8000ac4 <LTCD__Init>
	LTCD_Layer_Init(0);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff f93d 	bl	8000b80 <LTCD_Layer_Init>

	LCD_Clear(0,LCD_COLOR_CYAN);
 8001906:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fb02 	bl	8000f14 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fadf 	bl	8000ed4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001916:	4802      	ldr	r0, [pc, #8]	; (8001920 <lcdInit+0x28>)
 8001918:	f7ff faec 	bl	8000ef4 <LCD_SetFont>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000008 	.word	0x20000008

08001924 <getGyroRateOfRotation>:
 *  			the velocity as clockwise/counterclockwise and slow/fast.
 *
 *  @return Returns the categorized gyro velocity rate
 * */
gyroRotationRate getGyroRateOfRotation(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
	// Variable to store and return the gyro rotation rate
	gyroRotationRate gyroRate;

	// Get the gyro velocity
	int16_t rawVelocity = Gyro_Get_Velocity();
 800192a:	f7fe ff0d 	bl	8000748 <Gyro_Get_Velocity>
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
	// 		velocity <= -15000 			= counterClockwiseFast
	//		-15000 < velocity <= -2000 	= counterClockwiseSlow
	//		-2000 < velocity < 2000		= nearlyZero (treated as clockwise)
	//		150 <= velocity < 15000		= clockwiseSlow
	//		velocity >= 15000			= clockwiseFast
	if(rawVelocity <= counterClockwiseFast)
 8001932:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <getGyroRateOfRotation+0x68>)
 8001938:	4293      	cmp	r3, r2
 800193a:	da03      	bge.n	8001944 <getGyroRateOfRotation+0x20>
	{
		gyroRate = counterClockwiseFast;
 800193c:	f24c 5368 	movw	r3, #50536	; 0xc568
 8001940:	80fb      	strh	r3, [r7, #6]
 8001942:	e01d      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity <= counterClockwiseSlow)
 8001944:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001948:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800194c:	dc03      	bgt.n	8001956 <getGyroRateOfRotation+0x32>
	{
		gyroRate = counterClockwiseSlow;
 800194e:	f64f 0330 	movw	r3, #63536	; 0xf830
 8001952:	80fb      	strh	r3, [r7, #6]
 8001954:	e014      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseSlow)
 8001956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800195a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800195e:	da02      	bge.n	8001966 <getGyroRateOfRotation+0x42>
	{
		gyroRate = nearlyZero;
 8001960:	2300      	movs	r3, #0
 8001962:	80fb      	strh	r3, [r7, #6]
 8001964:	e00c      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseFast)
 8001966:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800196a:	f643 2297 	movw	r2, #14999	; 0x3a97
 800196e:	4293      	cmp	r3, r2
 8001970:	dc03      	bgt.n	800197a <getGyroRateOfRotation+0x56>
	{
		gyroRate = clockwiseSlow;
 8001972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001976:	80fb      	strh	r3, [r7, #6]
 8001978:	e002      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else // rawVelocity > clockwiseFast
	{
		gyroRate = clockwiseFast;
 800197a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800197e:	80fb      	strh	r3, [r7, #6]
	}

	return gyroRate;
 8001980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	ffffc569 	.word	0xffffc569

08001990 <determineVehicleDirection>:
 * 				   turns or driving straight.
 *
 * @return Returns the direction that the vehicle is moving
 */
vehicleDirection determineVehicleDirection(gyroRotationRate gyro)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	vehicleDirection direction;

	// Convert gyro rotation data to vehicle direction data
	switch(gyro)
 800199a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199e:	f643 2298 	movw	r2, #15000	; 0x3a98
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <determineVehicleDirection+0x4a>
 80019a6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80019aa:	4293      	cmp	r3, r2
 80019ac:	dc18      	bgt.n	80019e0 <determineVehicleDirection+0x50>
 80019ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019b2:	d00f      	beq.n	80019d4 <determineVehicleDirection+0x44>
 80019b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019b8:	dc12      	bgt.n	80019e0 <determineVehicleDirection+0x50>
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <determineVehicleDirection+0x64>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d003      	beq.n	80019c8 <determineVehicleDirection+0x38>
 80019c0:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80019c4:	d003      	beq.n	80019ce <determineVehicleDirection+0x3e>
 80019c6:	e00b      	b.n	80019e0 <determineVehicleDirection+0x50>
	{
		case counterClockwiseFast:
			direction = hardLeftTurn;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
			break;
 80019cc:	e00b      	b.n	80019e6 <determineVehicleDirection+0x56>
		case counterClockwiseSlow:
			direction = gradualLeftTurn;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
			break;
 80019d2:	e008      	b.n	80019e6 <determineVehicleDirection+0x56>
		case clockwiseSlow:
			direction = gradualRightTurn;
 80019d4:	2303      	movs	r3, #3
 80019d6:	73fb      	strb	r3, [r7, #15]
			break;
 80019d8:	e005      	b.n	80019e6 <determineVehicleDirection+0x56>
		case clockwiseFast:
			direction = hardRightTurn;
 80019da:	2304      	movs	r3, #4
 80019dc:	73fb      	strb	r3, [r7, #15]
			break;
 80019de:	e002      	b.n	80019e6 <determineVehicleDirection+0x56>
		default:
			direction = drivingStraight;
 80019e0:	2302      	movs	r3, #2
 80019e2:	73fb      	strb	r3, [r7, #15]
			break;
 80019e4:	bf00      	nop
	}

	return direction;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	ffffc568 	.word	0xffffc568

080019f8 <updateLCD>:
 *
 * @param[in] speed Speed data to diplay on the LCD
 * @param[in] direction Direction data to display on the LCD
 */
void updateLCD(uint8_t speed, vehicleDirection direction)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	char* speedText = "Speed: ";
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <updateLCD+0x90>)
 8001a0a:	60bb      	str	r3, [r7, #8]
	char* dirText = "";
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <updateLCD+0x94>)
 8001a0e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		switch(direction)
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d81b      	bhi.n	8001a4e <updateLCD+0x56>
 8001a16:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <updateLCD+0x24>)
 8001a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1c:	08001a43 	.word	0x08001a43
 8001a20:	08001a37 	.word	0x08001a37
 8001a24:	08001a31 	.word	0x08001a31
 8001a28:	08001a3d 	.word	0x08001a3d
 8001a2c:	08001a49 	.word	0x08001a49
		{
			case drivingStraight:
				dirText = "Dir: Straight";
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <updateLCD+0x98>)
 8001a32:	60fb      	str	r3, [r7, #12]
				break;
 8001a34:	e00c      	b.n	8001a50 <updateLCD+0x58>
			case gradualLeftTurn:
				dirText = "Dir: Grad Left";
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <updateLCD+0x9c>)
 8001a38:	60fb      	str	r3, [r7, #12]
				break;
 8001a3a:	e009      	b.n	8001a50 <updateLCD+0x58>
			case gradualRightTurn:
				dirText = "Dir: Grad Right";
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <updateLCD+0xa0>)
 8001a3e:	60fb      	str	r3, [r7, #12]
				break;
 8001a40:	e006      	b.n	8001a50 <updateLCD+0x58>
			case hardLeftTurn:
				dirText = "Dir: Hard Left";
 8001a42:	4b16      	ldr	r3, [pc, #88]	; (8001a9c <updateLCD+0xa4>)
 8001a44:	60fb      	str	r3, [r7, #12]
				break;
 8001a46:	e003      	b.n	8001a50 <updateLCD+0x58>
			case hardRightTurn:
				dirText = "Dir: Hard Right";
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <updateLCD+0xa8>)
 8001a4a:	60fb      	str	r3, [r7, #12]
				break;
 8001a4c:	e000      	b.n	8001a50 <updateLCD+0x58>
			default:
				break;
 8001a4e:	bf00      	nop
		}

		LCD_Clear(0,LCD_COLOR_CYAN);
 8001a50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fa5d 	bl	8000f14 <LCD_Clear>
		LCD_DisplayString(10, 130, speedText);
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	2182      	movs	r1, #130	; 0x82
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f7ff f97c 	bl	8000d5c <LCD_DisplayString>
		LCD_DisplayNumber(100, 130, speed);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2182      	movs	r1, #130	; 0x82
 8001a6c:	2064      	movs	r0, #100	; 0x64
 8001a6e:	f7ff f99d 	bl	8000dac <LCD_DisplayNumber>
		LCD_DisplayString(120, 130, "MPH");
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <updateLCD+0xac>)
 8001a74:	2182      	movs	r1, #130	; 0x82
 8001a76:	2078      	movs	r0, #120	; 0x78
 8001a78:	f7ff f970 	bl	8000d5c <LCD_DisplayString>
		LCD_DisplayString(10, 180, dirText);
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	21b4      	movs	r1, #180	; 0xb4
 8001a80:	200a      	movs	r0, #10
 8001a82:	f7ff f96b 	bl	8000d5c <LCD_DisplayString>
		switch(direction)
 8001a86:	e7c3      	b.n	8001a10 <updateLCD+0x18>
 8001a88:	0800d624 	.word	0x0800d624
 8001a8c:	0800d62c 	.word	0x0800d62c
 8001a90:	0800d630 	.word	0x0800d630
 8001a94:	0800d640 	.word	0x0800d640
 8001a98:	0800d650 	.word	0x0800d650
 8001a9c:	0800d660 	.word	0x0800d660
 8001aa0:	0800d670 	.word	0x0800d670
 8001aa4:	0800d680 	.word	0x0800d680

08001aa8 <speedSetpointTask>:
 * 			signal this change to the Vehicle Monitor Task.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void speedSetpointTask(void* arg)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Acquire the button state sempahore
		osStatus_t semaphoreStatus = osSemaphoreAcquire(buttonStateSemaphorID, osWaitForever);
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <speedSetpointTask+0x100>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f005 f823 	bl	8006b04 <osSemaphoreAcquire>
 8001abe:	6138      	str	r0, [r7, #16]
		assert(semaphoreStatus == osOK);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <speedSetpointTask+0x2c>
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <speedSetpointTask+0x104>)
 8001ac8:	4a39      	ldr	r2, [pc, #228]	; (8001bb0 <speedSetpointTask+0x108>)
 8001aca:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001ace:	4839      	ldr	r0, [pc, #228]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001ad0:	f00a fc1e 	bl	800c310 <__assert_func>

		// Start the oneshot hold button timer
		osStatus_t status = osTimerStart(holdButtonTimerID, HOLD_BTN_TIMER_TICKS_1S);
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <speedSetpointTask+0x110>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fd0f 	bl	8006500 <osTimerStart>
 8001ae2:	60f8      	str	r0, [r7, #12]
		assert(status == osOK);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <speedSetpointTask+0x50>
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <speedSetpointTask+0x114>)
 8001aec:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <speedSetpointTask+0x108>)
 8001aee:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001af2:	4830      	ldr	r0, [pc, #192]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001af4:	f00a fc0c 	bl	800c310 <__assert_func>

		// Wait until the button is released
		while(buttonPressed){}
 8001af8:	bf00      	nop
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <speedSetpointTask+0x118>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1fa      	bne.n	8001afa <speedSetpointTask+0x52>

		// Since the button was pressed, accelerate by 5
		int acceleration = 5;
 8001b04:	2305      	movs	r3, #5
 8001b06:	617b      	str	r3, [r7, #20]

		// If the button was held sufficiently long (1 second), flip the sign
		// of acceleration (from 5 to -5) so signal deceleration
		if(buttonHeld == true)
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <speedSetpointTask+0x11c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <speedSetpointTask+0x76>
		{
			buttonHeld = false;
 8001b12:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <speedSetpointTask+0x11c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
			acceleration *= -1;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	617b      	str	r3, [r7, #20]
		}

		// Acquire the speed data mutex to set the new speed data
		osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <speedSetpointTask+0x120>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f04f 31ff 	mov.w	r1, #4294967295
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 feda 	bl	80068e0 <osMutexAcquire>
 8001b2c:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <speedSetpointTask+0x9a>
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <speedSetpointTask+0x124>)
 8001b36:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <speedSetpointTask+0x108>)
 8001b38:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001b3c:	481d      	ldr	r0, [pc, #116]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001b3e:	f00a fbe7 	bl	800c310 <__assert_func>

		// Update vehicle speed
		speedData.speed += acceleration;
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b50:	701a      	strb	r2, [r3, #0]

		// Speed should never be negative
		if(acceleration < 0)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da09      	bge.n	8001b6c <speedSetpointTask+0xc4>
		{
			speedData.speed = 0;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
			speedData.speedDecrementCount++;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b60:	789b      	ldrb	r3, [r3, #2]
 8001b62:	3301      	adds	r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b68:	709a      	strb	r2, [r3, #2]
 8001b6a:	e005      	b.n	8001b78 <speedSetpointTask+0xd0>
		}
		else
		{
			speedData.speedIncrementCount++;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b76:	705a      	strb	r2, [r3, #1]
		}


		// speedData updated, release the mutex
		mutexStatus = osMutexRelease(speedDataMutexID);
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <speedSetpointTask+0x120>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 fefa 	bl	8006976 <osMutexRelease>
 8001b82:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <speedSetpointTask+0xf0>
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <speedSetpointTask+0x124>)
 8001b8c:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <speedSetpointTask+0x108>)
 8001b8e:	f240 11df 	movw	r1, #479	; 0x1df
 8001b92:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001b94:	f00a fbbc 	bl	800c310 <__assert_func>

		// Raise the speed update event flag to signal to the Vehicle Monitor
		// Task that the speed has been updated
		osEventFlagsSet(vehicleMonitorEventFlagID, speedUpdateEventFlag);
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <speedSetpointTask+0x12c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f004 fd6e 	bl	8006680 <osEventFlagsSet>
	{
 8001ba4:	e784      	b.n	8001ab0 <speedSetpointTask+0x8>
 8001ba6:	bf00      	nop
 8001ba8:	20025a5c 	.word	0x20025a5c
 8001bac:	0800d684 	.word	0x0800d684
 8001bb0:	0800d944 	.word	0x0800d944
 8001bb4:	0800d400 	.word	0x0800d400
 8001bb8:	200259f0 	.word	0x200259f0
 8001bbc:	0800d69c 	.word	0x0800d69c
 8001bc0:	20025b30 	.word	0x20025b30
 8001bc4:	20025b31 	.word	0x20025b31
 8001bc8:	20025b20 	.word	0x20025b20
 8001bcc:	0800d6ac 	.word	0x0800d6ac
 8001bd0:	200259d4 	.word	0x200259d4
 8001bd4:	20025b28 	.word	0x20025b28

08001bd8 <vehicleDirectionTask>:
 * 			to the Vehicle Monitor Task.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void vehicleDirectionTask(void* arg)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Wakeup task when the semaphore is released by
		// the Vehicle Direction Timer Callback
		osStatus_t status = osSemaphoreAcquire(vehicleDirSemaphoreID, osWaitForever);
 8001be0:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <vehicleDirectionTask+0xf4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 ff8b 	bl	8006b04 <osSemaphoreAcquire>
 8001bee:	6178      	str	r0, [r7, #20]
		assert(status == osOK);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <vehicleDirectionTask+0x2c>
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <vehicleDirectionTask+0xf8>)
 8001bf8:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <vehicleDirectionTask+0xfc>)
 8001bfa:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8001bfe:	4836      	ldr	r0, [pc, #216]	; (8001cd8 <vehicleDirectionTask+0x100>)
 8001c00:	f00a fb86 	bl	800c310 <__assert_func>

		// Sample the gyro
		gyroRotationRate gyro = getGyroRateOfRotation();
 8001c04:	f7ff fe8e 	bl	8001924 <getGyroRateOfRotation>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	827b      	strh	r3, [r7, #18]

		// Determine which direction the vehicle is moving
		vehicleDirection newDirection = determineVehicleDirection(gyro);
 8001c0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff febd 	bl	8001990 <determineVehicleDirection>
 8001c16:	4603      	mov	r3, r0
 8001c18:	747b      	strb	r3, [r7, #17]

		// Acquire the vehicle direction data mutex
		osStatus_t mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <vehicleDirectionTask+0x104>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fe5c 	bl	80068e0 <osMutexAcquire>
 8001c28:	60f8      	str	r0, [r7, #12]
		assert(mutexStatus == osOK);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <vehicleDirectionTask+0x66>
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <vehicleDirectionTask+0x108>)
 8001c32:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <vehicleDirectionTask+0xfc>)
 8001c34:	f240 2106 	movw	r1, #518	; 0x206
 8001c38:	4827      	ldr	r0, [pc, #156]	; (8001cd8 <vehicleDirectionTask+0x100>)
 8001c3a:	f00a fb69 	bl	800c310 <__assert_func>

		// Update the vehicle direction data
		directionData.direction = newDirection;
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c40:	7c7b      	ldrb	r3, [r7, #17]
 8001c42:	7013      	strb	r3, [r2, #0]

		// Update direction data turn counts
		switch(newDirection)
 8001c44:	7c7b      	ldrb	r3, [r7, #17]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d828      	bhi.n	8001c9c <vehicleDirectionTask+0xc4>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <vehicleDirectionTask+0x78>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c65 	.word	0x08001c65
 8001c54:	08001c73 	.word	0x08001c73
 8001c58:	08001c9d 	.word	0x08001c9d
 8001c5c:	08001c81 	.word	0x08001c81
 8001c60:	08001c8f 	.word	0x08001c8f
		{
			case hardLeftTurn:
				directionData.leftTurnCount += 2;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c6e:	705a      	strb	r2, [r3, #1]
				break;
 8001c70:	e015      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			case gradualLeftTurn:
				directionData.leftTurnCount++;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c7c:	705a      	strb	r2, [r3, #1]
				break;
 8001c7e:	e00e      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			case gradualRightTurn:
				directionData.rightTurnCount++;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c82:	789b      	ldrb	r3, [r3, #2]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c8a:	709a      	strb	r2, [r3, #2]
				break;
 8001c8c:	e007      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			case hardRightTurn:
				directionData.rightTurnCount += 2;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c90:	789b      	ldrb	r3, [r3, #2]
 8001c92:	3302      	adds	r3, #2
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c98:	709a      	strb	r2, [r3, #2]
				break;
 8001c9a:	e000      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			default:
				break;
 8001c9c:	bf00      	nop
		}

		// Release the vehicle direction data mutex
		mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <vehicleDirectionTask+0x104>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fe67 	bl	8006976 <osMutexRelease>
 8001ca8:	60f8      	str	r0, [r7, #12]
		assert(mutexStatus == osOK);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <vehicleDirectionTask+0xe6>
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <vehicleDirectionTask+0x108>)
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <vehicleDirectionTask+0xfc>)
 8001cb4:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <vehicleDirectionTask+0x100>)
 8001cba:	f00a fb29 	bl	800c310 <__assert_func>

		// Raise the Direction Update Flag to signal to the Vehicle
		// Monitor Task that new vehicle direction data is available
		osEventFlagsSet(vehicleMonitorEventFlagID, directionUpdateEventFlag);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <vehicleDirectionTask+0x110>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fcdb 	bl	8006680 <osEventFlagsSet>
	{
 8001cca:	e789      	b.n	8001be0 <vehicleDirectionTask+0x8>
 8001ccc:	20025abc 	.word	0x20025abc
 8001cd0:	0800d69c 	.word	0x0800d69c
 8001cd4:	0800d958 	.word	0x0800d958
 8001cd8:	0800d400 	.word	0x0800d400
 8001cdc:	20025b24 	.word	0x20025b24
 8001ce0:	0800d6ac 	.word	0x0800d6ac
 8001ce4:	200259d8 	.word	0x200259d8
 8001ce8:	20025b28 	.word	0x20025b28

08001cec <vehicleMonitorTask>:
 * 			violation has occured.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void vehicleMonitorTask(void* arg)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	uint8_t currentSpeed = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
	vehicleDirection currentDirection = drivingStraight;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	77bb      	strb	r3, [r7, #30]
	vehicleDirection previousDirection;

	while(1)
	{
		// Pend on the Vehicle Monitor Event Flag
		uint32_t eventStatus = osEventFlagsWait(vehicleMonitorEventFlagID, speedAndDirectionEventFlags,
 8001cfc:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <vehicleMonitorTask+0x1b8>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	2200      	movs	r2, #0
 8001d06:	2103      	movs	r1, #3
 8001d08:	f004 fcfe 	bl	8006708 <osEventFlagsWait>
 8001d0c:	61b8      	str	r0, [r7, #24]
												osFlagsWaitAny, osWaitForever);

		osStatus_t status;

		// Check if the speed update event flag is set
		if(eventStatus & speedUpdateEventFlag)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d024      	beq.n	8001d62 <vehicleMonitorTask+0x76>
		{
			// Acquire the vehicle speed data mutex before trying to
			// read vehicle speed data
		    osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001d18:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <vehicleMonitorTask+0x1bc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fddd 	bl	80068e0 <osMutexAcquire>
 8001d26:	6178      	str	r0, [r7, #20]
		    assert(mutexStatus == osOK);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <vehicleMonitorTask+0x50>
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001d30:	4a5f      	ldr	r2, [pc, #380]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001d32:	f44f 7112 	mov.w	r1, #584	; 0x248
 8001d36:	485f      	ldr	r0, [pc, #380]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001d38:	f00a faea 	bl	800c310 <__assert_func>

		    // Update speed data
		    currentSpeed = speedData.speed;
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <vehicleMonitorTask+0x1cc>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	77fb      	strb	r3, [r7, #31]

		    // Done reading vehicle speed data; release the vehicle
		    // speed data mutex
		    mutexStatus = osMutexRelease(speedDataMutexID);
 8001d42:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <vehicleMonitorTask+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fe15 	bl	8006976 <osMutexRelease>
 8001d4c:	6178      	str	r0, [r7, #20]
		    assert(mutexStatus == osOK);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <vehicleMonitorTask+0x76>
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001d56:	4a56      	ldr	r2, [pc, #344]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001d58:	f44f 7114 	mov.w	r1, #592	; 0x250
 8001d5c:	4855      	ldr	r0, [pc, #340]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001d5e:	f00a fad7 	bl	800c310 <__assert_func>
		}


		// Check if the direction update event flag is set
		if(eventStatus & directionUpdateEventFlag)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d026      	beq.n	8001dba <vehicleMonitorTask+0xce>
		{
			// Acquire the vehicle direction data mutex before trying to
			// read vehicle direction data
			osStatus_t mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <vehicleMonitorTask+0x1d0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fdb3 	bl	80068e0 <osMutexAcquire>
 8001d7a:	6138      	str	r0, [r7, #16]
		    assert(mutexStatus == osOK);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <vehicleMonitorTask+0xa4>
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001d84:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001d86:	f240 215a 	movw	r1, #602	; 0x25a
 8001d8a:	484a      	ldr	r0, [pc, #296]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001d8c:	f00a fac0 	bl	800c310 <__assert_func>

		    // Update directional data
		    previousDirection = currentDirection;
 8001d90:	7fbb      	ldrb	r3, [r7, #30]
 8001d92:	777b      	strb	r3, [r7, #29]
		    currentDirection = directionData.direction;
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <vehicleMonitorTask+0x1d4>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	77bb      	strb	r3, [r7, #30]

		    // Done reading vehicle direction data; release the vehicle
		    // direction data mutex
		    mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 8001d9a:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <vehicleMonitorTask+0x1d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fde9 	bl	8006976 <osMutexRelease>
 8001da4:	6138      	str	r0, [r7, #16]
		    assert(mutexStatus == osOK);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <vehicleMonitorTask+0xce>
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001dae:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001db0:	f240 2163 	movw	r1, #611	; 0x263
 8001db4:	483f      	ldr	r0, [pc, #252]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001db6:	f00a faab 	bl	800c310 <__assert_func>
		}

		/* Speed Violation – Light LED3 (green) for the following warnings:
		 * - Over limit, regardless of direction. Suggested limit is 75 mph.
		 * - Over limit, when making a turn. Suggested limit is 45 mph. */
		if((currentSpeed > 75) || ((currentSpeed > 45) && (currentDirection != drivingStraight)))
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
 8001dbc:	2b4b      	cmp	r3, #75	; 0x4b
 8001dbe:	d805      	bhi.n	8001dcc <vehicleMonitorTask+0xe0>
 8001dc0:	7ffb      	ldrb	r3, [r7, #31]
 8001dc2:	2b2d      	cmp	r3, #45	; 0x2d
 8001dc4:	d909      	bls.n	8001dda <vehicleMonitorTask+0xee>
 8001dc6:	7fbb      	ldrb	r3, [r7, #30]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d006      	beq.n	8001dda <vehicleMonitorTask+0xee>
		{
			osEventFlagsSet(ledOutputEventFlagID, speedUpdateEventFlag);
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <vehicleMonitorTask+0x1d8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 fc54 	bl	8006680 <osEventFlagsSet>
 8001dd8:	e005      	b.n	8001de6 <vehicleMonitorTask+0xfa>
//			assert(flagStatus & speedAndDirectionEventFlags);
		}
		else
		{
			osEventFlagsSet(ledOutputEventFlagID, deactivateSpeedAlertEventFlag);
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <vehicleMonitorTask+0x1d8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2110      	movs	r1, #16
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fc4d 	bl	8006680 <osEventFlagsSet>
//			assert(flagStatus & deactivateBothAlertEventFlags);
		}

		// Makes the compound conditional easier to read
		bool currentLeft = (currentDirection < drivingStraight);
 8001de6:	7fbb      	ldrb	r3, [r7, #30]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
		bool previouslyNotLeft = (previousDirection >= drivingStraight);
 8001df2:	7f7b      	ldrb	r3, [r7, #29]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	bf8c      	ite	hi
 8001df8:	2301      	movhi	r3, #1
 8001dfa:	2300      	movls	r3, #0
 8001dfc:	73bb      	strb	r3, [r7, #14]
		bool currentRight = (currentDirection > drivingStraight);
 8001dfe:	7fbb      	ldrb	r3, [r7, #30]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	bf8c      	ite	hi
 8001e04:	2301      	movhi	r3, #1
 8001e06:	2300      	movls	r3, #0
 8001e08:	737b      	strb	r3, [r7, #13]
		bool previouslyNotRight = (previousDirection <= drivingStraight);
 8001e0a:	7f7b      	ldrb	r3, [r7, #29]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	733b      	strb	r3, [r7, #12]

		// Check if the vehicle has changed direction
		// NOTE: The direction alert timer is started/restarted when the
		//		 vehicle changes direction. It is only stopped when driving
		//		 straight.
		if((currentDirection == drivingStraight) 	||	/* Vehicle is now driving straight */
 8001e16:	7fbb      	ldrb	r3, [r7, #30]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d00d      	beq.n	8001e38 <vehicleMonitorTask+0x14c>
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <vehicleMonitorTask+0x13c>
		   (currentLeft && previouslyNotLeft) 		||	/* Vehicle is now turning left; but wasn't previously */
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <vehicleMonitorTask+0x14c>
 8001e28:	7b7b      	ldrb	r3, [r7, #13]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f43f af66 	beq.w	8001cfc <vehicleMonitorTask+0x10>
		   (currentRight && previouslyNotRight))		/* Vehicle is now turning right; but wasn't previously */
 8001e30:	7b3b      	ldrb	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f43f af62 	beq.w	8001cfc <vehicleMonitorTask+0x10>
		{
			// Direction changed, so set the deactivate direction alert flag
			osEventFlagsSet(ledOutputEventFlagID, deactivateDirAlertEventFlag);
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <vehicleMonitorTask+0x1d8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fc1e 	bl	8006680 <osEventFlagsSet>
//			assert(flagStatus & deactivateBothAlertEventFlags);

			// Since the vehicle is driving straight, it is not in danger
			// of committing a direction violation. Therefore, stop the
			// direction alert timer
			if(currentDirection == drivingStraight)
 8001e44:	7fbb      	ldrb	r3, [r7, #30]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d119      	bne.n	8001e7e <vehicleMonitorTask+0x192>
			{
				// Stop timer if running
				// NOTE: osTimerStop will return osErrorResource if
				// 		 the timer is not running
				if(osTimerIsRunning(directionAlertTimerID))
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <vehicleMonitorTask+0x1dc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 fbbb 	bl	80065ca <osTimerIsRunning>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f43f af50 	beq.w	8001cfc <vehicleMonitorTask+0x10>
				{
					status = osTimerStop(directionAlertTimerID);
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <vehicleMonitorTask+0x1dc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fb7b 	bl	800655c <osTimerStop>
 8001e66:	60b8      	str	r0, [r7, #8]
					assert(status == osOK);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f43f af46 	beq.w	8001cfc <vehicleMonitorTask+0x10>
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <vehicleMonitorTask+0x1e0>)
 8001e72:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001e74:	f240 2192 	movw	r1, #658	; 0x292
 8001e78:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001e7a:	f00a fa49 	bl	800c310 <__assert_func>
			else
			{
				// NOTE: If the callback is called (after 5 seconds), then the direction
				// 		 alert event flag is raised and the proper LED is turned on via
				//		 the LED Output Task.
				status = osTimerStart(directionAlertTimerID, DIRECTION_ALERT_TIMER_TICKS);
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <vehicleMonitorTask+0x1dc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 fb3a 	bl	8006500 <osTimerStart>
 8001e8c:	60b8      	str	r0, [r7, #8]
				assert(status == osOK);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f43f af33 	beq.w	8001cfc <vehicleMonitorTask+0x10>
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <vehicleMonitorTask+0x1e0>)
 8001e98:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001e9a:	f240 219d 	movw	r1, #669	; 0x29d
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001ea0:	f00a fa36 	bl	800c310 <__assert_func>
 8001ea4:	20025b28 	.word	0x20025b28
 8001ea8:	20025b20 	.word	0x20025b20
 8001eac:	0800d6ac 	.word	0x0800d6ac
 8001eb0:	0800d970 	.word	0x0800d970
 8001eb4:	0800d400 	.word	0x0800d400
 8001eb8:	200259d4 	.word	0x200259d4
 8001ebc:	20025b24 	.word	0x20025b24
 8001ec0:	200259d8 	.word	0x200259d8
 8001ec4:	20025b2c 	.word	0x20025b2c
 8001ec8:	200259fc 	.word	0x200259fc
 8001ecc:	0800d69c 	.word	0x0800d69c

08001ed0 <ledOutputTask>:
 * 			direction violation is linked to the red LED (LED4).
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void ledOutputTask(void* arg)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Pend on the alert update event flag
		uint32_t flags = osEventFlagsWait(ledOutputEventFlagID, LedOutputEventAllFlag,
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <ledOutputTask+0xd8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	213c      	movs	r1, #60	; 0x3c
 8001ee4:	f004 fc10 	bl	8006708 <osEventFlagsWait>
 8001ee8:	60f8      	str	r0, [r7, #12]
										  osFlagsWaitAny, osWaitForever);

//		assert(flags & LedOutputEventAllFlag);

		// Drive the LEDs according to which flag was set
		switch(flags)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3b04      	subs	r3, #4
 8001eee:	2b1c      	cmp	r3, #28
 8001ef0:	d858      	bhi.n	8001fa4 <ledOutputTask+0xd4>
 8001ef2:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <ledOutputTask+0x28>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001f6d 	.word	0x08001f6d
 8001efc:	08001fa5 	.word	0x08001fa5
 8001f00:	08001fa5 	.word	0x08001fa5
 8001f04:	08001fa5 	.word	0x08001fa5
 8001f08:	08001f7b 	.word	0x08001f7b
 8001f0c:	08001fa5 	.word	0x08001fa5
 8001f10:	08001fa5 	.word	0x08001fa5
 8001f14:	08001fa5 	.word	0x08001fa5
 8001f18:	08001fa5 	.word	0x08001fa5
 8001f1c:	08001fa5 	.word	0x08001fa5
 8001f20:	08001fa5 	.word	0x08001fa5
 8001f24:	08001fa5 	.word	0x08001fa5
 8001f28:	08001f89 	.word	0x08001f89
 8001f2c:	08001fa5 	.word	0x08001fa5
 8001f30:	08001fa5 	.word	0x08001fa5
 8001f34:	08001fa5 	.word	0x08001fa5
 8001f38:	08001fa5 	.word	0x08001fa5
 8001f3c:	08001fa5 	.word	0x08001fa5
 8001f40:	08001fa5 	.word	0x08001fa5
 8001f44:	08001fa5 	.word	0x08001fa5
 8001f48:	08001fa5 	.word	0x08001fa5
 8001f4c:	08001fa5 	.word	0x08001fa5
 8001f50:	08001fa5 	.word	0x08001fa5
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fa5 	.word	0x08001fa5
 8001f5c:	08001fa5 	.word	0x08001fa5
 8001f60:	08001fa5 	.word	0x08001fa5
 8001f64:	08001fa5 	.word	0x08001fa5
 8001f68:	08001f97 	.word	0x08001f97
		{
			// Activate Speed Violation: Turn on green LED (LED3)
			case activateSpeedAlertEventFlag:
				HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <ledOutputTask+0xdc>)
 8001f74:	f001 fe7c 	bl	8003c70 <HAL_GPIO_WritePin>
				break;
 8001f78:	e015      	b.n	8001fa6 <ledOutputTask+0xd6>
			// Activate Direction Violation: Turn on red LED (LED4)
			case activateDirAlertEventFlag:
				HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <ledOutputTask+0xdc>)
 8001f82:	f001 fe75 	bl	8003c70 <HAL_GPIO_WritePin>
				break;
 8001f86:	e00e      	b.n	8001fa6 <ledOutputTask+0xd6>
			// Deactivate Speed Violation: Turn off green LED (LED3)
			case deactivateSpeedAlertEventFlag:
				HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <ledOutputTask+0xdc>)
 8001f90:	f001 fe6e 	bl	8003c70 <HAL_GPIO_WritePin>
				break;
 8001f94:	e007      	b.n	8001fa6 <ledOutputTask+0xd6>
			// Deactivate Direction Violation: Turn off red LED (LED4)
			case deactivateDirAlertEventFlag:
				HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ledOutputTask+0xdc>)
 8001f9e:	f001 fe67 	bl	8003c70 <HAL_GPIO_WritePin>
				break;
 8001fa2:	e000      	b.n	8001fa6 <ledOutputTask+0xd6>
			default:
				break;
 8001fa4:	bf00      	nop
	{
 8001fa6:	e797      	b.n	8001ed8 <ledOutputTask+0x8>
 8001fa8:	20025b2c 	.word	0x20025b2c
 8001fac:	40021800 	.word	0x40021800

08001fb0 <lcdDisplayTask>:
 * @details
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void lcdDisplayTask(void* arg)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Pend on the LCD Display Semaphore
		osStatus_t status = osSemaphoreAcquire(lcdDisplaySemaphoreID, osWaitForever);
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <lcdDisplayTask+0xd0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fd9f 	bl	8006b04 <osSemaphoreAcquire>
 8001fc6:	6178      	str	r0, [r7, #20]
		assert(status == osOK);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <lcdDisplayTask+0x2c>
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <lcdDisplayTask+0xd4>)
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <lcdDisplayTask+0xd8>)
 8001fd2:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8001fd6:	482d      	ldr	r0, [pc, #180]	; (800208c <lcdDisplayTask+0xdc>)
 8001fd8:	f00a f99a 	bl	800c310 <__assert_func>

		// Acquire the Speed Data Mutex
		osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <lcdDisplayTask+0xe0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 fc7b 	bl	80068e0 <osMutexAcquire>
 8001fea:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <lcdDisplayTask+0x50>
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <lcdDisplayTask+0xe4>)
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <lcdDisplayTask+0xd8>)
 8001ff6:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8001ffa:	4824      	ldr	r0, [pc, #144]	; (800208c <lcdDisplayTask+0xdc>)
 8001ffc:	f00a f988 	bl	800c310 <__assert_func>

		uint8_t currentSpeed = speedData.speed;
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <lcdDisplayTask+0xe8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	73fb      	strb	r3, [r7, #15]

		// Release the Speed Data Mutex
		mutexStatus = osMutexRelease(speedDataMutexID);
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <lcdDisplayTask+0xe0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fcb3 	bl	8006976 <osMutexRelease>
 8002010:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <lcdDisplayTask+0x76>
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <lcdDisplayTask+0xe4>)
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <lcdDisplayTask+0xd8>)
 800201c:	f240 21ea 	movw	r1, #746	; 0x2ea
 8002020:	481a      	ldr	r0, [pc, #104]	; (800208c <lcdDisplayTask+0xdc>)
 8002022:	f00a f975 	bl	800c310 <__assert_func>

		// Acquire the Vehicle Direction Data Mutex
		mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <lcdDisplayTask+0xec>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f04f 31ff 	mov.w	r1, #4294967295
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fc56 	bl	80068e0 <osMutexAcquire>
 8002034:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <lcdDisplayTask+0x9a>
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <lcdDisplayTask+0xe4>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <lcdDisplayTask+0xd8>)
 8002040:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <lcdDisplayTask+0xdc>)
 8002046:	f00a f963 	bl	800c310 <__assert_func>

		vehicleDirection currentDirection = directionData.direction;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <lcdDisplayTask+0xf0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	73bb      	strb	r3, [r7, #14]

		// Release the Vehicle Direction Data Mutex
		mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <lcdDisplayTask+0xec>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fc8e 	bl	8006976 <osMutexRelease>
 800205a:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <lcdDisplayTask+0xc0>
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <lcdDisplayTask+0xe4>)
 8002064:	4a08      	ldr	r2, [pc, #32]	; (8002088 <lcdDisplayTask+0xd8>)
 8002066:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <lcdDisplayTask+0xdc>)
 800206c:	f00a f950 	bl	800c310 <__assert_func>

		// Update the LCD with the current speed and direction
		updateLCD(currentSpeed, currentDirection);
 8002070:	7bba      	ldrb	r2, [r7, #14]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fcbe 	bl	80019f8 <updateLCD>
	{
 800207c:	e79c      	b.n	8001fb8 <lcdDisplayTask+0x8>
 800207e:	bf00      	nop
 8002080:	20025b1c 	.word	0x20025b1c
 8002084:	0800d69c 	.word	0x0800d69c
 8002088:	0800d984 	.word	0x0800d984
 800208c:	0800d400 	.word	0x0800d400
 8002090:	20025b20 	.word	0x20025b20
 8002094:	0800d6ac 	.word	0x0800d6ac
 8002098:	200259d4 	.word	0x200259d4
 800209c:	20025b24 	.word	0x20025b24
 80020a0:	200259d8 	.word	0x200259d8

080020a4 <holdButtonTimerCallback>:
 * 			was held for more than 1 second.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void holdButtonTimerCallback(void* arg)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	// Notify the speedSetpoint task that the button was held
	buttonHeld = true;
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <holdButtonTimerCallback+0x1c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20025b31 	.word	0x20025b31

080020c4 <vehicleDirWakeupTimerCallback>:
 * 			to wakeup the Vehicle Direction Task.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void vehicleDirWakeupTimerCallback(void* arg)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	osStatus_t status = osSemaphoreRelease(vehicleDirSemaphoreID);
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <vehicleDirWakeupTimerCallback+0x30>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 fd69 	bl	8006ba8 <osSemaphoreRelease>
 80020d6:	60f8      	str	r0, [r7, #12]
	assert(status == osOK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <vehicleDirWakeupTimerCallback+0x28>
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <vehicleDirWakeupTimerCallback+0x34>)
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <vehicleDirWakeupTimerCallback+0x38>)
 80020e2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <vehicleDirWakeupTimerCallback+0x3c>)
 80020e8:	f00a f912 	bl	800c310 <__assert_func>
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20025abc 	.word	0x20025abc
 80020f8:	0800d69c 	.word	0x0800d69c
 80020fc:	0800d994 	.word	0x0800d994
 8002100:	0800d400 	.word	0x0800d400

08002104 <lcdDisplayWakeupTimerCallback>:
 * @details
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void lcdDisplayWakeupTimerCallback(void* arg)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	osStatus_t status = osSemaphoreRelease(lcdDisplaySemaphoreID);
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <lcdDisplayWakeupTimerCallback+0x30>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fd49 	bl	8006ba8 <osSemaphoreRelease>
 8002116:	60f8      	str	r0, [r7, #12]
	assert(status == osOK);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <lcdDisplayWakeupTimerCallback+0x28>
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <lcdDisplayWakeupTimerCallback+0x34>)
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <lcdDisplayWakeupTimerCallback+0x38>)
 8002122:	f240 3131 	movw	r1, #817	; 0x331
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <lcdDisplayWakeupTimerCallback+0x3c>)
 8002128:	f00a f8f2 	bl	800c310 <__assert_func>
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20025b1c 	.word	0x20025b1c
 8002138:	0800d69c 	.word	0x0800d69c
 800213c:	0800d9b4 	.word	0x0800d9b4
 8002140:	0800d400 	.word	0x0800d400

08002144 <directionAlertTimerCallback>:
 * 			to signal that a direction violation has occured.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void directionAlertTimerCallback(void* arg)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	osEventFlagsSet(ledOutputEventFlagID, directionUpdateEventFlag);
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <directionAlertTimerCallback+0x1c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fa94 	bl	8006680 <osEventFlagsSet>
//	assert(flagStatus & speedAndDirectionEventFlags);
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20025b2c 	.word	0x20025b2c

08002164 <EXTI0_IRQHandler>:
 * 			post on the Button State Semaphore inorder to wake up the
 * 			Speed Setpoint Task. Toggles the buttonPressed global variable
 * 			on press/release.
 */
void EXTI0_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	// Disable interrupts
	HAL_NVIC_DisableIRQ(BUTTON_IRQn);
 800216a:	2006      	movs	r0, #6
 800216c:	f001 f9bb 	bl	80034e6 <HAL_NVIC_DisableIRQ>

	osStatus_t status = osSemaphoreRelease(buttonStateSemaphorID);
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <EXTI0_IRQHandler+0x60>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f004 fd17 	bl	8006ba8 <osSemaphoreRelease>
 800217a:	6078      	str	r0, [r7, #4]

	// verify status
	assert(status == osOK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <EXTI0_IRQHandler+0x2c>
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <EXTI0_IRQHandler+0x64>)
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <EXTI0_IRQHandler+0x68>)
 8002186:	f44f 7157 	mov.w	r1, #860	; 0x35c
 800218a:	4811      	ldr	r0, [pc, #68]	; (80021d0 <EXTI0_IRQHandler+0x6c>)
 800218c:	f00a f8c0 	bl	800c310 <__assert_func>

	// Toggle buttonPressed
	// - On press: true
	// - On release false
	buttonPressed = !buttonPressed;
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <EXTI0_IRQHandler+0x70>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf14      	ite	ne
 800219a:	2301      	movne	r3, #1
 800219c:	2300      	moveq	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <EXTI0_IRQHandler+0x70>)
 80021ae:	701a      	strb	r2, [r3, #0]

	// Clear interrupt flag
	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_PIN);
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <EXTI0_IRQHandler+0x74>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	615a      	str	r2, [r3, #20]

	// Re-enable interrupts
	HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 80021b6:	2006      	movs	r0, #6
 80021b8:	f001 f987 	bl	80034ca <HAL_NVIC_EnableIRQ>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20025a5c 	.word	0x20025a5c
 80021c8:	0800d69c 	.word	0x0800d69c
 80021cc:	0800d9d4 	.word	0x0800d9d4
 80021d0:	0800d400 	.word	0x0800d400
 80021d4:	20025b30 	.word	0x20025b30
 80021d8:	40013c00 	.word	0x40013c00

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b092      	sub	sp, #72	; 0x48
 8002234:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <systemClockOverride+0x7c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <systemClockOverride+0x7c>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <systemClockOverride+0x7c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002252:	2301      	movs	r3, #1
 8002254:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225c:	2302      	movs	r3, #2
 800225e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002266:	2308      	movs	r3, #8
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800226a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002270:	2302      	movs	r3, #2
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002274:	2307      	movs	r3, #7
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f002 f978 	bl	8004570 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002280:	230f      	movs	r3, #15
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002284:	2302      	movs	r3, #2
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800228c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800229c:	2105      	movs	r1, #5
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fbde 	bl	8004a60 <HAL_RCC_ClockConfig>
}
 80022a4:	bf00      	nop
 80022a6:	3748      	adds	r7, #72	; 0x48
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800

080022b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b4:	f000 ff7c 	bl	80031b0 <HAL_Init>
  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 80022b8:	f7ff ffba 	bl	8002230 <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022bc:	f000 f9f6 	bl	80026ac <MX_GPIO_Init>
  MX_SPI5_Init();
 80022c0:	f000 f94c 	bl	800255c <MX_SPI5_Init>
  MX_LTDC_Init();
 80022c4:	f000 f898 	bl	80023f8 <MX_LTDC_Init>
  MX_TIM11_Init();
 80022c8:	f000 f97e 	bl	80025c8 <MX_TIM11_Init>
  MX_DMA2D_Init();
 80022cc:	f000 f822 	bl	8002314 <MX_DMA2D_Init>
  MX_FMC_Init();
 80022d0:	f000 f99e 	bl	8002610 <MX_FMC_Init>
  MX_I2C3_Init();
 80022d4:	f000 f850 	bl	8002378 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 80022d8:	2006      	movs	r0, #6
 80022da:	f001 f8f6 	bl	80034ca <HAL_NVIC_EnableIRQ>
  NVIC_SetPriority(BUTTON_IRQn, 13);
 80022de:	210d      	movs	r1, #13
 80022e0:	2006      	movs	r0, #6
 80022e2:	f7ff ff7b 	bl	80021dc <__NVIC_SetPriority>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80022e6:	f003 ff83 	bl	80061f0 <osKernelInitialize>

  appInit();
 80022ea:	f7ff f902 	bl	80014f2 <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022ee:	4a06      	ldr	r2, [pc, #24]	; (8002308 <main+0x58>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <main+0x5c>)
 80022f4:	f003 ffc6 	bl	8006284 <osThreadNew>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <main+0x60>)
 80022fc:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 80022fe:	f009 fec3 	bl	800c088 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002302:	f003 ff99 	bl	8006238 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002306:	e7fe      	b.n	8002306 <main+0x56>
 8002308:	0800ebb8 	.word	0x0800ebb8
 800230c:	08002945 	.word	0x08002945
 8002310:	20025d44 	.word	0x20025d44

08002314 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002318:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_DMA2D_Init+0x5c>)
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <MX_DMA2D_Init+0x60>)
 800231c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800231e:	4b14      	ldr	r3, [pc, #80]	; (8002370 <MX_DMA2D_Init+0x5c>)
 8002320:	2200      	movs	r2, #0
 8002322:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_DMA2D_Init+0x5c>)
 8002326:	2202      	movs	r2, #2
 8002328:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_DMA2D_Init+0x5c>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_DMA2D_Init+0x5c>)
 8002332:	2200      	movs	r2, #0
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_DMA2D_Init+0x5c>)
 8002338:	2202      	movs	r2, #2
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_DMA2D_Init+0x5c>)
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_DMA2D_Init+0x5c>)
 8002344:	2200      	movs	r2, #0
 8002346:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002348:	4809      	ldr	r0, [pc, #36]	; (8002370 <MX_DMA2D_Init+0x5c>)
 800234a:	f001 f8e6 	bl	800351a <HAL_DMA2D_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002354:	f000 fafe 	bl	8002954 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002358:	2101      	movs	r1, #1
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_DMA2D_Init+0x5c>)
 800235c:	f001 f926 	bl	80035ac <HAL_DMA2D_ConfigLayer>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002366:	f000 faf5 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20025b34 	.word	0x20025b34
 8002374:	4002b000 	.word	0x4002b000

08002378 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <MX_I2C3_Init+0x74>)
 800237e:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <MX_I2C3_Init+0x78>)
 8002380:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <MX_I2C3_Init+0x74>)
 8002384:	4a1b      	ldr	r2, [pc, #108]	; (80023f4 <MX_I2C3_Init+0x7c>)
 8002386:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <MX_I2C3_Init+0x74>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <MX_I2C3_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002394:	4b15      	ldr	r3, [pc, #84]	; (80023ec <MX_I2C3_Init+0x74>)
 8002396:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800239a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800239c:	4b13      	ldr	r3, [pc, #76]	; (80023ec <MX_I2C3_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <MX_I2C3_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023a8:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_I2C3_Init+0x74>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <MX_I2C3_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023b4:	480d      	ldr	r0, [pc, #52]	; (80023ec <MX_I2C3_Init+0x74>)
 80023b6:	f001 fc75 	bl	8003ca4 <HAL_I2C_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80023c0:	f000 fac8 	bl	8002954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023c4:	2100      	movs	r1, #0
 80023c6:	4809      	ldr	r0, [pc, #36]	; (80023ec <MX_I2C3_Init+0x74>)
 80023c8:	f001 fdb0 	bl	8003f2c <HAL_I2CEx_ConfigAnalogFilter>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80023d2:	f000 fabf 	bl	8002954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80023d6:	2100      	movs	r1, #0
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <MX_I2C3_Init+0x74>)
 80023da:	f001 fde3 	bl	8003fa4 <HAL_I2CEx_ConfigDigitalFilter>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80023e4:	f000 fab6 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20025b74 	.word	0x20025b74
 80023f0:	40005c00 	.word	0x40005c00
 80023f4:	000186a0 	.word	0x000186a0

080023f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b09a      	sub	sp, #104	; 0x68
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002402:	2234      	movs	r2, #52	; 0x34
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f00a f8c7 	bl	800c59a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800240c:	463b      	mov	r3, r7
 800240e:	2234      	movs	r2, #52	; 0x34
 8002410:	2100      	movs	r1, #0
 8002412:	4618      	mov	r0, r3
 8002414:	f00a f8c1 	bl	800c59a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002418:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <MX_LTDC_Init+0x15c>)
 800241a:	4a4f      	ldr	r2, [pc, #316]	; (8002558 <MX_LTDC_Init+0x160>)
 800241c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800241e:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <MX_LTDC_Init+0x15c>)
 800242c:	2200      	movs	r2, #0
 800242e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002430:	4b48      	ldr	r3, [pc, #288]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002438:	2207      	movs	r2, #7
 800243a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <MX_LTDC_Init+0x15c>)
 800243e:	2203      	movs	r2, #3
 8002440:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002444:	220e      	movs	r2, #14
 8002446:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <MX_LTDC_Init+0x15c>)
 800244a:	2205      	movs	r2, #5
 800244c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002450:	f240 228e 	movw	r2, #654	; 0x28e
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002458:	f240 12e5 	movw	r2, #485	; 0x1e5
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002460:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002468:	f240 12e7 	movw	r2, #487	; 0x1e7
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800246e:	4b39      	ldr	r3, [pc, #228]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800247e:	4b35      	ldr	r3, [pc, #212]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002486:	4833      	ldr	r0, [pc, #204]	; (8002554 <MX_LTDC_Init+0x15c>)
 8002488:	f001 fdcc 	bl	8004024 <HAL_LTDC_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8002492:	f000 fa5f 	bl	8002954 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024a6:	2300      	movs	r3, #0
 80024a8:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b6:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80024b8:	2305      	movs	r3, #5
 80024ba:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80024da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024de:	2200      	movs	r2, #0
 80024e0:	4619      	mov	r1, r3
 80024e2:	481c      	ldr	r0, [pc, #112]	; (8002554 <MX_LTDC_Init+0x15c>)
 80024e4:	f001 fe6e 	bl	80041c4 <HAL_LTDC_ConfigLayer>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80024ee:	f000 fa31 	bl	8002954 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800250e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002512:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002514:	2305      	movs	r3, #5
 8002516:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002536:	463b      	mov	r3, r7
 8002538:	2201      	movs	r2, #1
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_LTDC_Init+0x15c>)
 800253e:	f001 fe41 	bl	80041c4 <HAL_LTDC_ConfigLayer>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002548:	f000 fa04 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800254c:	bf00      	nop
 800254e:	3768      	adds	r7, #104	; 0x68
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20025bc8 	.word	0x20025bc8
 8002558:	40016800 	.word	0x40016800

0800255c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <MX_SPI5_Init+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002568:	f44f 7282 	mov.w	r2, #260	; 0x104
 800256c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800257a:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <MX_SPI5_Init+0x64>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002590:	2200      	movs	r2, #0
 8002592:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <MX_SPI5_Init+0x64>)
 8002596:	2200      	movs	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <MX_SPI5_Init+0x64>)
 800259c:	2200      	movs	r2, #0
 800259e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a0:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <MX_SPI5_Init+0x64>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <MX_SPI5_Init+0x64>)
 80025a8:	220a      	movs	r2, #10
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80025ac:	4804      	ldr	r0, [pc, #16]	; (80025c0 <MX_SPI5_Init+0x64>)
 80025ae:	f002 fe57 	bl	8005260 <HAL_SPI_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80025b8:	f000 f9cc 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20025c70 	.word	0x20025c70
 80025c4:	40015000 	.word	0x40015000

080025c8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025cc:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_TIM11_Init+0x40>)
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <MX_TIM11_Init+0x44>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80025d2:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <MX_TIM11_Init+0x40>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <MX_TIM11_Init+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_TIM11_Init+0x40>)
 80025e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <MX_TIM11_Init+0x40>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_TIM11_Init+0x40>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025f2:	4805      	ldr	r0, [pc, #20]	; (8002608 <MX_TIM11_Init+0x40>)
 80025f4:	f003 fc12 	bl	8005e1c <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80025fe:	f000 f9a9 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20025cc8 	.word	0x20025cc8
 800260c:	40014800 	.word	0x40014800

08002610 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
 8002624:	615a      	str	r2, [r3, #20]
 8002626:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8002628:	4b1e      	ldr	r3, [pc, #120]	; (80026a4 <MX_FMC_Init+0x94>)
 800262a:	4a1f      	ldr	r2, [pc, #124]	; (80026a8 <MX_FMC_Init+0x98>)
 800262c:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <MX_FMC_Init+0x94>)
 8002630:	2201      	movs	r2, #1
 8002632:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <MX_FMC_Init+0x94>)
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <MX_FMC_Init+0x94>)
 800263c:	2204      	movs	r2, #4
 800263e:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002640:	4b18      	ldr	r3, [pc, #96]	; (80026a4 <MX_FMC_Init+0x94>)
 8002642:	2210      	movs	r2, #16
 8002644:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002646:	4b17      	ldr	r3, [pc, #92]	; (80026a4 <MX_FMC_Init+0x94>)
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <MX_FMC_Init+0x94>)
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <MX_FMC_Init+0x94>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002658:	4b12      	ldr	r3, [pc, #72]	; (80026a4 <MX_FMC_Init+0x94>)
 800265a:	2200      	movs	r2, #0
 800265c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <MX_FMC_Init+0x94>)
 8002660:	2200      	movs	r2, #0
 8002662:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002664:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <MX_FMC_Init+0x94>)
 8002666:	2200      	movs	r2, #0
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800266a:	2310      	movs	r3, #16
 800266c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800266e:	2310      	movs	r3, #16
 8002670:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002672:	2310      	movs	r3, #16
 8002674:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002676:	2310      	movs	r3, #16
 8002678:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800267a:	2310      	movs	r3, #16
 800267c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800267e:	2310      	movs	r3, #16
 8002680:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002682:	2310      	movs	r3, #16
 8002684:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4806      	ldr	r0, [pc, #24]	; (80026a4 <MX_FMC_Init+0x94>)
 800268c:	f002 fdb4 	bl	80051f8 <HAL_SDRAM_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002696:	f000 f95d 	bl	8002954 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800269a:	bf00      	nop
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20025d10 	.word	0x20025d10
 80026a8:	a0000140 	.word	0xa0000140

080026ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	; 0x38
 80026b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	4b99      	ldr	r3, [pc, #612]	; (800292c <MX_GPIO_Init+0x280>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a98      	ldr	r2, [pc, #608]	; (800292c <MX_GPIO_Init+0x280>)
 80026cc:	f043 0304 	orr.w	r3, r3, #4
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b96      	ldr	r3, [pc, #600]	; (800292c <MX_GPIO_Init+0x280>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	623b      	str	r3, [r7, #32]
 80026dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b92      	ldr	r3, [pc, #584]	; (800292c <MX_GPIO_Init+0x280>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a91      	ldr	r2, [pc, #580]	; (800292c <MX_GPIO_Init+0x280>)
 80026e8:	f043 0320 	orr.w	r3, r3, #32
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b8f      	ldr	r3, [pc, #572]	; (800292c <MX_GPIO_Init+0x280>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	4b8b      	ldr	r3, [pc, #556]	; (800292c <MX_GPIO_Init+0x280>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a8a      	ldr	r2, [pc, #552]	; (800292c <MX_GPIO_Init+0x280>)
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b88      	ldr	r3, [pc, #544]	; (800292c <MX_GPIO_Init+0x280>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	4b84      	ldr	r3, [pc, #528]	; (800292c <MX_GPIO_Init+0x280>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4a83      	ldr	r2, [pc, #524]	; (800292c <MX_GPIO_Init+0x280>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6313      	str	r3, [r2, #48]	; 0x30
 8002726:	4b81      	ldr	r3, [pc, #516]	; (800292c <MX_GPIO_Init+0x280>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	4b7d      	ldr	r3, [pc, #500]	; (800292c <MX_GPIO_Init+0x280>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a7c      	ldr	r2, [pc, #496]	; (800292c <MX_GPIO_Init+0x280>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b7a      	ldr	r3, [pc, #488]	; (800292c <MX_GPIO_Init+0x280>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b76      	ldr	r3, [pc, #472]	; (800292c <MX_GPIO_Init+0x280>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a75      	ldr	r2, [pc, #468]	; (800292c <MX_GPIO_Init+0x280>)
 8002758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b73      	ldr	r3, [pc, #460]	; (800292c <MX_GPIO_Init+0x280>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b6f      	ldr	r3, [pc, #444]	; (800292c <MX_GPIO_Init+0x280>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a6e      	ldr	r2, [pc, #440]	; (800292c <MX_GPIO_Init+0x280>)
 8002774:	f043 0310 	orr.w	r3, r3, #16
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b6c      	ldr	r3, [pc, #432]	; (800292c <MX_GPIO_Init+0x280>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	4b68      	ldr	r3, [pc, #416]	; (800292c <MX_GPIO_Init+0x280>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a67      	ldr	r2, [pc, #412]	; (800292c <MX_GPIO_Init+0x280>)
 8002790:	f043 0308 	orr.w	r3, r3, #8
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b65      	ldr	r3, [pc, #404]	; (800292c <MX_GPIO_Init+0x280>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2116      	movs	r1, #22
 80027a6:	4862      	ldr	r0, [pc, #392]	; (8002930 <MX_GPIO_Init+0x284>)
 80027a8:	f001 fa62 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	4860      	ldr	r0, [pc, #384]	; (8002934 <MX_GPIO_Init+0x288>)
 80027b2:	f001 fa5d 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80027bc:	485e      	ldr	r0, [pc, #376]	; (8002938 <MX_GPIO_Init+0x28c>)
 80027be:	f001 fa57 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80027c2:	2200      	movs	r2, #0
 80027c4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80027c8:	485c      	ldr	r0, [pc, #368]	; (800293c <MX_GPIO_Init+0x290>)
 80027ca:	f001 fa51 	bl	8003c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80027ce:	2316      	movs	r3, #22
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4619      	mov	r1, r3
 80027e4:	4852      	ldr	r0, [pc, #328]	; (8002930 <MX_GPIO_Init+0x284>)
 80027e6:	f000 ff73 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027ea:	2301      	movs	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027ee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fc:	4619      	mov	r1, r3
 80027fe:	484d      	ldr	r0, [pc, #308]	; (8002934 <MX_GPIO_Init+0x288>)
 8002800:	f000 ff66 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002804:	f248 0306 	movw	r3, #32774	; 0x8006
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800280a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002818:	4619      	mov	r1, r3
 800281a:	4846      	ldr	r0, [pc, #280]	; (8002934 <MX_GPIO_Init+0x288>)
 800281c:	f000 ff58 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	2301      	movs	r3, #1
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002834:	4619      	mov	r1, r3
 8002836:	483f      	ldr	r0, [pc, #252]	; (8002934 <MX_GPIO_Init+0x288>)
 8002838:	f000 ff4a 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800283c:	2320      	movs	r3, #32
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002840:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800284a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284e:	4619      	mov	r1, r3
 8002850:	4837      	ldr	r0, [pc, #220]	; (8002930 <MX_GPIO_Init+0x284>)
 8002852:	f000 ff3d 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002856:	2304      	movs	r3, #4
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285a:	2300      	movs	r3, #0
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002866:	4619      	mov	r1, r3
 8002868:	4835      	ldr	r0, [pc, #212]	; (8002940 <MX_GPIO_Init+0x294>)
 800286a:	f000 ff31 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800286e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002874:	2302      	movs	r3, #2
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	2300      	movs	r3, #0
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002880:	230c      	movs	r3, #12
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002888:	4619      	mov	r1, r3
 800288a:	482d      	ldr	r0, [pc, #180]	; (8002940 <MX_GPIO_Init+0x294>)
 800288c:	f000 ff20 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	4826      	ldr	r0, [pc, #152]	; (8002940 <MX_GPIO_Init+0x294>)
 80028a6:	f000 ff13 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80028aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	4619      	mov	r1, r3
 80028be:	481e      	ldr	r0, [pc, #120]	; (8002938 <MX_GPIO_Init+0x28c>)
 80028c0:	f000 ff06 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80028c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028da:	4619      	mov	r1, r3
 80028dc:	4816      	ldr	r0, [pc, #88]	; (8002938 <MX_GPIO_Init+0x28c>)
 80028de:	f000 fef7 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028f4:	2307      	movs	r3, #7
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	480d      	ldr	r0, [pc, #52]	; (8002934 <MX_GPIO_Init+0x288>)
 8002900:	f000 fee6 	bl	80036d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002904:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290a:	2301      	movs	r3, #1
 800290c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800291a:	4619      	mov	r1, r3
 800291c:	4807      	ldr	r0, [pc, #28]	; (800293c <MX_GPIO_Init+0x290>)
 800291e:	f000 fed7 	bl	80036d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002922:	bf00      	nop
 8002924:	3738      	adds	r7, #56	; 0x38
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40020800 	.word	0x40020800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021800 	.word	0x40021800
 8002940:	40020400 	.word	0x40020400

08002944 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800294c:	2001      	movs	r0, #1
 800294e:	f003 fd2b 	bl	80063a8 <osDelay>
 8002952:	e7fb      	b.n	800294c <StartDefaultTask+0x8>

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800295c:	e7fe      	b.n	800295c <Error_Handler+0x8>
	...

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <HAL_MspInit+0x54>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a11      	ldr	r2, [pc, #68]	; (80029b4 <HAL_MspInit+0x54>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_MspInit+0x54>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_MspInit+0x54>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_MspInit+0x54>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_MspInit+0x54>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	210f      	movs	r1, #15
 80029a2:	f06f 0001 	mvn.w	r0, #1
 80029a6:	f000 fd74 	bl	8003492 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_DMA2D_MspInit+0x3c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10d      	bne.n	80029e6 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_DMA2D_MspInit+0x40>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_DMA2D_MspInit+0x40>)
 80029d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_DMA2D_MspInit+0x40>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	4002b000 	.word	0x4002b000
 80029f8:	40023800 	.word	0x40023800

080029fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <HAL_I2C_MspInit+0xc4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d14b      	bne.n	8002ab6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b21      	ldr	r3, [pc, #132]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5c:	2312      	movs	r3, #18
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a68:	2304      	movs	r3, #4
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	4815      	ldr	r0, [pc, #84]	; (8002ac8 <HAL_I2C_MspInit+0xcc>)
 8002a74:	f000 fe2c 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a7e:	2312      	movs	r3, #18
 8002a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	480d      	ldr	r0, [pc, #52]	; (8002acc <HAL_I2C_MspInit+0xd0>)
 8002a96:	f000 fe1b 	bl	80036d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_I2C_MspInit+0xc8>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ab6:	bf00      	nop
 8002ab8:	3728      	adds	r7, #40	; 0x28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40005c00 	.word	0x40005c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020800 	.word	0x40020800
 8002acc:	40020000 	.word	0x40020000

08002ad0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b09a      	sub	sp, #104	; 0x68
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	2230      	movs	r2, #48	; 0x30
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f009 fd52 	bl	800c59a <memset>
  if(hltdc->Instance==LTDC)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a81      	ldr	r2, [pc, #516]	; (8002d00 <HAL_LTDC_MspInit+0x230>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	f040 80fa 	bne.w	8002cf6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b02:	2308      	movs	r3, #8
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002b06:	2332      	movs	r3, #50	; 0x32
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 f9ae 	bl	8004e78 <HAL_RCCEx_PeriphCLKConfig>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002b22:	f7ff ff17 	bl	8002954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a75      	ldr	r2, [pc, #468]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	4b6f      	ldr	r3, [pc, #444]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a6e      	ldr	r2, [pc, #440]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a67      	ldr	r2, [pc, #412]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a60      	ldr	r2, [pc, #384]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a59      	ldr	r2, [pc, #356]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b57      	ldr	r3, [pc, #348]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a52      	ldr	r2, [pc, #328]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002bbc:	f043 0304 	orr.w	r3, r3, #4
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_LTDC_MspInit+0x234>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bfc:	230e      	movs	r3, #14
 8002bfe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c04:	4619      	mov	r1, r3
 8002c06:	4840      	ldr	r0, [pc, #256]	; (8002d08 <HAL_LTDC_MspInit+0x238>)
 8002c08:	f000 fd62 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002c0c:	f641 0358 	movw	r3, #6232	; 0x1858
 8002c10:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c1e:	230e      	movs	r3, #14
 8002c20:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c26:	4619      	mov	r1, r3
 8002c28:	4838      	ldr	r0, [pc, #224]	; (8002d0c <HAL_LTDC_MspInit+0x23c>)
 8002c2a:	f000 fd51 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c3e:	2309      	movs	r3, #9
 8002c40:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c46:	4619      	mov	r1, r3
 8002c48:	4831      	ldr	r0, [pc, #196]	; (8002d10 <HAL_LTDC_MspInit+0x240>)
 8002c4a:	f000 fd41 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002c4e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002c52:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c60:	230e      	movs	r3, #14
 8002c62:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4829      	ldr	r0, [pc, #164]	; (8002d10 <HAL_LTDC_MspInit+0x240>)
 8002c6c:	f000 fd30 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002c70:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002c74:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c82:	230e      	movs	r3, #14
 8002c84:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4821      	ldr	r0, [pc, #132]	; (8002d14 <HAL_LTDC_MspInit+0x244>)
 8002c8e:	f000 fd1f 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002c92:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ca4:	230e      	movs	r3, #14
 8002ca6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cac:	4619      	mov	r1, r3
 8002cae:	481a      	ldr	r0, [pc, #104]	; (8002d18 <HAL_LTDC_MspInit+0x248>)
 8002cb0:	f000 fd0e 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002cb4:	2348      	movs	r3, #72	; 0x48
 8002cb6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cc4:	230e      	movs	r3, #14
 8002cc6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4813      	ldr	r0, [pc, #76]	; (8002d1c <HAL_LTDC_MspInit+0x24c>)
 8002cd0:	f000 fcfe 	bl	80036d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002cd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002cd8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4808      	ldr	r0, [pc, #32]	; (8002d14 <HAL_LTDC_MspInit+0x244>)
 8002cf2:	f000 fced 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002cf6:	bf00      	nop
 8002cf8:	3768      	adds	r7, #104	; 0x68
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40016800 	.word	0x40016800
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00

08002d20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_SPI_MspInit+0x84>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d12c      	bne.n	8002d9c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_SPI_MspInit+0x88>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <HAL_SPI_MspInit+0x88>)
 8002d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d50:	6453      	str	r3, [r2, #68]	; 0x44
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_SPI_MspInit+0x88>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_SPI_MspInit+0x88>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_SPI_MspInit+0x88>)
 8002d68:	f043 0320 	orr.w	r3, r3, #32
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_SPI_MspInit+0x88>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d7a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d8c:	2305      	movs	r3, #5
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	4619      	mov	r1, r3
 8002d96:	4805      	ldr	r0, [pc, #20]	; (8002dac <HAL_SPI_MspInit+0x8c>)
 8002d98:	f000 fc9a 	bl	80036d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40015000 	.word	0x40015000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40021400 	.word	0x40021400

08002db0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <HAL_SPI_MspDeInit+0x30>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <HAL_SPI_MspDeInit+0x34>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	4a07      	ldr	r2, [pc, #28]	; (8002de4 <HAL_SPI_MspDeInit+0x34>)
 8002dc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dcc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002dce:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002dd2:	4805      	ldr	r0, [pc, #20]	; (8002de8 <HAL_SPI_MspDeInit+0x38>)
 8002dd4:	f000 fe28 	bl	8003a28 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40015000 	.word	0x40015000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40021400 	.word	0x40021400

08002dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <HAL_TIM_Base_MspInit+0x3c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d10d      	bne.n	8002e1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <HAL_TIM_Base_MspInit+0x40>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	4a09      	ldr	r2, [pc, #36]	; (8002e2c <HAL_TIM_Base_MspInit+0x40>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_TIM_Base_MspInit+0x40>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40014800 	.word	0x40014800
 8002e2c:	40023800 	.word	0x40023800

08002e30 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002e44:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_FMC_MspInit+0x104>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d16f      	bne.n	8002f2c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002e4c:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_FMC_MspInit+0x104>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <HAL_FMC_MspInit+0x108>)
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4a37      	ldr	r2, [pc, #220]	; (8002f38 <HAL_FMC_MspInit+0x108>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6393      	str	r3, [r2, #56]	; 0x38
 8002e62:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <HAL_FMC_MspInit+0x108>)
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002e6e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e72:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e80:	230c      	movs	r3, #12
 8002e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	4619      	mov	r1, r3
 8002e88:	482c      	ldr	r0, [pc, #176]	; (8002f3c <HAL_FMC_MspInit+0x10c>)
 8002e8a:	f000 fc21 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4826      	ldr	r0, [pc, #152]	; (8002f40 <HAL_FMC_MspInit+0x110>)
 8002ea8:	f000 fc12 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002eac:	f248 1333 	movw	r3, #33075	; 0x8133
 8002eb0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	481f      	ldr	r0, [pc, #124]	; (8002f44 <HAL_FMC_MspInit+0x114>)
 8002ec8:	f000 fc02 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002ecc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ed0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ede:	230c      	movs	r3, #12
 8002ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4818      	ldr	r0, [pc, #96]	; (8002f48 <HAL_FMC_MspInit+0x118>)
 8002ee8:	f000 fbf2 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002eec:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002ef0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002efe:	230c      	movs	r3, #12
 8002f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4811      	ldr	r0, [pc, #68]	; (8002f4c <HAL_FMC_MspInit+0x11c>)
 8002f08:	f000 fbe2 	bl	80036d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f0c:	2360      	movs	r3, #96	; 0x60
 8002f0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	1d3b      	adds	r3, r7, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	480a      	ldr	r0, [pc, #40]	; (8002f50 <HAL_FMC_MspInit+0x120>)
 8002f26:	f000 fbd3 	bl	80036d0 <HAL_GPIO_Init>
 8002f2a:	e000      	b.n	8002f2e <HAL_FMC_MspInit+0xfe>
    return;
 8002f2c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20025d48 	.word	0x20025d48
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	40021400 	.word	0x40021400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40021800 	.word	0x40021800
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40020c00 	.word	0x40020c00
 8002f50:	40020400 	.word	0x40020400

08002f54 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002f5c:	f7ff ff68 	bl	8002e30 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <NMI_Handler+0x4>

08002f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <HardFault_Handler+0x4>

08002f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <MemManage_Handler+0x4>

08002f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f98:	f000 f95c 	bl	8003254 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f9c:	f006 fa38 	bl	8009410 <xTaskGetSchedulerState>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d001      	beq.n	8002faa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002fa6:	f007 fa57 	bl	800a458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}

08002fae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  return 1;
 8002fb2:	2301      	movs	r3, #1
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <_kill>:

int _kill(int pid, int sig)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fc8:	f009 fb36 	bl	800c638 <__errno>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2216      	movs	r2, #22
 8002fd0:	601a      	str	r2, [r3, #0]
  return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <_exit>:

void _exit (int status)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ffe7 	bl	8002fbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ff0:	e7fe      	b.n	8002ff0 <_exit+0x12>

08002ff2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b086      	sub	sp, #24
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	e00a      	b.n	800301a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003004:	f3af 8000 	nop.w
 8003008:	4601      	mov	r1, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	60ba      	str	r2, [r7, #8]
 8003010:	b2ca      	uxtb	r2, r1
 8003012:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3301      	adds	r3, #1
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	dbf0      	blt.n	8003004 <_read+0x12>
  }

  return len;
 8003022:	687b      	ldr	r3, [r7, #4]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e009      	b.n	8003052 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	60ba      	str	r2, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	429a      	cmp	r2, r3
 8003058:	dbf1      	blt.n	800303e <_write+0x12>
  }
  return len;
 800305a:	687b      	ldr	r3, [r7, #4]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_close>:

int _close(int file)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800306c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800308c:	605a      	str	r2, [r3, #4]
  return 0;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <_isatty>:

int _isatty(int file)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030a4:	2301      	movs	r3, #1
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d4:	4a14      	ldr	r2, [pc, #80]	; (8003128 <_sbrk+0x5c>)
 80030d6:	4b15      	ldr	r3, [pc, #84]	; (800312c <_sbrk+0x60>)
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <_sbrk+0x64>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d102      	bne.n	80030ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <_sbrk+0x64>)
 80030ea:	4a12      	ldr	r2, [pc, #72]	; (8003134 <_sbrk+0x68>)
 80030ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <_sbrk+0x64>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d207      	bcs.n	800310c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030fc:	f009 fa9c 	bl	800c638 <__errno>
 8003100:	4603      	mov	r3, r0
 8003102:	220c      	movs	r2, #12
 8003104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003106:	f04f 33ff 	mov.w	r3, #4294967295
 800310a:	e009      	b.n	8003120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <_sbrk+0x64>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <_sbrk+0x64>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	4a05      	ldr	r2, [pc, #20]	; (8003130 <_sbrk+0x64>)
 800311c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311e:	68fb      	ldr	r3, [r7, #12]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20030000 	.word	0x20030000
 800312c:	00000400 	.word	0x00000400
 8003130:	20025d4c 	.word	0x20025d4c
 8003134:	2002b270 	.word	0x2002b270

08003138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <SystemInit+0x20>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <SystemInit+0x20>)
 8003144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800315c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003194 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003162:	490e      	ldr	r1, [pc, #56]	; (800319c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003164:	4a0e      	ldr	r2, [pc, #56]	; (80031a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003168:	e002      	b.n	8003170 <LoopCopyDataInit>

0800316a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800316a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800316c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316e:	3304      	adds	r3, #4

08003170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003174:	d3f9      	bcc.n	800316a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003176:	4a0b      	ldr	r2, [pc, #44]	; (80031a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003178:	4c0b      	ldr	r4, [pc, #44]	; (80031a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800317a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800317c:	e001      	b.n	8003182 <LoopFillZerobss>

0800317e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003180:	3204      	adds	r2, #4

08003182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003184:	d3fb      	bcc.n	800317e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003186:	f7ff ffd7 	bl	8003138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800318a:	f009 fa5b 	bl	800c644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800318e:	f7ff f88f 	bl	80022b0 <main>
  bx  lr    
 8003192:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003194:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800319c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80031a0:	0800ec88 	.word	0x0800ec88
  ldr r2, =_sbss
 80031a4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80031a8:	2002b26c 	.word	0x2002b26c

080031ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC_IRQHandler>
	...

080031b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <HAL_Init+0x40>)
 80031ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HAL_Init+0x40>)
 80031c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <HAL_Init+0x40>)
 80031d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d8:	2003      	movs	r0, #3
 80031da:	f000 f94f 	bl	800347c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031de:	200f      	movs	r0, #15
 80031e0:	f000 f808 	bl	80031f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031e4:	f7ff fbbc 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023c00 	.word	0x40023c00

080031f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_InitTick+0x54>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_InitTick+0x58>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320a:	fbb3 f3f1 	udiv	r3, r3, r1
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f975 	bl	8003502 <HAL_SYSTICK_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00e      	b.n	8003240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b0f      	cmp	r3, #15
 8003226:	d80a      	bhi.n	800323e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003228:	2200      	movs	r2, #0
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	f000 f92f 	bl	8003492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003234:	4a06      	ldr	r2, [pc, #24]	; (8003250 <HAL_InitTick+0x5c>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000010 	.word	0x20000010
 800324c:	20000018 	.word	0x20000018
 8003250:	20000014 	.word	0x20000014

08003254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_IncTick+0x20>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_IncTick+0x24>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4413      	add	r3, r2
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_IncTick+0x24>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000018 	.word	0x20000018
 8003278:	20025d50 	.word	0x20025d50

0800327c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return uwTick;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_GetTick+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	20025d50 	.word	0x20025d50

08003294 <__NVIC_SetPriorityGrouping>:
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b0:	4013      	ands	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <__NVIC_GetPriorityGrouping>:
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <__NVIC_GetPriorityGrouping+0x18>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 0307 	and.w	r3, r3, #7
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <__NVIC_EnableIRQ>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	2b00      	cmp	r3, #0
 8003308:	db0b      	blt.n	8003322 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <__NVIC_EnableIRQ+0x38>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2001      	movs	r0, #1
 800331a:	fa00 f202 	lsl.w	r2, r0, r2
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000e100 	.word	0xe000e100

08003334 <__NVIC_DisableIRQ>:
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db12      	blt.n	800336c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	490a      	ldr	r1, [pc, #40]	; (8003378 <__NVIC_DisableIRQ+0x44>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	3320      	adds	r3, #32
 800335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003360:	f3bf 8f4f 	dsb	sy
}
 8003364:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003366:	f3bf 8f6f 	isb	sy
}
 800336a:	bf00      	nop
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100

0800337c <__NVIC_SetPriority>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	6039      	str	r1, [r7, #0]
 8003386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338c:	2b00      	cmp	r3, #0
 800338e:	db0a      	blt.n	80033a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	b2da      	uxtb	r2, r3
 8003394:	490c      	ldr	r1, [pc, #48]	; (80033c8 <__NVIC_SetPriority+0x4c>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	440b      	add	r3, r1
 80033a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033a4:	e00a      	b.n	80033bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4908      	ldr	r1, [pc, #32]	; (80033cc <__NVIC_SetPriority+0x50>)
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	3b04      	subs	r3, #4
 80033b4:	0112      	lsls	r2, r2, #4
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	440b      	add	r3, r1
 80033ba:	761a      	strb	r2, [r3, #24]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000e100 	.word	0xe000e100
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b089      	sub	sp, #36	; 0x24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f1c3 0307 	rsb	r3, r3, #7
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	bf28      	it	cs
 80033ee:	2304      	movcs	r3, #4
 80033f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3304      	adds	r3, #4
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	d902      	bls.n	8003400 <NVIC_EncodePriority+0x30>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3b03      	subs	r3, #3
 80033fe:	e000      	b.n	8003402 <NVIC_EncodePriority+0x32>
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	f04f 32ff 	mov.w	r2, #4294967295
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003418:	f04f 31ff 	mov.w	r1, #4294967295
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43d9      	mvns	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003428:	4313      	orrs	r3, r2
         );
}
 800342a:	4618      	mov	r0, r3
 800342c:	3724      	adds	r7, #36	; 0x24
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003448:	d301      	bcc.n	800344e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344a:	2301      	movs	r3, #1
 800344c:	e00f      	b.n	800346e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <SysTick_Config+0x40>)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3b01      	subs	r3, #1
 8003454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003456:	210f      	movs	r1, #15
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f7ff ff8e 	bl	800337c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <SysTick_Config+0x40>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <SysTick_Config+0x40>)
 8003468:	2207      	movs	r2, #7
 800346a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	e000e010 	.word	0xe000e010

0800347c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff05 	bl	8003294 <__NVIC_SetPriorityGrouping>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034a4:	f7ff ff1a 	bl	80032dc <__NVIC_GetPriorityGrouping>
 80034a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	6978      	ldr	r0, [r7, #20]
 80034b0:	f7ff ff8e 	bl	80033d0 <NVIC_EncodePriority>
 80034b4:	4602      	mov	r2, r0
 80034b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff ff5d 	bl	800337c <__NVIC_SetPriority>
}
 80034c2:	bf00      	nop
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff0d 	bl	80032f8 <__NVIC_EnableIRQ>
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff1d 	bl	8003334 <__NVIC_DisableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff94 	bl	8003438 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e03b      	b.n	80035a4 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fa39 	bl	80029b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356a:	f023 0107 	bic.w	r1, r3, #7
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003584:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68d1      	ldr	r1, [r2, #12]
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	6812      	ldr	r2, [r2, #0]
 8003590:	430b      	orrs	r3, r1
 8003592:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_DMA2D_ConfigLayer+0x20>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e079      	b.n	80036c0 <HAL_DMA2D_ConfigLayer+0x114>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	3318      	adds	r3, #24
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	4313      	orrs	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80035f6:	4b35      	ldr	r3, [pc, #212]	; (80036cc <HAL_DMA2D_ConfigLayer+0x120>)
 80035f8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b0a      	cmp	r3, #10
 8003600:	d003      	beq.n	800360a <HAL_DMA2D_ConfigLayer+0x5e>
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b09      	cmp	r3, #9
 8003608:	d107      	bne.n	800361a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e005      	b.n	8003626 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	061b      	lsls	r3, r3, #24
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d120      	bne.n	800366e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	ea02 0103 	and.w	r1, r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	430a      	orrs	r2, r1
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b0a      	cmp	r3, #10
 8003654:	d003      	beq.n	800365e <HAL_DMA2D_ConfigLayer+0xb2>
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b09      	cmp	r3, #9
 800365c:	d127      	bne.n	80036ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	e01f      	b.n	80036ae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	43db      	mvns	r3, r3
 8003678:	ea02 0103 	and.w	r1, r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	430a      	orrs	r2, r1
 8003684:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b0a      	cmp	r3, #10
 8003696:	d003      	beq.n	80036a0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b09      	cmp	r3, #9
 800369e:	d106      	bne.n	80036ae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80036ac:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	ff03000f 	.word	0xff03000f

080036d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
 80036ea:	e177      	b.n	80039dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036ec:	2201      	movs	r2, #1
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4013      	ands	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	429a      	cmp	r2, r3
 8003706:	f040 8166 	bne.w	80039d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d005      	beq.n	8003722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371e:	2b02      	cmp	r3, #2
 8003720:	d130      	bne.n	8003784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	2203      	movs	r2, #3
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003758:	2201      	movs	r2, #1
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 0201 	and.w	r2, r3, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b03      	cmp	r3, #3
 800378e:	d017      	beq.n	80037c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2203      	movs	r2, #3
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d123      	bne.n	8003814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	08da      	lsrs	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3208      	adds	r2, #8
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	220f      	movs	r2, #15
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	69b9      	ldr	r1, [r7, #24]
 8003810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0203 	and.w	r2, r3, #3
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80c0 	beq.w	80039d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <HAL_GPIO_Init+0x324>)
 800385c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385e:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <HAL_GPIO_Init+0x324>)
 8003860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003864:	6453      	str	r3, [r2, #68]	; 0x44
 8003866:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_GPIO_Init+0x324>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003872:	4a61      	ldr	r2, [pc, #388]	; (80039f8 <HAL_GPIO_Init+0x328>)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	089b      	lsrs	r3, r3, #2
 8003878:	3302      	adds	r3, #2
 800387a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	220f      	movs	r2, #15
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a58      	ldr	r2, [pc, #352]	; (80039fc <HAL_GPIO_Init+0x32c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d037      	beq.n	800390e <HAL_GPIO_Init+0x23e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a57      	ldr	r2, [pc, #348]	; (8003a00 <HAL_GPIO_Init+0x330>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d031      	beq.n	800390a <HAL_GPIO_Init+0x23a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a56      	ldr	r2, [pc, #344]	; (8003a04 <HAL_GPIO_Init+0x334>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02b      	beq.n	8003906 <HAL_GPIO_Init+0x236>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a55      	ldr	r2, [pc, #340]	; (8003a08 <HAL_GPIO_Init+0x338>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d025      	beq.n	8003902 <HAL_GPIO_Init+0x232>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a54      	ldr	r2, [pc, #336]	; (8003a0c <HAL_GPIO_Init+0x33c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01f      	beq.n	80038fe <HAL_GPIO_Init+0x22e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a53      	ldr	r2, [pc, #332]	; (8003a10 <HAL_GPIO_Init+0x340>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d019      	beq.n	80038fa <HAL_GPIO_Init+0x22a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a52      	ldr	r2, [pc, #328]	; (8003a14 <HAL_GPIO_Init+0x344>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_GPIO_Init+0x226>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a51      	ldr	r2, [pc, #324]	; (8003a18 <HAL_GPIO_Init+0x348>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00d      	beq.n	80038f2 <HAL_GPIO_Init+0x222>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a50      	ldr	r2, [pc, #320]	; (8003a1c <HAL_GPIO_Init+0x34c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_GPIO_Init+0x21e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4f      	ldr	r2, [pc, #316]	; (8003a20 <HAL_GPIO_Init+0x350>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_GPIO_Init+0x21a>
 80038e6:	2309      	movs	r3, #9
 80038e8:	e012      	b.n	8003910 <HAL_GPIO_Init+0x240>
 80038ea:	230a      	movs	r3, #10
 80038ec:	e010      	b.n	8003910 <HAL_GPIO_Init+0x240>
 80038ee:	2308      	movs	r3, #8
 80038f0:	e00e      	b.n	8003910 <HAL_GPIO_Init+0x240>
 80038f2:	2307      	movs	r3, #7
 80038f4:	e00c      	b.n	8003910 <HAL_GPIO_Init+0x240>
 80038f6:	2306      	movs	r3, #6
 80038f8:	e00a      	b.n	8003910 <HAL_GPIO_Init+0x240>
 80038fa:	2305      	movs	r3, #5
 80038fc:	e008      	b.n	8003910 <HAL_GPIO_Init+0x240>
 80038fe:	2304      	movs	r3, #4
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x240>
 8003902:	2303      	movs	r3, #3
 8003904:	e004      	b.n	8003910 <HAL_GPIO_Init+0x240>
 8003906:	2302      	movs	r3, #2
 8003908:	e002      	b.n	8003910 <HAL_GPIO_Init+0x240>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_GPIO_Init+0x240>
 800390e:	2300      	movs	r3, #0
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	f002 0203 	and.w	r2, r2, #3
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4093      	lsls	r3, r2
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4313      	orrs	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003920:	4935      	ldr	r1, [pc, #212]	; (80039f8 <HAL_GPIO_Init+0x328>)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_GPIO_Init+0x354>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	43db      	mvns	r3, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4013      	ands	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003952:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <HAL_GPIO_Init+0x354>)
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003958:	4b32      	ldr	r3, [pc, #200]	; (8003a24 <HAL_GPIO_Init+0x354>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	43db      	mvns	r3, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4013      	ands	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800397c:	4a29      	ldr	r2, [pc, #164]	; (8003a24 <HAL_GPIO_Init+0x354>)
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003982:	4b28      	ldr	r3, [pc, #160]	; (8003a24 <HAL_GPIO_Init+0x354>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	43db      	mvns	r3, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4013      	ands	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a6:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_GPIO_Init+0x354>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_GPIO_Init+0x354>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_GPIO_Init+0x354>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3301      	adds	r3, #1
 80039da:	61fb      	str	r3, [r7, #28]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b0f      	cmp	r3, #15
 80039e0:	f67f ae84 	bls.w	80036ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40020400 	.word	0x40020400
 8003a04:	40020800 	.word	0x40020800
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40021400 	.word	0x40021400
 8003a14:	40021800 	.word	0x40021800
 8003a18:	40021c00 	.word	0x40021c00
 8003a1c:	40022000 	.word	0x40022000
 8003a20:	40022400 	.word	0x40022400
 8003a24:	40013c00 	.word	0x40013c00

08003a28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	e0d9      	b.n	8003bf8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a44:	2201      	movs	r2, #1
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	f040 80c9 	bne.w	8003bf2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a60:	4a6b      	ldr	r2, [pc, #428]	; (8003c10 <HAL_GPIO_DeInit+0x1e8>)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a63      	ldr	r2, [pc, #396]	; (8003c14 <HAL_GPIO_DeInit+0x1ec>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d037      	beq.n	8003afa <HAL_GPIO_DeInit+0xd2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a62      	ldr	r2, [pc, #392]	; (8003c18 <HAL_GPIO_DeInit+0x1f0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_GPIO_DeInit+0xce>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a61      	ldr	r2, [pc, #388]	; (8003c1c <HAL_GPIO_DeInit+0x1f4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02b      	beq.n	8003af2 <HAL_GPIO_DeInit+0xca>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a60      	ldr	r2, [pc, #384]	; (8003c20 <HAL_GPIO_DeInit+0x1f8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d025      	beq.n	8003aee <HAL_GPIO_DeInit+0xc6>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a5f      	ldr	r2, [pc, #380]	; (8003c24 <HAL_GPIO_DeInit+0x1fc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d01f      	beq.n	8003aea <HAL_GPIO_DeInit+0xc2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a5e      	ldr	r2, [pc, #376]	; (8003c28 <HAL_GPIO_DeInit+0x200>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d019      	beq.n	8003ae6 <HAL_GPIO_DeInit+0xbe>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a5d      	ldr	r2, [pc, #372]	; (8003c2c <HAL_GPIO_DeInit+0x204>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_DeInit+0xba>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a5c      	ldr	r2, [pc, #368]	; (8003c30 <HAL_GPIO_DeInit+0x208>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00d      	beq.n	8003ade <HAL_GPIO_DeInit+0xb6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a5b      	ldr	r2, [pc, #364]	; (8003c34 <HAL_GPIO_DeInit+0x20c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <HAL_GPIO_DeInit+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a5a      	ldr	r2, [pc, #360]	; (8003c38 <HAL_GPIO_DeInit+0x210>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_GPIO_DeInit+0xae>
 8003ad2:	2309      	movs	r3, #9
 8003ad4:	e012      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003ad6:	230a      	movs	r3, #10
 8003ad8:	e010      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003ada:	2308      	movs	r3, #8
 8003adc:	e00e      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003ade:	2307      	movs	r3, #7
 8003ae0:	e00c      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003ae2:	2306      	movs	r3, #6
 8003ae4:	e00a      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003ae6:	2305      	movs	r3, #5
 8003ae8:	e008      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003aea:	2304      	movs	r3, #4
 8003aec:	e006      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003aee:	2303      	movs	r3, #3
 8003af0:	e004      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e002      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_GPIO_DeInit+0xd4>
 8003afa:	2300      	movs	r3, #0
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	f002 0203 	and.w	r2, r2, #3
 8003b02:	0092      	lsls	r2, r2, #2
 8003b04:	4093      	lsls	r3, r2
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d132      	bne.n	8003b72 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	4949      	ldr	r1, [pc, #292]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b1a:	4b48      	ldr	r3, [pc, #288]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	4946      	ldr	r1, [pc, #280]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b28:	4b44      	ldr	r3, [pc, #272]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	4942      	ldr	r1, [pc, #264]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b36:	4b41      	ldr	r3, [pc, #260]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	493f      	ldr	r1, [pc, #252]	; (8003c3c <HAL_GPIO_DeInit+0x214>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b54:	4a2e      	ldr	r2, [pc, #184]	; (8003c10 <HAL_GPIO_DeInit+0x1e8>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	43da      	mvns	r2, r3
 8003b64:	482a      	ldr	r0, [pc, #168]	; (8003c10 <HAL_GPIO_DeInit+0x1e8>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	400a      	ands	r2, r1
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	2103      	movs	r1, #3
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	401a      	ands	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	08da      	lsrs	r2, r3, #3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3208      	adds	r2, #8
 8003b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	08d2      	lsrs	r2, r2, #3
 8003ba8:	4019      	ands	r1, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3208      	adds	r2, #8
 8003bae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2103      	movs	r1, #3
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	2103      	movs	r1, #3
 8003be6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	401a      	ands	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b0f      	cmp	r3, #15
 8003bfc:	f67f af22 	bls.w	8003a44 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c00:	bf00      	nop
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40021c00 	.word	0x40021c00
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40022400 	.word	0x40022400
 8003c3c:	40013c00 	.word	0x40013c00

08003c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	887b      	ldrh	r3, [r7, #2]
 8003c52:	4013      	ands	r3, r2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e001      	b.n	8003c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c80:	787b      	ldrb	r3, [r7, #1]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c8c:	e003      	b.n	8003c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c8e:	887b      	ldrh	r3, [r7, #2]
 8003c90:	041a      	lsls	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	619a      	str	r2, [r3, #24]
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e12b      	b.n	8003f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fe fe96 	bl	80029fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	; 0x24
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d08:	f001 f8a2 	bl	8004e50 <HAL_RCC_GetPCLK1Freq>
 8003d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4a81      	ldr	r2, [pc, #516]	; (8003f18 <HAL_I2C_Init+0x274>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d807      	bhi.n	8003d28 <HAL_I2C_Init+0x84>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a80      	ldr	r2, [pc, #512]	; (8003f1c <HAL_I2C_Init+0x278>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	bf94      	ite	ls
 8003d20:	2301      	movls	r3, #1
 8003d22:	2300      	movhi	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	e006      	b.n	8003d36 <HAL_I2C_Init+0x92>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a7d      	ldr	r2, [pc, #500]	; (8003f20 <HAL_I2C_Init+0x27c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	bf94      	ite	ls
 8003d30:	2301      	movls	r3, #1
 8003d32:	2300      	movhi	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0e7      	b.n	8003f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a78      	ldr	r2, [pc, #480]	; (8003f24 <HAL_I2C_Init+0x280>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	0c9b      	lsrs	r3, r3, #18
 8003d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a6a      	ldr	r2, [pc, #424]	; (8003f18 <HAL_I2C_Init+0x274>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d802      	bhi.n	8003d78 <HAL_I2C_Init+0xd4>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	3301      	adds	r3, #1
 8003d76:	e009      	b.n	8003d8c <HAL_I2C_Init+0xe8>
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	4a69      	ldr	r2, [pc, #420]	; (8003f28 <HAL_I2C_Init+0x284>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	495c      	ldr	r1, [pc, #368]	; (8003f18 <HAL_I2C_Init+0x274>)
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d819      	bhi.n	8003de0 <HAL_I2C_Init+0x13c>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	1e59      	subs	r1, r3, #1
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dba:	1c59      	adds	r1, r3, #1
 8003dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <HAL_I2C_Init+0x138>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1e59      	subs	r1, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dda:	e051      	b.n	8003e80 <HAL_I2C_Init+0x1dc>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	e04f      	b.n	8003e80 <HAL_I2C_Init+0x1dc>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d111      	bne.n	8003e0c <HAL_I2C_Init+0x168>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1e58      	subs	r0, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6859      	ldr	r1, [r3, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	440b      	add	r3, r1
 8003df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e012      	b.n	8003e32 <HAL_I2C_Init+0x18e>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1e58      	subs	r0, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	460b      	mov	r3, r1
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	0099      	lsls	r1, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e22:	3301      	adds	r3, #1
 8003e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_I2C_Init+0x196>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e022      	b.n	8003e80 <HAL_I2C_Init+0x1dc>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10e      	bne.n	8003e60 <HAL_I2C_Init+0x1bc>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1e58      	subs	r0, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6859      	ldr	r1, [r3, #4]
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	440b      	add	r3, r1
 8003e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e54:	3301      	adds	r3, #1
 8003e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5e:	e00f      	b.n	8003e80 <HAL_I2C_Init+0x1dc>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1e58      	subs	r0, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	0099      	lsls	r1, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	6809      	ldr	r1, [r1, #0]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6911      	ldr	r1, [r2, #16]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	68d2      	ldr	r2, [r2, #12]
 8003eba:	4311      	orrs	r1, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6812      	ldr	r2, [r2, #0]
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0201 	orr.w	r2, r2, #1
 8003eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	000186a0 	.word	0x000186a0
 8003f1c:	001e847f 	.word	0x001e847f
 8003f20:	003d08ff 	.word	0x003d08ff
 8003f24:	431bde83 	.word	0x431bde83
 8003f28:	10624dd3 	.word	0x10624dd3

08003f2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	d129      	bne.n	8003f96 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2224      	movs	r2, #36	; 0x24
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0210 	bic.w	r2, r2, #16
 8003f68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0201 	orr.w	r2, r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	d12a      	bne.n	8004014 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2224      	movs	r2, #36	; 0x24
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003fde:	89fb      	ldrh	r3, [r7, #14]
 8003fe0:	f023 030f 	bic.w	r3, r3, #15
 8003fe4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	89fb      	ldrh	r3, [r7, #14]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	89fa      	ldrh	r2, [r7, #14]
 8003ff6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e0bf      	b.n	80041b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fe fd40 	bl	8002ad0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004066:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800407c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6899      	ldr	r1, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 8004098:	400b      	ands	r3, r1
 800409a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6899      	ldr	r1, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699a      	ldr	r2, [r3, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68d9      	ldr	r1, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 80040c6:	400b      	ands	r3, r1
 80040c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68d9      	ldr	r1, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6919      	ldr	r1, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b33      	ldr	r3, [pc, #204]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 80040f4:	400b      	ands	r3, r1
 80040f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6919      	ldr	r1, [r3, #16]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6959      	ldr	r1, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <HAL_LTDC_Init+0x19c>)
 8004122:	400b      	ands	r3, r1
 8004124:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6959      	ldr	r1, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0206 	orr.w	r2, r2, #6
 8004192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	f000f800 	.word	0xf000f800

080041c4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041c4:	b5b0      	push	{r4, r5, r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d101      	bne.n	80041de <HAL_LTDC_ConfigLayer+0x1a>
 80041da:	2302      	movs	r3, #2
 80041dc:	e02c      	b.n	8004238 <HAL_LTDC_ConfigLayer+0x74>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2134      	movs	r1, #52	; 0x34
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4614      	mov	r4, r2
 8004202:	461d      	mov	r5, r3
 8004204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800420c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f811 	bl	8004240 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bdb0      	pop	{r4, r5, r7, pc}

08004240 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	4413      	add	r3, r2
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4413      	add	r3, r2
 800426e:	3384      	adds	r3, #132	; 0x84
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	4611      	mov	r1, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	01d2      	lsls	r2, r2, #7
 800427c:	440a      	add	r2, r1
 800427e:	3284      	adds	r2, #132	; 0x84
 8004280:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004284:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004296:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004298:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4619      	mov	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	01db      	lsls	r3, r3, #7
 80042a4:	440b      	add	r3, r1
 80042a6:	3384      	adds	r3, #132	; 0x84
 80042a8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80042ae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042be:	4413      	add	r3, r2
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	01db      	lsls	r3, r3, #7
 80042ce:	4413      	add	r3, r2
 80042d0:	3384      	adds	r3, #132	; 0x84
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	4611      	mov	r1, r2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	01d2      	lsls	r2, r2, #7
 80042de:	440a      	add	r2, r1
 80042e0:	3284      	adds	r2, #132	; 0x84
 80042e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042f6:	4413      	add	r3, r2
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4619      	mov	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	01db      	lsls	r3, r3, #7
 8004304:	440b      	add	r3, r1
 8004306:	3384      	adds	r3, #132	; 0x84
 8004308:	4619      	mov	r1, r3
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	01db      	lsls	r3, r3, #7
 800431a:	4413      	add	r3, r2
 800431c:	3384      	adds	r3, #132	; 0x84
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	4611      	mov	r1, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	01d2      	lsls	r2, r2, #7
 800432a:	440a      	add	r2, r1
 800432c:	3284      	adds	r2, #132	; 0x84
 800432e:	f023 0307 	bic.w	r3, r3, #7
 8004332:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	01db      	lsls	r3, r3, #7
 800433e:	4413      	add	r3, r2
 8004340:	3384      	adds	r3, #132	; 0x84
 8004342:	461a      	mov	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004350:	021b      	lsls	r3, r3, #8
 8004352:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	01db      	lsls	r3, r3, #7
 8004370:	4413      	add	r3, r2
 8004372:	3384      	adds	r3, #132	; 0x84
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	01db      	lsls	r3, r3, #7
 8004380:	4413      	add	r3, r2
 8004382:	3384      	adds	r3, #132	; 0x84
 8004384:	461a      	mov	r2, r3
 8004386:	2300      	movs	r3, #0
 8004388:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004390:	461a      	mov	r2, r3
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	431a      	orrs	r2, r3
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	431a      	orrs	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4619      	mov	r1, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	01db      	lsls	r3, r3, #7
 80043a4:	440b      	add	r3, r1
 80043a6:	3384      	adds	r3, #132	; 0x84
 80043a8:	4619      	mov	r1, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	01db      	lsls	r3, r3, #7
 80043ba:	4413      	add	r3, r2
 80043bc:	3384      	adds	r3, #132	; 0x84
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4611      	mov	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	01d2      	lsls	r2, r2, #7
 80043ca:	440a      	add	r2, r1
 80043cc:	3284      	adds	r2, #132	; 0x84
 80043ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	01db      	lsls	r3, r3, #7
 80043de:	4413      	add	r3, r2
 80043e0:	3384      	adds	r3, #132	; 0x84
 80043e2:	461a      	mov	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	01db      	lsls	r3, r3, #7
 80043f4:	4413      	add	r3, r2
 80043f6:	3384      	adds	r3, #132	; 0x84
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	6812      	ldr	r2, [r2, #0]
 80043fe:	4611      	mov	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	01d2      	lsls	r2, r2, #7
 8004404:	440a      	add	r2, r1
 8004406:	3284      	adds	r2, #132	; 0x84
 8004408:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800440c:	f023 0307 	bic.w	r3, r3, #7
 8004410:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6809      	ldr	r1, [r1, #0]
 800441e:	4608      	mov	r0, r1
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	01c9      	lsls	r1, r1, #7
 8004424:	4401      	add	r1, r0
 8004426:	3184      	adds	r1, #132	; 0x84
 8004428:	4313      	orrs	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	01db      	lsls	r3, r3, #7
 8004436:	4413      	add	r3, r2
 8004438:	3384      	adds	r3, #132	; 0x84
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	01db      	lsls	r3, r3, #7
 8004446:	4413      	add	r3, r2
 8004448:	3384      	adds	r3, #132	; 0x84
 800444a:	461a      	mov	r2, r3
 800444c:	2300      	movs	r3, #0
 800444e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	01db      	lsls	r3, r3, #7
 800445a:	4413      	add	r3, r2
 800445c:	3384      	adds	r3, #132	; 0x84
 800445e:	461a      	mov	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800446e:	2304      	movs	r3, #4
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e01b      	b.n	80044ac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d102      	bne.n	8004482 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800447c:	2303      	movs	r3, #3
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	e014      	b.n	80044ac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b04      	cmp	r3, #4
 8004488:	d00b      	beq.n	80044a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800448e:	2b02      	cmp	r3, #2
 8004490:	d007      	beq.n	80044a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004496:	2b03      	cmp	r3, #3
 8004498:	d003      	beq.n	80044a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800449e:	2b07      	cmp	r3, #7
 80044a0:	d102      	bne.n	80044a8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80044a2:	2302      	movs	r3, #2
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e001      	b.n	80044ac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	01db      	lsls	r3, r3, #7
 80044b6:	4413      	add	r3, r2
 80044b8:	3384      	adds	r3, #132	; 0x84
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	4611      	mov	r1, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	01d2      	lsls	r2, r2, #7
 80044c6:	440a      	add	r2, r1
 80044c8:	3284      	adds	r2, #132	; 0x84
 80044ca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80044ce:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	1acb      	subs	r3, r1, r3
 80044e6:	69f9      	ldr	r1, [r7, #28]
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044ee:	68f9      	ldr	r1, [r7, #12]
 80044f0:	6809      	ldr	r1, [r1, #0]
 80044f2:	4608      	mov	r0, r1
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	01c9      	lsls	r1, r1, #7
 80044f8:	4401      	add	r1, r0
 80044fa:	3184      	adds	r1, #132	; 0x84
 80044fc:	4313      	orrs	r3, r2
 80044fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	01db      	lsls	r3, r3, #7
 800450a:	4413      	add	r3, r2
 800450c:	3384      	adds	r3, #132	; 0x84
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	4611      	mov	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	01d2      	lsls	r2, r2, #7
 800451a:	440a      	add	r2, r1
 800451c:	3284      	adds	r2, #132	; 0x84
 800451e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004522:	f023 0307 	bic.w	r3, r3, #7
 8004526:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	01db      	lsls	r3, r3, #7
 8004532:	4413      	add	r3, r2
 8004534:	3384      	adds	r3, #132	; 0x84
 8004536:	461a      	mov	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	01db      	lsls	r3, r3, #7
 8004548:	4413      	add	r3, r2
 800454a:	3384      	adds	r3, #132	; 0x84
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	4611      	mov	r1, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	01d2      	lsls	r2, r2, #7
 8004558:	440a      	add	r2, r1
 800455a:	3284      	adds	r2, #132	; 0x84
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6013      	str	r3, [r2, #0]
}
 8004562:	bf00      	nop
 8004564:	3724      	adds	r7, #36	; 0x24
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e267      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d075      	beq.n	800467a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458e:	4b88      	ldr	r3, [pc, #544]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
 8004596:	2b04      	cmp	r3, #4
 8004598:	d00c      	beq.n	80045b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d112      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a6:	4b82      	ldr	r3, [pc, #520]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b2:	d10b      	bne.n	80045cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b4:	4b7e      	ldr	r3, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d05b      	beq.n	8004678 <HAL_RCC_OscConfig+0x108>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d157      	bne.n	8004678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e242      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d106      	bne.n	80045e4 <HAL_RCC_OscConfig+0x74>
 80045d6:	4b76      	ldr	r3, [pc, #472]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e01d      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045ec:	d10c      	bne.n	8004608 <HAL_RCC_OscConfig+0x98>
 80045ee:	4b70      	ldr	r3, [pc, #448]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6f      	ldr	r2, [pc, #444]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	4b6d      	ldr	r3, [pc, #436]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a6c      	ldr	r2, [pc, #432]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_OscConfig+0xb0>
 8004608:	4b69      	ldr	r3, [pc, #420]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a68      	ldr	r2, [pc, #416]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a65      	ldr	r2, [pc, #404]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800461a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d013      	beq.n	8004650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fe fe28 	bl	800327c <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004630:	f7fe fe24 	bl	800327c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e207      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004642:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0xc0>
 800464e:	e014      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fe fe14 	bl	800327c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004658:	f7fe fe10 	bl	800327c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	; 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e1f3      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466a:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0xe8>
 8004676:	e000      	b.n	800467a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d063      	beq.n	800474e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004686:	4b4a      	ldr	r3, [pc, #296]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b47      	ldr	r3, [pc, #284]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800469a:	2b08      	cmp	r3, #8
 800469c:	d11c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469e:	4b44      	ldr	r3, [pc, #272]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d116      	bne.n	80046d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e1c7      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c2:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4937      	ldr	r1, [pc, #220]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d6:	e03a      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d020      	beq.n	8004722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e0:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <HAL_RCC_OscConfig+0x244>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e6:	f7fe fdc9 	bl	800327c <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ee:	f7fe fdc5 	bl	800327c <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e1a8      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	4b28      	ldr	r3, [pc, #160]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4925      	ldr	r1, [pc, #148]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
 8004720:	e015      	b.n	800474e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCC_OscConfig+0x244>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fe fda8 	bl	800327c <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004730:	f7fe fda4 	bl	800327c <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e187      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d036      	beq.n	80047c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_RCC_OscConfig+0x248>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fe fd88 	bl	800327c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004770:	f7fe fd84 	bl	800327c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e167      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004782:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <HAL_RCC_OscConfig+0x240>)
 8004784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0x200>
 800478e:	e01b      	b.n	80047c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCC_OscConfig+0x248>)
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004796:	f7fe fd71 	bl	800327c <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	e00e      	b.n	80047bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479e:	f7fe fd6d 	bl	800327c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d907      	bls.n	80047bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e150      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
 80047b0:	40023800 	.word	0x40023800
 80047b4:	42470000 	.word	0x42470000
 80047b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1ea      	bne.n	800479e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8097 	beq.w	8004904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047da:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10f      	bne.n	8004806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	2300      	movs	r3, #0
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	4b7d      	ldr	r3, [pc, #500]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a7c      	ldr	r2, [pc, #496]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
 80047f6:	4b7a      	ldr	r3, [pc, #488]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fe:	60bb      	str	r3, [r7, #8]
 8004800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004802:	2301      	movs	r3, #1
 8004804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004806:	4b77      	ldr	r3, [pc, #476]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d118      	bne.n	8004844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004812:	4b74      	ldr	r3, [pc, #464]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a73      	ldr	r2, [pc, #460]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 8004818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481e:	f7fe fd2d 	bl	800327c <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004826:	f7fe fd29 	bl	800327c <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e10c      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	4b6a      	ldr	r3, [pc, #424]	; (80049e4 <HAL_RCC_OscConfig+0x474>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d106      	bne.n	800485a <HAL_RCC_OscConfig+0x2ea>
 800484c:	4b64      	ldr	r3, [pc, #400]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800484e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004850:	4a63      	ldr	r2, [pc, #396]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6713      	str	r3, [r2, #112]	; 0x70
 8004858:	e01c      	b.n	8004894 <HAL_RCC_OscConfig+0x324>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b05      	cmp	r3, #5
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x30c>
 8004862:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	4a5e      	ldr	r2, [pc, #376]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	6713      	str	r3, [r2, #112]	; 0x70
 800486e:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004872:	4a5b      	ldr	r2, [pc, #364]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	6713      	str	r3, [r2, #112]	; 0x70
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0x324>
 800487c:	4b58      	ldr	r3, [pc, #352]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	4a57      	ldr	r2, [pc, #348]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	6713      	str	r3, [r2, #112]	; 0x70
 8004888:	4b55      	ldr	r3, [pc, #340]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	4a54      	ldr	r2, [pc, #336]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800488e:	f023 0304 	bic.w	r3, r3, #4
 8004892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d015      	beq.n	80048c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fe fcee 	bl	800327c <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a2:	e00a      	b.n	80048ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a4:	f7fe fcea 	bl	800327c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e0cb      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ba:	4b49      	ldr	r3, [pc, #292]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0ee      	beq.n	80048a4 <HAL_RCC_OscConfig+0x334>
 80048c6:	e014      	b.n	80048f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c8:	f7fe fcd8 	bl	800327c <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ce:	e00a      	b.n	80048e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d0:	f7fe fcd4 	bl	800327c <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f241 3288 	movw	r2, #5000	; 0x1388
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0b5      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e6:	4b3e      	ldr	r3, [pc, #248]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1ee      	bne.n	80048d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d105      	bne.n	8004904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f8:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	4a38      	ldr	r2, [pc, #224]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80048fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80a1 	beq.w	8004a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800490e:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
 8004916:	2b08      	cmp	r3, #8
 8004918:	d05c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	2b02      	cmp	r3, #2
 8004920:	d141      	bne.n	80049a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004922:	4b31      	ldr	r3, [pc, #196]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fe fca8 	bl	800327c <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004930:	f7fe fca4 	bl	800327c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e087      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	4b27      	ldr	r3, [pc, #156]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	019b      	lsls	r3, r3, #6
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	3b01      	subs	r3, #1
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	061b      	lsls	r3, r3, #24
 8004972:	491b      	ldr	r1, [pc, #108]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497e:	f7fe fc7d 	bl	800327c <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004986:	f7fe fc79 	bl	800327c <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e05c      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004998:	4b11      	ldr	r3, [pc, #68]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d0f0      	beq.n	8004986 <HAL_RCC_OscConfig+0x416>
 80049a4:	e054      	b.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <HAL_RCC_OscConfig+0x478>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ac:	f7fe fc66 	bl	800327c <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fe fc62 	bl	800327c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e045      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_OscConfig+0x470>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x444>
 80049d2:	e03d      	b.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e038      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
 80049e0:	40023800 	.word	0x40023800
 80049e4:	40007000 	.word	0x40007000
 80049e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049ec:	4b1b      	ldr	r3, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x4ec>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d028      	beq.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d121      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d11a      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d111      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	3b01      	subs	r3, #1
 8004a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800

08004a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0cc      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a74:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d90c      	bls.n	8004a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b65      	ldr	r3, [pc, #404]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8a:	4b63      	ldr	r3, [pc, #396]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d001      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0b8      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab4:	4b59      	ldr	r3, [pc, #356]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4a58      	ldr	r2, [pc, #352]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004acc:	4b53      	ldr	r3, [pc, #332]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad8:	4b50      	ldr	r3, [pc, #320]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	494d      	ldr	r1, [pc, #308]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d044      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	4b47      	ldr	r3, [pc, #284]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d119      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e07f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d003      	beq.n	8004b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e06f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2e:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e067      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	4b37      	ldr	r3, [pc, #220]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 0203 	bic.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4934      	ldr	r1, [pc, #208]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b50:	f7fe fb94 	bl	800327c <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fe fb90 	bl	800327c <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e04f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4b2b      	ldr	r3, [pc, #172]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 020c 	and.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1eb      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b80:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d20c      	bcs.n	8004ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8e:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b96:	4b20      	ldr	r3, [pc, #128]	; (8004c18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e032      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb4:	4b19      	ldr	r3, [pc, #100]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4916      	ldr	r1, [pc, #88]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	490e      	ldr	r1, [pc, #56]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be6:	f000 f821 	bl	8004c2c <HAL_RCC_GetSysClockFreq>
 8004bea:	4602      	mov	r2, r0
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	490a      	ldr	r1, [pc, #40]	; (8004c20 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf8:	5ccb      	ldrb	r3, [r1, r3]
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	4a09      	ldr	r2, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1c4>)
 8004c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c02:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <HAL_RCC_ClockConfig+0x1c8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe faf4 	bl	80031f4 <HAL_InitTick>

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023c00 	.word	0x40023c00
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	0800ebdc 	.word	0x0800ebdc
 8004c24:	20000010 	.word	0x20000010
 8004c28:	20000014 	.word	0x20000014

08004c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c30:	b094      	sub	sp, #80	; 0x50
 8004c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
 8004c38:	2300      	movs	r3, #0
 8004c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c44:	4b79      	ldr	r3, [pc, #484]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d00d      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0x40>
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	f200 80e1 	bhi.w	8004e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x34>
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c5e:	e0db      	b.n	8004e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c60:	4b73      	ldr	r3, [pc, #460]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c64:	e0db      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c66:	4b73      	ldr	r3, [pc, #460]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c6a:	e0d8      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c6c:	4b6f      	ldr	r3, [pc, #444]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c76:	4b6d      	ldr	r3, [pc, #436]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d063      	beq.n	8004d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4b6a      	ldr	r3, [pc, #424]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	2200      	movs	r2, #0
 8004c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c94:	633b      	str	r3, [r7, #48]	; 0x30
 8004c96:	2300      	movs	r3, #0
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	462b      	mov	r3, r5
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	0159      	lsls	r1, r3, #5
 8004cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb0:	0150      	lsls	r0, r2, #5
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4621      	mov	r1, r4
 8004cb8:	1a51      	subs	r1, r2, r1
 8004cba:	6139      	str	r1, [r7, #16]
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cd0:	4659      	mov	r1, fp
 8004cd2:	018b      	lsls	r3, r1, #6
 8004cd4:	4651      	mov	r1, sl
 8004cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cda:	4651      	mov	r1, sl
 8004cdc:	018a      	lsls	r2, r1, #6
 8004cde:	4651      	mov	r1, sl
 8004ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ce4:	4659      	mov	r1, fp
 8004ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfe:	4690      	mov	r8, r2
 8004d00:	4699      	mov	r9, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	eb18 0303 	adds.w	r3, r8, r3
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	462b      	mov	r3, r5
 8004d0c:	eb49 0303 	adc.w	r3, r9, r3
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d1e:	4629      	mov	r1, r5
 8004d20:	024b      	lsls	r3, r1, #9
 8004d22:	4621      	mov	r1, r4
 8004d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d28:	4621      	mov	r1, r4
 8004d2a:	024a      	lsls	r2, r1, #9
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d32:	2200      	movs	r2, #0
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3c:	f7fb faf8 	bl	8000330 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4613      	mov	r3, r2
 8004d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d48:	e058      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d4a:	4b38      	ldr	r3, [pc, #224]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	099b      	lsrs	r3, r3, #6
 8004d50:	2200      	movs	r2, #0
 8004d52:	4618      	mov	r0, r3
 8004d54:	4611      	mov	r1, r2
 8004d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	f04f 0000 	mov.w	r0, #0
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	0159      	lsls	r1, r3, #5
 8004d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d76:	0150      	lsls	r0, r2, #5
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d82:	4649      	mov	r1, r9
 8004d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004da0:	eb63 050b 	sbc.w	r5, r3, fp
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	00eb      	lsls	r3, r5, #3
 8004dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004db2:	00e2      	lsls	r2, r4, #3
 8004db4:	4614      	mov	r4, r2
 8004db6:	461d      	mov	r5, r3
 8004db8:	4643      	mov	r3, r8
 8004dba:	18e3      	adds	r3, r4, r3
 8004dbc:	603b      	str	r3, [r7, #0]
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	eb45 0303 	adc.w	r3, r5, r3
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	028b      	lsls	r3, r1, #10
 8004dd6:	4621      	mov	r1, r4
 8004dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ddc:	4621      	mov	r1, r4
 8004dde:	028a      	lsls	r2, r1, #10
 8004de0:	4610      	mov	r0, r2
 8004de2:	4619      	mov	r1, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	2200      	movs	r2, #0
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	61fa      	str	r2, [r7, #28]
 8004dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df0:	f7fb fa9e 	bl	8000330 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	3301      	adds	r3, #1
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e16:	e002      	b.n	8004e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3750      	adds	r7, #80	; 0x50
 8004e24:	46bd      	mov	sp, r7
 8004e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00f42400 	.word	0x00f42400
 8004e34:	007a1200 	.word	0x007a1200

08004e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e3c:	4b03      	ldr	r3, [pc, #12]	; (8004e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000010 	.word	0x20000010

08004e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e54:	f7ff fff0 	bl	8004e38 <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	0a9b      	lsrs	r3, r3, #10
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4903      	ldr	r1, [pc, #12]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40023800 	.word	0x40023800
 8004e74:	0800ebec 	.word	0x0800ebec

08004e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10b      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d075      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004eac:	4b91      	ldr	r3, [pc, #580]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb2:	f7fe f9e3 	bl	800327c <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eba:	f7fe f9df 	bl	800327c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e189      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ecc:	4b8a      	ldr	r3, [pc, #552]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f0      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	019a      	lsls	r2, r3, #6
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	071b      	lsls	r3, r3, #28
 8004ef0:	4981      	ldr	r1, [pc, #516]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01f      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f04:	4b7c      	ldr	r3, [pc, #496]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f0a:	0f1b      	lsrs	r3, r3, #28
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	019a      	lsls	r2, r3, #6
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	071b      	lsls	r3, r3, #28
 8004f24:	4974      	ldr	r1, [pc, #464]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f2c:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f32:	f023 021f 	bic.w	r2, r3, #31
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	496e      	ldr	r1, [pc, #440]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00d      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	019a      	lsls	r2, r3, #6
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	061b      	lsls	r3, r3, #24
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	071b      	lsls	r3, r3, #28
 8004f64:	4964      	ldr	r1, [pc, #400]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f6c:	4b61      	ldr	r3, [pc, #388]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f72:	f7fe f983 	bl	800327c <HAL_GetTick>
 8004f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f7a:	f7fe f97f 	bl	800327c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e129      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f8c:	4b5a      	ldr	r3, [pc, #360]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d079      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fb0:	4b52      	ldr	r3, [pc, #328]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fb6:	f7fe f961 	bl	800327c <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fbe:	f7fe f95d 	bl	800327c <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e107      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fd0:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fdc:	d0ef      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d020      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fea:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	0f1b      	lsrs	r3, r3, #28
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	019a      	lsls	r2, r3, #6
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	061b      	lsls	r3, r3, #24
 8005004:	431a      	orrs	r2, r3
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	071b      	lsls	r3, r3, #28
 800500a:	493b      	ldr	r1, [pc, #236]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800500c:	4313      	orrs	r3, r2
 800500e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005012:	4b39      	ldr	r3, [pc, #228]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005018:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	3b01      	subs	r3, #1
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	4934      	ldr	r1, [pc, #208]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01e      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005038:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800503e:	0e1b      	lsrs	r3, r3, #24
 8005040:	f003 030f 	and.w	r3, r3, #15
 8005044:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	019a      	lsls	r2, r3, #6
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	061b      	lsls	r3, r3, #24
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	071b      	lsls	r3, r3, #28
 8005058:	4927      	ldr	r1, [pc, #156]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005060:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005066:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	4922      	ldr	r1, [pc, #136]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005076:	4b21      	ldr	r3, [pc, #132]	; (80050fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800507c:	f7fe f8fe 	bl	800327c <HAL_GetTick>
 8005080:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005084:	f7fe f8fa 	bl	800327c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0a4      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005096:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800509e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a2:	d1ef      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 808b 	beq.w	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6413      	str	r3, [r2, #64]	; 0x40
 80050c2:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80050d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050da:	f7fe f8cf 	bl	800327c <HAL_GetTick>
 80050de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050e0:	e010      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050e2:	f7fe f8cb 	bl	800327c <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d909      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e075      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80050f4:	42470068 	.word	0x42470068
 80050f8:	40023800 	.word	0x40023800
 80050fc:	42470070 	.word	0x42470070
 8005100:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005104:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0e8      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005110:	4b36      	ldr	r3, [pc, #216]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02f      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d028      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800512e:	4b2f      	ldr	r3, [pc, #188]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005138:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800513e:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800514a:	4b28      	ldr	r3, [pc, #160]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d114      	bne.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005156:	f7fe f891 	bl	800327c <HAL_GetTick>
 800515a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515c:	e00a      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fe f88d 	bl	800327c <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e035      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0ee      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800518c:	d10d      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800519e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a2:	4912      	ldr	r1, [pc, #72]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	608b      	str	r3, [r1, #8]
 80051a8:	e005      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051b4:	6093      	str	r3, [r2, #8]
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c2:	490a      	ldr	r1, [pc, #40]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d004      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80051dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40007000 	.word	0x40007000
 80051ec:	40023800 	.word	0x40023800
 80051f0:	42470e40 	.word	0x42470e40
 80051f4:	424711e0 	.word	0x424711e0

080051f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e025      	b.n	8005258 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f7fd fe97 	bl	8002f54 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f000 fedf 	bl	8005ffc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	461a      	mov	r2, r3
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	f000 ff34 	bl	80060b6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e07b      	b.n	800536a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005282:	d009      	beq.n	8005298 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	61da      	str	r2, [r3, #28]
 800528a:	e005      	b.n	8005298 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fd fd34 	bl	8002d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0302 	and.w	r3, r3, #2
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	f003 0104 	and.w	r1, r3, #4
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	f003 0210 	and.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e01a      	b.n	80053ba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fd fd07 	bl	8002db0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b088      	sub	sp, #32
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d101      	bne.n	80053e4 <HAL_SPI_Transmit+0x22>
 80053e0:	2302      	movs	r3, #2
 80053e2:	e126      	b.n	8005632 <HAL_SPI_Transmit+0x270>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ec:	f7fd ff46 	bl	800327c <HAL_GetTick>
 80053f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d002      	beq.n	8005408 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005402:	2302      	movs	r3, #2
 8005404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005406:	e10b      	b.n	8005620 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_SPI_Transmit+0x52>
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005418:	e102      	b.n	8005620 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2203      	movs	r2, #3
 800541e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	88fa      	ldrh	r2, [r7, #6]
 8005432:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005460:	d10f      	bne.n	8005482 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005470:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005480:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d007      	beq.n	80054a0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800549e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a8:	d14b      	bne.n	8005542 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_SPI_Transmit+0xf6>
 80054b2:	8afb      	ldrh	r3, [r7, #22]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d13e      	bne.n	8005536 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	881a      	ldrh	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	1c9a      	adds	r2, r3, #2
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054dc:	e02b      	b.n	8005536 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d112      	bne.n	8005512 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	881a      	ldrh	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fc:	1c9a      	adds	r2, r3, #2
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005510:	e011      	b.n	8005536 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005512:	f7fd feb3 	bl	800327c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d803      	bhi.n	800552a <HAL_SPI_Transmit+0x168>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d102      	bne.n	8005530 <HAL_SPI_Transmit+0x16e>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005534:	e074      	b.n	8005620 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1ce      	bne.n	80054de <HAL_SPI_Transmit+0x11c>
 8005540:	e04c      	b.n	80055dc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_SPI_Transmit+0x18e>
 800554a:	8afb      	ldrh	r3, [r7, #22]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d140      	bne.n	80055d2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005576:	e02c      	b.n	80055d2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d113      	bne.n	80055ae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	7812      	ldrb	r2, [r2, #0]
 8005592:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80055ac:	e011      	b.n	80055d2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ae:	f7fd fe65 	bl	800327c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d803      	bhi.n	80055c6 <HAL_SPI_Transmit+0x204>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d102      	bne.n	80055cc <HAL_SPI_Transmit+0x20a>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055d0:	e026      	b.n	8005620 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1cd      	bne.n	8005578 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	6839      	ldr	r1, [r7, #0]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fbd9 	bl	8005d98 <SPI_EndRxTxTransaction>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e000      	b.n	8005620 <HAL_SPI_Transmit+0x25e>
  }

error:
 800561e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005630:	7ffb      	ldrb	r3, [r7, #31]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b088      	sub	sp, #32
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005656:	d112      	bne.n	800567e <HAL_SPI_Receive+0x44>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10e      	bne.n	800567e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2204      	movs	r2, #4
 8005664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	4613      	mov	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f8f1 	bl	800585c <HAL_SPI_TransmitReceive>
 800567a:	4603      	mov	r3, r0
 800567c:	e0ea      	b.n	8005854 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_SPI_Receive+0x52>
 8005688:	2302      	movs	r3, #2
 800568a:	e0e3      	b.n	8005854 <HAL_SPI_Receive+0x21a>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005694:	f7fd fdf2 	bl	800327c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056a6:	2302      	movs	r3, #2
 80056a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056aa:	e0ca      	b.n	8005842 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_SPI_Receive+0x7e>
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d102      	bne.n	80056be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056bc:	e0c1      	b.n	8005842 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2204      	movs	r2, #4
 80056c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005704:	d10f      	bne.n	8005726 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005714:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005724:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d007      	beq.n	8005744 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005742:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d162      	bne.n	8005812 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800574c:	e02e      	b.n	80057ac <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d115      	bne.n	8005788 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f103 020c 	add.w	r2, r3, #12
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577c:	b29b      	uxth	r3, r3
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005786:	e011      	b.n	80057ac <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005788:	f7fd fd78 	bl	800327c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d803      	bhi.n	80057a0 <HAL_SPI_Receive+0x166>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d102      	bne.n	80057a6 <HAL_SPI_Receive+0x16c>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057aa:	e04a      	b.n	8005842 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1cb      	bne.n	800574e <HAL_SPI_Receive+0x114>
 80057b6:	e031      	b.n	800581c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d113      	bne.n	80057ee <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	b292      	uxth	r2, r2
 80057d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057ec:	e011      	b.n	8005812 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ee:	f7fd fd45 	bl	800327c <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d803      	bhi.n	8005806 <HAL_SPI_Receive+0x1cc>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005804:	d102      	bne.n	800580c <HAL_SPI_Receive+0x1d2>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d102      	bne.n	8005812 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005810:	e017      	b.n	8005842 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1cd      	bne.n	80057b8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fa53 	bl	8005ccc <SPI_EndRxTransaction>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
 800583e:	e000      	b.n	8005842 <HAL_SPI_Receive+0x208>
  }

error :
 8005840:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005852:	7dfb      	ldrb	r3, [r7, #23]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08c      	sub	sp, #48	; 0x30
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800586a:	2301      	movs	r3, #1
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800587a:	2b01      	cmp	r3, #1
 800587c:	d101      	bne.n	8005882 <HAL_SPI_TransmitReceive+0x26>
 800587e:	2302      	movs	r3, #2
 8005880:	e18a      	b.n	8005b98 <HAL_SPI_TransmitReceive+0x33c>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800588a:	f7fd fcf7 	bl	800327c <HAL_GetTick>
 800588e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80058a0:	887b      	ldrh	r3, [r7, #2]
 80058a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d00f      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x70>
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058b2:	d107      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d103      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x68>
 80058bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d003      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058ca:	e15b      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_SPI_TransmitReceive+0x82>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <HAL_SPI_TransmitReceive+0x82>
 80058d8:	887b      	ldrh	r3, [r7, #2]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058e4:	e14e      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d003      	beq.n	80058fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2205      	movs	r2, #5
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	887a      	ldrh	r2, [r7, #2]
 800590a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	887a      	ldrh	r2, [r7, #2]
 8005910:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	887a      	ldrh	r2, [r7, #2]
 800591c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	887a      	ldrh	r2, [r7, #2]
 8005922:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d007      	beq.n	800594e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800594c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005956:	d178      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_SPI_TransmitReceive+0x10a>
 8005960:	8b7b      	ldrh	r3, [r7, #26]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d166      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	1c9a      	adds	r2, r3, #2
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800598a:	e053      	b.n	8005a34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d11b      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x176>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800599e:	b29b      	uxth	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d016      	beq.n	80059d2 <HAL_SPI_TransmitReceive+0x176>
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d113      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	881a      	ldrh	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	1c9a      	adds	r2, r3, #2
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d119      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x1b8>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d014      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	b292      	uxth	r2, r2
 80059f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	1c9a      	adds	r2, r3, #2
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a10:	2301      	movs	r3, #1
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a14:	f7fd fc32 	bl	800327c <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d807      	bhi.n	8005a34 <HAL_SPI_TransmitReceive+0x1d8>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d003      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a32:	e0a7      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1a6      	bne.n	800598c <HAL_SPI_TransmitReceive+0x130>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1a1      	bne.n	800598c <HAL_SPI_TransmitReceive+0x130>
 8005a48:	e07c      	b.n	8005b44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_SPI_TransmitReceive+0x1fc>
 8005a52:	8b7b      	ldrh	r3, [r7, #26]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d16b      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a7e:	e057      	b.n	8005b30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d11c      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x26c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d017      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x26c>
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d114      	bne.n	8005ac8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	7812      	ldrb	r2, [r2, #0]
 8005aaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	3b01      	subs	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d119      	bne.n	8005b0a <HAL_SPI_TransmitReceive+0x2ae>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d014      	beq.n	8005b0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b06:	2301      	movs	r3, #1
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b0a:	f7fd fbb7 	bl	800327c <HAL_GetTick>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d803      	bhi.n	8005b22 <HAL_SPI_TransmitReceive+0x2c6>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d102      	bne.n	8005b28 <HAL_SPI_TransmitReceive+0x2cc>
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b2e:	e029      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1a2      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x224>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d19d      	bne.n	8005a80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f925 	bl	8005d98 <SPI_EndRxTxTransaction>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d006      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b60:	e010      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	e000      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3730      	adds	r7, #48	; 0x30
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bae:	b2db      	uxtb	r3, r3
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bcc:	f7fd fb56 	bl	800327c <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	4413      	add	r3, r2
 8005bda:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bdc:	f7fd fb4e 	bl	800327c <HAL_GetTick>
 8005be0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005be2:	4b39      	ldr	r3, [pc, #228]	; (8005cc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	015b      	lsls	r3, r3, #5
 8005be8:	0d1b      	lsrs	r3, r3, #20
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
 8005bf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bf2:	e054      	b.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d050      	beq.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bfc:	f7fd fb3e 	bl	800327c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d902      	bls.n	8005c12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d13d      	bne.n	8005c8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c2a:	d111      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c34:	d004      	beq.n	8005c40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3e:	d107      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c58:	d10f      	bne.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e017      	b.n	8005cbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	bf0c      	ite	eq
 8005cae:	2301      	moveq	r3, #1
 8005cb0:	2300      	movne	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d19b      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000010 	.word	0x20000010

08005ccc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ce0:	d111      	bne.n	8005d06 <SPI_EndRxTransaction+0x3a>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cea:	d004      	beq.n	8005cf6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf4:	d107      	bne.n	8005d06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d0e:	d12a      	bne.n	8005d66 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d18:	d012      	beq.n	8005d40 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2180      	movs	r1, #128	; 0x80
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff ff49 	bl	8005bbc <SPI_WaitFlagStateUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d02d      	beq.n	8005d8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e026      	b.n	8005d8e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2101      	movs	r1, #1
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff ff36 	bl	8005bbc <SPI_WaitFlagStateUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01a      	beq.n	8005d8c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5a:	f043 0220 	orr.w	r2, r3, #32
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e013      	b.n	8005d8e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2101      	movs	r1, #1
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff ff23 	bl	8005bbc <SPI_WaitFlagStateUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e000      	b.n	8005d8e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <SPI_EndRxTxTransaction+0x7c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a1b      	ldr	r2, [pc, #108]	; (8005e18 <SPI_EndRxTxTransaction+0x80>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	0d5b      	lsrs	r3, r3, #21
 8005db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc2:	d112      	bne.n	8005dea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2180      	movs	r1, #128	; 0x80
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fef4 	bl	8005bbc <SPI_WaitFlagStateUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d016      	beq.n	8005e08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e00f      	b.n	8005e0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b80      	cmp	r3, #128	; 0x80
 8005e02:	d0f2      	beq.n	8005dea <SPI_EndRxTxTransaction+0x52>
 8005e04:	e000      	b.n	8005e08 <SPI_EndRxTxTransaction+0x70>
        break;
 8005e06:	bf00      	nop
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000010 	.word	0x20000010
 8005e18:	165e9f81 	.word	0x165e9f81

08005e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e041      	b.n	8005eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fc ffd2 	bl	8002dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f000 f82e 	bl	8005ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d00f      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3d      	ldr	r2, [pc, #244]	; (8005fd4 <TIM_Base_SetConfig+0x118>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3c      	ldr	r2, [pc, #240]	; (8005fd8 <TIM_Base_SetConfig+0x11c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3b      	ldr	r2, [pc, #236]	; (8005fdc <TIM_Base_SetConfig+0x120>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3a      	ldr	r2, [pc, #232]	; (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2f      	ldr	r2, [pc, #188]	; (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d02b      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1c:	d027      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2c      	ldr	r2, [pc, #176]	; (8005fd4 <TIM_Base_SetConfig+0x118>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d023      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <TIM_Base_SetConfig+0x11c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01f      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2a      	ldr	r2, [pc, #168]	; (8005fdc <TIM_Base_SetConfig+0x120>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d01b      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a29      	ldr	r2, [pc, #164]	; (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d017      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a28      	ldr	r2, [pc, #160]	; (8005fe4 <TIM_Base_SetConfig+0x128>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a27      	ldr	r2, [pc, #156]	; (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a26      	ldr	r2, [pc, #152]	; (8005fec <TIM_Base_SetConfig+0x130>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a25      	ldr	r2, [pc, #148]	; (8005ff0 <TIM_Base_SetConfig+0x134>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a24      	ldr	r2, [pc, #144]	; (8005ff4 <TIM_Base_SetConfig+0x138>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_Base_SetConfig+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a23      	ldr	r2, [pc, #140]	; (8005ff8 <TIM_Base_SetConfig+0x13c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d108      	bne.n	8005f80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a0a      	ldr	r2, [pc, #40]	; (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0c      	ldr	r2, [pc, #48]	; (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40010400 	.word	0x40010400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800
 8005ff0:	40001800 	.word	0x40001800
 8005ff4:	40001c00 	.word	0x40001c00
 8005ff8:	40002000 	.word	0x40002000

08005ffc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d123      	bne.n	8006056 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	6851      	ldr	r1, [r2, #4]
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	6892      	ldr	r2, [r2, #8]
 8006022:	4311      	orrs	r1, r2
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	68d2      	ldr	r2, [r2, #12]
 8006028:	4311      	orrs	r1, r2
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	6912      	ldr	r2, [r2, #16]
 800602e:	4311      	orrs	r1, r2
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	6952      	ldr	r2, [r2, #20]
 8006034:	4311      	orrs	r1, r2
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	6992      	ldr	r2, [r2, #24]
 800603a:	4311      	orrs	r1, r2
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	69d2      	ldr	r2, [r2, #28]
 8006040:	4311      	orrs	r1, r2
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	6a12      	ldr	r2, [r2, #32]
 8006046:	4311      	orrs	r1, r2
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800604c:	430a      	orrs	r2, r1
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e028      	b.n	80060a8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	69d9      	ldr	r1, [r3, #28]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	4319      	orrs	r1, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	430b      	orrs	r3, r1
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800607c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	6851      	ldr	r1, [r2, #4]
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	4311      	orrs	r1, r2
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68d2      	ldr	r2, [r2, #12]
 800608e:	4311      	orrs	r1, r2
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	6912      	ldr	r2, [r2, #16]
 8006094:	4311      	orrs	r1, r2
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	6952      	ldr	r2, [r2, #20]
 800609a:	4311      	orrs	r1, r2
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	6992      	ldr	r2, [r2, #24]
 80060a0:	430a      	orrs	r2, r1
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d128      	bne.n	800611a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	1e59      	subs	r1, r3, #1
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	3b01      	subs	r3, #1
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	4319      	orrs	r1, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	4319      	orrs	r1, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	031b      	lsls	r3, r3, #12
 80060f2:	4319      	orrs	r1, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	3b01      	subs	r3, #1
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	4319      	orrs	r1, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	3b01      	subs	r3, #1
 8006104:	051b      	lsls	r3, r3, #20
 8006106:	4319      	orrs	r1, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	3b01      	subs	r3, #1
 800610e:	061b      	lsls	r3, r3, #24
 8006110:	430b      	orrs	r3, r1
 8006112:	431a      	orrs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	e02f      	b.n	800617a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006122:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	68d2      	ldr	r2, [r2, #12]
 800612a:	3a01      	subs	r2, #1
 800612c:	0311      	lsls	r1, r2, #12
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	6952      	ldr	r2, [r2, #20]
 8006132:	3a01      	subs	r2, #1
 8006134:	0512      	lsls	r2, r2, #20
 8006136:	430a      	orrs	r2, r1
 8006138:	431a      	orrs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	1e59      	subs	r1, r3, #1
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	3b01      	subs	r3, #1
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	4319      	orrs	r1, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	3b01      	subs	r3, #1
 800615c:	021b      	lsls	r3, r3, #8
 800615e:	4319      	orrs	r1, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	3b01      	subs	r3, #1
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	4319      	orrs	r1, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	3b01      	subs	r3, #1
 8006170:	061b      	lsls	r3, r3, #24
 8006172:	430b      	orrs	r3, r1
 8006174:	431a      	orrs	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <__NVIC_SetPriority>:
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	6039      	str	r1, [r7, #0]
 8006192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006198:	2b00      	cmp	r3, #0
 800619a:	db0a      	blt.n	80061b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	490c      	ldr	r1, [pc, #48]	; (80061d4 <__NVIC_SetPriority+0x4c>)
 80061a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061a6:	0112      	lsls	r2, r2, #4
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	440b      	add	r3, r1
 80061ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80061b0:	e00a      	b.n	80061c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	4908      	ldr	r1, [pc, #32]	; (80061d8 <__NVIC_SetPriority+0x50>)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	3b04      	subs	r3, #4
 80061c0:	0112      	lsls	r2, r2, #4
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	440b      	add	r3, r1
 80061c6:	761a      	strb	r2, [r3, #24]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	e000e100 	.word	0xe000e100
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80061e0:	2100      	movs	r1, #0
 80061e2:	f06f 0004 	mvn.w	r0, #4
 80061e6:	f7ff ffcf 	bl	8006188 <__NVIC_SetPriority>
#endif
}
 80061ea:	bf00      	nop
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f6:	f3ef 8305 	mrs	r3, IPSR
 80061fa:	603b      	str	r3, [r7, #0]
  return(result);
 80061fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006202:	f06f 0305 	mvn.w	r3, #5
 8006206:	607b      	str	r3, [r7, #4]
 8006208:	e00c      	b.n	8006224 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <osKernelInitialize+0x44>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d105      	bne.n	800621e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006212:	4b08      	ldr	r3, [pc, #32]	; (8006234 <osKernelInitialize+0x44>)
 8006214:	2201      	movs	r2, #1
 8006216:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006218:	2300      	movs	r3, #0
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	e002      	b.n	8006224 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800621e:	f04f 33ff 	mov.w	r3, #4294967295
 8006222:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006224:	687b      	ldr	r3, [r7, #4]
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20025d54 	.word	0x20025d54

08006238 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800623e:	f3ef 8305 	mrs	r3, IPSR
 8006242:	603b      	str	r3, [r7, #0]
  return(result);
 8006244:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <osKernelStart+0x1a>
    stat = osErrorISR;
 800624a:	f06f 0305 	mvn.w	r3, #5
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	e010      	b.n	8006274 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <osKernelStart+0x48>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d109      	bne.n	800626e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800625a:	f7ff ffbf 	bl	80061dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800625e:	4b08      	ldr	r3, [pc, #32]	; (8006280 <osKernelStart+0x48>)
 8006260:	2202      	movs	r2, #2
 8006262:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006264:	f002 fb5a 	bl	800891c <vTaskStartScheduler>
      stat = osOK;
 8006268:	2300      	movs	r3, #0
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	e002      	b.n	8006274 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800626e:	f04f 33ff 	mov.w	r3, #4294967295
 8006272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006274:	687b      	ldr	r3, [r7, #4]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20025d54 	.word	0x20025d54

08006284 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006284:	b580      	push	{r7, lr}
 8006286:	b08e      	sub	sp, #56	; 0x38
 8006288:	af04      	add	r7, sp, #16
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006294:	f3ef 8305 	mrs	r3, IPSR
 8006298:	617b      	str	r3, [r7, #20]
  return(result);
 800629a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800629c:	2b00      	cmp	r3, #0
 800629e:	d17e      	bne.n	800639e <osThreadNew+0x11a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d07b      	beq.n	800639e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80062aa:	2318      	movs	r3, #24
 80062ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80062b2:	f04f 33ff 	mov.w	r3, #4294967295
 80062b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d045      	beq.n	800634a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <osThreadNew+0x48>
        name = attr->name;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <osThreadNew+0x6e>
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b38      	cmp	r3, #56	; 0x38
 80062e4:	d805      	bhi.n	80062f2 <osThreadNew+0x6e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <osThreadNew+0x72>
        return (NULL);
 80062f2:	2300      	movs	r3, #0
 80062f4:	e054      	b.n	80063a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	089b      	lsrs	r3, r3, #2
 8006304:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00e      	beq.n	800632c <osThreadNew+0xa8>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b5b      	cmp	r3, #91	; 0x5b
 8006314:	d90a      	bls.n	800632c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <osThreadNew+0xa8>
        mem = 1;
 8006326:	2301      	movs	r3, #1
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e010      	b.n	800634e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10c      	bne.n	800634e <osThreadNew+0xca>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d108      	bne.n	800634e <osThreadNew+0xca>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <osThreadNew+0xca>
          mem = 0;
 8006344:	2300      	movs	r3, #0
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	e001      	b.n	800634e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d110      	bne.n	8006376 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800635c:	9202      	str	r2, [sp, #8]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6a3a      	ldr	r2, [r7, #32]
 8006368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f002 f8de 	bl	800852c <xTaskCreateStatic>
 8006370:	4603      	mov	r3, r0
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	e013      	b.n	800639e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d110      	bne.n	800639e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	b29a      	uxth	r2, r3
 8006380:	f107 0310 	add.w	r3, r7, #16
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f002 f929 	bl	80085e6 <xTaskCreate>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d001      	beq.n	800639e <osThreadNew+0x11a>
            hTask = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800639e:	693b      	ldr	r3, [r7, #16]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3728      	adds	r7, #40	; 0x28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b0:	f3ef 8305 	mrs	r3, IPSR
 80063b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <osDelay+0x1c>
    stat = osErrorISR;
 80063bc:	f06f 0305 	mvn.w	r3, #5
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e007      	b.n	80063d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f002 fa6c 	bl	80088ac <vTaskDelay>
    }
  }

  return (stat);
 80063d4:	68fb      	ldr	r3, [r7, #12]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f003 fe33 	bl	800a052 <pvTimerGetTimerID>
 80063ec:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <TimerCallback+0x22>
    callb->func (callb->arg);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	6852      	ldr	r2, [r2, #4]
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
  }
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006408:	b580      	push	{r7, lr}
 800640a:	b08c      	sub	sp, #48	; 0x30
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	607a      	str	r2, [r7, #4]
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	460b      	mov	r3, r1
 8006416:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800641c:	f3ef 8305 	mrs	r3, IPSR
 8006420:	613b      	str	r3, [r7, #16]
  return(result);
 8006422:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006424:	2b00      	cmp	r3, #0
 8006426:	d163      	bne.n	80064f0 <osTimerNew+0xe8>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d060      	beq.n	80064f0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800642e:	2008      	movs	r0, #8
 8006430:	f004 f8a2 	bl	800a578 <pvPortMalloc>
 8006434:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d059      	beq.n	80064f0 <osTimerNew+0xe8>
      callb->func = func;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <osTimerNew+0x4c>
        reload = pdFALSE;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e001      	b.n	8006458 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006454:	2301      	movs	r3, #1
 8006456:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006458:	f04f 33ff 	mov.w	r3, #4294967295
 800645c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01c      	beq.n	80064a2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <osTimerNew+0x6e>
          name = attr->name;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d006      	beq.n	800648c <osTimerNew+0x84>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	2b2b      	cmp	r3, #43	; 0x2b
 8006484:	d902      	bls.n	800648c <osTimerNew+0x84>
          mem = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	e00c      	b.n	80064a6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d108      	bne.n	80064a6 <osTimerNew+0x9e>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <osTimerNew+0x9e>
            mem = 0;
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	e001      	b.n	80064a6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d10c      	bne.n	80064c6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <osTimerNew+0xf4>)
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	2101      	movs	r1, #1
 80064bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064be:	f003 fa20 	bl	8009902 <xTimerCreateStatic>
 80064c2:	6238      	str	r0, [r7, #32]
 80064c4:	e00b      	b.n	80064de <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <osTimerNew+0xf4>)
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	2101      	movs	r1, #1
 80064d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064d8:	f003 f9f2 	bl	80098c0 <xTimerCreate>
 80064dc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <osTimerNew+0xe8>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <osTimerNew+0xe8>
        vPortFree (callb);
 80064ea:	6978      	ldr	r0, [r7, #20]
 80064ec:	f004 f910 	bl	800a710 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80064f0:	6a3b      	ldr	r3, [r7, #32]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	080063df 	.word	0x080063df

08006500 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af02      	add	r7, sp, #8
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800650e:	f3ef 8305 	mrs	r3, IPSR
 8006512:	60fb      	str	r3, [r7, #12]
  return(result);
 8006514:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <osTimerStart+0x22>
    stat = osErrorISR;
 800651a:	f06f 0305 	mvn.w	r3, #5
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e017      	b.n	8006552 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d103      	bne.n	8006530 <osTimerStart+0x30>
    stat = osErrorParameter;
 8006528:	f06f 0303 	mvn.w	r3, #3
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	e010      	b.n	8006552 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006530:	2300      	movs	r3, #0
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	2104      	movs	r1, #4
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f003 fa5a 	bl	80099f4 <xTimerGenericCommand>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d102      	bne.n	800654c <osTimerStart+0x4c>
      stat = osOK;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e002      	b.n	8006552 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800654c:	f06f 0302 	mvn.w	r3, #2
 8006550:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006552:	697b      	ldr	r3, [r7, #20]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af02      	add	r7, sp, #8
 8006562:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006568:	f3ef 8305 	mrs	r3, IPSR
 800656c:	60fb      	str	r3, [r7, #12]
  return(result);
 800656e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <osTimerStop+0x20>
    stat = osErrorISR;
 8006574:	f06f 0305 	mvn.w	r3, #5
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e021      	b.n	80065c0 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <osTimerStop+0x2e>
    stat = osErrorParameter;
 8006582:	f06f 0303 	mvn.w	r3, #3
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e01a      	b.n	80065c0 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800658a:	6938      	ldr	r0, [r7, #16]
 800658c:	f003 fd38 	bl	800a000 <xTimerIsTimerActive>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <osTimerStop+0x42>
      stat = osErrorResource;
 8006596:	f06f 0302 	mvn.w	r3, #2
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e010      	b.n	80065c0 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800659e:	2300      	movs	r3, #0
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	2300      	movs	r3, #0
 80065a4:	2200      	movs	r2, #0
 80065a6:	2103      	movs	r1, #3
 80065a8:	6938      	ldr	r0, [r7, #16]
 80065aa:	f003 fa23 	bl	80099f4 <xTimerGenericCommand>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d102      	bne.n	80065ba <osTimerStop+0x5e>
        stat = osOK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e002      	b.n	80065c0 <osTimerStop+0x64>
      } else {
        stat = osError;
 80065ba:	f04f 33ff 	mov.w	r3, #4294967295
 80065be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80065c0:	697b      	ldr	r3, [r7, #20]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b086      	sub	sp, #24
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d6:	f3ef 8305 	mrs	r3, IPSR
 80065da:	60fb      	str	r3, [r7, #12]
  return(result);
 80065dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <osTimerIsRunning+0x1e>
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d102      	bne.n	80065ee <osTimerIsRunning+0x24>
    running = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	e004      	b.n	80065f8 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80065ee:	6938      	ldr	r0, [r7, #16]
 80065f0:	f003 fd06 	bl	800a000 <xTimerIsTimerActive>
 80065f4:	4603      	mov	r3, r0
 80065f6:	617b      	str	r3, [r7, #20]
  }

  return (running);
 80065f8:	697b      	ldr	r3, [r7, #20]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	60fb      	str	r3, [r7, #12]
  return(result);
 8006614:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8006616:	2b00      	cmp	r3, #0
 8006618:	d12d      	bne.n	8006676 <osEventFlagsNew+0x74>
    mem = -1;
 800661a:	f04f 33ff 	mov.w	r3, #4294967295
 800661e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d015      	beq.n	8006652 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d006      	beq.n	800663c <osEventFlagsNew+0x3a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b1f      	cmp	r3, #31
 8006634:	d902      	bls.n	800663c <osEventFlagsNew+0x3a>
        mem = 1;
 8006636:	2301      	movs	r3, #1
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	e00c      	b.n	8006656 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d108      	bne.n	8006656 <osEventFlagsNew+0x54>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <osEventFlagsNew+0x54>
          mem = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	e001      	b.n	8006656 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d106      	bne.n	800666a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fb19 	bl	8006c98 <xEventGroupCreateStatic>
 8006666:	6178      	str	r0, [r7, #20]
 8006668:	e005      	b.n	8006676 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006670:	f000 fb49 	bl	8006d06 <xEventGroupCreate>
 8006674:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8006676:	697b      	ldr	r3, [r7, #20]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d004      	beq.n	800669e <osEventFlagsSet+0x1e>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800669e:	f06f 0303 	mvn.w	r3, #3
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	e028      	b.n	80066f8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a6:	f3ef 8305 	mrs	r3, IPSR
 80066aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80066ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d01d      	beq.n	80066ee <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80066b6:	f107 0308 	add.w	r3, r7, #8
 80066ba:	461a      	mov	r2, r3
 80066bc:	6839      	ldr	r1, [r7, #0]
 80066be:	6938      	ldr	r0, [r7, #16]
 80066c0:	f000 fcc4 	bl	800704c <xEventGroupSetBitsFromISR>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d103      	bne.n	80066d2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80066ca:	f06f 0302 	mvn.w	r3, #2
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e012      	b.n	80066f8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <osEventFlagsSet+0x78>
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <osEventFlagsSet+0x84>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	e004      	b.n	80066f8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80066ee:	6839      	ldr	r1, [r7, #0]
 80066f0:	6938      	ldr	r0, [r7, #16]
 80066f2:	f000 fbf1 	bl	8006ed8 <xEventGroupSetBits>
 80066f6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80066f8:	697b      	ldr	r3, [r7, #20]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b08c      	sub	sp, #48	; 0x30
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d004      	beq.n	800672a <osEventFlagsWait+0x22>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800672a:	f06f 0303 	mvn.w	r3, #3
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	e04b      	b.n	80067ca <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006732:	f3ef 8305 	mrs	r3, IPSR
 8006736:	617b      	str	r3, [r7, #20]
  return(result);
 8006738:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800673e:	f06f 0305 	mvn.w	r3, #5
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e041      	b.n	80067ca <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006750:	2301      	movs	r3, #1
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
 8006754:	e001      	b.n	800675a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006764:	2300      	movs	r3, #0
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	e001      	b.n	800676e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	6a3a      	ldr	r2, [r7, #32]
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	69b8      	ldr	r0, [r7, #24]
 800677a:	f000 fadf 	bl	8006d3c <xEventGroupWaitBits>
 800677e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d010      	beq.n	80067ac <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4013      	ands	r3, r2
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	d019      	beq.n	80067ca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800679c:	f06f 0301 	mvn.w	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	e012      	b.n	80067ca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80067a4:	f06f 0302 	mvn.w	r3, #2
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	e00e      	b.n	80067ca <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80067bc:	f06f 0301 	mvn.w	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	e002      	b.n	80067ca <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80067c4:	f06f 0302 	mvn.w	r3, #2
 80067c8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80067ca:	69fb      	ldr	r3, [r7, #28]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3728      	adds	r7, #40	; 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e0:	f3ef 8305 	mrs	r3, IPSR
 80067e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80067e6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d174      	bne.n	80068d6 <osMutexNew+0x102>
    if (attr != NULL) {
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <osMutexNew+0x26>
      type = attr->attr_bits;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	e001      	b.n	80067fe <osMutexNew+0x2a>
    } else {
      type = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <osMutexNew+0x3a>
      rmtx = 1U;
 8006808:	2301      	movs	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	e001      	b.n	8006812 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	2b00      	cmp	r3, #0
 800681a:	d15c      	bne.n	80068d6 <osMutexNew+0x102>
      mem = -1;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d015      	beq.n	8006854 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d006      	beq.n	800683e <osMutexNew+0x6a>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b4f      	cmp	r3, #79	; 0x4f
 8006836:	d902      	bls.n	800683e <osMutexNew+0x6a>
          mem = 1;
 8006838:	2301      	movs	r3, #1
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	e00c      	b.n	8006858 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d108      	bne.n	8006858 <osMutexNew+0x84>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <osMutexNew+0x84>
            mem = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	e001      	b.n	8006858 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d112      	bne.n	8006884 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	4619      	mov	r1, r3
 800686a:	2004      	movs	r0, #4
 800686c:	f000 fe2b 	bl	80074c6 <xQueueCreateMutexStatic>
 8006870:	61f8      	str	r0, [r7, #28]
 8006872:	e016      	b.n	80068a2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4619      	mov	r1, r3
 800687a:	2001      	movs	r0, #1
 800687c:	f000 fe23 	bl	80074c6 <xQueueCreateMutexStatic>
 8006880:	61f8      	str	r0, [r7, #28]
 8006882:	e00e      	b.n	80068a2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d004      	beq.n	800689a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006890:	2004      	movs	r0, #4
 8006892:	f000 fe00 	bl	8007496 <xQueueCreateMutex>
 8006896:	61f8      	str	r0, [r7, #28]
 8006898:	e003      	b.n	80068a2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800689a:	2001      	movs	r0, #1
 800689c:	f000 fdfb 	bl	8007496 <xQueueCreateMutex>
 80068a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00c      	beq.n	80068c2 <osMutexNew+0xee>
        if (attr != NULL) {
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <osMutexNew+0xe2>
          name = attr->name;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	e001      	b.n	80068ba <osMutexNew+0xe6>
        } else {
          name = NULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	69f8      	ldr	r0, [r7, #28]
 80068be:	f001 fda5 	bl	800840c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <osMutexNew+0x102>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	f043 0301 	orr.w	r3, r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80068d6:	69fb      	ldr	r3, [r7, #28]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3720      	adds	r7, #32
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f023 0301 	bic.w	r3, r3, #1
 80068f0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fe:	f3ef 8305 	mrs	r3, IPSR
 8006902:	60bb      	str	r3, [r7, #8]
  return(result);
 8006904:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800690a:	f06f 0305 	mvn.w	r3, #5
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e02c      	b.n	800696c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d103      	bne.n	8006920 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006918:	f06f 0303 	mvn.w	r3, #3
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e025      	b.n	800696c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d011      	beq.n	800694a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006926:	6839      	ldr	r1, [r7, #0]
 8006928:	6938      	ldr	r0, [r7, #16]
 800692a:	f000 fe1b 	bl	8007564 <xQueueTakeMutexRecursive>
 800692e:	4603      	mov	r3, r0
 8006930:	2b01      	cmp	r3, #1
 8006932:	d01b      	beq.n	800696c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800693a:	f06f 0301 	mvn.w	r3, #1
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e014      	b.n	800696c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006942:	f06f 0302 	mvn.w	r3, #2
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e010      	b.n	800696c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6938      	ldr	r0, [r7, #16]
 800694e:	f001 fa2f 	bl	8007db0 <xQueueSemaphoreTake>
 8006952:	4603      	mov	r3, r0
 8006954:	2b01      	cmp	r3, #1
 8006956:	d009      	beq.n	800696c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800695e:	f06f 0301 	mvn.w	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e002      	b.n	800696c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006966:	f06f 0302 	mvn.w	r3, #2
 800696a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800696c:	697b      	ldr	r3, [r7, #20]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f023 0301 	bic.w	r3, r3, #1
 8006984:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006992:	f3ef 8305 	mrs	r3, IPSR
 8006996:	60bb      	str	r3, [r7, #8]
  return(result);
 8006998:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800699e:	f06f 0305 	mvn.w	r3, #5
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e01f      	b.n	80069e6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80069ac:	f06f 0303 	mvn.w	r3, #3
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	e018      	b.n	80069e6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80069ba:	6938      	ldr	r0, [r7, #16]
 80069bc:	f000 fd9e 	bl	80074fc <xQueueGiveMutexRecursive>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d00f      	beq.n	80069e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80069c6:	f06f 0302 	mvn.w	r3, #2
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	e00b      	b.n	80069e6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80069ce:	2300      	movs	r3, #0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2100      	movs	r1, #0
 80069d4:	6938      	ldr	r0, [r7, #16]
 80069d6:	f000 fe65 	bl	80076a4 <xQueueGenericSend>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d002      	beq.n	80069e6 <osMutexRelease+0x70>
        stat = osErrorResource;
 80069e0:	f06f 0302 	mvn.w	r3, #2
 80069e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80069e6:	697b      	ldr	r3, [r7, #20]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a00:	f3ef 8305 	mrs	r3, IPSR
 8006a04:	613b      	str	r3, [r7, #16]
  return(result);
 8006a06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d175      	bne.n	8006af8 <osSemaphoreNew+0x108>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d072      	beq.n	8006af8 <osSemaphoreNew+0x108>
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d86e      	bhi.n	8006af8 <osSemaphoreNew+0x108>
    mem = -1;
 8006a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d015      	beq.n	8006a52 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d006      	beq.n	8006a3c <osSemaphoreNew+0x4c>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	2b4f      	cmp	r3, #79	; 0x4f
 8006a34:	d902      	bls.n	8006a3c <osSemaphoreNew+0x4c>
        mem = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e00c      	b.n	8006a56 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d108      	bne.n	8006a56 <osSemaphoreNew+0x66>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <osSemaphoreNew+0x66>
          mem = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	e001      	b.n	8006a56 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d04c      	beq.n	8006af8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d128      	bne.n	8006ab6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d10a      	bne.n	8006a80 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2203      	movs	r2, #3
 8006a70:	9200      	str	r2, [sp, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	2100      	movs	r1, #0
 8006a76:	2001      	movs	r0, #1
 8006a78:	f000 fc18 	bl	80072ac <xQueueGenericCreateStatic>
 8006a7c:	61f8      	str	r0, [r7, #28]
 8006a7e:	e005      	b.n	8006a8c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006a80:	2203      	movs	r2, #3
 8006a82:	2100      	movs	r1, #0
 8006a84:	2001      	movs	r0, #1
 8006a86:	f000 fc89 	bl	800739c <xQueueGenericCreate>
 8006a8a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d022      	beq.n	8006ad8 <osSemaphoreNew+0xe8>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d01f      	beq.n	8006ad8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	69f8      	ldr	r0, [r7, #28]
 8006aa0:	f000 fe00 	bl	80076a4 <xQueueGenericSend>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d016      	beq.n	8006ad8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006aaa:	69f8      	ldr	r0, [r7, #28]
 8006aac:	f001 fb5a 	bl	8008164 <vQueueDelete>
            hSemaphore = NULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	e010      	b.n	8006ad8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d108      	bne.n	8006ace <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fd83 	bl	80075d0 <xQueueCreateCountingSemaphoreStatic>
 8006aca:	61f8      	str	r0, [r7, #28]
 8006acc:	e004      	b.n	8006ad8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f000 fdb4 	bl	800763e <xQueueCreateCountingSemaphore>
 8006ad6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <osSemaphoreNew+0xfc>
          name = attr->name;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e001      	b.n	8006af0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006af0:	6979      	ldr	r1, [r7, #20]
 8006af2:	69f8      	ldr	r0, [r7, #28]
 8006af4:	f001 fc8a 	bl	800840c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006af8:	69fb      	ldr	r3, [r7, #28]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
	...

08006b04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d103      	bne.n	8006b24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006b1c:	f06f 0303 	mvn.w	r3, #3
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	e039      	b.n	8006b98 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b24:	f3ef 8305 	mrs	r3, IPSR
 8006b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d022      	beq.n	8006b76 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006b36:	f06f 0303 	mvn.w	r3, #3
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	e02c      	b.n	8006b98 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006b42:	f107 0308 	add.w	r3, r7, #8
 8006b46:	461a      	mov	r2, r3
 8006b48:	2100      	movs	r1, #0
 8006b4a:	6938      	ldr	r0, [r7, #16]
 8006b4c:	f001 fa6c 	bl	8008028 <xQueueReceiveFromISR>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d003      	beq.n	8006b5e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006b56:	f06f 0302 	mvn.w	r3, #2
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e01c      	b.n	8006b98 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d019      	beq.n	8006b98 <osSemaphoreAcquire+0x94>
 8006b64:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <osSemaphoreAcquire+0xa0>)
 8006b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	e010      	b.n	8006b98 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6938      	ldr	r0, [r7, #16]
 8006b7a:	f001 f919 	bl	8007db0 <xQueueSemaphoreTake>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d009      	beq.n	8006b98 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006b8a:	f06f 0301 	mvn.w	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e002      	b.n	8006b98 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006b92:	f06f 0302 	mvn.w	r3, #2
 8006b96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b98:	697b      	ldr	r3, [r7, #20]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d103      	bne.n	8006bc6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006bbe:	f06f 0303 	mvn.w	r3, #3
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e02c      	b.n	8006c20 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc6:	f3ef 8305 	mrs	r3, IPSR
 8006bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01a      	beq.n	8006c08 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006bd6:	f107 0308 	add.w	r3, r7, #8
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6938      	ldr	r0, [r7, #16]
 8006bde:	f000 ff36 	bl	8007a4e <xQueueGiveFromISR>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d003      	beq.n	8006bf0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006be8:	f06f 0302 	mvn.w	r3, #2
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e017      	b.n	8006c20 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d014      	beq.n	8006c20 <osSemaphoreRelease+0x78>
 8006bf6:	4b0d      	ldr	r3, [pc, #52]	; (8006c2c <osSemaphoreRelease+0x84>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	e00b      	b.n	8006c20 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	6938      	ldr	r0, [r7, #16]
 8006c10:	f000 fd48 	bl	80076a4 <xQueueGenericSend>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d002      	beq.n	8006c20 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006c1a:	f06f 0302 	mvn.w	r3, #2
 8006c1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006c20:	697b      	ldr	r3, [r7, #20]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a07      	ldr	r2, [pc, #28]	; (8006c5c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	4a06      	ldr	r2, [pc, #24]	; (8006c60 <vApplicationGetIdleTaskMemory+0x30>)
 8006c46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2280      	movs	r2, #128	; 0x80
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20025d58 	.word	0x20025d58
 8006c60:	20025db4 	.word	0x20025db4

08006c64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a06      	ldr	r2, [pc, #24]	; (8006c94 <vApplicationGetTimerTaskMemory+0x30>)
 8006c7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c82:	601a      	str	r2, [r3, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	20025fb4 	.word	0x20025fb4
 8006c94:	20026010 	.word	0x20026010

08006c98 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	2b20      	cmp	r3, #32
 8006cc4:	d00a      	beq.n	8006cdc <xEventGroupCreateStatic+0x44>
	__asm volatile
 8006cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	60fb      	str	r3, [r7, #12]
}
 8006cd8:	bf00      	nop
 8006cda:	e7fe      	b.n	8006cda <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f9bf 	bl	8007074 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006cfc:	697b      	ldr	r3, [r7, #20]
	}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3718      	adds	r7, #24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006d0c:	2020      	movs	r0, #32
 8006d0e:	f003 fc33 	bl	800a578 <pvPortMalloc>
 8006d12:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 f9a5 	bl	8007074 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006d30:	687b      	ldr	r3, [r7, #4]
	}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b090      	sub	sp, #64	; 0x40
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <xEventGroupWaitBits+0x36>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	623b      	str	r3, [r7, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	61fb      	str	r3, [r7, #28]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xEventGroupWaitBits+0x72>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	61bb      	str	r3, [r7, #24]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dae:	f002 fb2f 	bl	8009410 <xTaskGetSchedulerState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xEventGroupWaitBits+0x82>
 8006db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <xEventGroupWaitBits+0x86>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xEventGroupWaitBits+0x88>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	617b      	str	r3, [r7, #20]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006dde:	f001 fe19 	bl	8008a14 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dee:	f000 f90b 	bl	8007008 <prvTestWaitCondition>
 8006df2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00e      	beq.n	8006e18 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d028      	beq.n	8006e5a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	43db      	mvns	r3, r3
 8006e10:	401a      	ands	r2, r3
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e020      	b.n	8006e5a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006e22:	2301      	movs	r3, #1
 8006e24:	633b      	str	r3, [r7, #48]	; 0x30
 8006e26:	e018      	b.n	8006e5a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e42:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	1d18      	adds	r0, r3, #4
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e50:	4619      	mov	r1, r3
 8006e52:	f002 f803 	bl	8008e5c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006e5a:	f001 fde9 	bl	8008a30 <xTaskResumeAll>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d031      	beq.n	8006eca <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006e6c:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <xEventGroupWaitBits+0x198>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006e7c:	f002 fc58 	bl	8009730 <uxTaskResetEventItemValue>
 8006e80:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d11a      	bne.n	8006ec2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006e8c:	f003 fa52 	bl	800a334 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	68b9      	ldr	r1, [r7, #8]
 8006e9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006e9c:	f000 f8b4 	bl	8007008 <prvTestWaitCondition>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d006      	beq.n	8006eba <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	43db      	mvns	r3, r3
 8006eb4:	401a      	ands	r2, r3
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006ebe:	f003 fa69 	bl	800a394 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3740      	adds	r7, #64	; 0x40
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08e      	sub	sp, #56	; 0x38
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006eea:	2300      	movs	r3, #0
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <xEventGroupSetBits+0x32>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	613b      	str	r3, [r7, #16]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <xEventGroupSetBits+0x52>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	60fb      	str	r3, [r7, #12]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	3308      	adds	r3, #8
 8006f34:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006f36:	f001 fd6d 	bl	8008a14 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	431a      	orrs	r2, r3
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006f4c:	e03c      	b.n	8006fc8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006f64:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f6c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d108      	bne.n	8006f8a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006f84:	2301      	movs	r3, #1
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f88:	e008      	b.n	8006f9c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	4013      	ands	r3, r2
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d101      	bne.n	8006f9c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d010      	beq.n	8006fc4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006fc0:	f002 f81e 	bl	8009000 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d1be      	bne.n	8006f4e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	401a      	ands	r2, r3
 8006fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fdc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006fde:	f001 fd27 	bl	8008a30 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	681b      	ldr	r3, [r3, #0]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3738      	adds	r7, #56	; 0x38
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ff6c 	bl	8006ed8 <xEventGroupSetBits>
}
 8007000:	bf00      	nop
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d107      	bne.n	800702e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8007028:	2301      	movs	r3, #1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e007      	b.n	800703e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4013      	ands	r3, r2
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d101      	bne.n	800703e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800703e:	697b      	ldr	r3, [r7, #20]
}
 8007040:	4618      	mov	r0, r3
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	68f9      	ldr	r1, [r7, #12]
 800705e:	4804      	ldr	r0, [pc, #16]	; (8007070 <xEventGroupSetBitsFromISR+0x24>)
 8007060:	f003 f818 	bl	800a094 <xTimerPendFunctionCallFromISR>
 8007064:	6178      	str	r0, [r7, #20]

		return xReturn;
 8007066:	697b      	ldr	r3, [r7, #20]
	}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	08006fef 	.word	0x08006fef

08007074 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f103 0208 	add.w	r2, r3, #8
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f04f 32ff 	mov.w	r2, #4294967295
 800708c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f103 0208 	add.w	r2, r3, #8
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f103 0208 	add.w	r2, r3, #8
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070ce:	b480      	push	{r7}
 80070d0:	b085      	sub	sp, #20
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
 80070d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689a      	ldr	r2, [r3, #8]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007116:	b480      	push	{r7}
 8007118:	b085      	sub	sp, #20
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800712c:	d103      	bne.n	8007136 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e00c      	b.n	8007150 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3308      	adds	r3, #8
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	e002      	b.n	8007144 <vListInsert+0x2e>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	d2f6      	bcs.n	800713e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1c5a      	adds	r2, r3, #1
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	601a      	str	r2, [r3, #0]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6892      	ldr	r2, [r2, #8]
 800719e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6852      	ldr	r2, [r2, #4]
 80071a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d103      	bne.n	80071bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	1e5a      	subs	r2, r3, #1
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10a      	bne.n	8007206 <xQueueGenericReset+0x2a>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	60bb      	str	r3, [r7, #8]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007206:	f003 f895 	bl	800a334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	441a      	add	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	3b01      	subs	r3, #1
 8007238:	68f9      	ldr	r1, [r7, #12]
 800723a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800723c:	fb01 f303 	mul.w	r3, r1, r3
 8007240:	441a      	add	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	22ff      	movs	r2, #255	; 0xff
 800724a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	22ff      	movs	r2, #255	; 0xff
 8007252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d114      	bne.n	8007286 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d01a      	beq.n	800729a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3310      	adds	r3, #16
 8007268:	4618      	mov	r0, r3
 800726a:	f001 fe61 	bl	8008f30 <xTaskRemoveFromEventList>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d012      	beq.n	800729a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007274:	4b0c      	ldr	r3, [pc, #48]	; (80072a8 <xQueueGenericReset+0xcc>)
 8007276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	e009      	b.n	800729a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3310      	adds	r3, #16
 800728a:	4618      	mov	r0, r3
 800728c:	f7ff fef2 	bl	8007074 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3324      	adds	r3, #36	; 0x24
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff feed 	bl	8007074 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800729a:	f003 f87b 	bl	800a394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800729e:	2301      	movs	r3, #1
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08e      	sub	sp, #56	; 0x38
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <xQueueGenericCreateStatic+0x52>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <xQueueGenericCreateStatic+0x56>
 80072fe:	2301      	movs	r3, #1
 8007300:	e000      	b.n	8007304 <xQueueGenericCreateStatic+0x58>
 8007302:	2300      	movs	r3, #0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730c:	f383 8811 	msr	BASEPRI, r3
 8007310:	f3bf 8f6f 	isb	sy
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	623b      	str	r3, [r7, #32]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <xQueueGenericCreateStatic+0x7e>
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <xQueueGenericCreateStatic+0x82>
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <xQueueGenericCreateStatic+0x84>
 800732e:	2300      	movs	r3, #0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	61fb      	str	r3, [r7, #28]
}
 8007346:	bf00      	nop
 8007348:	e7fe      	b.n	8007348 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800734a:	2350      	movs	r3, #80	; 0x50
 800734c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b50      	cmp	r3, #80	; 0x50
 8007352:	d00a      	beq.n	800736a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	f383 8811 	msr	BASEPRI, r3
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f3bf 8f4f 	dsb	sy
 8007364:	61bb      	str	r3, [r7, #24]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800736a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800737e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f83f 	bl	8007410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007394:	4618      	mov	r0, r3
 8007396:	3730      	adds	r7, #48	; 0x30
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	; 0x28
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	613b      	str	r3, [r7, #16]
}
 80073c2:	bf00      	nop
 80073c4:	e7fe      	b.n	80073c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
 80073ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	3350      	adds	r3, #80	; 0x50
 80073d4:	4618      	mov	r0, r3
 80073d6:	f003 f8cf 	bl	800a578 <pvPortMalloc>
 80073da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d011      	beq.n	8007406 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	3350      	adds	r3, #80	; 0x50
 80073ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073f4:	79fa      	ldrb	r2, [r7, #7]
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f805 	bl	8007410 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007406:	69bb      	ldr	r3, [r7, #24]
	}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d103      	bne.n	800742c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e002      	b.n	8007432 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800743e:	2101      	movs	r1, #1
 8007440:	69b8      	ldr	r0, [r7, #24]
 8007442:	f7ff fecb 	bl	80071dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800744e:	78fb      	ldrb	r3, [r7, #3]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	68f9      	ldr	r1, [r7, #12]
 8007454:	2073      	movs	r0, #115	; 0x73
 8007456:	f003 ff53 	bl	800b300 <SEGGER_SYSVIEW_RecordU32x3>
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00e      	beq.n	800748e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007482:	2300      	movs	r3, #0
 8007484:	2200      	movs	r2, #0
 8007486:	2100      	movs	r1, #0
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f90b 	bl	80076a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007496:	b580      	push	{r7, lr}
 8007498:	b086      	sub	sp, #24
 800749a:	af00      	add	r7, sp, #0
 800749c:	4603      	mov	r3, r0
 800749e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074a0:	2301      	movs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	461a      	mov	r2, r3
 80074ac:	6939      	ldr	r1, [r7, #16]
 80074ae:	6978      	ldr	r0, [r7, #20]
 80074b0:	f7ff ff74 	bl	800739c <xQueueGenericCreate>
 80074b4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff ffd3 	bl	8007462 <prvInitialiseMutex>

		return xNewQueue;
 80074bc:	68fb      	ldr	r3, [r7, #12]
	}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b088      	sub	sp, #32
 80074ca:	af02      	add	r7, sp, #8
 80074cc:	4603      	mov	r3, r0
 80074ce:	6039      	str	r1, [r7, #0]
 80074d0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80074d2:	2301      	movs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	2300      	movs	r3, #0
 80074d8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2200      	movs	r2, #0
 80074e2:	6939      	ldr	r1, [r7, #16]
 80074e4:	6978      	ldr	r0, [r7, #20]
 80074e6:	f7ff fee1 	bl	80072ac <xQueueGenericCreateStatic>
 80074ea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff ffb8 	bl	8007462 <prvInitialiseMutex>

		return xNewQueue;
 80074f2:	68fb      	ldr	r3, [r7, #12]
	}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80074fc:	b590      	push	{r4, r7, lr}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	689c      	ldr	r4, [r3, #8]
 8007528:	f001 ff62 	bl	80093f0 <xTaskGetCurrentTaskHandle>
 800752c:	4603      	mov	r3, r0
 800752e:	429c      	cmp	r4, r3
 8007530:	d111      	bne.n	8007556 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	1e5a      	subs	r2, r3, #1
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007544:	2300      	movs	r3, #0
 8007546:	2200      	movs	r2, #0
 8007548:	2100      	movs	r1, #0
 800754a:	6938      	ldr	r0, [r7, #16]
 800754c:	f000 f8aa 	bl	80076a4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007550:	2301      	movs	r3, #1
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	e001      	b.n	800755a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800755a:	697b      	ldr	r3, [r7, #20]
	}
 800755c:	4618      	mov	r0, r3
 800755e:	371c      	adds	r7, #28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd90      	pop	{r4, r7, pc}

08007564 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007564:	b590      	push	{r4, r7, lr}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60fb      	str	r3, [r7, #12]
}
 800758a:	bf00      	nop
 800758c:	e7fe      	b.n	800758c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	689c      	ldr	r4, [r3, #8]
 8007592:	f001 ff2d 	bl	80093f0 <xTaskGetCurrentTaskHandle>
 8007596:	4603      	mov	r3, r0
 8007598:	429c      	cmp	r4, r3
 800759a:	d107      	bne.n	80075ac <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80075a6:	2301      	movs	r3, #1
 80075a8:	617b      	str	r3, [r7, #20]
 80075aa:	e00c      	b.n	80075c6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6938      	ldr	r0, [r7, #16]
 80075b0:	f000 fbfe 	bl	8007db0 <xQueueSemaphoreTake>
 80075b4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80075c6:	697b      	ldr	r3, [r7, #20]
	}
 80075c8:	4618      	mov	r0, r3
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd90      	pop	{r4, r7, pc}

080075d0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	61bb      	str	r3, [r7, #24]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d90a      	bls.n	8007616 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	617b      	str	r3, [r7, #20]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007616:	2302      	movs	r3, #2
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	2100      	movs	r1, #0
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff fe43 	bl	80072ac <xQueueGenericCreateStatic>
 8007626:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007634:	69fb      	ldr	r3, [r7, #28]
	}
 8007636:	4618      	mov	r0, r3
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800763e:	b580      	push	{r7, lr}
 8007640:	b086      	sub	sp, #24
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10a      	bne.n	8007664 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	613b      	str	r3, [r7, #16]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d90a      	bls.n	8007682 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	60fb      	str	r3, [r7, #12]
}
 800767e:	bf00      	nop
 8007680:	e7fe      	b.n	8007680 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007682:	2202      	movs	r2, #2
 8007684:	2100      	movs	r1, #0
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff fe88 	bl	800739c <xQueueGenericCreate>
 800768c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800769a:	697b      	ldr	r3, [r7, #20]
	}
 800769c:	4618      	mov	r0, r3
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b090      	sub	sp, #64	; 0x40
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076b2:	2300      	movs	r3, #0
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <xQueueGenericSend+0x32>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076d2:	bf00      	nop
 80076d4:	e7fe      	b.n	80076d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <xQueueGenericSend+0x40>
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <xQueueGenericSend+0x44>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <xQueueGenericSend+0x46>
 80076e8:	2300      	movs	r3, #0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <xQueueGenericSend+0x60>
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007700:	bf00      	nop
 8007702:	e7fe      	b.n	8007702 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2b02      	cmp	r3, #2
 8007708:	d103      	bne.n	8007712 <xQueueGenericSend+0x6e>
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <xQueueGenericSend+0x72>
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <xQueueGenericSend+0x74>
 8007716:	2300      	movs	r3, #0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10a      	bne.n	8007732 <xQueueGenericSend+0x8e>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	623b      	str	r3, [r7, #32]
}
 800772e:	bf00      	nop
 8007730:	e7fe      	b.n	8007730 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007732:	f001 fe6d 	bl	8009410 <xTaskGetSchedulerState>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <xQueueGenericSend+0x9e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <xQueueGenericSend+0xa2>
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <xQueueGenericSend+0xa4>
 8007746:	2300      	movs	r3, #0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10a      	bne.n	8007762 <xQueueGenericSend+0xbe>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	61fb      	str	r3, [r7, #28]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007762:	f002 fde7 	bl	800a334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776e:	429a      	cmp	r2, r3
 8007770:	d302      	bcc.n	8007778 <xQueueGenericSend+0xd4>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d136      	bne.n	80077e6 <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	4618      	mov	r0, r3
 800777c:	f004 fa72 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	6879      	ldr	r1, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	460b      	mov	r3, r1
 800778a:	4601      	mov	r1, r0
 800778c:	205a      	movs	r0, #90	; 0x5a
 800778e:	f003 fe2d 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007798:	f000 fd28 	bl	80081ec <prvCopyDataToQueue>
 800779c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d010      	beq.n	80077c8 <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	3324      	adds	r3, #36	; 0x24
 80077aa:	4618      	mov	r0, r3
 80077ac:	f001 fbc0 	bl	8008f30 <xTaskRemoveFromEventList>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d013      	beq.n	80077de <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077b6:	4b4d      	ldr	r3, [pc, #308]	; (80078ec <xQueueGenericSend+0x248>)
 80077b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	e00a      	b.n	80077de <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d007      	beq.n	80077de <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077ce:	4b47      	ldr	r3, [pc, #284]	; (80078ec <xQueueGenericSend+0x248>)
 80077d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077de:	f002 fdd9 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e07d      	b.n	80078e2 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d110      	bne.n	800780e <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077ec:	f002 fdd2 	bl	800a394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	4618      	mov	r0, r3
 80077f4:	f004 fa36 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	460b      	mov	r3, r1
 8007802:	4601      	mov	r1, r0
 8007804:	205a      	movs	r0, #90	; 0x5a
 8007806:	f003 fdf1 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800780a:	2300      	movs	r3, #0
 800780c:	e069      	b.n	80078e2 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fc57 	bl	80090cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800781e:	2301      	movs	r3, #1
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007822:	f002 fdb7 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007826:	f001 f8f5 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800782a:	f002 fd83 	bl	800a334 <vPortEnterCritical>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007834:	b25b      	sxtb	r3, r3
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800783a:	d103      	bne.n	8007844 <xQueueGenericSend+0x1a0>
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2200      	movs	r2, #0
 8007840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800784a:	b25b      	sxtb	r3, r3
 800784c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007850:	d103      	bne.n	800785a <xQueueGenericSend+0x1b6>
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800785a:	f002 fd9b 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800785e:	1d3a      	adds	r2, r7, #4
 8007860:	f107 0314 	add.w	r3, r7, #20
 8007864:	4611      	mov	r1, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fc46 	bl	80090f8 <xTaskCheckForTimeOut>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d124      	bne.n	80078bc <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007874:	f000 fdb2 	bl	80083dc <prvIsQueueFull>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d018      	beq.n	80078b0 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	3310      	adds	r3, #16
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	4611      	mov	r1, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fac4 	bl	8008e14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800788c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800788e:	f000 fd3d 	bl	800830c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007892:	f001 f8cd 	bl	8008a30 <xTaskResumeAll>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	f47f af62 	bne.w	8007762 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800789e:	4b13      	ldr	r3, [pc, #76]	; (80078ec <xQueueGenericSend+0x248>)
 80078a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	e758      	b.n	8007762 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078b2:	f000 fd2b 	bl	800830c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078b6:	f001 f8bb 	bl	8008a30 <xTaskResumeAll>
 80078ba:	e752      	b.n	8007762 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078be:	f000 fd25 	bl	800830c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078c2:	f001 f8b5 	bl	8008a30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	4618      	mov	r0, r3
 80078ca:	f004 f9cb 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	6879      	ldr	r1, [r7, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	460b      	mov	r3, r1
 80078d8:	4601      	mov	r1, r0
 80078da:	205a      	movs	r0, #90	; 0x5a
 80078dc:	f003 fd86 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80078e0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3738      	adds	r7, #56	; 0x38
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b090      	sub	sp, #64	; 0x40
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <xQueueGenericSendFromISR+0x3c>
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <xQueueGenericSendFromISR+0x40>
 800792c:	2301      	movs	r3, #1
 800792e:	e000      	b.n	8007932 <xQueueGenericSendFromISR+0x42>
 8007930:	2300      	movs	r3, #0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d103      	bne.n	800795a <xQueueGenericSendFromISR+0x6a>
 8007952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <xQueueGenericSendFromISR+0x6e>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <xQueueGenericSendFromISR+0x70>
 800795e:	2300      	movs	r3, #0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	623b      	str	r3, [r7, #32]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800797a:	f002 fdbd 	bl	800a4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800797e:	f3ef 8211 	mrs	r2, BASEPRI
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	61fa      	str	r2, [r7, #28]
 8007994:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007996:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007998:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d302      	bcc.n	80079ac <xQueueGenericSendFromISR+0xbc>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d139      	bne.n	8007a20 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80079bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079be:	4618      	mov	r0, r3
 80079c0:	f004 f950 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 80079c4:	4601      	mov	r1, r0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	461a      	mov	r2, r3
 80079ca:	2060      	movs	r0, #96	; 0x60
 80079cc:	f003 fc3e 	bl	800b24c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079d6:	f000 fc09 	bl	80081ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80079de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e2:	d112      	bne.n	8007a0a <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d016      	beq.n	8007a1a <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	3324      	adds	r3, #36	; 0x24
 80079f0:	4618      	mov	r0, r3
 80079f2:	f001 fa9d 	bl	8008f30 <xTaskRemoveFromEventList>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	e007      	b.n	8007a1a <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a0e:	3301      	adds	r3, #1
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	b25a      	sxtb	r2, r3
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007a1e:	e00b      	b.n	8007a38 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	4618      	mov	r0, r3
 8007a24:	f004 f91e 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007a28:	4601      	mov	r1, r0
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2060      	movs	r0, #96	; 0x60
 8007a30:	f003 fc0c 	bl	800b24c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3740      	adds	r7, #64	; 0x40
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b08e      	sub	sp, #56	; 0x38
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	623b      	str	r3, [r7, #32]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00a      	beq.n	8007a96 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	61fb      	str	r3, [r7, #28]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d103      	bne.n	8007aa6 <xQueueGiveFromISR+0x58>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <xQueueGiveFromISR+0x5c>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e000      	b.n	8007aac <xQueueGiveFromISR+0x5e>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	61bb      	str	r3, [r7, #24]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ac6:	f002 fd17 	bl	800a4f8 <vPortValidateInterruptPriority>
	__asm volatile
 8007aca:	f3ef 8211 	mrs	r2, BASEPRI
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	617a      	str	r2, [r7, #20]
 8007ae0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007ae2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d235      	bcs.n	8007b62 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	4618      	mov	r0, r3
 8007b04:	f004 f8ae 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007b08:	4601      	mov	r1, r0
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	2060      	movs	r0, #96	; 0x60
 8007b10:	f003 fb9c 	bl	800b24c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b24:	d112      	bne.n	8007b4c <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	3324      	adds	r3, #36	; 0x24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 f9fc 	bl	8008f30 <xTaskRemoveFromEventList>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00e      	beq.n	8007b5c <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2201      	movs	r2, #1
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e007      	b.n	8007b5c <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b50:	3301      	adds	r3, #1
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	b25a      	sxtb	r2, r3
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b60:	e00b      	b.n	8007b7a <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b64:	4618      	mov	r0, r3
 8007b66:	f004 f87d 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	2060      	movs	r0, #96	; 0x60
 8007b72:	f003 fb6b 	bl	800b24c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f383 8811 	msr	BASEPRI, r3
}
 8007b84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3738      	adds	r7, #56	; 0x38
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b90:	b590      	push	{r4, r7, lr}
 8007b92:	b08f      	sub	sp, #60	; 0x3c
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <xQueueReceive+0x30>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	623b      	str	r3, [r7, #32]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d103      	bne.n	8007bce <xQueueReceive+0x3e>
 8007bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <xQueueReceive+0x42>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <xQueueReceive+0x44>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <xQueueReceive+0x5e>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	61fb      	str	r3, [r7, #28]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bee:	f001 fc0f 	bl	8009410 <xTaskGetSchedulerState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <xQueueReceive+0x6e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <xQueueReceive+0x72>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueReceive+0x74>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xQueueReceive+0x8e>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61bb      	str	r3, [r7, #24]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c1e:	f002 fb89 	bl	800a334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d02f      	beq.n	8007c8e <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c32:	f000 fb45 	bl	80082c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8007c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f004 f813 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007c3e:	4604      	mov	r4, r0
 8007c40:	2000      	movs	r0, #0
 8007c42:	f004 f80f 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007c46:	4602      	mov	r2, r0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	9100      	str	r1, [sp, #0]
 8007c4e:	4621      	mov	r1, r4
 8007c50:	205c      	movs	r0, #92	; 0x5c
 8007c52:	f003 fbcb 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	1e5a      	subs	r2, r3, #1
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00f      	beq.n	8007c86 <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c68:	3310      	adds	r3, #16
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 f960 	bl	8008f30 <xTaskRemoveFromEventList>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c76:	4b4d      	ldr	r3, [pc, #308]	; (8007dac <xQueueReceive+0x21c>)
 8007c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c86:	f002 fb85 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e08a      	b.n	8007da4 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d113      	bne.n	8007cbc <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c94:	f002 fb7e 	bl	800a394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f003 ffe2 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	f003 ffde 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2101      	movs	r1, #1
 8007cae:	9100      	str	r1, [sp, #0]
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	205c      	movs	r0, #92	; 0x5c
 8007cb4:	f003 fb9a 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e073      	b.n	8007da4 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d106      	bne.n	8007cd0 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cc2:	f107 0310 	add.w	r3, r7, #16
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 fa00 	bl	80090cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cd0:	f002 fb60 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cd4:	f000 fe9e 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cd8:	f002 fb2c 	bl	800a334 <vPortEnterCritical>
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ce2:	b25b      	sxtb	r3, r3
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d103      	bne.n	8007cf2 <xQueueReceive+0x162>
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cf8:	b25b      	sxtb	r3, r3
 8007cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfe:	d103      	bne.n	8007d08 <xQueueReceive+0x178>
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d08:	f002 fb44 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d0c:	1d3a      	adds	r2, r7, #4
 8007d0e:	f107 0310 	add.w	r3, r7, #16
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 f9ef 	bl	80090f8 <xTaskCheckForTimeOut>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d124      	bne.n	8007d6a <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d22:	f000 fb45 	bl	80083b0 <prvIsQueueEmpty>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d018      	beq.n	8007d5e <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	3324      	adds	r3, #36	; 0x24
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 f86d 	bl	8008e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d3c:	f000 fae6 	bl	800830c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d40:	f000 fe76 	bl	8008a30 <xTaskResumeAll>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f47f af69 	bne.w	8007c1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d4c:	4b17      	ldr	r3, [pc, #92]	; (8007dac <xQueueReceive+0x21c>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	e75f      	b.n	8007c1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d60:	f000 fad4 	bl	800830c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d64:	f000 fe64 	bl	8008a30 <xTaskResumeAll>
 8007d68:	e759      	b.n	8007c1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d6c:	f000 face 	bl	800830c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d70:	f000 fe5e 	bl	8008a30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d76:	f000 fb1b 	bl	80083b0 <prvIsQueueEmpty>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f43f af4e 	beq.w	8007c1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	4618      	mov	r0, r3
 8007d86:	f003 ff6d 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	f003 ff69 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007d92:	4602      	mov	r2, r0
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2101      	movs	r1, #1
 8007d98:	9100      	str	r1, [sp, #0]
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	205c      	movs	r0, #92	; 0x5c
 8007d9e:	f003 fb25 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8007da2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3734      	adds	r7, #52	; 0x34
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd90      	pop	{r4, r7, pc}
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b091      	sub	sp, #68	; 0x44
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	623b      	str	r3, [r7, #32]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	61fb      	str	r3, [r7, #28]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e00:	f001 fb06 	bl	8009410 <xTaskGetSchedulerState>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <xQueueSemaphoreTake+0x60>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <xQueueSemaphoreTake+0x64>
 8007e10:	2301      	movs	r3, #1
 8007e12:	e000      	b.n	8007e16 <xQueueSemaphoreTake+0x66>
 8007e14:	2300      	movs	r3, #0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	61bb      	str	r3, [r7, #24]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e30:	f002 fa80 	bl	800a334 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d034      	beq.n	8007eaa <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8007e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e42:	4618      	mov	r0, r3
 8007e44:	f003 ff0e 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007e48:	4604      	mov	r4, r0
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f003 ff0a 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007e50:	4602      	mov	r2, r0
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2101      	movs	r1, #1
 8007e56:	9100      	str	r1, [sp, #0]
 8007e58:	4621      	mov	r1, r4
 8007e5a:	205c      	movs	r0, #92	; 0x5c
 8007e5c:	f003 fac6 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	1e5a      	subs	r2, r3, #1
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e70:	f001 fc76 	bl	8009760 <pvTaskIncrementMutexHeldCount>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00f      	beq.n	8007ea2 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	3310      	adds	r3, #16
 8007e86:	4618      	mov	r0, r3
 8007e88:	f001 f852 	bl	8008f30 <xTaskRemoveFromEventList>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e92:	4b64      	ldr	r3, [pc, #400]	; (8008024 <xQueueSemaphoreTake+0x274>)
 8007e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ea2:	f002 fa77 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e0b7      	b.n	800801a <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d121      	bne.n	8007ef4 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00a      	beq.n	8007ecc <xQueueSemaphoreTake+0x11c>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	617b      	str	r3, [r7, #20]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ecc:	f002 fa62 	bl	800a394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f003 fec6 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007ed8:	4604      	mov	r4, r0
 8007eda:	2000      	movs	r0, #0
 8007edc:	f003 fec2 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	9100      	str	r1, [sp, #0]
 8007ee8:	4621      	mov	r1, r4
 8007eea:	205c      	movs	r0, #92	; 0x5c
 8007eec:	f003 fa7e 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e092      	b.n	800801a <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007efa:	f107 030c 	add.w	r3, r7, #12
 8007efe:	4618      	mov	r0, r3
 8007f00:	f001 f8e4 	bl	80090cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f08:	f002 fa44 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f0c:	f000 fd82 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f10:	f002 fa10 	bl	800a334 <vPortEnterCritical>
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f1a:	b25b      	sxtb	r3, r3
 8007f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f20:	d103      	bne.n	8007f2a <xQueueSemaphoreTake+0x17a>
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f30:	b25b      	sxtb	r3, r3
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d103      	bne.n	8007f40 <xQueueSemaphoreTake+0x190>
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f40:	f002 fa28 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f44:	463a      	mov	r2, r7
 8007f46:	f107 030c 	add.w	r3, r7, #12
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f001 f8d3 	bl	80090f8 <xTaskCheckForTimeOut>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d132      	bne.n	8007fbe <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f5a:	f000 fa29 	bl	80083b0 <prvIsQueueEmpty>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d026      	beq.n	8007fb2 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d109      	bne.n	8007f80 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8007f6c:	f002 f9e2 	bl	800a334 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 fa69 	bl	800944c <xTaskPriorityInherit>
 8007f7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f7c:	f002 fa0a 	bl	800a394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	3324      	adds	r3, #36	; 0x24
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 ff43 	bl	8008e14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f90:	f000 f9bc 	bl	800830c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f94:	f000 fd4c 	bl	8008a30 <xTaskResumeAll>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f47f af48 	bne.w	8007e30 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fa0:	4b20      	ldr	r3, [pc, #128]	; (8008024 <xQueueSemaphoreTake+0x274>)
 8007fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	e73e      	b.n	8007e30 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fb4:	f000 f9aa 	bl	800830c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fb8:	f000 fd3a 	bl	8008a30 <xTaskResumeAll>
 8007fbc:	e738      	b.n	8007e30 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc0:	f000 f9a4 	bl	800830c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fc4:	f000 fd34 	bl	8008a30 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fca:	f000 f9f1 	bl	80083b0 <prvIsQueueEmpty>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f43f af2d 	beq.w	8007e30 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00d      	beq.n	8007ff8 <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8007fdc:	f002 f9aa 	bl	800a334 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe2:	f000 f8eb 	bl	80081bc <prvGetDisinheritPriorityAfterTimeout>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 fb14 	bl	800961c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ff4:	f002 f9ce 	bl	800a394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f003 fe32 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8008000:	4604      	mov	r4, r0
 8008002:	2000      	movs	r0, #0
 8008004:	f003 fe2e 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8008008:	4602      	mov	r2, r0
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2101      	movs	r1, #1
 800800e:	9100      	str	r1, [sp, #0]
 8008010:	4621      	mov	r1, r4
 8008012:	205c      	movs	r0, #92	; 0x5c
 8008014:	f003 f9ea 	bl	800b3ec <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8008018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800801a:	4618      	mov	r0, r3
 800801c:	373c      	adds	r7, #60	; 0x3c
 800801e:	46bd      	mov	sp, r7
 8008020:	bd90      	pop	{r4, r7, pc}
 8008022:	bf00      	nop
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b08f      	sub	sp, #60	; 0x3c
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10a      	bne.n	8008054 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	623b      	str	r3, [r7, #32]
}
 8008050:	bf00      	nop
 8008052:	e7fe      	b.n	8008052 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d103      	bne.n	8008062 <xQueueReceiveFromISR+0x3a>
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <xQueueReceiveFromISR+0x3e>
 8008062:	2301      	movs	r3, #1
 8008064:	e000      	b.n	8008068 <xQueueReceiveFromISR+0x40>
 8008066:	2300      	movs	r3, #0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d10a      	bne.n	8008082 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800806c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008070:	f383 8811 	msr	BASEPRI, r3
 8008074:	f3bf 8f6f 	isb	sy
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	61fb      	str	r3, [r7, #28]
}
 800807e:	bf00      	nop
 8008080:	e7fe      	b.n	8008080 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008082:	f002 fa39 	bl	800a4f8 <vPortValidateInterruptPriority>
	__asm volatile
 8008086:	f3ef 8211 	mrs	r2, BASEPRI
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	61ba      	str	r2, [r7, #24]
 800809c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800809e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d03e      	beq.n	800812c <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80080b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ba:	4618      	mov	r0, r3
 80080bc:	f003 fdd2 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 80080c0:	4604      	mov	r4, r0
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f003 fdcd 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 80080ca:	4602      	mov	r2, r0
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4621      	mov	r1, r4
 80080d0:	2062      	movs	r0, #98	; 0x62
 80080d2:	f003 f915 	bl	800b300 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080d6:	68b9      	ldr	r1, [r7, #8]
 80080d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080da:	f000 f8f1 	bl	80082c0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	1e5a      	subs	r2, r3, #1
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80080e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d112      	bne.n	8008116 <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d016      	beq.n	8008126 <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	3310      	adds	r3, #16
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 ff17 	bl	8008f30 <xTaskRemoveFromEventList>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00e      	beq.n	8008126 <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00b      	beq.n	8008126 <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e007      	b.n	8008126 <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800811a:	3301      	adds	r3, #1
 800811c:	b2db      	uxtb	r3, r3
 800811e:	b25a      	sxtb	r2, r3
 8008120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008126:	2301      	movs	r3, #1
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
 800812a:	e010      	b.n	800814e <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 800812c:	2300      	movs	r3, #0
 800812e:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	4618      	mov	r0, r3
 8008134:	f003 fd96 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8008138:	4604      	mov	r4, r0
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	4618      	mov	r0, r3
 800813e:	f003 fd91 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8008142:	4602      	mov	r2, r0
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4621      	mov	r1, r4
 8008148:	2062      	movs	r0, #98	; 0x62
 800814a:	f003 f8d9 	bl	800b300 <SEGGER_SYSVIEW_RecordU32x3>
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f383 8811 	msr	BASEPRI, r3
}
 8008158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800815c:	4618      	mov	r0, r3
 800815e:	373c      	adds	r7, #60	; 0x3c
 8008160:	46bd      	mov	sp, r7
 8008162:	bd90      	pop	{r4, r7, pc}

08008164 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <vQueueDelete+0x28>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60bb      	str	r3, [r7, #8]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4618      	mov	r0, r3
 8008190:	f003 fd68 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8008194:	4603      	mov	r3, r0
 8008196:	4619      	mov	r1, r3
 8008198:	205f      	movs	r0, #95	; 0x5f
 800819a:	f003 f81b 	bl	800b1d4 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f966 	bl	8008470 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d102      	bne.n	80081b4 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f002 faae 	bl	800a710 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80081b4:	bf00      	nop
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e001      	b.n	80081de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081da:	2300      	movs	r3, #0
 80081dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081de:	68fb      	ldr	r3, [r7, #12]
	}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10d      	bne.n	8008226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d14d      	bne.n	80082ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	4618      	mov	r0, r3
 8008218:	f001 f98a 	bl	8009530 <xTaskPriorityDisinherit>
 800821c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	e043      	b.n	80082ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d119      	bne.n	8008260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6858      	ldr	r0, [r3, #4]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008234:	461a      	mov	r2, r3
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	f004 fa2b 	bl	800c692 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	441a      	add	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	429a      	cmp	r2, r3
 8008254:	d32b      	bcc.n	80082ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	e026      	b.n	80082ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68d8      	ldr	r0, [r3, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	461a      	mov	r2, r3
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	f004 fa11 	bl	800c692 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68da      	ldr	r2, [r3, #12]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	425b      	negs	r3, r3
 800827a:	441a      	add	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d207      	bcs.n	800829c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	425b      	negs	r3, r3
 8008296:	441a      	add	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d105      	bne.n	80082ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80082b6:	697b      	ldr	r3, [r7, #20]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3718      	adds	r7, #24
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d018      	beq.n	8008304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68da      	ldr	r2, [r3, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	441a      	add	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d303      	bcc.n	80082f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68d9      	ldr	r1, [r3, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fc:	461a      	mov	r2, r3
 80082fe:	6838      	ldr	r0, [r7, #0]
 8008300:	f004 f9c7 	bl	800c692 <memcpy>
	}
}
 8008304:	bf00      	nop
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008314:	f002 f80e 	bl	800a334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800831e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008320:	e011      	b.n	8008346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	2b00      	cmp	r3, #0
 8008328:	d012      	beq.n	8008350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3324      	adds	r3, #36	; 0x24
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fdfe 	bl	8008f30 <xTaskRemoveFromEventList>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800833a:	f000 ff3f 	bl	80091bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	3b01      	subs	r3, #1
 8008342:	b2db      	uxtb	r3, r3
 8008344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800834a:	2b00      	cmp	r3, #0
 800834c:	dce9      	bgt.n	8008322 <prvUnlockQueue+0x16>
 800834e:	e000      	b.n	8008352 <prvUnlockQueue+0x46>
					break;
 8008350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	22ff      	movs	r2, #255	; 0xff
 8008356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800835a:	f002 f81b 	bl	800a394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800835e:	f001 ffe9 	bl	800a334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800836a:	e011      	b.n	8008390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d012      	beq.n	800839a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3310      	adds	r3, #16
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fdd9 	bl	8008f30 <xTaskRemoveFromEventList>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008384:	f000 ff1a 	bl	80091bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	3b01      	subs	r3, #1
 800838c:	b2db      	uxtb	r3, r3
 800838e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	dce9      	bgt.n	800836c <prvUnlockQueue+0x60>
 8008398:	e000      	b.n	800839c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800839a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	22ff      	movs	r2, #255	; 0xff
 80083a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80083a4:	f001 fff6 	bl	800a394 <vPortExitCritical>
}
 80083a8:	bf00      	nop
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083b8:	f001 ffbc 	bl	800a334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d102      	bne.n	80083ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80083c4:	2301      	movs	r3, #1
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	e001      	b.n	80083ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083ce:	f001 ffe1 	bl	800a394 <vPortExitCritical>

	return xReturn;
 80083d2:	68fb      	ldr	r3, [r7, #12]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80083e4:	f001 ffa6 	bl	800a334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d102      	bne.n	80083fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e001      	b.n	80083fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80083fa:	2300      	movs	r3, #0
 80083fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80083fe:	f001 ffc9 	bl	800a394 <vPortExitCritical>

	return xReturn;
 8008402:	68fb      	ldr	r3, [r7, #12]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008416:	2300      	movs	r3, #0
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	e01e      	b.n	800845a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800841c:	4a13      	ldr	r2, [pc, #76]	; (800846c <vQueueAddToRegistry+0x60>)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d115      	bne.n	8008454 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008428:	4910      	ldr	r1, [pc, #64]	; (800846c <vQueueAddToRegistry+0x60>)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008432:	4a0e      	ldr	r2, [pc, #56]	; (800846c <vQueueAddToRegistry+0x60>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	4413      	add	r3, r2
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4618      	mov	r0, r3
 8008442:	f003 fc0f 	bl	800bc64 <SEGGER_SYSVIEW_ShrinkId>
 8008446:	4601      	mov	r1, r0
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	461a      	mov	r2, r3
 800844c:	2071      	movs	r0, #113	; 0x71
 800844e:	f002 fefd 	bl	800b24c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8008452:	e006      	b.n	8008462 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3301      	adds	r3, #1
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b07      	cmp	r3, #7
 800845e:	d9dd      	bls.n	800841c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20026410 	.word	0x20026410

08008470 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e016      	b.n	80084ac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800847e:	4a10      	ldr	r2, [pc, #64]	; (80084c0 <vQueueUnregisterQueue+0x50>)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	429a      	cmp	r2, r3
 800848c:	d10b      	bne.n	80084a6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800848e:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <vQueueUnregisterQueue+0x50>)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2100      	movs	r1, #0
 8008494:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <vQueueUnregisterQueue+0x50>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	4413      	add	r3, r2
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]
				break;
 80084a4:	e006      	b.n	80084b4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3301      	adds	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b07      	cmp	r3, #7
 80084b0:	d9e5      	bls.n	800847e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80084b2:	bf00      	nop
 80084b4:	bf00      	nop
 80084b6:	3714      	adds	r7, #20
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	20026410 	.word	0x20026410

080084c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80084d4:	f001 ff2e 	bl	800a334 <vPortEnterCritical>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084de:	b25b      	sxtb	r3, r3
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d103      	bne.n	80084ee <vQueueWaitForMessageRestricted+0x2a>
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084f4:	b25b      	sxtb	r3, r3
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d103      	bne.n	8008504 <vQueueWaitForMessageRestricted+0x40>
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008504:	f001 ff46 	bl	800a394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	3324      	adds	r3, #36	; 0x24
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fcdb 	bl	8008ed4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800851e:	6978      	ldr	r0, [r7, #20]
 8008520:	f7ff fef4 	bl	800830c <prvUnlockQueue>
	}
 8008524:	bf00      	nop
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08e      	sub	sp, #56	; 0x38
 8008530:	af04      	add	r7, sp, #16
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	623b      	str	r3, [r7, #32]
}
 8008552:	bf00      	nop
 8008554:	e7fe      	b.n	8008554 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10a      	bne.n	8008572 <xTaskCreateStatic+0x46>
	__asm volatile
 800855c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	61fb      	str	r3, [r7, #28]
}
 800856e:	bf00      	nop
 8008570:	e7fe      	b.n	8008570 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008572:	235c      	movs	r3, #92	; 0x5c
 8008574:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	2b5c      	cmp	r3, #92	; 0x5c
 800857a:	d00a      	beq.n	8008592 <xTaskCreateStatic+0x66>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008592:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01e      	beq.n	80085d8 <xTaskCreateStatic+0xac>
 800859a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	2202      	movs	r2, #2
 80085ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085b2:	2300      	movs	r3, #0
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	9302      	str	r3, [sp, #8]
 80085ba:	f107 0314 	add.w	r3, r7, #20
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f850 	bl	8008670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085d2:	f000 f8dd 	bl	8008790 <prvAddNewTaskToReadyList>
 80085d6:	e001      	b.n	80085dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085dc:	697b      	ldr	r3, [r7, #20]
	}
 80085de:	4618      	mov	r0, r3
 80085e0:	3728      	adds	r7, #40	; 0x28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b08c      	sub	sp, #48	; 0x30
 80085ea:	af04      	add	r7, sp, #16
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f001 ffbc 	bl	800a578 <pvPortMalloc>
 8008600:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00e      	beq.n	8008626 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008608:	205c      	movs	r0, #92	; 0x5c
 800860a:	f001 ffb5 	bl	800a578 <pvPortMalloc>
 800860e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	631a      	str	r2, [r3, #48]	; 0x30
 800861c:	e005      	b.n	800862a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800861e:	6978      	ldr	r0, [r7, #20]
 8008620:	f002 f876 	bl	800a710 <vPortFree>
 8008624:	e001      	b.n	800862a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d017      	beq.n	8008660 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008638:	88fa      	ldrh	r2, [r7, #6]
 800863a:	2300      	movs	r3, #0
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	9302      	str	r3, [sp, #8]
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f80e 	bl	8008670 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008654:	69f8      	ldr	r0, [r7, #28]
 8008656:	f000 f89b 	bl	8008790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800865a:	2301      	movs	r3, #1
 800865c:	61bb      	str	r3, [r7, #24]
 800865e:	e002      	b.n	8008666 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008666:	69bb      	ldr	r3, [r7, #24]
	}
 8008668:	4618      	mov	r0, r3
 800866a:	3720      	adds	r7, #32
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b088      	sub	sp, #32
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	461a      	mov	r2, r3
 8008688:	21a5      	movs	r1, #165	; 0xa5
 800868a:	f003 ff86 	bl	800c59a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800868e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008698:	3b01      	subs	r3, #1
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	f023 0307 	bic.w	r3, r3, #7
 80086a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80086b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b6:	f383 8811 	msr	BASEPRI, r3
 80086ba:	f3bf 8f6f 	isb	sy
 80086be:	f3bf 8f4f 	dsb	sy
 80086c2:	617b      	str	r3, [r7, #20]
}
 80086c4:	bf00      	nop
 80086c6:	e7fe      	b.n	80086c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d01f      	beq.n	800870e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086ce:	2300      	movs	r3, #0
 80086d0:	61fb      	str	r3, [r7, #28]
 80086d2:	e012      	b.n	80086fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	4413      	add	r3, r2
 80086da:	7819      	ldrb	r1, [r3, #0]
 80086dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	4413      	add	r3, r2
 80086e2:	3334      	adds	r3, #52	; 0x34
 80086e4:	460a      	mov	r2, r1
 80086e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d006      	beq.n	8008702 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	3301      	adds	r3, #1
 80086f8:	61fb      	str	r3, [r7, #28]
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	2b0f      	cmp	r3, #15
 80086fe:	d9e9      	bls.n	80086d4 <prvInitialiseNewTask+0x64>
 8008700:	e000      	b.n	8008704 <prvInitialiseNewTask+0x94>
			{
				break;
 8008702:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008706:	2200      	movs	r2, #0
 8008708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800870c:	e003      	b.n	8008716 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	2b37      	cmp	r3, #55	; 0x37
 800871a:	d901      	bls.n	8008720 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800871c:	2337      	movs	r3, #55	; 0x37
 800871e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008724:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800872a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	2200      	movs	r2, #0
 8008730:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	3304      	adds	r3, #4
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fcbc 	bl	80070b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	3318      	adds	r3, #24
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fcb7 	bl	80070b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	2200      	movs	r2, #0
 8008760:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	68f9      	ldr	r1, [r7, #12]
 800876e:	69b8      	ldr	r0, [r7, #24]
 8008770:	f001 fcb0 	bl	800a0d4 <pxPortInitialiseStack>
 8008774:	4602      	mov	r2, r0
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008786:	bf00      	nop
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008790:	b5b0      	push	{r4, r5, r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af02      	add	r7, sp, #8
 8008796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008798:	f001 fdcc 	bl	800a334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800879c:	4b3c      	ldr	r3, [pc, #240]	; (8008890 <prvAddNewTaskToReadyList+0x100>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	4a3b      	ldr	r2, [pc, #236]	; (8008890 <prvAddNewTaskToReadyList+0x100>)
 80087a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087a6:	4b3b      	ldr	r3, [pc, #236]	; (8008894 <prvAddNewTaskToReadyList+0x104>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d109      	bne.n	80087c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087ae:	4a39      	ldr	r2, [pc, #228]	; (8008894 <prvAddNewTaskToReadyList+0x104>)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087b4:	4b36      	ldr	r3, [pc, #216]	; (8008890 <prvAddNewTaskToReadyList+0x100>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d110      	bne.n	80087de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087bc:	f000 fd22 	bl	8009204 <prvInitialiseTaskLists>
 80087c0:	e00d      	b.n	80087de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087c2:	4b35      	ldr	r3, [pc, #212]	; (8008898 <prvAddNewTaskToReadyList+0x108>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80087ca:	4b32      	ldr	r3, [pc, #200]	; (8008894 <prvAddNewTaskToReadyList+0x104>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d802      	bhi.n	80087de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80087d8:	4a2e      	ldr	r2, [pc, #184]	; (8008894 <prvAddNewTaskToReadyList+0x104>)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80087de:	4b2f      	ldr	r3, [pc, #188]	; (800889c <prvAddNewTaskToReadyList+0x10c>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3301      	adds	r3, #1
 80087e4:	4a2d      	ldr	r2, [pc, #180]	; (800889c <prvAddNewTaskToReadyList+0x10c>)
 80087e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80087e8:	4b2c      	ldr	r3, [pc, #176]	; (800889c <prvAddNewTaskToReadyList+0x10c>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d016      	beq.n	8008824 <prvAddNewTaskToReadyList+0x94>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f003 f96d 	bl	800bad8 <SEGGER_SYSVIEW_OnTaskCreate>
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	461d      	mov	r5, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	461c      	mov	r4, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881a:	1ae3      	subs	r3, r4, r3
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	462b      	mov	r3, r5
 8008820:	f003 fcec 	bl	800c1fc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4618      	mov	r0, r3
 8008828:	f003 f9da 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008830:	4b1b      	ldr	r3, [pc, #108]	; (80088a0 <prvAddNewTaskToReadyList+0x110>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d903      	bls.n	8008840 <prvAddNewTaskToReadyList+0xb0>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	4a18      	ldr	r2, [pc, #96]	; (80088a0 <prvAddNewTaskToReadyList+0x110>)
 800883e:	6013      	str	r3, [r2, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <prvAddNewTaskToReadyList+0x114>)
 800884e:	441a      	add	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	3304      	adds	r3, #4
 8008854:	4619      	mov	r1, r3
 8008856:	4610      	mov	r0, r2
 8008858:	f7fe fc39 	bl	80070ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800885c:	f001 fd9a 	bl	800a394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008860:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <prvAddNewTaskToReadyList+0x108>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00e      	beq.n	8008886 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008868:	4b0a      	ldr	r3, [pc, #40]	; (8008894 <prvAddNewTaskToReadyList+0x104>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	429a      	cmp	r2, r3
 8008874:	d207      	bcs.n	8008886 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <prvAddNewTaskToReadyList+0x118>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bdb0      	pop	{r4, r5, r7, pc}
 800888e:	bf00      	nop
 8008890:	20026924 	.word	0x20026924
 8008894:	20026450 	.word	0x20026450
 8008898:	20026930 	.word	0x20026930
 800889c:	20026940 	.word	0x20026940
 80088a0:	2002692c 	.word	0x2002692c
 80088a4:	20026454 	.word	0x20026454
 80088a8:	e000ed04 	.word	0xe000ed04

080088ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d01b      	beq.n	80088f6 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088be:	4b15      	ldr	r3, [pc, #84]	; (8008914 <vTaskDelay+0x68>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <vTaskDelay+0x30>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	60bb      	str	r3, [r7, #8]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088dc:	f000 f89a 	bl	8008a14 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	2023      	movs	r0, #35	; 0x23
 80088e4:	f002 fc76 	bl	800b1d4 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088e8:	2100      	movs	r1, #0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 ff4c 	bl	8009788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088f0:	f000 f89e 	bl	8008a30 <xTaskResumeAll>
 80088f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <vTaskDelay+0x6c>)
 80088fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800890c:	bf00      	nop
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	2002694c 	.word	0x2002694c
 8008918:	e000ed04 	.word	0xe000ed04

0800891c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	; 0x28
 8008920:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800892a:	463a      	mov	r2, r7
 800892c:	1d39      	adds	r1, r7, #4
 800892e:	f107 0308 	add.w	r3, r7, #8
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe f97c 	bl	8006c30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	9202      	str	r2, [sp, #8]
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	460a      	mov	r2, r1
 800894a:	492b      	ldr	r1, [pc, #172]	; (80089f8 <vTaskStartScheduler+0xdc>)
 800894c:	482b      	ldr	r0, [pc, #172]	; (80089fc <vTaskStartScheduler+0xe0>)
 800894e:	f7ff fded 	bl	800852c <xTaskCreateStatic>
 8008952:	4603      	mov	r3, r0
 8008954:	4a2a      	ldr	r2, [pc, #168]	; (8008a00 <vTaskStartScheduler+0xe4>)
 8008956:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008958:	4b29      	ldr	r3, [pc, #164]	; (8008a00 <vTaskStartScheduler+0xe4>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008960:	2301      	movs	r3, #1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	e001      	b.n	800896a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d102      	bne.n	8008976 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008970:	f000 ff5e 	bl	8009830 <xTimerCreateTimerTask>
 8008974:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d129      	bne.n	80089d0 <vTaskStartScheduler+0xb4>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	613b      	str	r3, [r7, #16]
}
 800898e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008990:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <vTaskStartScheduler+0xe8>)
 8008992:	f04f 32ff 	mov.w	r2, #4294967295
 8008996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008998:	4b1b      	ldr	r3, [pc, #108]	; (8008a08 <vTaskStartScheduler+0xec>)
 800899a:	2201      	movs	r2, #1
 800899c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800899e:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <vTaskStartScheduler+0xf0>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80089a4:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <vTaskStartScheduler+0xf4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3334      	adds	r3, #52	; 0x34
 80089aa:	2205      	movs	r2, #5
 80089ac:	4912      	ldr	r1, [pc, #72]	; (80089f8 <vTaskStartScheduler+0xdc>)
 80089ae:	4618      	mov	r0, r3
 80089b0:	f003 fde3 	bl	800c57a <memcmp>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <vTaskStartScheduler+0xaa>
 80089ba:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <vTaskStartScheduler+0xf4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f003 f8cc 	bl	800bb5c <SEGGER_SYSVIEW_OnTaskStartExec>
 80089c4:	e001      	b.n	80089ca <vTaskStartScheduler+0xae>
 80089c6:	f003 f86b 	bl	800baa0 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089ca:	f001 fc11 	bl	800a1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089ce:	e00e      	b.n	80089ee <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d10a      	bne.n	80089ee <vTaskStartScheduler+0xd2>
	__asm volatile
 80089d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	60fb      	str	r3, [r7, #12]
}
 80089ea:	bf00      	nop
 80089ec:	e7fe      	b.n	80089ec <vTaskStartScheduler+0xd0>
}
 80089ee:	bf00      	nop
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	0800d6cc 	.word	0x0800d6cc
 80089fc:	080091d5 	.word	0x080091d5
 8008a00:	20026948 	.word	0x20026948
 8008a04:	20026944 	.word	0x20026944
 8008a08:	20026930 	.word	0x20026930
 8008a0c:	20026928 	.word	0x20026928
 8008a10:	20026450 	.word	0x20026450

08008a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a18:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <vTaskSuspendAll+0x18>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	4a03      	ldr	r2, [pc, #12]	; (8008a2c <vTaskSuspendAll+0x18>)
 8008a20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a22:	bf00      	nop
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	2002694c 	.word	0x2002694c

08008a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a3e:	4b44      	ldr	r3, [pc, #272]	; (8008b50 <xTaskResumeAll+0x120>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <xTaskResumeAll+0x2c>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	603b      	str	r3, [r7, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a5c:	f001 fc6a 	bl	800a334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a60:	4b3b      	ldr	r3, [pc, #236]	; (8008b50 <xTaskResumeAll+0x120>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	4a3a      	ldr	r2, [pc, #232]	; (8008b50 <xTaskResumeAll+0x120>)
 8008a68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a6a:	4b39      	ldr	r3, [pc, #228]	; (8008b50 <xTaskResumeAll+0x120>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d166      	bne.n	8008b40 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a72:	4b38      	ldr	r3, [pc, #224]	; (8008b54 <xTaskResumeAll+0x124>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d062      	beq.n	8008b40 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a7a:	e033      	b.n	8008ae4 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a7c:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <xTaskResumeAll+0x128>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3318      	adds	r3, #24
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe fb7d 	bl	8007188 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fb78 	bl	8007188 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f003 f8a0 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aa4:	4b2d      	ldr	r3, [pc, #180]	; (8008b5c <xTaskResumeAll+0x12c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d903      	bls.n	8008ab4 <xTaskResumeAll+0x84>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab0:	4a2a      	ldr	r2, [pc, #168]	; (8008b5c <xTaskResumeAll+0x12c>)
 8008ab2:	6013      	str	r3, [r2, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab8:	4613      	mov	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4a27      	ldr	r2, [pc, #156]	; (8008b60 <xTaskResumeAll+0x130>)
 8008ac2:	441a      	add	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4610      	mov	r0, r2
 8008acc:	f7fe faff 	bl	80070ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4b23      	ldr	r3, [pc, #140]	; (8008b64 <xTaskResumeAll+0x134>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d302      	bcc.n	8008ae4 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8008ade:	4b22      	ldr	r3, [pc, #136]	; (8008b68 <xTaskResumeAll+0x138>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ae4:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <xTaskResumeAll+0x128>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1c7      	bne.n	8008a7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008af2:	f000 fc5d 	bl	80093b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008af6:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <xTaskResumeAll+0x13c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d010      	beq.n	8008b24 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b02:	f000 f859 	bl	8008bb8 <xTaskIncrementTick>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8008b0c:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <xTaskResumeAll+0x138>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3b01      	subs	r3, #1
 8008b16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1f1      	bne.n	8008b02 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <xTaskResumeAll+0x13c>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b24:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <xTaskResumeAll+0x138>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d009      	beq.n	8008b40 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b30:	4b0f      	ldr	r3, [pc, #60]	; (8008b70 <xTaskResumeAll+0x140>)
 8008b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b40:	f001 fc28 	bl	800a394 <vPortExitCritical>

	return xAlreadyYielded;
 8008b44:	68bb      	ldr	r3, [r7, #8]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	2002694c 	.word	0x2002694c
 8008b54:	20026924 	.word	0x20026924
 8008b58:	200268e4 	.word	0x200268e4
 8008b5c:	2002692c 	.word	0x2002692c
 8008b60:	20026454 	.word	0x20026454
 8008b64:	20026450 	.word	0x20026450
 8008b68:	20026938 	.word	0x20026938
 8008b6c:	20026934 	.word	0x20026934
 8008b70:	e000ed04 	.word	0xe000ed04

08008b74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <xTaskGetTickCount+0x1c>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b80:	687b      	ldr	r3, [r7, #4]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20026928 	.word	0x20026928

08008b94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b9a:	f001 fcad 	bl	800a4f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008ba2:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <xTaskGetTickCountFromISR+0x20>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ba8:	683b      	ldr	r3, [r7, #0]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20026928 	.word	0x20026928

08008bb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc2:	4b51      	ldr	r3, [pc, #324]	; (8008d08 <xTaskIncrementTick+0x150>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f040 8093 	bne.w	8008cf2 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bcc:	4b4f      	ldr	r3, [pc, #316]	; (8008d0c <xTaskIncrementTick+0x154>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bd4:	4a4d      	ldr	r2, [pc, #308]	; (8008d0c <xTaskIncrementTick+0x154>)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d120      	bne.n	8008c22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008be0:	4b4b      	ldr	r3, [pc, #300]	; (8008d10 <xTaskIncrementTick+0x158>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <xTaskIncrementTick+0x48>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	603b      	str	r3, [r7, #0]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <xTaskIncrementTick+0x46>
 8008c00:	4b43      	ldr	r3, [pc, #268]	; (8008d10 <xTaskIncrementTick+0x158>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	4b43      	ldr	r3, [pc, #268]	; (8008d14 <xTaskIncrementTick+0x15c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a41      	ldr	r2, [pc, #260]	; (8008d10 <xTaskIncrementTick+0x158>)
 8008c0c:	6013      	str	r3, [r2, #0]
 8008c0e:	4a41      	ldr	r2, [pc, #260]	; (8008d14 <xTaskIncrementTick+0x15c>)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	4b40      	ldr	r3, [pc, #256]	; (8008d18 <xTaskIncrementTick+0x160>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	; (8008d18 <xTaskIncrementTick+0x160>)
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	f000 fbc7 	bl	80093b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c22:	4b3e      	ldr	r3, [pc, #248]	; (8008d1c <xTaskIncrementTick+0x164>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d34d      	bcc.n	8008cc8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c2c:	4b38      	ldr	r3, [pc, #224]	; (8008d10 <xTaskIncrementTick+0x158>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c36:	4b39      	ldr	r3, [pc, #228]	; (8008d1c <xTaskIncrementTick+0x164>)
 8008c38:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3c:	601a      	str	r2, [r3, #0]
					break;
 8008c3e:	e043      	b.n	8008cc8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c40:	4b33      	ldr	r3, [pc, #204]	; (8008d10 <xTaskIncrementTick+0x158>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d203      	bcs.n	8008c60 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c58:	4a30      	ldr	r2, [pc, #192]	; (8008d1c <xTaskIncrementTick+0x164>)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c5e:	e033      	b.n	8008cc8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	3304      	adds	r3, #4
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fa8f 	bl	8007188 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	3318      	adds	r3, #24
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fa86 	bl	8007188 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f002 ffae 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c88:	4b25      	ldr	r3, [pc, #148]	; (8008d20 <xTaskIncrementTick+0x168>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d903      	bls.n	8008c98 <xTaskIncrementTick+0xe0>
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	4a22      	ldr	r2, [pc, #136]	; (8008d20 <xTaskIncrementTick+0x168>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a1f      	ldr	r2, [pc, #124]	; (8008d24 <xTaskIncrementTick+0x16c>)
 8008ca6:	441a      	add	r2, r3
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fe fa0d 	bl	80070ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb8:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <xTaskIncrementTick+0x170>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d3b4      	bcc.n	8008c2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cc6:	e7b1      	b.n	8008c2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008cc8:	4b17      	ldr	r3, [pc, #92]	; (8008d28 <xTaskIncrementTick+0x170>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cce:	4915      	ldr	r1, [pc, #84]	; (8008d24 <xTaskIncrementTick+0x16c>)
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d901      	bls.n	8008ce4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ce4:	4b11      	ldr	r3, [pc, #68]	; (8008d2c <xTaskIncrementTick+0x174>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8008cec:	2301      	movs	r3, #1
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	e004      	b.n	8008cfc <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008cf2:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <xTaskIncrementTick+0x178>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	4a0d      	ldr	r2, [pc, #52]	; (8008d30 <xTaskIncrementTick+0x178>)
 8008cfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008cfc:	697b      	ldr	r3, [r7, #20]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	2002694c 	.word	0x2002694c
 8008d0c:	20026928 	.word	0x20026928
 8008d10:	200268dc 	.word	0x200268dc
 8008d14:	200268e0 	.word	0x200268e0
 8008d18:	2002693c 	.word	0x2002693c
 8008d1c:	20026944 	.word	0x20026944
 8008d20:	2002692c 	.word	0x2002692c
 8008d24:	20026454 	.word	0x20026454
 8008d28:	20026450 	.word	0x20026450
 8008d2c:	20026938 	.word	0x20026938
 8008d30:	20026934 	.word	0x20026934

08008d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d3a:	4b30      	ldr	r3, [pc, #192]	; (8008dfc <vTaskSwitchContext+0xc8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d42:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <vTaskSwitchContext+0xcc>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d48:	e054      	b.n	8008df4 <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 8008d4a:	4b2d      	ldr	r3, [pc, #180]	; (8008e00 <vTaskSwitchContext+0xcc>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d50:	4b2c      	ldr	r3, [pc, #176]	; (8008e04 <vTaskSwitchContext+0xd0>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	e010      	b.n	8008d7a <vTaskSwitchContext+0x46>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	607b      	str	r3, [r7, #4]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <vTaskSwitchContext+0x3e>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	4923      	ldr	r1, [pc, #140]	; (8008e08 <vTaskSwitchContext+0xd4>)
 8008d7c:	68fa      	ldr	r2, [r7, #12]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0e4      	beq.n	8008d58 <vTaskSwitchContext+0x24>
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4613      	mov	r3, r2
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4a1b      	ldr	r2, [pc, #108]	; (8008e08 <vTaskSwitchContext+0xd4>)
 8008d9a:	4413      	add	r3, r2
 8008d9c:	60bb      	str	r3, [r7, #8]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	605a      	str	r2, [r3, #4]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	3308      	adds	r3, #8
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d104      	bne.n	8008dbe <vTaskSwitchContext+0x8a>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	685a      	ldr	r2, [r3, #4]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	605a      	str	r2, [r3, #4]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	4a11      	ldr	r2, [pc, #68]	; (8008e0c <vTaskSwitchContext+0xd8>)
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	4a0e      	ldr	r2, [pc, #56]	; (8008e04 <vTaskSwitchContext+0xd0>)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <vTaskSwitchContext+0xd8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	3334      	adds	r3, #52	; 0x34
 8008dd4:	2205      	movs	r2, #5
 8008dd6:	490e      	ldr	r1, [pc, #56]	; (8008e10 <vTaskSwitchContext+0xdc>)
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f003 fbce 	bl	800c57a <memcmp>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <vTaskSwitchContext+0xbc>
 8008de4:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <vTaskSwitchContext+0xd8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f002 feb7 	bl	800bb5c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8008dee:	e001      	b.n	8008df4 <vTaskSwitchContext+0xc0>
		traceTASK_SWITCHED_IN();
 8008df0:	f002 fe56 	bl	800baa0 <SEGGER_SYSVIEW_OnIdle>
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	2002694c 	.word	0x2002694c
 8008e00:	20026938 	.word	0x20026938
 8008e04:	2002692c 	.word	0x2002692c
 8008e08:	20026454 	.word	0x20026454
 8008e0c:	20026450 	.word	0x20026450
 8008e10:	0800d6cc 	.word	0x0800d6cc

08008e14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60fb      	str	r3, [r7, #12]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e3a:	4b07      	ldr	r3, [pc, #28]	; (8008e58 <vTaskPlaceOnEventList+0x44>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3318      	adds	r3, #24
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7fe f967 	bl	8007116 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e48:	2101      	movs	r1, #1
 8008e4a:	6838      	ldr	r0, [r7, #0]
 8008e4c:	f000 fc9c 	bl	8009788 <prvAddCurrentTaskToDelayedList>
}
 8008e50:	bf00      	nop
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	20026450 	.word	0x20026450

08008e5c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	617b      	str	r3, [r7, #20]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008e84:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <vTaskPlaceOnUnorderedEventList+0x70>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10a      	bne.n	8008ea2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	613b      	str	r3, [r7, #16]
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008eac:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008eae:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3318      	adds	r3, #24
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7fe f909 	bl	80070ce <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 fc62 	bl	8009788 <prvAddCurrentTaskToDelayedList>
}
 8008ec4:	bf00      	nop
 8008ec6:	3718      	adds	r7, #24
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	2002694c 	.word	0x2002694c
 8008ed0:	20026450 	.word	0x20026450

08008ed4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eea:	f383 8811 	msr	BASEPRI, r3
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	f3bf 8f4f 	dsb	sy
 8008ef6:	617b      	str	r3, [r7, #20]
}
 8008ef8:	bf00      	nop
 8008efa:	e7fe      	b.n	8008efa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008efc:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <vTaskPlaceOnEventListRestricted+0x58>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3318      	adds	r3, #24
 8008f02:	4619      	mov	r1, r3
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7fe f8e2 	bl	80070ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008f10:	f04f 33ff 	mov.w	r3, #4294967295
 8008f14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008f16:	2024      	movs	r0, #36	; 0x24
 8008f18:	f002 f93e 	bl	800b198 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008f1c:	6879      	ldr	r1, [r7, #4]
 8008f1e:	68b8      	ldr	r0, [r7, #8]
 8008f20:	f000 fc32 	bl	8009788 <prvAddCurrentTaskToDelayedList>
	}
 8008f24:	bf00      	nop
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	20026450 	.word	0x20026450

08008f30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10a      	bne.n	8008f5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	60fb      	str	r3, [r7, #12]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	3318      	adds	r3, #24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe f911 	bl	8007188 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f66:	4b20      	ldr	r3, [pc, #128]	; (8008fe8 <xTaskRemoveFromEventList+0xb8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d121      	bne.n	8008fb2 <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe f908 	bl	8007188 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f002 fe30 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	4b19      	ldr	r3, [pc, #100]	; (8008fec <xTaskRemoveFromEventList+0xbc>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d903      	bls.n	8008f94 <xTaskRemoveFromEventList+0x64>
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4a16      	ldr	r2, [pc, #88]	; (8008fec <xTaskRemoveFromEventList+0xbc>)
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4a13      	ldr	r2, [pc, #76]	; (8008ff0 <xTaskRemoveFromEventList+0xc0>)
 8008fa2:	441a      	add	r2, r3
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7fe f88f 	bl	80070ce <vListInsertEnd>
 8008fb0:	e005      	b.n	8008fbe <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	480e      	ldr	r0, [pc, #56]	; (8008ff4 <xTaskRemoveFromEventList+0xc4>)
 8008fba:	f7fe f888 	bl	80070ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <xTaskRemoveFromEventList+0xc8>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d905      	bls.n	8008fd8 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <xTaskRemoveFromEventList+0xcc>)
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	e001      	b.n	8008fdc <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fdc:	697b      	ldr	r3, [r7, #20]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	2002694c 	.word	0x2002694c
 8008fec:	2002692c 	.word	0x2002692c
 8008ff0:	20026454 	.word	0x20026454
 8008ff4:	200268e4 	.word	0x200268e4
 8008ff8:	20026450 	.word	0x20026450
 8008ffc:	20026938 	.word	0x20026938

08009000 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800900a:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10a      	bne.n	8009028 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	613b      	str	r3, [r7, #16]
}
 8009024:	bf00      	nop
 8009026:	e7fe      	b.n	8009026 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10a      	bne.n	8009054 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	60fb      	str	r3, [r7, #12]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7fe f897 	bl	8007188 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	3304      	adds	r3, #4
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe f892 	bl	8007188 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	4618      	mov	r0, r3
 8009068:	f002 fdba 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009070:	4b12      	ldr	r3, [pc, #72]	; (80090bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	429a      	cmp	r2, r3
 8009076:	d903      	bls.n	8009080 <vTaskRemoveFromUnorderedEventList+0x80>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	4a0f      	ldr	r2, [pc, #60]	; (80090bc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009084:	4613      	mov	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4413      	add	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4a0c      	ldr	r2, [pc, #48]	; (80090c0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800908e:	441a      	add	r2, r3
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	3304      	adds	r3, #4
 8009094:	4619      	mov	r1, r3
 8009096:	4610      	mov	r0, r2
 8009098:	f7fe f819 	bl	80070ce <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a0:	4b08      	ldr	r3, [pc, #32]	; (80090c4 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d902      	bls.n	80090b0 <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <vTaskRemoveFromUnorderedEventList+0xc8>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	601a      	str	r2, [r3, #0]
	}
}
 80090b0:	bf00      	nop
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	2002694c 	.word	0x2002694c
 80090bc:	2002692c 	.word	0x2002692c
 80090c0:	20026454 	.word	0x20026454
 80090c4:	20026450 	.word	0x20026450
 80090c8:	20026938 	.word	0x20026938

080090cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090d4:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <vTaskInternalSetTimeOutState+0x24>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090dc:	4b05      	ldr	r3, [pc, #20]	; (80090f4 <vTaskInternalSetTimeOutState+0x28>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	605a      	str	r2, [r3, #4]
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	2002693c 	.word	0x2002693c
 80090f4:	20026928 	.word	0x20026928

080090f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10a      	bne.n	800911e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	613b      	str	r3, [r7, #16]
}
 800911a:	bf00      	nop
 800911c:	e7fe      	b.n	800911c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	60fb      	str	r3, [r7, #12]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800913a:	f001 f8fb 	bl	800a334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800913e:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <xTaskCheckForTimeOut+0xbc>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d102      	bne.n	800915e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009158:	2300      	movs	r3, #0
 800915a:	61fb      	str	r3, [r7, #28]
 800915c:	e023      	b.n	80091a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	4b15      	ldr	r3, [pc, #84]	; (80091b8 <xTaskCheckForTimeOut+0xc0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	429a      	cmp	r2, r3
 8009168:	d007      	beq.n	800917a <xTaskCheckForTimeOut+0x82>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	69ba      	ldr	r2, [r7, #24]
 8009170:	429a      	cmp	r2, r3
 8009172:	d302      	bcc.n	800917a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009174:	2301      	movs	r3, #1
 8009176:	61fb      	str	r3, [r7, #28]
 8009178:	e015      	b.n	80091a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	429a      	cmp	r2, r3
 8009182:	d20b      	bcs.n	800919c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff ff9b 	bl	80090cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009196:	2300      	movs	r3, #0
 8009198:	61fb      	str	r3, [r7, #28]
 800919a:	e004      	b.n	80091a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091a2:	2301      	movs	r3, #1
 80091a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091a6:	f001 f8f5 	bl	800a394 <vPortExitCritical>

	return xReturn;
 80091aa:	69fb      	ldr	r3, [r7, #28]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3720      	adds	r7, #32
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20026928 	.word	0x20026928
 80091b8:	2002693c 	.word	0x2002693c

080091bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091c0:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <vTaskMissedYield+0x14>)
 80091c2:	2201      	movs	r2, #1
 80091c4:	601a      	str	r2, [r3, #0]
}
 80091c6:	bf00      	nop
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20026938 	.word	0x20026938

080091d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091dc:	f000 f852 	bl	8009284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091e0:	4b06      	ldr	r3, [pc, #24]	; (80091fc <prvIdleTask+0x28>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d9f9      	bls.n	80091dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <prvIdleTask+0x2c>)
 80091ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091f8:	e7f0      	b.n	80091dc <prvIdleTask+0x8>
 80091fa:	bf00      	nop
 80091fc:	20026454 	.word	0x20026454
 8009200:	e000ed04 	.word	0xe000ed04

08009204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800920a:	2300      	movs	r3, #0
 800920c:	607b      	str	r3, [r7, #4]
 800920e:	e00c      	b.n	800922a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4a12      	ldr	r2, [pc, #72]	; (8009264 <prvInitialiseTaskLists+0x60>)
 800921c:	4413      	add	r3, r2
 800921e:	4618      	mov	r0, r3
 8009220:	f7fd ff28 	bl	8007074 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3301      	adds	r3, #1
 8009228:	607b      	str	r3, [r7, #4]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b37      	cmp	r3, #55	; 0x37
 800922e:	d9ef      	bls.n	8009210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009230:	480d      	ldr	r0, [pc, #52]	; (8009268 <prvInitialiseTaskLists+0x64>)
 8009232:	f7fd ff1f 	bl	8007074 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009236:	480d      	ldr	r0, [pc, #52]	; (800926c <prvInitialiseTaskLists+0x68>)
 8009238:	f7fd ff1c 	bl	8007074 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800923c:	480c      	ldr	r0, [pc, #48]	; (8009270 <prvInitialiseTaskLists+0x6c>)
 800923e:	f7fd ff19 	bl	8007074 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009242:	480c      	ldr	r0, [pc, #48]	; (8009274 <prvInitialiseTaskLists+0x70>)
 8009244:	f7fd ff16 	bl	8007074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009248:	480b      	ldr	r0, [pc, #44]	; (8009278 <prvInitialiseTaskLists+0x74>)
 800924a:	f7fd ff13 	bl	8007074 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800924e:	4b0b      	ldr	r3, [pc, #44]	; (800927c <prvInitialiseTaskLists+0x78>)
 8009250:	4a05      	ldr	r2, [pc, #20]	; (8009268 <prvInitialiseTaskLists+0x64>)
 8009252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009254:	4b0a      	ldr	r3, [pc, #40]	; (8009280 <prvInitialiseTaskLists+0x7c>)
 8009256:	4a05      	ldr	r2, [pc, #20]	; (800926c <prvInitialiseTaskLists+0x68>)
 8009258:	601a      	str	r2, [r3, #0]
}
 800925a:	bf00      	nop
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20026454 	.word	0x20026454
 8009268:	200268b4 	.word	0x200268b4
 800926c:	200268c8 	.word	0x200268c8
 8009270:	200268e4 	.word	0x200268e4
 8009274:	200268f8 	.word	0x200268f8
 8009278:	20026910 	.word	0x20026910
 800927c:	200268dc 	.word	0x200268dc
 8009280:	200268e0 	.word	0x200268e0

08009284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800928a:	e019      	b.n	80092c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800928c:	f001 f852 	bl	800a334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009290:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <prvCheckTasksWaitingTermination+0x50>)
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3304      	adds	r3, #4
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd ff73 	bl	8007188 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092a2:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <prvCheckTasksWaitingTermination+0x54>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	4a0b      	ldr	r2, [pc, #44]	; (80092d8 <prvCheckTasksWaitingTermination+0x54>)
 80092aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092ac:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <prvCheckTasksWaitingTermination+0x58>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	4a0a      	ldr	r2, [pc, #40]	; (80092dc <prvCheckTasksWaitingTermination+0x58>)
 80092b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092b6:	f001 f86d 	bl	800a394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f848 	bl	8009350 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <prvCheckTasksWaitingTermination+0x58>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e1      	bne.n	800928c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200268f8 	.word	0x200268f8
 80092d8:	20026924 	.word	0x20026924
 80092dc:	2002690c 	.word	0x2002690c

080092e0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80092ec:	e005      	b.n	80092fa <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3301      	adds	r3, #1
 80092f2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	2ba5      	cmp	r3, #165	; 0xa5
 8009300:	d0f5      	beq.n	80092ee <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	089b      	lsrs	r3, r3, #2
 8009306:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	b29b      	uxth	r3, r3
	}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <uxTaskGetStackHighWaterMark+0x14>
 8009326:	4b09      	ldr	r3, [pc, #36]	; (800934c <uxTaskGetStackHighWaterMark+0x34>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	e000      	b.n	800932e <uxTaskGetStackHighWaterMark+0x16>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009334:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009336:	6938      	ldr	r0, [r7, #16]
 8009338:	f7ff ffd2 	bl	80092e0 <prvTaskCheckFreeStackSpace>
 800933c:	4603      	mov	r3, r0
 800933e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8009340:	68fb      	ldr	r3, [r7, #12]
	}
 8009342:	4618      	mov	r0, r3
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20026450 	.word	0x20026450

08009350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800935e:	2b00      	cmp	r3, #0
 8009360:	d108      	bne.n	8009374 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009366:	4618      	mov	r0, r3
 8009368:	f001 f9d2 	bl	800a710 <vPortFree>
				vPortFree( pxTCB );
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 f9cf 	bl	800a710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009372:	e018      	b.n	80093a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800937a:	2b01      	cmp	r3, #1
 800937c:	d103      	bne.n	8009386 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 f9c6 	bl	800a710 <vPortFree>
	}
 8009384:	e00f      	b.n	80093a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800938c:	2b02      	cmp	r3, #2
 800938e:	d00a      	beq.n	80093a6 <prvDeleteTCB+0x56>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60fb      	str	r3, [r7, #12]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <prvDeleteTCB+0x54>
	}
 80093a6:	bf00      	nop
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
	...

080093b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093b6:	4b0c      	ldr	r3, [pc, #48]	; (80093e8 <prvResetNextTaskUnblockTime+0x38>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d104      	bne.n	80093ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <prvResetNextTaskUnblockTime+0x3c>)
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80093c8:	e008      	b.n	80093dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ca:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <prvResetNextTaskUnblockTime+0x38>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4a04      	ldr	r2, [pc, #16]	; (80093ec <prvResetNextTaskUnblockTime+0x3c>)
 80093da:	6013      	str	r3, [r2, #0]
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr
 80093e8:	200268dc 	.word	0x200268dc
 80093ec:	20026944 	.word	0x20026944

080093f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <xTaskGetCurrentTaskHandle+0x1c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80093fc:	687b      	ldr	r3, [r7, #4]
	}
 80093fe:	4618      	mov	r0, r3
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	20026450 	.word	0x20026450

08009410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009416:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <xTaskGetSchedulerState+0x34>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800941e:	2301      	movs	r3, #1
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	e008      	b.n	8009436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009424:	4b08      	ldr	r3, [pc, #32]	; (8009448 <xTaskGetSchedulerState+0x38>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800942c:	2302      	movs	r3, #2
 800942e:	607b      	str	r3, [r7, #4]
 8009430:	e001      	b.n	8009436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009432:	2300      	movs	r3, #0
 8009434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009436:	687b      	ldr	r3, [r7, #4]
	}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	20026930 	.word	0x20026930
 8009448:	2002694c 	.word	0x2002694c

0800944c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d05a      	beq.n	8009518 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009466:	4b2f      	ldr	r3, [pc, #188]	; (8009524 <xTaskPriorityInherit+0xd8>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	429a      	cmp	r2, r3
 800946e:	d24a      	bcs.n	8009506 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	2b00      	cmp	r3, #0
 8009476:	db06      	blt.n	8009486 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009478:	4b2a      	ldr	r3, [pc, #168]	; (8009524 <xTaskPriorityInherit+0xd8>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	6959      	ldr	r1, [r3, #20]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800948e:	4613      	mov	r3, r2
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4a24      	ldr	r2, [pc, #144]	; (8009528 <xTaskPriorityInherit+0xdc>)
 8009498:	4413      	add	r3, r2
 800949a:	4299      	cmp	r1, r3
 800949c:	d126      	bne.n	80094ec <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	3304      	adds	r3, #4
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7fd fe70 	bl	8007188 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094a8:	4b1e      	ldr	r3, [pc, #120]	; (8009524 <xTaskPriorityInherit+0xd8>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	4618      	mov	r0, r3
 80094b6:	f002 fb93 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094be:	4b1b      	ldr	r3, [pc, #108]	; (800952c <xTaskPriorityInherit+0xe0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d903      	bls.n	80094ce <xTaskPriorityInherit+0x82>
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	4a18      	ldr	r2, [pc, #96]	; (800952c <xTaskPriorityInherit+0xe0>)
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094d2:	4613      	mov	r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4a13      	ldr	r2, [pc, #76]	; (8009528 <xTaskPriorityInherit+0xdc>)
 80094dc:	441a      	add	r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4619      	mov	r1, r3
 80094e4:	4610      	mov	r0, r2
 80094e6:	f7fd fdf2 	bl	80070ce <vListInsertEnd>
 80094ea:	e004      	b.n	80094f6 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094ec:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <xTaskPriorityInherit+0xd8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4619      	mov	r1, r3
 80094fa:	2049      	movs	r0, #73	; 0x49
 80094fc:	f001 fe6a 	bl	800b1d4 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009500:	2301      	movs	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	e008      	b.n	8009518 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800950a:	4b06      	ldr	r3, [pc, #24]	; (8009524 <xTaskPriorityInherit+0xd8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009510:	429a      	cmp	r2, r3
 8009512:	d201      	bcs.n	8009518 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009518:	68fb      	ldr	r3, [r7, #12]
	}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20026450 	.word	0x20026450
 8009528:	20026454 	.word	0x20026454
 800952c:	2002692c 	.word	0x2002692c

08009530 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800953c:	2300      	movs	r3, #0
 800953e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d05f      	beq.n	8009606 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009546:	4b32      	ldr	r3, [pc, #200]	; (8009610 <xTaskPriorityDisinherit+0xe0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	693a      	ldr	r2, [r7, #16]
 800954c:	429a      	cmp	r2, r3
 800954e:	d00a      	beq.n	8009566 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60fb      	str	r3, [r7, #12]
}
 8009562:	bf00      	nop
 8009564:	e7fe      	b.n	8009564 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10a      	bne.n	8009584 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	60bb      	str	r3, [r7, #8]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009588:	1e5a      	subs	r2, r3, #1
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009596:	429a      	cmp	r2, r3
 8009598:	d035      	beq.n	8009606 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d131      	bne.n	8009606 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fd fdee 	bl	8007188 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4619      	mov	r1, r3
 80095b0:	204a      	movs	r0, #74	; 0x4a
 80095b2:	f001 fe0f 	bl	800b1d4 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f002 fb07 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <xTaskPriorityDisinherit+0xe4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d903      	bls.n	80095e6 <xTaskPriorityDisinherit+0xb6>
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	4a0c      	ldr	r2, [pc, #48]	; (8009614 <xTaskPriorityDisinherit+0xe4>)
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4a09      	ldr	r2, [pc, #36]	; (8009618 <xTaskPriorityDisinherit+0xe8>)
 80095f4:	441a      	add	r2, r3
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7fd fd66 	bl	80070ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009602:	2301      	movs	r3, #1
 8009604:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009606:	697b      	ldr	r3, [r7, #20]
	}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20026450 	.word	0x20026450
 8009614:	2002692c 	.word	0x2002692c
 8009618:	20026454 	.word	0x20026454

0800961c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b088      	sub	sp, #32
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800962a:	2301      	movs	r3, #1
 800962c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d073      	beq.n	800971c <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60fb      	str	r3, [r7, #12]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d902      	bls.n	8009662 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	e002      	b.n	8009668 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009666:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	429a      	cmp	r2, r3
 8009670:	d054      	beq.n	800971c <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	429a      	cmp	r2, r3
 800967a:	d14f      	bne.n	800971c <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800967c:	4b29      	ldr	r3, [pc, #164]	; (8009724 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	429a      	cmp	r2, r3
 8009684:	d10a      	bne.n	800969c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	60bb      	str	r3, [r7, #8]
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4619      	mov	r1, r3
 80096a0:	204a      	movs	r0, #74	; 0x4a
 80096a2:	f001 fd97 	bl	800b1d4 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096aa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	69fa      	ldr	r2, [r7, #28]
 80096b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	db04      	blt.n	80096c4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80096c0:	69bb      	ldr	r3, [r7, #24]
 80096c2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	6959      	ldr	r1, [r3, #20]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4a15      	ldr	r2, [pc, #84]	; (8009728 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80096d4:	4413      	add	r3, r2
 80096d6:	4299      	cmp	r1, r3
 80096d8:	d120      	bne.n	800971c <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	3304      	adds	r3, #4
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fd fd52 	bl	8007188 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f002 fa7a 	bl	800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096f0:	4b0e      	ldr	r3, [pc, #56]	; (800972c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d903      	bls.n	8009700 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	4a0b      	ldr	r2, [pc, #44]	; (800972c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4a06      	ldr	r2, [pc, #24]	; (8009728 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800970e:	441a      	add	r2, r3
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	3304      	adds	r3, #4
 8009714:	4619      	mov	r1, r3
 8009716:	4610      	mov	r0, r2
 8009718:	f7fd fcd9 	bl	80070ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800971c:	bf00      	nop
 800971e:	3720      	adds	r7, #32
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	20026450 	.word	0x20026450
 8009728:	20026454 	.word	0x20026454
 800972c:	2002692c 	.word	0x2002692c

08009730 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8009736:	4b09      	ldr	r3, [pc, #36]	; (800975c <uxTaskResetEventItemValue+0x2c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800973e:	4b07      	ldr	r3, [pc, #28]	; (800975c <uxTaskResetEventItemValue+0x2c>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <uxTaskResetEventItemValue+0x2c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800974c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800974e:	687b      	ldr	r3, [r7, #4]
}
 8009750:	4618      	mov	r0, r3
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	20026450 	.word	0x20026450

08009760 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009764:	4b07      	ldr	r3, [pc, #28]	; (8009784 <pvTaskIncrementMutexHeldCount+0x24>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d004      	beq.n	8009776 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <pvTaskIncrementMutexHeldCount+0x24>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009772:	3201      	adds	r2, #1
 8009774:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009776:	4b03      	ldr	r3, [pc, #12]	; (8009784 <pvTaskIncrementMutexHeldCount+0x24>)
 8009778:	681b      	ldr	r3, [r3, #0]
	}
 800977a:	4618      	mov	r0, r3
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	20026450 	.word	0x20026450

08009788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009792:	4b21      	ldr	r3, [pc, #132]	; (8009818 <prvAddCurrentTaskToDelayedList+0x90>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009798:	4b20      	ldr	r3, [pc, #128]	; (800981c <prvAddCurrentTaskToDelayedList+0x94>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	3304      	adds	r3, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fd fcf2 	bl	8007188 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097aa:	d10a      	bne.n	80097c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d007      	beq.n	80097c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097b2:	4b1a      	ldr	r3, [pc, #104]	; (800981c <prvAddCurrentTaskToDelayedList+0x94>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4819      	ldr	r0, [pc, #100]	; (8009820 <prvAddCurrentTaskToDelayedList+0x98>)
 80097bc:	f7fd fc87 	bl	80070ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097c0:	e026      	b.n	8009810 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4413      	add	r3, r2
 80097c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <prvAddCurrentTaskToDelayedList+0x94>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d209      	bcs.n	80097ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4b0f      	ldr	r3, [pc, #60]	; (800981c <prvAddCurrentTaskToDelayedList+0x94>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3304      	adds	r3, #4
 80097e4:	4619      	mov	r1, r3
 80097e6:	4610      	mov	r0, r2
 80097e8:	f7fd fc95 	bl	8007116 <vListInsert>
}
 80097ec:	e010      	b.n	8009810 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ee:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	4b0a      	ldr	r3, [pc, #40]	; (800981c <prvAddCurrentTaskToDelayedList+0x94>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	3304      	adds	r3, #4
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fd fc8b 	bl	8007116 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	429a      	cmp	r2, r3
 8009808:	d202      	bcs.n	8009810 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800980a:	4a08      	ldr	r2, [pc, #32]	; (800982c <prvAddCurrentTaskToDelayedList+0xa4>)
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	6013      	str	r3, [r2, #0]
}
 8009810:	bf00      	nop
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20026928 	.word	0x20026928
 800981c:	20026450 	.word	0x20026450
 8009820:	20026910 	.word	0x20026910
 8009824:	200268e0 	.word	0x200268e0
 8009828:	200268dc 	.word	0x200268dc
 800982c:	20026944 	.word	0x20026944

08009830 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08a      	sub	sp, #40	; 0x28
 8009834:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800983a:	f000 fba1 	bl	8009f80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800983e:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <xTimerCreateTimerTask+0x80>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d021      	beq.n	800988a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800984e:	1d3a      	adds	r2, r7, #4
 8009850:	f107 0108 	add.w	r1, r7, #8
 8009854:	f107 030c 	add.w	r3, r7, #12
 8009858:	4618      	mov	r0, r3
 800985a:	f7fd fa03 	bl	8006c64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	9202      	str	r2, [sp, #8]
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	2302      	movs	r3, #2
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	2300      	movs	r3, #0
 800986e:	460a      	mov	r2, r1
 8009870:	4910      	ldr	r1, [pc, #64]	; (80098b4 <xTimerCreateTimerTask+0x84>)
 8009872:	4811      	ldr	r0, [pc, #68]	; (80098b8 <xTimerCreateTimerTask+0x88>)
 8009874:	f7fe fe5a 	bl	800852c <xTaskCreateStatic>
 8009878:	4603      	mov	r3, r0
 800987a:	4a10      	ldr	r2, [pc, #64]	; (80098bc <xTimerCreateTimerTask+0x8c>)
 800987c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800987e:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <xTimerCreateTimerTask+0x8c>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009886:	2301      	movs	r3, #1
 8009888:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	613b      	str	r3, [r7, #16]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098a6:	697b      	ldr	r3, [r7, #20]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20026980 	.word	0x20026980
 80098b4:	0800d6d4 	.word	0x0800d6d4
 80098b8:	08009b29 	.word	0x08009b29
 80098bc:	20026984 	.word	0x20026984

080098c0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af02      	add	r7, sp, #8
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80098ce:	202c      	movs	r0, #44	; 0x2c
 80098d0:	f000 fe52 	bl	800a578 <pvPortMalloc>
 80098d4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	9300      	str	r3, [sp, #0]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f843 	bl	800997e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80098f8:	697b      	ldr	r3, [r7, #20]
	}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009902:	b580      	push	{r7, lr}
 8009904:	b08a      	sub	sp, #40	; 0x28
 8009906:	af02      	add	r7, sp, #8
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
 800990e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009910:	232c      	movs	r3, #44	; 0x2c
 8009912:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	2b2c      	cmp	r3, #44	; 0x2c
 8009918:	d00a      	beq.n	8009930 <xTimerCreateStatic+0x2e>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	61bb      	str	r3, [r7, #24]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009930:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <xTimerCreateStatic+0x4c>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	617b      	str	r3, [r7, #20]
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800994e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009950:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00d      	beq.n	8009974 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 f805 	bl	800997e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009974:	69fb      	ldr	r3, [r7, #28]
	}
 8009976:	4618      	mov	r0, r3
 8009978:	3720      	adds	r7, #32
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b086      	sub	sp, #24
 8009982:	af00      	add	r7, sp, #0
 8009984:	60f8      	str	r0, [r7, #12]
 8009986:	60b9      	str	r1, [r7, #8]
 8009988:	607a      	str	r2, [r7, #4]
 800998a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10a      	bne.n	80099a8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	617b      	str	r3, [r7, #20]
}
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d01e      	beq.n	80099ec <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80099ae:	f000 fae7 	bl	8009f80 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	6a3a      	ldr	r2, [r7, #32]
 80099c8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	3304      	adds	r3, #4
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fd fb70 	bl	80070b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d008      	beq.n	80099ec <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80099da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099e0:	f043 0304 	orr.w	r3, r3, #4
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80099ec:	bf00      	nop
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b08a      	sub	sp, #40	; 0x28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	623b      	str	r3, [r7, #32]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a22:	4b1a      	ldr	r3, [pc, #104]	; (8009a8c <xTimerGenericCommand+0x98>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d02a      	beq.n	8009a80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	2b05      	cmp	r3, #5
 8009a3a:	dc18      	bgt.n	8009a6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a3c:	f7ff fce8 	bl	8009410 <xTaskGetSchedulerState>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d109      	bne.n	8009a5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a46:	4b11      	ldr	r3, [pc, #68]	; (8009a8c <xTimerGenericCommand+0x98>)
 8009a48:	6818      	ldr	r0, [r3, #0]
 8009a4a:	f107 0110 	add.w	r1, r7, #16
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a52:	f7fd fe27 	bl	80076a4 <xQueueGenericSend>
 8009a56:	6278      	str	r0, [r7, #36]	; 0x24
 8009a58:	e012      	b.n	8009a80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <xTimerGenericCommand+0x98>)
 8009a5c:	6818      	ldr	r0, [r3, #0]
 8009a5e:	f107 0110 	add.w	r1, r7, #16
 8009a62:	2300      	movs	r3, #0
 8009a64:	2200      	movs	r2, #0
 8009a66:	f7fd fe1d 	bl	80076a4 <xQueueGenericSend>
 8009a6a:	6278      	str	r0, [r7, #36]	; 0x24
 8009a6c:	e008      	b.n	8009a80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a6e:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <xTimerGenericCommand+0x98>)
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f107 0110 	add.w	r1, r7, #16
 8009a76:	2300      	movs	r3, #0
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	f7fd ff39 	bl	80078f0 <xQueueGenericSendFromISR>
 8009a7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3728      	adds	r7, #40	; 0x28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20026980 	.word	0x20026980

08009a90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9a:	4b22      	ldr	r3, [pc, #136]	; (8009b24 <prvProcessExpiredTimer+0x94>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7fd fb6d 	bl	8007188 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d022      	beq.n	8009b02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	699a      	ldr	r2, [r3, #24]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	18d1      	adds	r1, r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	6978      	ldr	r0, [r7, #20]
 8009aca:	f000 f8d1 	bl	8009c70 <prvInsertTimerInActiveList>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01f      	beq.n	8009b14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	2100      	movs	r1, #0
 8009ade:	6978      	ldr	r0, [r7, #20]
 8009ae0:	f7ff ff88 	bl	80099f4 <xTimerGenericCommand>
 8009ae4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d113      	bne.n	8009b14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	60fb      	str	r3, [r7, #12]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b08:	f023 0301 	bic.w	r3, r3, #1
 8009b0c:	b2da      	uxtb	r2, r3
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	6978      	ldr	r0, [r7, #20]
 8009b1a:	4798      	blx	r3
}
 8009b1c:	bf00      	nop
 8009b1e:	3718      	adds	r7, #24
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	20026978 	.word	0x20026978

08009b28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b30:	f107 0308 	add.w	r3, r7, #8
 8009b34:	4618      	mov	r0, r3
 8009b36:	f000 f857 	bl	8009be8 <prvGetNextExpireTime>
 8009b3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 f803 	bl	8009b4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b46:	f000 f8d5 	bl	8009cf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b4a:	e7f1      	b.n	8009b30 <prvTimerTask+0x8>

08009b4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b56:	f7fe ff5d 	bl	8008a14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b5a:	f107 0308 	add.w	r3, r7, #8
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f866 	bl	8009c30 <prvSampleTimeNow>
 8009b64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d130      	bne.n	8009bce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10a      	bne.n	8009b88 <prvProcessTimerOrBlockTask+0x3c>
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d806      	bhi.n	8009b88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b7a:	f7fe ff59 	bl	8008a30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b7e:	68f9      	ldr	r1, [r7, #12]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7ff ff85 	bl	8009a90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b86:	e024      	b.n	8009bd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d008      	beq.n	8009ba0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <prvProcessTimerOrBlockTask+0x90>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <prvProcessTimerOrBlockTask+0x50>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e000      	b.n	8009b9e <prvProcessTimerOrBlockTask+0x52>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <prvProcessTimerOrBlockTask+0x94>)
 8009ba2:	6818      	ldr	r0, [r3, #0]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	4619      	mov	r1, r3
 8009bae:	f7fe fc89 	bl	80084c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bb2:	f7fe ff3d 	bl	8008a30 <xTaskResumeAll>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009bbc:	4b09      	ldr	r3, [pc, #36]	; (8009be4 <prvProcessTimerOrBlockTask+0x98>)
 8009bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	f3bf 8f6f 	isb	sy
}
 8009bcc:	e001      	b.n	8009bd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009bce:	f7fe ff2f 	bl	8008a30 <xTaskResumeAll>
}
 8009bd2:	bf00      	nop
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	2002697c 	.word	0x2002697c
 8009be0:	20026980 	.word	0x20026980
 8009be4:	e000ed04 	.word	0xe000ed04

08009be8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bf0:	4b0e      	ldr	r3, [pc, #56]	; (8009c2c <prvGetNextExpireTime+0x44>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <prvGetNextExpireTime+0x16>
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	e000      	b.n	8009c00 <prvGetNextExpireTime+0x18>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d105      	bne.n	8009c18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c0c:	4b07      	ldr	r3, [pc, #28]	; (8009c2c <prvGetNextExpireTime+0x44>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]
 8009c16:	e001      	b.n	8009c1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	20026978 	.word	0x20026978

08009c30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c38:	f7fe ff9c 	bl	8008b74 <xTaskGetTickCount>
 8009c3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c3e:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <prvSampleTimeNow+0x3c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d205      	bcs.n	8009c54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c48:	f000 f936 	bl	8009eb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	e002      	b.n	8009c5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c5a:	4a04      	ldr	r2, [pc, #16]	; (8009c6c <prvSampleTimeNow+0x3c>)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c60:	68fb      	ldr	r3, [r7, #12]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20026988 	.word	0x20026988

08009c70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c8e:	68ba      	ldr	r2, [r7, #8]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d812      	bhi.n	8009cbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	1ad2      	subs	r2, r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d302      	bcc.n	8009caa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	e01b      	b.n	8009ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009caa:	4b10      	ldr	r3, [pc, #64]	; (8009cec <prvInsertTimerInActiveList+0x7c>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	f7fd fa2e 	bl	8007116 <vListInsert>
 8009cba:	e012      	b.n	8009ce2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d206      	bcs.n	8009cd2 <prvInsertTimerInActiveList+0x62>
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d302      	bcc.n	8009cd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	617b      	str	r3, [r7, #20]
 8009cd0:	e007      	b.n	8009ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cd2:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <prvInsertTimerInActiveList+0x80>)
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7fd fa1a 	bl	8007116 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ce2:	697b      	ldr	r3, [r7, #20]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	2002697c 	.word	0x2002697c
 8009cf0:	20026978 	.word	0x20026978

08009cf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08e      	sub	sp, #56	; 0x38
 8009cf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cfa:	e0ca      	b.n	8009e92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	da18      	bge.n	8009d34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d02:	1d3b      	adds	r3, r7, #4
 8009d04:	3304      	adds	r3, #4
 8009d06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10a      	bne.n	8009d24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	61fb      	str	r3, [r7, #28]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d2a:	6850      	ldr	r0, [r2, #4]
 8009d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d2e:	6892      	ldr	r2, [r2, #8]
 8009d30:	4611      	mov	r1, r2
 8009d32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f2c0 80ab 	blt.w	8009e92 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d004      	beq.n	8009d52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fd fa1b 	bl	8007188 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d52:	463b      	mov	r3, r7
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff ff6b 	bl	8009c30 <prvSampleTimeNow>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b09      	cmp	r3, #9
 8009d60:	f200 8096 	bhi.w	8009e90 <prvProcessReceivedCommands+0x19c>
 8009d64:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <prvProcessReceivedCommands+0x78>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009d95 	.word	0x08009d95
 8009d70:	08009d95 	.word	0x08009d95
 8009d74:	08009d95 	.word	0x08009d95
 8009d78:	08009e09 	.word	0x08009e09
 8009d7c:	08009e1d 	.word	0x08009e1d
 8009d80:	08009e67 	.word	0x08009e67
 8009d84:	08009d95 	.word	0x08009d95
 8009d88:	08009d95 	.word	0x08009d95
 8009d8c:	08009e09 	.word	0x08009e09
 8009d90:	08009e1d 	.word	0x08009e1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d9a:	f043 0301 	orr.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	699b      	ldr	r3, [r3, #24]
 8009dac:	18d1      	adds	r1, r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db4:	f7ff ff5c 	bl	8009c70 <prvInsertTimerInActiveList>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d069      	beq.n	8009e92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d05e      	beq.n	8009e92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	441a      	add	r2, r3
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2300      	movs	r3, #0
 8009de2:	2100      	movs	r1, #0
 8009de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009de6:	f7ff fe05 	bl	80099f4 <xTimerGenericCommand>
 8009dea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d14f      	bne.n	8009e92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	61bb      	str	r3, [r7, #24]
}
 8009e04:	bf00      	nop
 8009e06:	e7fe      	b.n	8009e06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e0e:	f023 0301 	bic.w	r3, r3, #1
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009e1a:	e03a      	b.n	8009e92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e22:	f043 0301 	orr.w	r3, r3, #1
 8009e26:	b2da      	uxtb	r2, r3
 8009e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	617b      	str	r3, [r7, #20]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e54:	699a      	ldr	r2, [r3, #24]
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	18d1      	adds	r1, r2, r3
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e60:	f7ff ff06 	bl	8009c70 <prvInsertTimerInActiveList>
					break;
 8009e64:	e015      	b.n	8009e92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e6c:	f003 0302 	and.w	r3, r3, #2
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e76:	f000 fc4b 	bl	800a710 <vPortFree>
 8009e7a:	e00a      	b.n	8009e92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e82:	f023 0301 	bic.w	r3, r3, #1
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e8e:	e000      	b.n	8009e92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009e90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e92:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <prvProcessReceivedCommands+0x1c0>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	1d39      	adds	r1, r7, #4
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fd fe78 	bl	8007b90 <xQueueReceive>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f47f af2a 	bne.w	8009cfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	3730      	adds	r7, #48	; 0x30
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	20026980 	.word	0x20026980

08009eb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ebe:	e048      	b.n	8009f52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ec0:	4b2d      	ldr	r3, [pc, #180]	; (8009f78 <prvSwitchTimerLists+0xc0>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009eca:	4b2b      	ldr	r3, [pc, #172]	; (8009f78 <prvSwitchTimerLists+0xc0>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fd f955 	bl	8007188 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	68f8      	ldr	r0, [r7, #12]
 8009ee4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d02e      	beq.n	8009f52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	693a      	ldr	r2, [r7, #16]
 8009efa:	4413      	add	r3, r2
 8009efc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d90e      	bls.n	8009f24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f12:	4b19      	ldr	r3, [pc, #100]	; (8009f78 <prvSwitchTimerLists+0xc0>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	f7fd f8fa 	bl	8007116 <vListInsert>
 8009f22:	e016      	b.n	8009f52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f24:	2300      	movs	r3, #0
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff fd60 	bl	80099f4 <xTimerGenericCommand>
 8009f34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10a      	bne.n	8009f52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	603b      	str	r3, [r7, #0]
}
 8009f4e:	bf00      	nop
 8009f50:	e7fe      	b.n	8009f50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <prvSwitchTimerLists+0xc0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d1b1      	bne.n	8009ec0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f5c:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <prvSwitchTimerLists+0xc0>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f62:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <prvSwitchTimerLists+0xc4>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a04      	ldr	r2, [pc, #16]	; (8009f78 <prvSwitchTimerLists+0xc0>)
 8009f68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f6a:	4a04      	ldr	r2, [pc, #16]	; (8009f7c <prvSwitchTimerLists+0xc4>)
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	6013      	str	r3, [r2, #0]
}
 8009f70:	bf00      	nop
 8009f72:	3718      	adds	r7, #24
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20026978 	.word	0x20026978
 8009f7c:	2002697c 	.word	0x2002697c

08009f80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f86:	f000 f9d5 	bl	800a334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f8a:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <prvCheckForValidListAndQueue+0x60>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d120      	bne.n	8009fd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f92:	4814      	ldr	r0, [pc, #80]	; (8009fe4 <prvCheckForValidListAndQueue+0x64>)
 8009f94:	f7fd f86e 	bl	8007074 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f98:	4813      	ldr	r0, [pc, #76]	; (8009fe8 <prvCheckForValidListAndQueue+0x68>)
 8009f9a:	f7fd f86b 	bl	8007074 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f9e:	4b13      	ldr	r3, [pc, #76]	; (8009fec <prvCheckForValidListAndQueue+0x6c>)
 8009fa0:	4a10      	ldr	r2, [pc, #64]	; (8009fe4 <prvCheckForValidListAndQueue+0x64>)
 8009fa2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009fa4:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <prvCheckForValidListAndQueue+0x70>)
 8009fa6:	4a10      	ldr	r2, [pc, #64]	; (8009fe8 <prvCheckForValidListAndQueue+0x68>)
 8009fa8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009faa:	2300      	movs	r3, #0
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	4b11      	ldr	r3, [pc, #68]	; (8009ff4 <prvCheckForValidListAndQueue+0x74>)
 8009fb0:	4a11      	ldr	r2, [pc, #68]	; (8009ff8 <prvCheckForValidListAndQueue+0x78>)
 8009fb2:	2110      	movs	r1, #16
 8009fb4:	200a      	movs	r0, #10
 8009fb6:	f7fd f979 	bl	80072ac <xQueueGenericCreateStatic>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	4a08      	ldr	r2, [pc, #32]	; (8009fe0 <prvCheckForValidListAndQueue+0x60>)
 8009fbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <prvCheckForValidListAndQueue+0x60>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <prvCheckForValidListAndQueue+0x60>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	490b      	ldr	r1, [pc, #44]	; (8009ffc <prvCheckForValidListAndQueue+0x7c>)
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe fa1c 	bl	800840c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fd4:	f000 f9de 	bl	800a394 <vPortExitCritical>
}
 8009fd8:	bf00      	nop
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20026980 	.word	0x20026980
 8009fe4:	20026950 	.word	0x20026950
 8009fe8:	20026964 	.word	0x20026964
 8009fec:	20026978 	.word	0x20026978
 8009ff0:	2002697c 	.word	0x2002697c
 8009ff4:	20026a2c 	.word	0x20026a2c
 8009ff8:	2002698c 	.word	0x2002698c
 8009ffc:	0800d6dc 	.word	0x0800d6dc

0800a000 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <xTimerIsTimerActive+0x28>
	__asm volatile
 800a012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	60fb      	str	r3, [r7, #12]
}
 800a024:	bf00      	nop
 800a026:	e7fe      	b.n	800a026 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800a028:	f000 f984 	bl	800a334 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800a03a:	2300      	movs	r3, #0
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	e001      	b.n	800a044 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 800a040:	2301      	movs	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a044:	f000 f9a6 	bl	800a394 <vPortExitCritical>

	return xReturn;
 800a048:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800a04a:	4618      	mov	r0, r3
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b086      	sub	sp, #24
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10a      	bne.n	800a07a <pvTimerGetTimerID+0x28>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	f383 8811 	msr	BASEPRI, r3
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	f3bf 8f4f 	dsb	sy
 800a074:	60fb      	str	r3, [r7, #12]
}
 800a076:	bf00      	nop
 800a078:	e7fe      	b.n	800a078 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a07a:	f000 f95b 	bl	800a334 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a084:	f000 f986 	bl	800a394 <vPortExitCritical>

	return pvReturn;
 800a088:	693b      	ldr	r3, [r7, #16]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	; 0x28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
 800a0a0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a0a2:	f06f 0301 	mvn.w	r3, #1
 800a0a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0b4:	4b06      	ldr	r3, [pc, #24]	; (800a0d0 <xTimerPendFunctionCallFromISR+0x3c>)
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	f107 0114 	add.w	r1, r7, #20
 800a0bc:	2300      	movs	r3, #0
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	f7fd fc16 	bl	80078f0 <xQueueGenericSendFromISR>
 800a0c4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3728      	adds	r7, #40	; 0x28
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	20026980 	.word	0x20026980

0800a0d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	3b04      	subs	r3, #4
 800a0e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3b04      	subs	r3, #4
 800a0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f023 0201 	bic.w	r2, r3, #1
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b04      	subs	r3, #4
 800a102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a104:	4a0c      	ldr	r2, [pc, #48]	; (800a138 <pxPortInitialiseStack+0x64>)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3b14      	subs	r3, #20
 800a10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3b04      	subs	r3, #4
 800a11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f06f 0202 	mvn.w	r2, #2
 800a122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3b20      	subs	r3, #32
 800a128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a12a:	68fb      	ldr	r3, [r7, #12]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	0800a13d 	.word	0x0800a13d

0800a13c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <prvTaskExitError+0x54>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14e:	d00a      	beq.n	800a166 <prvTaskExitError+0x2a>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <prvTaskExitError+0x28>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a17a:	bf00      	nop
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0fc      	beq.n	800a17c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	2000001c 	.word	0x2000001c
	...

0800a1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1a0:	4b07      	ldr	r3, [pc, #28]	; (800a1c0 <pxCurrentTCBConst2>)
 800a1a2:	6819      	ldr	r1, [r3, #0]
 800a1a4:	6808      	ldr	r0, [r1, #0]
 800a1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1aa:	f380 8809 	msr	PSP, r0
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8811 	msr	BASEPRI, r0
 800a1ba:	4770      	bx	lr
 800a1bc:	f3af 8000 	nop.w

0800a1c0 <pxCurrentTCBConst2>:
 800a1c0:	20026450 	.word	0x20026450
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop

0800a1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1c8:	4808      	ldr	r0, [pc, #32]	; (800a1ec <prvPortStartFirstTask+0x24>)
 800a1ca:	6800      	ldr	r0, [r0, #0]
 800a1cc:	6800      	ldr	r0, [r0, #0]
 800a1ce:	f380 8808 	msr	MSP, r0
 800a1d2:	f04f 0000 	mov.w	r0, #0
 800a1d6:	f380 8814 	msr	CONTROL, r0
 800a1da:	b662      	cpsie	i
 800a1dc:	b661      	cpsie	f
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	df00      	svc	0
 800a1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ea:	bf00      	nop
 800a1ec:	e000ed08 	.word	0xe000ed08

0800a1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1f6:	4b46      	ldr	r3, [pc, #280]	; (800a310 <xPortStartScheduler+0x120>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a46      	ldr	r2, [pc, #280]	; (800a314 <xPortStartScheduler+0x124>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10a      	bne.n	800a216 <xPortStartScheduler+0x26>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	613b      	str	r3, [r7, #16]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a216:	4b3e      	ldr	r3, [pc, #248]	; (800a310 <xPortStartScheduler+0x120>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a3f      	ldr	r2, [pc, #252]	; (800a318 <xPortStartScheduler+0x128>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d10a      	bne.n	800a236 <xPortStartScheduler+0x46>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	60fb      	str	r3, [r7, #12]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a236:	4b39      	ldr	r3, [pc, #228]	; (800a31c <xPortStartScheduler+0x12c>)
 800a238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	22ff      	movs	r2, #255	; 0xff
 800a246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4b31      	ldr	r3, [pc, #196]	; (800a320 <xPortStartScheduler+0x130>)
 800a25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a25e:	4b31      	ldr	r3, [pc, #196]	; (800a324 <xPortStartScheduler+0x134>)
 800a260:	2207      	movs	r2, #7
 800a262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a264:	e009      	b.n	800a27a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a266:	4b2f      	ldr	r3, [pc, #188]	; (800a324 <xPortStartScheduler+0x134>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	4a2d      	ldr	r2, [pc, #180]	; (800a324 <xPortStartScheduler+0x134>)
 800a26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	b2db      	uxtb	r3, r3
 800a278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b80      	cmp	r3, #128	; 0x80
 800a284:	d0ef      	beq.n	800a266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a286:	4b27      	ldr	r3, [pc, #156]	; (800a324 <xPortStartScheduler+0x134>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f1c3 0307 	rsb	r3, r3, #7
 800a28e:	2b04      	cmp	r3, #4
 800a290:	d00a      	beq.n	800a2a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	60bb      	str	r3, [r7, #8]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2a8:	4b1e      	ldr	r3, [pc, #120]	; (800a324 <xPortStartScheduler+0x134>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	4a1d      	ldr	r2, [pc, #116]	; (800a324 <xPortStartScheduler+0x134>)
 800a2b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2b2:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <xPortStartScheduler+0x134>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2ba:	4a1a      	ldr	r2, [pc, #104]	; (800a324 <xPortStartScheduler+0x134>)
 800a2bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2c6:	4b18      	ldr	r3, [pc, #96]	; (800a328 <xPortStartScheduler+0x138>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a17      	ldr	r2, [pc, #92]	; (800a328 <xPortStartScheduler+0x138>)
 800a2cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <xPortStartScheduler+0x138>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a14      	ldr	r2, [pc, #80]	; (800a328 <xPortStartScheduler+0x138>)
 800a2d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2de:	f000 f8dd 	bl	800a49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2e2:	4b12      	ldr	r3, [pc, #72]	; (800a32c <xPortStartScheduler+0x13c>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2e8:	f000 f8fc 	bl	800a4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2ec:	4b10      	ldr	r3, [pc, #64]	; (800a330 <xPortStartScheduler+0x140>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a0f      	ldr	r2, [pc, #60]	; (800a330 <xPortStartScheduler+0x140>)
 800a2f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a2f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2f8:	f7ff ff66 	bl	800a1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2fc:	f7fe fd1a 	bl	8008d34 <vTaskSwitchContext>
	prvTaskExitError();
 800a300:	f7ff ff1c 	bl	800a13c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	e000ed00 	.word	0xe000ed00
 800a314:	410fc271 	.word	0x410fc271
 800a318:	410fc270 	.word	0x410fc270
 800a31c:	e000e400 	.word	0xe000e400
 800a320:	20026a7c 	.word	0x20026a7c
 800a324:	20026a80 	.word	0x20026a80
 800a328:	e000ed20 	.word	0xe000ed20
 800a32c:	2000001c 	.word	0x2000001c
 800a330:	e000ef34 	.word	0xe000ef34

0800a334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	607b      	str	r3, [r7, #4]
}
 800a34c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a34e:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <vPortEnterCritical+0x58>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3301      	adds	r3, #1
 800a354:	4a0d      	ldr	r2, [pc, #52]	; (800a38c <vPortEnterCritical+0x58>)
 800a356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <vPortEnterCritical+0x58>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d10f      	bne.n	800a380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <vPortEnterCritical+0x5c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <vPortEnterCritical+0x4c>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	603b      	str	r3, [r7, #0]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <vPortEnterCritical+0x4a>
	}
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	2000001c 	.word	0x2000001c
 800a390:	e000ed04 	.word	0xe000ed04

0800a394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a39a:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <vPortExitCritical+0x50>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10a      	bne.n	800a3b8 <vPortExitCritical+0x24>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	607b      	str	r3, [r7, #4]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3c2:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <vPortExitCritical+0x42>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f383 8811 	msr	BASEPRI, r3
}
 800a3d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	2000001c 	.word	0x2000001c
	...

0800a3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3f0:	f3ef 8009 	mrs	r0, PSP
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <pxCurrentTCBConst>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	f01e 0f10 	tst.w	lr, #16
 800a400:	bf08      	it	eq
 800a402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	6010      	str	r0, [r2, #0]
 800a40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a410:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a414:	f380 8811 	msr	BASEPRI, r0
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f7fe fc88 	bl	8008d34 <vTaskSwitchContext>
 800a424:	f04f 0000 	mov.w	r0, #0
 800a428:	f380 8811 	msr	BASEPRI, r0
 800a42c:	bc09      	pop	{r0, r3}
 800a42e:	6819      	ldr	r1, [r3, #0]
 800a430:	6808      	ldr	r0, [r1, #0]
 800a432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a436:	f01e 0f10 	tst.w	lr, #16
 800a43a:	bf08      	it	eq
 800a43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a440:	f380 8809 	msr	PSP, r0
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	f3af 8000 	nop.w

0800a450 <pxCurrentTCBConst>:
 800a450:	20026450 	.word	0x20026450
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop

0800a458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	607b      	str	r3, [r7, #4]
}
 800a470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a472:	f7fe fba1 	bl	8008bb8 <xTaskIncrementTick>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a47c:	4b06      	ldr	r3, [pc, #24]	; (800a498 <xPortSysTickHandler+0x40>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	2300      	movs	r3, #0
 800a486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	f383 8811 	msr	BASEPRI, r3
}
 800a48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <vPortSetupTimerInterrupt+0x34>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <vPortSetupTimerInterrupt+0x38>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <vPortSetupTimerInterrupt+0x3c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a0a      	ldr	r2, [pc, #40]	; (800a4dc <vPortSetupTimerInterrupt+0x40>)
 800a4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b6:	099b      	lsrs	r3, r3, #6
 800a4b8:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <vPortSetupTimerInterrupt+0x44>)
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <vPortSetupTimerInterrupt+0x34>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	e000e010 	.word	0xe000e010
 800a4d4:	e000e018 	.word	0xe000e018
 800a4d8:	20000010 	.word	0x20000010
 800a4dc:	10624dd3 	.word	0x10624dd3
 800a4e0:	e000e014 	.word	0xe000e014

0800a4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4f4 <vPortEnableVFP+0x10>
 800a4e8:	6801      	ldr	r1, [r0, #0]
 800a4ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4ee:	6001      	str	r1, [r0, #0]
 800a4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4f2:	bf00      	nop
 800a4f4:	e000ed88 	.word	0xe000ed88

0800a4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4fe:	f3ef 8305 	mrs	r3, IPSR
 800a502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b0f      	cmp	r3, #15
 800a508:	d914      	bls.n	800a534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a50a:	4a17      	ldr	r2, [pc, #92]	; (800a568 <vPortValidateInterruptPriority+0x70>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a514:	4b15      	ldr	r3, [pc, #84]	; (800a56c <vPortValidateInterruptPriority+0x74>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	7afa      	ldrb	r2, [r7, #11]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d20a      	bcs.n	800a534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	607b      	str	r3, [r7, #4]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a534:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <vPortValidateInterruptPriority+0x78>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a53c:	4b0d      	ldr	r3, [pc, #52]	; (800a574 <vPortValidateInterruptPriority+0x7c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d90a      	bls.n	800a55a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	603b      	str	r3, [r7, #0]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <vPortValidateInterruptPriority+0x60>
	}
 800a55a:	bf00      	nop
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	e000e3f0 	.word	0xe000e3f0
 800a56c:	20026a7c 	.word	0x20026a7c
 800a570:	e000ed0c 	.word	0xe000ed0c
 800a574:	20026a80 	.word	0x20026a80

0800a578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	; 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a584:	f7fe fa46 	bl	8008a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a588:	4b5b      	ldr	r3, [pc, #364]	; (800a6f8 <pvPortMalloc+0x180>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a590:	f000 f920 	bl	800a7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a594:	4b59      	ldr	r3, [pc, #356]	; (800a6fc <pvPortMalloc+0x184>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f040 8093 	bne.w	800a6c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01d      	beq.n	800a5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d014      	beq.n	800a5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f023 0307 	bic.w	r3, r3, #7
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d06e      	beq.n	800a6c8 <pvPortMalloc+0x150>
 800a5ea:	4b45      	ldr	r3, [pc, #276]	; (800a700 <pvPortMalloc+0x188>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d869      	bhi.n	800a6c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5f4:	4b43      	ldr	r3, [pc, #268]	; (800a704 <pvPortMalloc+0x18c>)
 800a5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5f8:	4b42      	ldr	r3, [pc, #264]	; (800a704 <pvPortMalloc+0x18c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5fe:	e004      	b.n	800a60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d903      	bls.n	800a61c <pvPortMalloc+0xa4>
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1f1      	bne.n	800a600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a61c:	4b36      	ldr	r3, [pc, #216]	; (800a6f8 <pvPortMalloc+0x180>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a622:	429a      	cmp	r2, r3
 800a624:	d050      	beq.n	800a6c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2208      	movs	r2, #8
 800a62c:	4413      	add	r3, r2
 800a62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	1ad2      	subs	r2, r2, r3
 800a640:	2308      	movs	r3, #8
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	429a      	cmp	r2, r3
 800a646:	d91f      	bls.n	800a688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4413      	add	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	f003 0307 	and.w	r3, r3, #7
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <pvPortMalloc+0xf8>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	613b      	str	r3, [r7, #16]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a682:	69b8      	ldr	r0, [r7, #24]
 800a684:	f000 f908 	bl	800a898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a688:	4b1d      	ldr	r3, [pc, #116]	; (800a700 <pvPortMalloc+0x188>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	4a1b      	ldr	r2, [pc, #108]	; (800a700 <pvPortMalloc+0x188>)
 800a694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a696:	4b1a      	ldr	r3, [pc, #104]	; (800a700 <pvPortMalloc+0x188>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	4b1b      	ldr	r3, [pc, #108]	; (800a708 <pvPortMalloc+0x190>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d203      	bcs.n	800a6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6a2:	4b17      	ldr	r3, [pc, #92]	; (800a700 <pvPortMalloc+0x188>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a18      	ldr	r2, [pc, #96]	; (800a708 <pvPortMalloc+0x190>)
 800a6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <pvPortMalloc+0x184>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <pvPortMalloc+0x194>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	4a11      	ldr	r2, [pc, #68]	; (800a70c <pvPortMalloc+0x194>)
 800a6c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6c8:	f7fe f9b2 	bl	8008a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <pvPortMalloc+0x174>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	60fb      	str	r3, [r7, #12]
}
 800a6e8:	bf00      	nop
 800a6ea:	e7fe      	b.n	800a6ea <pvPortMalloc+0x172>
	return pvReturn;
 800a6ec:	69fb      	ldr	r3, [r7, #28]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3728      	adds	r7, #40	; 0x28
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	2002a68c 	.word	0x2002a68c
 800a6fc:	2002a6a0 	.word	0x2002a6a0
 800a700:	2002a690 	.word	0x2002a690
 800a704:	2002a684 	.word	0x2002a684
 800a708:	2002a694 	.word	0x2002a694
 800a70c:	2002a698 	.word	0x2002a698

0800a710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d04d      	beq.n	800a7be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a722:	2308      	movs	r3, #8
 800a724:	425b      	negs	r3, r3
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	4413      	add	r3, r2
 800a72a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	685a      	ldr	r2, [r3, #4]
 800a734:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <vPortFree+0xb8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	4013      	ands	r3, r2
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <vPortFree+0x44>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	60fb      	str	r3, [r7, #12]
}
 800a750:	bf00      	nop
 800a752:	e7fe      	b.n	800a752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00a      	beq.n	800a772 <vPortFree+0x62>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	60bb      	str	r3, [r7, #8]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <vPortFree+0xb8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4013      	ands	r3, r2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01e      	beq.n	800a7be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d11a      	bne.n	800a7be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	4b0e      	ldr	r3, [pc, #56]	; (800a7c8 <vPortFree+0xb8>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	43db      	mvns	r3, r3
 800a792:	401a      	ands	r2, r3
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a798:	f7fe f93c 	bl	8008a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <vPortFree+0xbc>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4413      	add	r3, r2
 800a7a6:	4a09      	ldr	r2, [pc, #36]	; (800a7cc <vPortFree+0xbc>)
 800a7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7aa:	6938      	ldr	r0, [r7, #16]
 800a7ac:	f000 f874 	bl	800a898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7b0:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <vPortFree+0xc0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	4a06      	ldr	r2, [pc, #24]	; (800a7d0 <vPortFree+0xc0>)
 800a7b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7ba:	f7fe f939 	bl	8008a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	2002a6a0 	.word	0x2002a6a0
 800a7cc:	2002a690 	.word	0x2002a690
 800a7d0:	2002a69c 	.word	0x2002a69c

0800a7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a7de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7e0:	4b27      	ldr	r3, [pc, #156]	; (800a880 <prvHeapInit+0xac>)
 800a7e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00c      	beq.n	800a808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3307      	adds	r3, #7
 800a7f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0307 	bic.w	r3, r3, #7
 800a7fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	4a1f      	ldr	r2, [pc, #124]	; (800a880 <prvHeapInit+0xac>)
 800a804:	4413      	add	r3, r2
 800a806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a80c:	4a1d      	ldr	r2, [pc, #116]	; (800a884 <prvHeapInit+0xb0>)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a812:	4b1c      	ldr	r3, [pc, #112]	; (800a884 <prvHeapInit+0xb0>)
 800a814:	2200      	movs	r2, #0
 800a816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	4413      	add	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a820:	2208      	movs	r2, #8
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1a9b      	subs	r3, r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f023 0307 	bic.w	r3, r3, #7
 800a82e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4a15      	ldr	r2, [pc, #84]	; (800a888 <prvHeapInit+0xb4>)
 800a834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a836:	4b14      	ldr	r3, [pc, #80]	; (800a888 <prvHeapInit+0xb4>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2200      	movs	r2, #0
 800a83c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <prvHeapInit+0xb4>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a854:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <prvHeapInit+0xb4>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	4a0a      	ldr	r2, [pc, #40]	; (800a88c <prvHeapInit+0xb8>)
 800a862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	4a09      	ldr	r2, [pc, #36]	; (800a890 <prvHeapInit+0xbc>)
 800a86a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a86c:	4b09      	ldr	r3, [pc, #36]	; (800a894 <prvHeapInit+0xc0>)
 800a86e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	20026a84 	.word	0x20026a84
 800a884:	2002a684 	.word	0x2002a684
 800a888:	2002a68c 	.word	0x2002a68c
 800a88c:	2002a694 	.word	0x2002a694
 800a890:	2002a690 	.word	0x2002a690
 800a894:	2002a6a0 	.word	0x2002a6a0

0800a898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8a0:	4b28      	ldr	r3, [pc, #160]	; (800a944 <prvInsertBlockIntoFreeList+0xac>)
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	e002      	b.n	800a8ac <prvInsertBlockIntoFreeList+0x14>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	60fb      	str	r3, [r7, #12]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d8f7      	bhi.n	800a8a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d108      	bne.n	800a8da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	685a      	ldr	r2, [r3, #4]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	441a      	add	r2, r3
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d118      	bne.n	800a920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	4b15      	ldr	r3, [pc, #84]	; (800a948 <prvInsertBlockIntoFreeList+0xb0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d00d      	beq.n	800a916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	441a      	add	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	601a      	str	r2, [r3, #0]
 800a914:	e008      	b.n	800a928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a916:	4b0c      	ldr	r3, [pc, #48]	; (800a948 <prvInsertBlockIntoFreeList+0xb0>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	e003      	b.n	800a928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d002      	beq.n	800a936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a936:	bf00      	nop
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	2002a684 	.word	0x2002a684
 800a948:	2002a68c 	.word	0x2002a68c

0800a94c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800a952:	4b24      	ldr	r3, [pc, #144]	; (800a9e4 <_DoInit+0x98>)
 800a954:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2203      	movs	r2, #3
 800a95a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2203      	movs	r2, #3
 800a960:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a20      	ldr	r2, [pc, #128]	; (800a9e8 <_DoInit+0x9c>)
 800a966:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a20      	ldr	r2, [pc, #128]	; (800a9ec <_DoInit+0xa0>)
 800a96c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a974:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a17      	ldr	r2, [pc, #92]	; (800a9e8 <_DoInit+0x9c>)
 800a98c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a17      	ldr	r2, [pc, #92]	; (800a9f0 <_DoInit+0xa4>)
 800a992:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2210      	movs	r2, #16
 800a998:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3307      	adds	r3, #7
 800a9b0:	4a10      	ldr	r2, [pc, #64]	; (800a9f4 <_DoInit+0xa8>)
 800a9b2:	6810      	ldr	r0, [r2, #0]
 800a9b4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a9b6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a0e      	ldr	r2, [pc, #56]	; (800a9f8 <_DoInit+0xac>)
 800a9be:	6810      	ldr	r0, [r2, #0]
 800a9c0:	6018      	str	r0, [r3, #0]
 800a9c2:	8891      	ldrh	r1, [r2, #4]
 800a9c4:	7992      	ldrb	r2, [r2, #6]
 800a9c6:	8099      	strh	r1, [r3, #4]
 800a9c8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a9ca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a9d4:	f3bf 8f5f 	dmb	sy
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	2002a6a4 	.word	0x2002a6a4
 800a9e8:	0800d6e4 	.word	0x0800d6e4
 800a9ec:	2002a74c 	.word	0x2002a74c
 800a9f0:	2002ab4c 	.word	0x2002ab4c
 800a9f4:	0800d6f0 	.word	0x0800d6f0
 800a9f8:	0800d6f4 	.word	0x0800d6f4

0800a9fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b08c      	sub	sp, #48	; 0x30
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800aa08:	4b3e      	ldr	r3, [pc, #248]	; (800ab04 <SEGGER_RTT_ReadNoLock+0x108>)
 800aa0a:	623b      	str	r3, [r7, #32]
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d101      	bne.n	800aa1a <SEGGER_RTT_ReadNoLock+0x1e>
 800aa16:	f7ff ff99 	bl	800a94c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	4413      	add	r3, r2
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	3360      	adds	r3, #96	; 0x60
 800aa26:	4a37      	ldr	r2, [pc, #220]	; (800ab04 <SEGGER_RTT_ReadNoLock+0x108>)
 800aa28:	4413      	add	r3, r2
 800aa2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800aa40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d92b      	bls.n	800aaa0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	bf28      	it	cs
 800aa5a:	4613      	movcs	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	4413      	add	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	6939      	ldr	r1, [r7, #16]
 800aa6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa6e:	f001 fe10 	bl	800c692 <memcpy>
    NumBytesRead += NumBytesRem;
 800aa72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	4413      	add	r3, r2
 800aa78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800aa7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	4413      	add	r3, r2
 800aa80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	1ad3      	subs	r3, r2, r3
 800aa88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800aa8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	4413      	add	r3, r2
 800aa90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d101      	bne.n	800aaa0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800aaa0:	69ba      	ldr	r2, [r7, #24]
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4293      	cmp	r3, r2
 800aaae:	bf28      	it	cs
 800aab0:	4613      	movcs	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d019      	beq.n	800aaee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	4413      	add	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	6939      	ldr	r1, [r7, #16]
 800aac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaca:	f001 fde2 	bl	800c692 <memcpy>
    NumBytesRead += NumBytesRem;
 800aace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	4413      	add	r3, r2
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800aad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	4413      	add	r3, r2
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800aae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	4413      	add	r3, r2
 800aaec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800aaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d002      	beq.n	800aafa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaf8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3730      	adds	r7, #48	; 0x30
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	2002a6a4 	.word	0x2002a6a4

0800ab08 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800ab16:	4b3d      	ldr	r3, [pc, #244]	; (800ac0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800ab18:	61bb      	str	r3, [r7, #24]
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d101      	bne.n	800ab28 <SEGGER_RTT_AllocUpBuffer+0x20>
 800ab24:	f7ff ff12 	bl	800a94c <_DoInit>
  SEGGER_RTT_LOCK();
 800ab28:	f3ef 8311 	mrs	r3, BASEPRI
 800ab2c:	f04f 0120 	mov.w	r1, #32
 800ab30:	f381 8811 	msr	BASEPRI, r1
 800ab34:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ab36:	4b35      	ldr	r3, [pc, #212]	; (800ac0c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800ab38:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800ab3e:	6939      	ldr	r1, [r7, #16]
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	4613      	mov	r3, r2
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	4413      	add	r3, r2
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	440b      	add	r3, r1
 800ab4e:	3304      	adds	r3, #4
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	429a      	cmp	r2, r3
 800ab64:	dbeb      	blt.n	800ab3e <SEGGER_RTT_AllocUpBuffer+0x36>
 800ab66:	e000      	b.n	800ab6a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800ab68:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800ab6a:	693b      	ldr	r3, [r7, #16]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	69fa      	ldr	r2, [r7, #28]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	da3f      	bge.n	800abf4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800ab74:	6939      	ldr	r1, [r7, #16]
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	4413      	add	r3, r2
 800ab80:	00db      	lsls	r3, r3, #3
 800ab82:	440b      	add	r3, r1
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800ab88:	6939      	ldr	r1, [r7, #16]
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	1c5a      	adds	r2, r3, #1
 800ab8e:	4613      	mov	r3, r2
 800ab90:	005b      	lsls	r3, r3, #1
 800ab92:	4413      	add	r3, r2
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	440b      	add	r3, r1
 800ab98:	3304      	adds	r3, #4
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800ab9e:	6939      	ldr	r1, [r7, #16]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	4613      	mov	r3, r2
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	4413      	add	r3, r2
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	440b      	add	r3, r1
 800abac:	3320      	adds	r3, #32
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800abb2:	6939      	ldr	r1, [r7, #16]
 800abb4:	69fa      	ldr	r2, [r7, #28]
 800abb6:	4613      	mov	r3, r2
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4413      	add	r3, r2
 800abbc:	00db      	lsls	r3, r3, #3
 800abbe:	440b      	add	r3, r1
 800abc0:	3328      	adds	r3, #40	; 0x28
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800abc6:	6939      	ldr	r1, [r7, #16]
 800abc8:	69fa      	ldr	r2, [r7, #28]
 800abca:	4613      	mov	r3, r2
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	4413      	add	r3, r2
 800abd0:	00db      	lsls	r3, r3, #3
 800abd2:	440b      	add	r3, r1
 800abd4:	3324      	adds	r3, #36	; 0x24
 800abd6:	2200      	movs	r2, #0
 800abd8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800abda:	6939      	ldr	r1, [r7, #16]
 800abdc:	69fa      	ldr	r2, [r7, #28]
 800abde:	4613      	mov	r3, r2
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	4413      	add	r3, r2
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	440b      	add	r3, r1
 800abe8:	332c      	adds	r3, #44	; 0x2c
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800abee:	f3bf 8f5f 	dmb	sy
 800abf2:	e002      	b.n	800abfa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800abf4:	f04f 33ff 	mov.w	r3, #4294967295
 800abf8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800ac00:	69fb      	ldr	r3, [r7, #28]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3720      	adds	r7, #32
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	2002a6a4 	.word	0x2002a6a4

0800ac10 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08a      	sub	sp, #40	; 0x28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	607a      	str	r2, [r7, #4]
 800ac1c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800ac1e:	4b21      	ldr	r3, [pc, #132]	; (800aca4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800ac20:	623b      	str	r3, [r7, #32]
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d101      	bne.n	800ac30 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800ac2c:	f7ff fe8e 	bl	800a94c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ac30:	4b1c      	ldr	r3, [pc, #112]	; (800aca4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800ac32:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d82c      	bhi.n	800ac94 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800ac3a:	f3ef 8311 	mrs	r3, BASEPRI
 800ac3e:	f04f 0120 	mov.w	r1, #32
 800ac42:	f381 8811 	msr	BASEPRI, r1
 800ac46:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	4413      	add	r3, r2
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	3360      	adds	r3, #96	; 0x60
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	4413      	add	r3, r2
 800ac58:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2200      	movs	r2, #0
 800ac76:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac82:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ac84:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	627b      	str	r3, [r7, #36]	; 0x24
 800ac92:	e002      	b.n	800ac9a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800ac94:	f04f 33ff 	mov.w	r3, #4294967295
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3728      	adds	r7, #40	; 0x28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	2002a6a4 	.word	0x2002a6a4

0800aca8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00f      	beq.n	800acde <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800acbe:	e002      	b.n	800acc6 <_EncodeStr+0x1e>
      Len++;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	3301      	adds	r3, #1
 800acc4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	4413      	add	r3, r2
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1f6      	bne.n	800acc0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d901      	bls.n	800acde <_EncodeStr+0x36>
      Len = Limit;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2bfe      	cmp	r3, #254	; 0xfe
 800ace2:	d806      	bhi.n	800acf2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	60fa      	str	r2, [r7, #12]
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	b2d2      	uxtb	r2, r2
 800acee:	701a      	strb	r2, [r3, #0]
 800acf0:	e011      	b.n	800ad16 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	60fa      	str	r2, [r7, #12]
 800acf8:	22ff      	movs	r2, #255	; 0xff
 800acfa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	60fa      	str	r2, [r7, #12]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	b2d2      	uxtb	r2, r2
 800ad06:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	0a19      	lsrs	r1, r3, #8
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	60fa      	str	r2, [r7, #12]
 800ad12:	b2ca      	uxtb	r2, r1
 800ad14:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ad1a:	e00a      	b.n	800ad32 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	1c53      	adds	r3, r2, #1
 800ad20:	60bb      	str	r3, [r7, #8]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	1c59      	adds	r1, r3, #1
 800ad26:	60f9      	str	r1, [r7, #12]
 800ad28:	7812      	ldrb	r2, [r2, #0]
 800ad2a:	701a      	strb	r2, [r3, #0]
    n++;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d3f0      	bcc.n	800ad1c <_EncodeStr+0x74>
  }
  return pPayload;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	371c      	adds	r7, #28
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	3304      	adds	r3, #4
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ad66:	4b35      	ldr	r3, [pc, #212]	; (800ae3c <_HandleIncomingPacket+0xdc>)
 800ad68:	7e1b      	ldrb	r3, [r3, #24]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	1cfb      	adds	r3, r7, #3
 800ad6e:	2201      	movs	r2, #1
 800ad70:	4619      	mov	r1, r3
 800ad72:	f7ff fe43 	bl	800a9fc <SEGGER_RTT_ReadNoLock>
 800ad76:	4603      	mov	r3, r0
 800ad78:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dd59      	ble.n	800ae34 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	2b80      	cmp	r3, #128	; 0x80
 800ad84:	d032      	beq.n	800adec <_HandleIncomingPacket+0x8c>
 800ad86:	2b80      	cmp	r3, #128	; 0x80
 800ad88:	dc42      	bgt.n	800ae10 <_HandleIncomingPacket+0xb0>
 800ad8a:	2b07      	cmp	r3, #7
 800ad8c:	dc16      	bgt.n	800adbc <_HandleIncomingPacket+0x5c>
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dd3e      	ble.n	800ae10 <_HandleIncomingPacket+0xb0>
 800ad92:	3b01      	subs	r3, #1
 800ad94:	2b06      	cmp	r3, #6
 800ad96:	d83b      	bhi.n	800ae10 <_HandleIncomingPacket+0xb0>
 800ad98:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <_HandleIncomingPacket+0x40>)
 800ad9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9e:	bf00      	nop
 800ada0:	0800adc3 	.word	0x0800adc3
 800ada4:	0800adc9 	.word	0x0800adc9
 800ada8:	0800adcf 	.word	0x0800adcf
 800adac:	0800add5 	.word	0x0800add5
 800adb0:	0800addb 	.word	0x0800addb
 800adb4:	0800ade1 	.word	0x0800ade1
 800adb8:	0800ade7 	.word	0x0800ade7
 800adbc:	2b7f      	cmp	r3, #127	; 0x7f
 800adbe:	d034      	beq.n	800ae2a <_HandleIncomingPacket+0xca>
 800adc0:	e026      	b.n	800ae10 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800adc2:	f000 fba5 	bl	800b510 <SEGGER_SYSVIEW_Start>
      break;
 800adc6:	e035      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800adc8:	f000 fc5c 	bl	800b684 <SEGGER_SYSVIEW_Stop>
      break;
 800adcc:	e032      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800adce:	f000 fe35 	bl	800ba3c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800add2:	e02f      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800add4:	f000 fdfa 	bl	800b9cc <SEGGER_SYSVIEW_SendTaskList>
      break;
 800add8:	e02c      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800adda:	f000 fc79 	bl	800b6d0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800adde:	e029      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800ade0:	f000 ffee 	bl	800bdc0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800ade4:	e026      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800ade6:	f000 ffcd 	bl	800bd84 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800adea:	e023      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800adec:	4b13      	ldr	r3, [pc, #76]	; (800ae3c <_HandleIncomingPacket+0xdc>)
 800adee:	7e1b      	ldrb	r3, [r3, #24]
 800adf0:	4618      	mov	r0, r3
 800adf2:	1cfb      	adds	r3, r7, #3
 800adf4:	2201      	movs	r2, #1
 800adf6:	4619      	mov	r1, r3
 800adf8:	f7ff fe00 	bl	800a9fc <SEGGER_RTT_ReadNoLock>
 800adfc:	4603      	mov	r3, r0
 800adfe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dd13      	ble.n	800ae2e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800ae06:	78fb      	ldrb	r3, [r7, #3]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 ff3b 	bl	800bc84 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800ae0e:	e00e      	b.n	800ae2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b25b      	sxtb	r3, r3
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	da0c      	bge.n	800ae32 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ae18:	4b08      	ldr	r3, [pc, #32]	; (800ae3c <_HandleIncomingPacket+0xdc>)
 800ae1a:	7e1b      	ldrb	r3, [r3, #24]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	1cfb      	adds	r3, r7, #3
 800ae20:	2201      	movs	r2, #1
 800ae22:	4619      	mov	r1, r3
 800ae24:	f7ff fdea 	bl	800a9fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800ae28:	e003      	b.n	800ae32 <_HandleIncomingPacket+0xd2>
      break;
 800ae2a:	bf00      	nop
 800ae2c:	e002      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
      break;
 800ae2e:	bf00      	nop
 800ae30:	e000      	b.n	800ae34 <_HandleIncomingPacket+0xd4>
      break;
 800ae32:	bf00      	nop
    }
  }
}
 800ae34:	bf00      	nop
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	2002af68 	.word	0x2002af68

0800ae40 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08c      	sub	sp, #48	; 0x30
 800ae44:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800ae46:	2301      	movs	r3, #1
 800ae48:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800ae4a:	1d3b      	adds	r3, r7, #4
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae54:	4b31      	ldr	r3, [pc, #196]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae5a:	e00b      	b.n	800ae74 <_TrySendOverflowPacket+0x34>
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae62:	1c59      	adds	r1, r3, #1
 800ae64:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ae66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae6a:	b2d2      	uxtb	r2, r2
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	09db      	lsrs	r3, r3, #7
 800ae72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae76:	2b7f      	cmp	r3, #127	; 0x7f
 800ae78:	d8f0      	bhi.n	800ae5c <_TrySendOverflowPacket+0x1c>
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae82:	b2d2      	uxtb	r2, r2
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae88:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ae8a:	4b25      	ldr	r3, [pc, #148]	; (800af20 <_TrySendOverflowPacket+0xe0>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ae90:	4b22      	ldr	r3, [pc, #136]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	69ba      	ldr	r2, [r7, #24]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	623b      	str	r3, [r7, #32]
 800aea2:	e00b      	b.n	800aebc <_TrySendOverflowPacket+0x7c>
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	1c59      	adds	r1, r3, #1
 800aeac:	6279      	str	r1, [r7, #36]	; 0x24
 800aeae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aeb2:	b2d2      	uxtb	r2, r2
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	09db      	lsrs	r3, r3, #7
 800aeba:	623b      	str	r3, [r7, #32]
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	2b7f      	cmp	r3, #127	; 0x7f
 800aec0:	d8f0      	bhi.n	800aea4 <_TrySendOverflowPacket+0x64>
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	627a      	str	r2, [r7, #36]	; 0x24
 800aec8:	6a3a      	ldr	r2, [r7, #32]
 800aeca:	b2d2      	uxtb	r2, r2
 800aecc:	701a      	strb	r2, [r3, #0]
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800aed2:	4b12      	ldr	r3, [pc, #72]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800aed4:	785b      	ldrb	r3, [r3, #1]
 800aed6:	4618      	mov	r0, r3
 800aed8:	1d3b      	adds	r3, r7, #4
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	461a      	mov	r2, r3
 800aee0:	1d3b      	adds	r3, r7, #4
 800aee2:	4619      	mov	r1, r3
 800aee4:	f7f5 f984 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800aee8:	4603      	mov	r3, r0
 800aeea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d009      	beq.n	800af06 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800aef2:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800aef8:	4b08      	ldr	r3, [pc, #32]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	4b06      	ldr	r3, [pc, #24]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	e004      	b.n	800af10 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800af06:	4b05      	ldr	r3, [pc, #20]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	3301      	adds	r3, #1
 800af0c:	4a03      	ldr	r2, [pc, #12]	; (800af1c <_TrySendOverflowPacket+0xdc>)
 800af0e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800af10:	693b      	ldr	r3, [r7, #16]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3730      	adds	r7, #48	; 0x30
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	2002af68 	.word	0x2002af68
 800af20:	e0001004 	.word	0xe0001004

0800af24 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800af24:	b580      	push	{r7, lr}
 800af26:	b08a      	sub	sp, #40	; 0x28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800af30:	4b6c      	ldr	r3, [pc, #432]	; (800b0e4 <_SendPacket+0x1c0>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d010      	beq.n	800af5a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800af38:	4b6a      	ldr	r3, [pc, #424]	; (800b0e4 <_SendPacket+0x1c0>)
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 80a3 	beq.w	800b088 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800af42:	4b68      	ldr	r3, [pc, #416]	; (800b0e4 <_SendPacket+0x1c0>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d109      	bne.n	800af5e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800af4a:	f7ff ff79 	bl	800ae40 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800af4e:	4b65      	ldr	r3, [pc, #404]	; (800b0e4 <_SendPacket+0x1c0>)
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b01      	cmp	r3, #1
 800af54:	f040 809a 	bne.w	800b08c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800af58:	e001      	b.n	800af5e <_SendPacket+0x3a>
    goto Send;
 800af5a:	bf00      	nop
 800af5c:	e000      	b.n	800af60 <_SendPacket+0x3c>
Send:
 800af5e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b1f      	cmp	r3, #31
 800af64:	d809      	bhi.n	800af7a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800af66:	4b5f      	ldr	r3, [pc, #380]	; (800b0e4 <_SendPacket+0x1c0>)
 800af68:	69da      	ldr	r2, [r3, #28]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	fa22 f303 	lsr.w	r3, r2, r3
 800af70:	f003 0301 	and.w	r3, r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	f040 808b 	bne.w	800b090 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b17      	cmp	r3, #23
 800af7e:	d807      	bhi.n	800af90 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3b01      	subs	r3, #1
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	b2da      	uxtb	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	701a      	strb	r2, [r3, #0]
 800af8e:	e03d      	b.n	800b00c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	2b7f      	cmp	r3, #127	; 0x7f
 800af9c:	d912      	bls.n	800afc4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	09da      	lsrs	r2, r3, #7
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	b2d2      	uxtb	r2, r2
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800afae:	69fb      	ldr	r3, [r7, #28]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	3a01      	subs	r2, #1
 800afb6:	60fa      	str	r2, [r7, #12]
 800afb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	e006      	b.n	800afd2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b7f      	cmp	r3, #127	; 0x7f
 800afd6:	d912      	bls.n	800affe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	09da      	lsrs	r2, r3, #7
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	3b01      	subs	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	b2d2      	uxtb	r2, r2
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	3a01      	subs	r2, #1
 800aff0:	60fa      	str	r2, [r7, #12]
 800aff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	701a      	strb	r2, [r3, #0]
 800affc:	e006      	b.n	800b00c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3b01      	subs	r3, #1
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	b2da      	uxtb	r2, r3
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b00c:	4b36      	ldr	r3, [pc, #216]	; (800b0e8 <_SendPacket+0x1c4>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b012:	4b34      	ldr	r3, [pc, #208]	; (800b0e4 <_SendPacket+0x1c0>)
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	1ad3      	subs	r3, r2, r3
 800b01a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	627b      	str	r3, [r7, #36]	; 0x24
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	623b      	str	r3, [r7, #32]
 800b024:	e00b      	b.n	800b03e <_SendPacket+0x11a>
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	b2da      	uxtb	r2, r3
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	1c59      	adds	r1, r3, #1
 800b02e:	6279      	str	r1, [r7, #36]	; 0x24
 800b030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b034:	b2d2      	uxtb	r2, r2
 800b036:	701a      	strb	r2, [r3, #0]
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	09db      	lsrs	r3, r3, #7
 800b03c:	623b      	str	r3, [r7, #32]
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	2b7f      	cmp	r3, #127	; 0x7f
 800b042:	d8f0      	bhi.n	800b026 <_SendPacket+0x102>
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	1c5a      	adds	r2, r3, #1
 800b048:	627a      	str	r2, [r7, #36]	; 0x24
 800b04a:	6a3a      	ldr	r2, [r7, #32]
 800b04c:	b2d2      	uxtb	r2, r2
 800b04e:	701a      	strb	r2, [r3, #0]
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800b054:	4b23      	ldr	r3, [pc, #140]	; (800b0e4 <_SendPacket+0x1c0>)
 800b056:	785b      	ldrb	r3, [r3, #1]
 800b058:	4618      	mov	r0, r3
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	461a      	mov	r2, r3
 800b062:	68f9      	ldr	r1, [r7, #12]
 800b064:	f7f5 f8c4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b068:	4603      	mov	r3, r0
 800b06a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d003      	beq.n	800b07a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b072:	4a1c      	ldr	r2, [pc, #112]	; (800b0e4 <_SendPacket+0x1c0>)
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	60d3      	str	r3, [r2, #12]
 800b078:	e00b      	b.n	800b092 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b07a:	4b1a      	ldr	r3, [pc, #104]	; (800b0e4 <_SendPacket+0x1c0>)
 800b07c:	781b      	ldrb	r3, [r3, #0]
 800b07e:	3301      	adds	r3, #1
 800b080:	b2da      	uxtb	r2, r3
 800b082:	4b18      	ldr	r3, [pc, #96]	; (800b0e4 <_SendPacket+0x1c0>)
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	e004      	b.n	800b092 <_SendPacket+0x16e>
    goto SendDone;
 800b088:	bf00      	nop
 800b08a:	e002      	b.n	800b092 <_SendPacket+0x16e>
      goto SendDone;
 800b08c:	bf00      	nop
 800b08e:	e000      	b.n	800b092 <_SendPacket+0x16e>
      goto SendDone;
 800b090:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b092:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <_SendPacket+0x1c0>)
 800b094:	7e1b      	ldrb	r3, [r3, #24]
 800b096:	4619      	mov	r1, r3
 800b098:	4a14      	ldr	r2, [pc, #80]	; (800b0ec <_SendPacket+0x1c8>)
 800b09a:	460b      	mov	r3, r1
 800b09c:	005b      	lsls	r3, r3, #1
 800b09e:	440b      	add	r3, r1
 800b0a0:	00db      	lsls	r3, r3, #3
 800b0a2:	4413      	add	r3, r2
 800b0a4:	336c      	adds	r3, #108	; 0x6c
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	4b0e      	ldr	r3, [pc, #56]	; (800b0e4 <_SendPacket+0x1c0>)
 800b0aa:	7e1b      	ldrb	r3, [r3, #24]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	490f      	ldr	r1, [pc, #60]	; (800b0ec <_SendPacket+0x1c8>)
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	4403      	add	r3, r0
 800b0b6:	00db      	lsls	r3, r3, #3
 800b0b8:	440b      	add	r3, r1
 800b0ba:	3370      	adds	r3, #112	; 0x70
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d00b      	beq.n	800b0da <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b0c2:	4b08      	ldr	r3, [pc, #32]	; (800b0e4 <_SendPacket+0x1c0>)
 800b0c4:	789b      	ldrb	r3, [r3, #2]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b0ca:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <_SendPacket+0x1c0>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b0d0:	f7ff fe46 	bl	800ad60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b0d4:	4b03      	ldr	r3, [pc, #12]	; (800b0e4 <_SendPacket+0x1c0>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b0da:	bf00      	nop
 800b0dc:	3728      	adds	r7, #40	; 0x28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	2002af68 	.word	0x2002af68
 800b0e8:	e0001004 	.word	0xe0001004
 800b0ec:	2002a6a4 	.word	0x2002a6a4

0800b0f0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af02      	add	r7, sp, #8
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b0fe:	2300      	movs	r3, #0
 800b100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b104:	4917      	ldr	r1, [pc, #92]	; (800b164 <SEGGER_SYSVIEW_Init+0x74>)
 800b106:	4818      	ldr	r0, [pc, #96]	; (800b168 <SEGGER_SYSVIEW_Init+0x78>)
 800b108:	f7ff fcfe 	bl	800ab08 <SEGGER_RTT_AllocUpBuffer>
 800b10c:	4603      	mov	r3, r0
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	4b16      	ldr	r3, [pc, #88]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b112:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800b114:	4b15      	ldr	r3, [pc, #84]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b116:	785a      	ldrb	r2, [r3, #1]
 800b118:	4b14      	ldr	r3, [pc, #80]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b11a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b11c:	4b13      	ldr	r3, [pc, #76]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b11e:	7e1b      	ldrb	r3, [r3, #24]
 800b120:	4618      	mov	r0, r3
 800b122:	2300      	movs	r3, #0
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	2308      	movs	r3, #8
 800b128:	4a11      	ldr	r2, [pc, #68]	; (800b170 <SEGGER_SYSVIEW_Init+0x80>)
 800b12a:	490f      	ldr	r1, [pc, #60]	; (800b168 <SEGGER_SYSVIEW_Init+0x78>)
 800b12c:	f7ff fd70 	bl	800ac10 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b130:	4b0e      	ldr	r3, [pc, #56]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b132:	2200      	movs	r2, #0
 800b134:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b136:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <SEGGER_SYSVIEW_Init+0x84>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a0c      	ldr	r2, [pc, #48]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b13c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b13e:	4a0b      	ldr	r2, [pc, #44]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b144:	4a09      	ldr	r2, [pc, #36]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b14a:	4a08      	ldr	r2, [pc, #32]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b150:	4a06      	ldr	r2, [pc, #24]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b156:	4b05      	ldr	r3, [pc, #20]	; (800b16c <SEGGER_SYSVIEW_Init+0x7c>)
 800b158:	2200      	movs	r2, #0
 800b15a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b15c:	bf00      	nop
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	2002ab60 	.word	0x2002ab60
 800b168:	0800d6fc 	.word	0x0800d6fc
 800b16c:	2002af68 	.word	0x2002af68
 800b170:	2002af60 	.word	0x2002af60
 800b174:	e0001004 	.word	0xe0001004

0800b178 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800b180:	4a04      	ldr	r2, [pc, #16]	; (800b194 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6113      	str	r3, [r2, #16]
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	2002af68 	.word	0x2002af68

0800b198 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b1a0:	f3ef 8311 	mrs	r3, BASEPRI
 800b1a4:	f04f 0120 	mov.w	r1, #32
 800b1a8:	f381 8811 	msr	BASEPRI, r1
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	4808      	ldr	r0, [pc, #32]	; (800b1d0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b1b0:	f7ff fdca 	bl	800ad48 <_PreparePacket>
 800b1b4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	68b9      	ldr	r1, [r7, #8]
 800b1ba:	68b8      	ldr	r0, [r7, #8]
 800b1bc:	f7ff feb2 	bl	800af24 <_SendPacket>
  RECORD_END();
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f383 8811 	msr	BASEPRI, r3
}
 800b1c6:	bf00      	nop
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	2002af98 	.word	0x2002af98

0800b1d4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b088      	sub	sp, #32
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b1de:	f3ef 8311 	mrs	r3, BASEPRI
 800b1e2:	f04f 0120 	mov.w	r1, #32
 800b1e6:	f381 8811 	msr	BASEPRI, r1
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	4816      	ldr	r0, [pc, #88]	; (800b248 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b1ee:	f7ff fdab 	bl	800ad48 <_PreparePacket>
 800b1f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	61fb      	str	r3, [r7, #28]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	61bb      	str	r3, [r7, #24]
 800b200:	e00b      	b.n	800b21a <SEGGER_SYSVIEW_RecordU32+0x46>
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	b2da      	uxtb	r2, r3
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	1c59      	adds	r1, r3, #1
 800b20a:	61f9      	str	r1, [r7, #28]
 800b20c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b210:	b2d2      	uxtb	r2, r2
 800b212:	701a      	strb	r2, [r3, #0]
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	09db      	lsrs	r3, r3, #7
 800b218:	61bb      	str	r3, [r7, #24]
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	2b7f      	cmp	r3, #127	; 0x7f
 800b21e:	d8f0      	bhi.n	800b202 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	1c5a      	adds	r2, r3, #1
 800b224:	61fa      	str	r2, [r7, #28]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	b2d2      	uxtb	r2, r2
 800b22a:	701a      	strb	r2, [r3, #0]
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	68f9      	ldr	r1, [r7, #12]
 800b234:	6938      	ldr	r0, [r7, #16]
 800b236:	f7ff fe75 	bl	800af24 <_SendPacket>
  RECORD_END();
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f383 8811 	msr	BASEPRI, r3
}
 800b240:	bf00      	nop
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	2002af98 	.word	0x2002af98

0800b24c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b08c      	sub	sp, #48	; 0x30
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b258:	f3ef 8311 	mrs	r3, BASEPRI
 800b25c:	f04f 0120 	mov.w	r1, #32
 800b260:	f381 8811 	msr	BASEPRI, r1
 800b264:	61fb      	str	r3, [r7, #28]
 800b266:	4825      	ldr	r0, [pc, #148]	; (800b2fc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b268:	f7ff fd6e 	bl	800ad48 <_PreparePacket>
 800b26c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	62bb      	str	r3, [r7, #40]	; 0x28
 800b27a:	e00b      	b.n	800b294 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	1c59      	adds	r1, r3, #1
 800b284:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b286:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b290:	09db      	lsrs	r3, r3, #7
 800b292:	62bb      	str	r3, [r7, #40]	; 0x28
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	2b7f      	cmp	r3, #127	; 0x7f
 800b298:	d8f0      	bhi.n	800b27c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2a2:	b2d2      	uxtb	r2, r2
 800b2a4:	701a      	strb	r2, [r3, #0]
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	623b      	str	r3, [r7, #32]
 800b2b2:	e00b      	b.n	800b2cc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b2b4:	6a3b      	ldr	r3, [r7, #32]
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	1c59      	adds	r1, r3, #1
 800b2bc:	6279      	str	r1, [r7, #36]	; 0x24
 800b2be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	09db      	lsrs	r3, r3, #7
 800b2ca:	623b      	str	r3, [r7, #32]
 800b2cc:	6a3b      	ldr	r3, [r7, #32]
 800b2ce:	2b7f      	cmp	r3, #127	; 0x7f
 800b2d0:	d8f0      	bhi.n	800b2b4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	627a      	str	r2, [r7, #36]	; 0x24
 800b2d8:	6a3a      	ldr	r2, [r7, #32]
 800b2da:	b2d2      	uxtb	r2, r2
 800b2dc:	701a      	strb	r2, [r3, #0]
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	6979      	ldr	r1, [r7, #20]
 800b2e6:	69b8      	ldr	r0, [r7, #24]
 800b2e8:	f7ff fe1c 	bl	800af24 <_SendPacket>
  RECORD_END();
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	f383 8811 	msr	BASEPRI, r3
}
 800b2f2:	bf00      	nop
 800b2f4:	3730      	adds	r7, #48	; 0x30
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	2002af98 	.word	0x2002af98

0800b300 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800b300:	b580      	push	{r7, lr}
 800b302:	b08e      	sub	sp, #56	; 0x38
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800b30e:	f3ef 8311 	mrs	r3, BASEPRI
 800b312:	f04f 0120 	mov.w	r1, #32
 800b316:	f381 8811 	msr	BASEPRI, r1
 800b31a:	61fb      	str	r3, [r7, #28]
 800b31c:	4832      	ldr	r0, [pc, #200]	; (800b3e8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800b31e:	f7ff fd13 	bl	800ad48 <_PreparePacket>
 800b322:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	633b      	str	r3, [r7, #48]	; 0x30
 800b330:	e00b      	b.n	800b34a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	b2da      	uxtb	r2, r3
 800b336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b338:	1c59      	adds	r1, r3, #1
 800b33a:	6379      	str	r1, [r7, #52]	; 0x34
 800b33c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b340:	b2d2      	uxtb	r2, r2
 800b342:	701a      	strb	r2, [r3, #0]
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	09db      	lsrs	r3, r3, #7
 800b348:	633b      	str	r3, [r7, #48]	; 0x30
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	2b7f      	cmp	r3, #127	; 0x7f
 800b34e:	d8f0      	bhi.n	800b332 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800b350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	637a      	str	r2, [r7, #52]	; 0x34
 800b356:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b358:	b2d2      	uxtb	r2, r2
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	62bb      	str	r3, [r7, #40]	; 0x28
 800b368:	e00b      	b.n	800b382 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800b36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b370:	1c59      	adds	r1, r3, #1
 800b372:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b378:	b2d2      	uxtb	r2, r2
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	09db      	lsrs	r3, r3, #7
 800b380:	62bb      	str	r3, [r7, #40]	; 0x28
 800b382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b384:	2b7f      	cmp	r3, #127	; 0x7f
 800b386:	d8f0      	bhi.n	800b36a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800b388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b38a:	1c5a      	adds	r2, r3, #1
 800b38c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b390:	b2d2      	uxtb	r2, r2
 800b392:	701a      	strb	r2, [r3, #0]
 800b394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b396:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	627b      	str	r3, [r7, #36]	; 0x24
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	623b      	str	r3, [r7, #32]
 800b3a0:	e00b      	b.n	800b3ba <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	1c59      	adds	r1, r3, #1
 800b3aa:	6279      	str	r1, [r7, #36]	; 0x24
 800b3ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3b0:	b2d2      	uxtb	r2, r2
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	09db      	lsrs	r3, r3, #7
 800b3b8:	623b      	str	r3, [r7, #32]
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	2b7f      	cmp	r3, #127	; 0x7f
 800b3be:	d8f0      	bhi.n	800b3a2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	627a      	str	r2, [r7, #36]	; 0x24
 800b3c6:	6a3a      	ldr	r2, [r7, #32]
 800b3c8:	b2d2      	uxtb	r2, r2
 800b3ca:	701a      	strb	r2, [r3, #0]
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	6979      	ldr	r1, [r7, #20]
 800b3d4:	69b8      	ldr	r0, [r7, #24]
 800b3d6:	f7ff fda5 	bl	800af24 <_SendPacket>
  RECORD_END();
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	f383 8811 	msr	BASEPRI, r3
}
 800b3e0:	bf00      	nop
 800b3e2:	3738      	adds	r7, #56	; 0x38
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	2002af98 	.word	0x2002af98

0800b3ec <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b090      	sub	sp, #64	; 0x40
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
 800b3f8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b3fa:	f3ef 8311 	mrs	r3, BASEPRI
 800b3fe:	f04f 0120 	mov.w	r1, #32
 800b402:	f381 8811 	msr	BASEPRI, r1
 800b406:	61fb      	str	r3, [r7, #28]
 800b408:	4840      	ldr	r0, [pc, #256]	; (800b50c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800b40a:	f7ff fc9d 	bl	800ad48 <_PreparePacket>
 800b40e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b41c:	e00b      	b.n	800b436 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	b2da      	uxtb	r2, r3
 800b422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b424:	1c59      	adds	r1, r3, #1
 800b426:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b428:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]
 800b430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b432:	09db      	lsrs	r3, r3, #7
 800b434:	63bb      	str	r3, [r7, #56]	; 0x38
 800b436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b438:	2b7f      	cmp	r3, #127	; 0x7f
 800b43a:	d8f0      	bhi.n	800b41e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800b43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43e:	1c5a      	adds	r2, r3, #1
 800b440:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	701a      	strb	r2, [r3, #0]
 800b448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	637b      	str	r3, [r7, #52]	; 0x34
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	633b      	str	r3, [r7, #48]	; 0x30
 800b454:	e00b      	b.n	800b46e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45c:	1c59      	adds	r1, r3, #1
 800b45e:	6379      	str	r1, [r7, #52]	; 0x34
 800b460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46a:	09db      	lsrs	r3, r3, #7
 800b46c:	633b      	str	r3, [r7, #48]	; 0x30
 800b46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b470:	2b7f      	cmp	r3, #127	; 0x7f
 800b472:	d8f0      	bhi.n	800b456 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800b474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	637a      	str	r2, [r7, #52]	; 0x34
 800b47a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b48c:	e00b      	b.n	800b4a6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800b48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b490:	b2da      	uxtb	r2, r3
 800b492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b494:	1c59      	adds	r1, r3, #1
 800b496:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b498:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b49c:	b2d2      	uxtb	r2, r2
 800b49e:	701a      	strb	r2, [r3, #0]
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a2:	09db      	lsrs	r3, r3, #7
 800b4a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a8:	2b7f      	cmp	r3, #127	; 0x7f
 800b4aa:	d8f0      	bhi.n	800b48e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4b4:	b2d2      	uxtb	r2, r2
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c2:	623b      	str	r3, [r7, #32]
 800b4c4:	e00b      	b.n	800b4de <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	b2da      	uxtb	r2, r3
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4cc:	1c59      	adds	r1, r3, #1
 800b4ce:	6279      	str	r1, [r7, #36]	; 0x24
 800b4d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b4d4:	b2d2      	uxtb	r2, r2
 800b4d6:	701a      	strb	r2, [r3, #0]
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	09db      	lsrs	r3, r3, #7
 800b4dc:	623b      	str	r3, [r7, #32]
 800b4de:	6a3b      	ldr	r3, [r7, #32]
 800b4e0:	2b7f      	cmp	r3, #127	; 0x7f
 800b4e2:	d8f0      	bhi.n	800b4c6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	627a      	str	r2, [r7, #36]	; 0x24
 800b4ea:	6a3a      	ldr	r2, [r7, #32]
 800b4ec:	b2d2      	uxtb	r2, r2
 800b4ee:	701a      	strb	r2, [r3, #0]
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	6979      	ldr	r1, [r7, #20]
 800b4f8:	69b8      	ldr	r0, [r7, #24]
 800b4fa:	f7ff fd13 	bl	800af24 <_SendPacket>
  RECORD_END();
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	f383 8811 	msr	BASEPRI, r3
}
 800b504:	bf00      	nop
 800b506:	3740      	adds	r7, #64	; 0x40
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	2002af98 	.word	0x2002af98

0800b510 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b510:	b580      	push	{r7, lr}
 800b512:	b08c      	sub	sp, #48	; 0x30
 800b514:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b516:	4b58      	ldr	r3, [pc, #352]	; (800b678 <SEGGER_SYSVIEW_Start+0x168>)
 800b518:	2201      	movs	r2, #1
 800b51a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800b51c:	f3ef 8311 	mrs	r3, BASEPRI
 800b520:	f04f 0120 	mov.w	r1, #32
 800b524:	f381 8811 	msr	BASEPRI, r1
 800b528:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800b52a:	4b53      	ldr	r3, [pc, #332]	; (800b678 <SEGGER_SYSVIEW_Start+0x168>)
 800b52c:	785b      	ldrb	r3, [r3, #1]
 800b52e:	220a      	movs	r2, #10
 800b530:	4952      	ldr	r1, [pc, #328]	; (800b67c <SEGGER_SYSVIEW_Start+0x16c>)
 800b532:	4618      	mov	r0, r3
 800b534:	f7f4 fe5c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800b53e:	200a      	movs	r0, #10
 800b540:	f7ff fe2a 	bl	800b198 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b544:	f3ef 8311 	mrs	r3, BASEPRI
 800b548:	f04f 0120 	mov.w	r1, #32
 800b54c:	f381 8811 	msr	BASEPRI, r1
 800b550:	60bb      	str	r3, [r7, #8]
 800b552:	484b      	ldr	r0, [pc, #300]	; (800b680 <SEGGER_SYSVIEW_Start+0x170>)
 800b554:	f7ff fbf8 	bl	800ad48 <_PreparePacket>
 800b558:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b562:	4b45      	ldr	r3, [pc, #276]	; (800b678 <SEGGER_SYSVIEW_Start+0x168>)
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	62bb      	str	r3, [r7, #40]	; 0x28
 800b568:	e00b      	b.n	800b582 <SEGGER_SYSVIEW_Start+0x72>
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b570:	1c59      	adds	r1, r3, #1
 800b572:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b574:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b578:	b2d2      	uxtb	r2, r2
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	09db      	lsrs	r3, r3, #7
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	2b7f      	cmp	r3, #127	; 0x7f
 800b586:	d8f0      	bhi.n	800b56a <SEGGER_SYSVIEW_Start+0x5a>
 800b588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b58e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b590:	b2d2      	uxtb	r2, r2
 800b592:	701a      	strb	r2, [r3, #0]
 800b594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b596:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
 800b59c:	4b36      	ldr	r3, [pc, #216]	; (800b678 <SEGGER_SYSVIEW_Start+0x168>)
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	623b      	str	r3, [r7, #32]
 800b5a2:	e00b      	b.n	800b5bc <SEGGER_SYSVIEW_Start+0xac>
 800b5a4:	6a3b      	ldr	r3, [r7, #32]
 800b5a6:	b2da      	uxtb	r2, r3
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	1c59      	adds	r1, r3, #1
 800b5ac:	6279      	str	r1, [r7, #36]	; 0x24
 800b5ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b5b2:	b2d2      	uxtb	r2, r2
 800b5b4:	701a      	strb	r2, [r3, #0]
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	09db      	lsrs	r3, r3, #7
 800b5ba:	623b      	str	r3, [r7, #32]
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	2b7f      	cmp	r3, #127	; 0x7f
 800b5c0:	d8f0      	bhi.n	800b5a4 <SEGGER_SYSVIEW_Start+0x94>
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	627a      	str	r2, [r7, #36]	; 0x24
 800b5c8:	6a3a      	ldr	r2, [r7, #32]
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	61fb      	str	r3, [r7, #28]
 800b5d6:	4b28      	ldr	r3, [pc, #160]	; (800b678 <SEGGER_SYSVIEW_Start+0x168>)
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	61bb      	str	r3, [r7, #24]
 800b5dc:	e00b      	b.n	800b5f6 <SEGGER_SYSVIEW_Start+0xe6>
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	1c59      	adds	r1, r3, #1
 800b5e6:	61f9      	str	r1, [r7, #28]
 800b5e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b5ec:	b2d2      	uxtb	r2, r2
 800b5ee:	701a      	strb	r2, [r3, #0]
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	09db      	lsrs	r3, r3, #7
 800b5f4:	61bb      	str	r3, [r7, #24]
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	2b7f      	cmp	r3, #127	; 0x7f
 800b5fa:	d8f0      	bhi.n	800b5de <SEGGER_SYSVIEW_Start+0xce>
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	1c5a      	adds	r2, r3, #1
 800b600:	61fa      	str	r2, [r7, #28]
 800b602:	69ba      	ldr	r2, [r7, #24]
 800b604:	b2d2      	uxtb	r2, r2
 800b606:	701a      	strb	r2, [r3, #0]
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	617b      	str	r3, [r7, #20]
 800b610:	2300      	movs	r3, #0
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	e00b      	b.n	800b62e <SEGGER_SYSVIEW_Start+0x11e>
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	1c59      	adds	r1, r3, #1
 800b61e:	6179      	str	r1, [r7, #20]
 800b620:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b624:	b2d2      	uxtb	r2, r2
 800b626:	701a      	strb	r2, [r3, #0]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	09db      	lsrs	r3, r3, #7
 800b62c:	613b      	str	r3, [r7, #16]
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	2b7f      	cmp	r3, #127	; 0x7f
 800b632:	d8f0      	bhi.n	800b616 <SEGGER_SYSVIEW_Start+0x106>
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	1c5a      	adds	r2, r3, #1
 800b638:	617a      	str	r2, [r7, #20]
 800b63a:	693a      	ldr	r2, [r7, #16]
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b644:	2218      	movs	r2, #24
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7ff fc6b 	bl	800af24 <_SendPacket>
      RECORD_END();
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b654:	4b08      	ldr	r3, [pc, #32]	; (800b678 <SEGGER_SYSVIEW_Start+0x168>)
 800b656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b65c:	4b06      	ldr	r3, [pc, #24]	; (800b678 <SEGGER_SYSVIEW_Start+0x168>)
 800b65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b660:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b662:	f000 f9eb 	bl	800ba3c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b666:	f000 f9b1 	bl	800b9cc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b66a:	f000 fba9 	bl	800bdc0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b66e:	bf00      	nop
 800b670:	3730      	adds	r7, #48	; 0x30
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	2002af68 	.word	0x2002af68
 800b67c:	0800ebf4 	.word	0x0800ebf4
 800b680:	2002af98 	.word	0x2002af98

0800b684 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b68a:	f3ef 8311 	mrs	r3, BASEPRI
 800b68e:	f04f 0120 	mov.w	r1, #32
 800b692:	f381 8811 	msr	BASEPRI, r1
 800b696:	607b      	str	r3, [r7, #4]
 800b698:	480b      	ldr	r0, [pc, #44]	; (800b6c8 <SEGGER_SYSVIEW_Stop+0x44>)
 800b69a:	f7ff fb55 	bl	800ad48 <_PreparePacket>
 800b69e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	; (800b6cc <SEGGER_SYSVIEW_Stop+0x48>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d007      	beq.n	800b6b8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b6a8:	220b      	movs	r2, #11
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6838      	ldr	r0, [r7, #0]
 800b6ae:	f7ff fc39 	bl	800af24 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b6b2:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <SEGGER_SYSVIEW_Stop+0x48>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f383 8811 	msr	BASEPRI, r3
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	2002af98 	.word	0x2002af98
 800b6cc:	2002af68 	.word	0x2002af68

0800b6d0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	; 0x30
 800b6d4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b6d6:	f3ef 8311 	mrs	r3, BASEPRI
 800b6da:	f04f 0120 	mov.w	r1, #32
 800b6de:	f381 8811 	msr	BASEPRI, r1
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	4845      	ldr	r0, [pc, #276]	; (800b7fc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b6e6:	f7ff fb2f 	bl	800ad48 <_PreparePacket>
 800b6ea:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6f4:	4b42      	ldr	r3, [pc, #264]	; (800b800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6fa:	e00b      	b.n	800b714 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b702:	1c59      	adds	r1, r3, #1
 800b704:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b710:	09db      	lsrs	r3, r3, #7
 800b712:	62bb      	str	r3, [r7, #40]	; 0x28
 800b714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b716:	2b7f      	cmp	r3, #127	; 0x7f
 800b718:	d8f0      	bhi.n	800b6fc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	1c5a      	adds	r2, r3, #1
 800b71e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b722:	b2d2      	uxtb	r2, r2
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b728:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	627b      	str	r3, [r7, #36]	; 0x24
 800b72e:	4b34      	ldr	r3, [pc, #208]	; (800b800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	623b      	str	r3, [r7, #32]
 800b734:	e00b      	b.n	800b74e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	1c59      	adds	r1, r3, #1
 800b73e:	6279      	str	r1, [r7, #36]	; 0x24
 800b740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b744:	b2d2      	uxtb	r2, r2
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	6a3b      	ldr	r3, [r7, #32]
 800b74a:	09db      	lsrs	r3, r3, #7
 800b74c:	623b      	str	r3, [r7, #32]
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	2b7f      	cmp	r3, #127	; 0x7f
 800b752:	d8f0      	bhi.n	800b736 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	627a      	str	r2, [r7, #36]	; 0x24
 800b75a:	6a3a      	ldr	r2, [r7, #32]
 800b75c:	b2d2      	uxtb	r2, r2
 800b75e:	701a      	strb	r2, [r3, #0]
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	e00b      	b.n	800b788 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	b2da      	uxtb	r2, r3
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	1c59      	adds	r1, r3, #1
 800b778:	61f9      	str	r1, [r7, #28]
 800b77a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b77e:	b2d2      	uxtb	r2, r2
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	09db      	lsrs	r3, r3, #7
 800b786:	61bb      	str	r3, [r7, #24]
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	2b7f      	cmp	r3, #127	; 0x7f
 800b78c:	d8f0      	bhi.n	800b770 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	61fa      	str	r2, [r7, #28]
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	617b      	str	r3, [r7, #20]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	613b      	str	r3, [r7, #16]
 800b7a6:	e00b      	b.n	800b7c0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	1c59      	adds	r1, r3, #1
 800b7b0:	6179      	str	r1, [r7, #20]
 800b7b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7b6:	b2d2      	uxtb	r2, r2
 800b7b8:	701a      	strb	r2, [r3, #0]
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	09db      	lsrs	r3, r3, #7
 800b7be:	613b      	str	r3, [r7, #16]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	2b7f      	cmp	r3, #127	; 0x7f
 800b7c4:	d8f0      	bhi.n	800b7a8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	617a      	str	r2, [r7, #20]
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	b2d2      	uxtb	r2, r2
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b7d6:	2218      	movs	r2, #24
 800b7d8:	6879      	ldr	r1, [r7, #4]
 800b7da:	68b8      	ldr	r0, [r7, #8]
 800b7dc:	f7ff fba2 	bl	800af24 <_SendPacket>
  RECORD_END();
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b7e6:	4b06      	ldr	r3, [pc, #24]	; (800b800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b7ee:	4b04      	ldr	r3, [pc, #16]	; (800b800 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f2:	4798      	blx	r3
  }
}
 800b7f4:	bf00      	nop
 800b7f6:	3730      	adds	r7, #48	; 0x30
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	2002af98 	.word	0x2002af98
 800b800:	2002af68 	.word	0x2002af68

0800b804 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b804:	b580      	push	{r7, lr}
 800b806:	b092      	sub	sp, #72	; 0x48
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b80c:	f3ef 8311 	mrs	r3, BASEPRI
 800b810:	f04f 0120 	mov.w	r1, #32
 800b814:	f381 8811 	msr	BASEPRI, r1
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	486a      	ldr	r0, [pc, #424]	; (800b9c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b81c:	f7ff fa94 	bl	800ad48 <_PreparePacket>
 800b820:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	647b      	str	r3, [r7, #68]	; 0x44
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	4b66      	ldr	r3, [pc, #408]	; (800b9c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	1ad3      	subs	r3, r2, r3
 800b834:	643b      	str	r3, [r7, #64]	; 0x40
 800b836:	e00b      	b.n	800b850 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b83e:	1c59      	adds	r1, r3, #1
 800b840:	6479      	str	r1, [r7, #68]	; 0x44
 800b842:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b846:	b2d2      	uxtb	r2, r2
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b84c:	09db      	lsrs	r3, r3, #7
 800b84e:	643b      	str	r3, [r7, #64]	; 0x40
 800b850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b852:	2b7f      	cmp	r3, #127	; 0x7f
 800b854:	d8f0      	bhi.n	800b838 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b856:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	647a      	str	r2, [r7, #68]	; 0x44
 800b85c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b85e:	b2d2      	uxtb	r2, r2
 800b860:	701a      	strb	r2, [r3, #0]
 800b862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b864:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b870:	e00b      	b.n	800b88a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b874:	b2da      	uxtb	r2, r3
 800b876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b878:	1c59      	adds	r1, r3, #1
 800b87a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b87c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b880:	b2d2      	uxtb	r2, r2
 800b882:	701a      	strb	r2, [r3, #0]
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	09db      	lsrs	r3, r3, #7
 800b888:	63bb      	str	r3, [r7, #56]	; 0x38
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	2b7f      	cmp	r3, #127	; 0x7f
 800b88e:	d8f0      	bhi.n	800b872 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b892:	1c5a      	adds	r2, r3, #1
 800b894:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b898:	b2d2      	uxtb	r2, r2
 800b89a:	701a      	strb	r2, [r3, #0]
 800b89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7ff f9fd 	bl	800aca8 <_EncodeStr>
 800b8ae:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b8b0:	2209      	movs	r2, #9
 800b8b2:	68f9      	ldr	r1, [r7, #12]
 800b8b4:	6938      	ldr	r0, [r7, #16]
 800b8b6:	f7ff fb35 	bl	800af24 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	4b40      	ldr	r3, [pc, #256]	; (800b9c8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	633b      	str	r3, [r7, #48]	; 0x30
 800b8ce:	e00b      	b.n	800b8e8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8d6:	1c59      	adds	r1, r3, #1
 800b8d8:	6379      	str	r1, [r7, #52]	; 0x34
 800b8da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	701a      	strb	r2, [r3, #0]
 800b8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8e4:	09db      	lsrs	r3, r3, #7
 800b8e6:	633b      	str	r3, [r7, #48]	; 0x30
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	2b7f      	cmp	r3, #127	; 0x7f
 800b8ec:	d8f0      	bhi.n	800b8d0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	637a      	str	r2, [r7, #52]	; 0x34
 800b8f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f6:	b2d2      	uxtb	r2, r2
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	62bb      	str	r3, [r7, #40]	; 0x28
 800b908:	e00b      	b.n	800b922 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b910:	1c59      	adds	r1, r3, #1
 800b912:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b918:	b2d2      	uxtb	r2, r2
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	09db      	lsrs	r3, r3, #7
 800b920:	62bb      	str	r3, [r7, #40]	; 0x28
 800b922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b924:	2b7f      	cmp	r3, #127	; 0x7f
 800b926:	d8f0      	bhi.n	800b90a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	1c5a      	adds	r2, r3, #1
 800b92c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b92e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b930:	b2d2      	uxtb	r2, r2
 800b932:	701a      	strb	r2, [r3, #0]
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	627b      	str	r3, [r7, #36]	; 0x24
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	623b      	str	r3, [r7, #32]
 800b942:	e00b      	b.n	800b95c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	b2da      	uxtb	r2, r3
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	1c59      	adds	r1, r3, #1
 800b94c:	6279      	str	r1, [r7, #36]	; 0x24
 800b94e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b952:	b2d2      	uxtb	r2, r2
 800b954:	701a      	strb	r2, [r3, #0]
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	09db      	lsrs	r3, r3, #7
 800b95a:	623b      	str	r3, [r7, #32]
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	2b7f      	cmp	r3, #127	; 0x7f
 800b960:	d8f0      	bhi.n	800b944 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	627a      	str	r2, [r7, #36]	; 0x24
 800b968:	6a3a      	ldr	r2, [r7, #32]
 800b96a:	b2d2      	uxtb	r2, r2
 800b96c:	701a      	strb	r2, [r3, #0]
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	61fb      	str	r3, [r7, #28]
 800b976:	2300      	movs	r3, #0
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	e00b      	b.n	800b994 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	1c59      	adds	r1, r3, #1
 800b984:	61f9      	str	r1, [r7, #28]
 800b986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b98a:	b2d2      	uxtb	r2, r2
 800b98c:	701a      	strb	r2, [r3, #0]
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	09db      	lsrs	r3, r3, #7
 800b992:	61bb      	str	r3, [r7, #24]
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	2b7f      	cmp	r3, #127	; 0x7f
 800b998:	d8f0      	bhi.n	800b97c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	1c5a      	adds	r2, r3, #1
 800b99e:	61fa      	str	r2, [r7, #28]
 800b9a0:	69ba      	ldr	r2, [r7, #24]
 800b9a2:	b2d2      	uxtb	r2, r2
 800b9a4:	701a      	strb	r2, [r3, #0]
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b9aa:	2215      	movs	r2, #21
 800b9ac:	68f9      	ldr	r1, [r7, #12]
 800b9ae:	6938      	ldr	r0, [r7, #16]
 800b9b0:	f7ff fab8 	bl	800af24 <_SendPacket>
  RECORD_END();
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	f383 8811 	msr	BASEPRI, r3
}
 800b9ba:	bf00      	nop
 800b9bc:	3748      	adds	r7, #72	; 0x48
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	2002af98 	.word	0x2002af98
 800b9c8:	2002af68 	.word	0x2002af68

0800b9cc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d008      	beq.n	800b9ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b9d8:	4b05      	ldr	r3, [pc, #20]	; (800b9f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b9e2:	4b03      	ldr	r3, [pc, #12]	; (800b9f0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	4798      	blx	r3
  }
}
 800b9ea:	bf00      	nop
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	2002af68 	.word	0x2002af68

0800b9f4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b9fc:	f3ef 8311 	mrs	r3, BASEPRI
 800ba00:	f04f 0120 	mov.w	r1, #32
 800ba04:	f381 8811 	msr	BASEPRI, r1
 800ba08:	617b      	str	r3, [r7, #20]
 800ba0a:	480b      	ldr	r0, [pc, #44]	; (800ba38 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800ba0c:	f7ff f99c 	bl	800ad48 <_PreparePacket>
 800ba10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ba12:	2280      	movs	r2, #128	; 0x80
 800ba14:	6879      	ldr	r1, [r7, #4]
 800ba16:	6938      	ldr	r0, [r7, #16]
 800ba18:	f7ff f946 	bl	800aca8 <_EncodeStr>
 800ba1c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800ba1e:	220e      	movs	r2, #14
 800ba20:	68f9      	ldr	r1, [r7, #12]
 800ba22:	6938      	ldr	r0, [r7, #16]
 800ba24:	f7ff fa7e 	bl	800af24 <_SendPacket>
  RECORD_END();
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f383 8811 	msr	BASEPRI, r3
}
 800ba2e:	bf00      	nop
 800ba30:	3718      	adds	r7, #24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	2002af98 	.word	0x2002af98

0800ba3c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800ba42:	4b15      	ldr	r3, [pc, #84]	; (800ba98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ba44:	6a1b      	ldr	r3, [r3, #32]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d01a      	beq.n	800ba80 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800ba4a:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d015      	beq.n	800ba80 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800ba54:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ba56:	6a1b      	ldr	r3, [r3, #32]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4798      	blx	r3
 800ba5c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800ba60:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800ba62:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ba66:	f04f 0200 	mov.w	r2, #0
 800ba6a:	f04f 0300 	mov.w	r3, #0
 800ba6e:	000a      	movs	r2, r1
 800ba70:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800ba72:	4613      	mov	r3, r2
 800ba74:	461a      	mov	r2, r3
 800ba76:	4621      	mov	r1, r4
 800ba78:	200d      	movs	r0, #13
 800ba7a:	f7ff fbe7 	bl	800b24c <SEGGER_SYSVIEW_RecordU32x2>
 800ba7e:	e006      	b.n	800ba8e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4619      	mov	r1, r3
 800ba86:	200c      	movs	r0, #12
 800ba88:	f7ff fba4 	bl	800b1d4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd90      	pop	{r4, r7, pc}
 800ba96:	bf00      	nop
 800ba98:	2002af68 	.word	0x2002af68
 800ba9c:	e0001004 	.word	0xe0001004

0800baa0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800baa6:	f3ef 8311 	mrs	r3, BASEPRI
 800baaa:	f04f 0120 	mov.w	r1, #32
 800baae:	f381 8811 	msr	BASEPRI, r1
 800bab2:	607b      	str	r3, [r7, #4]
 800bab4:	4807      	ldr	r0, [pc, #28]	; (800bad4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800bab6:	f7ff f947 	bl	800ad48 <_PreparePacket>
 800baba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800babc:	2211      	movs	r2, #17
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6838      	ldr	r0, [r7, #0]
 800bac2:	f7ff fa2f 	bl	800af24 <_SendPacket>
  RECORD_END();
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f383 8811 	msr	BASEPRI, r3
}
 800bacc:	bf00      	nop
 800bace:	3708      	adds	r7, #8
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	2002af98 	.word	0x2002af98

0800bad8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bae0:	f3ef 8311 	mrs	r3, BASEPRI
 800bae4:	f04f 0120 	mov.w	r1, #32
 800bae8:	f381 8811 	msr	BASEPRI, r1
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	4819      	ldr	r0, [pc, #100]	; (800bb54 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800baf0:	f7ff f92a 	bl	800ad48 <_PreparePacket>
 800baf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bafa:	4b17      	ldr	r3, [pc, #92]	; (800bb58 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	61fb      	str	r3, [r7, #28]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	61bb      	str	r3, [r7, #24]
 800bb0c:	e00b      	b.n	800bb26 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	1c59      	adds	r1, r3, #1
 800bb16:	61f9      	str	r1, [r7, #28]
 800bb18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb1c:	b2d2      	uxtb	r2, r2
 800bb1e:	701a      	strb	r2, [r3, #0]
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	09db      	lsrs	r3, r3, #7
 800bb24:	61bb      	str	r3, [r7, #24]
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	2b7f      	cmp	r3, #127	; 0x7f
 800bb2a:	d8f0      	bhi.n	800bb0e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	1c5a      	adds	r2, r3, #1
 800bb30:	61fa      	str	r2, [r7, #28]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	b2d2      	uxtb	r2, r2
 800bb36:	701a      	strb	r2, [r3, #0]
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800bb3c:	2208      	movs	r2, #8
 800bb3e:	68f9      	ldr	r1, [r7, #12]
 800bb40:	6938      	ldr	r0, [r7, #16]
 800bb42:	f7ff f9ef 	bl	800af24 <_SendPacket>
  RECORD_END();
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f383 8811 	msr	BASEPRI, r3
}
 800bb4c:	bf00      	nop
 800bb4e:	3720      	adds	r7, #32
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	2002af98 	.word	0x2002af98
 800bb58:	2002af68 	.word	0x2002af68

0800bb5c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b088      	sub	sp, #32
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bb64:	f3ef 8311 	mrs	r3, BASEPRI
 800bb68:	f04f 0120 	mov.w	r1, #32
 800bb6c:	f381 8811 	msr	BASEPRI, r1
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	4819      	ldr	r0, [pc, #100]	; (800bbd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800bb74:	f7ff f8e8 	bl	800ad48 <_PreparePacket>
 800bb78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bb7e:	4b17      	ldr	r3, [pc, #92]	; (800bbdc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	61fb      	str	r3, [r7, #28]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	61bb      	str	r3, [r7, #24]
 800bb90:	e00b      	b.n	800bbaa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	1c59      	adds	r1, r3, #1
 800bb9a:	61f9      	str	r1, [r7, #28]
 800bb9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bba0:	b2d2      	uxtb	r2, r2
 800bba2:	701a      	strb	r2, [r3, #0]
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	09db      	lsrs	r3, r3, #7
 800bba8:	61bb      	str	r3, [r7, #24]
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	2b7f      	cmp	r3, #127	; 0x7f
 800bbae:	d8f0      	bhi.n	800bb92 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	61fa      	str	r2, [r7, #28]
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	b2d2      	uxtb	r2, r2
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800bbc0:	2204      	movs	r2, #4
 800bbc2:	68f9      	ldr	r1, [r7, #12]
 800bbc4:	6938      	ldr	r0, [r7, #16]
 800bbc6:	f7ff f9ad 	bl	800af24 <_SendPacket>
  RECORD_END();
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f383 8811 	msr	BASEPRI, r3
}
 800bbd0:	bf00      	nop
 800bbd2:	3720      	adds	r7, #32
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	2002af98 	.word	0x2002af98
 800bbdc:	2002af68 	.word	0x2002af68

0800bbe0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b088      	sub	sp, #32
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bbe8:	f3ef 8311 	mrs	r3, BASEPRI
 800bbec:	f04f 0120 	mov.w	r1, #32
 800bbf0:	f381 8811 	msr	BASEPRI, r1
 800bbf4:	617b      	str	r3, [r7, #20]
 800bbf6:	4819      	ldr	r0, [pc, #100]	; (800bc5c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800bbf8:	f7ff f8a6 	bl	800ad48 <_PreparePacket>
 800bbfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bc02:	4b17      	ldr	r3, [pc, #92]	; (800bc60 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	61fb      	str	r3, [r7, #28]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	61bb      	str	r3, [r7, #24]
 800bc14:	e00b      	b.n	800bc2e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	1c59      	adds	r1, r3, #1
 800bc1e:	61f9      	str	r1, [r7, #28]
 800bc20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc24:	b2d2      	uxtb	r2, r2
 800bc26:	701a      	strb	r2, [r3, #0]
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	09db      	lsrs	r3, r3, #7
 800bc2c:	61bb      	str	r3, [r7, #24]
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	2b7f      	cmp	r3, #127	; 0x7f
 800bc32:	d8f0      	bhi.n	800bc16 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	1c5a      	adds	r2, r3, #1
 800bc38:	61fa      	str	r2, [r7, #28]
 800bc3a:	69ba      	ldr	r2, [r7, #24]
 800bc3c:	b2d2      	uxtb	r2, r2
 800bc3e:	701a      	strb	r2, [r3, #0]
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800bc44:	2206      	movs	r2, #6
 800bc46:	68f9      	ldr	r1, [r7, #12]
 800bc48:	6938      	ldr	r0, [r7, #16]
 800bc4a:	f7ff f96b 	bl	800af24 <_SendPacket>
  RECORD_END();
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f383 8811 	msr	BASEPRI, r3
}
 800bc54:	bf00      	nop
 800bc56:	3720      	adds	r7, #32
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	2002af98 	.word	0x2002af98
 800bc60:	2002af68 	.word	0x2002af68

0800bc64 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800bc6c:	4b04      	ldr	r3, [pc, #16]	; (800bc80 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	1ad3      	subs	r3, r2, r3
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	2002af68 	.word	0x2002af68

0800bc84 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b08c      	sub	sp, #48	; 0x30
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800bc8e:	4b3b      	ldr	r3, [pc, #236]	; (800bd7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d06d      	beq.n	800bd72 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800bc96:	4b39      	ldr	r3, [pc, #228]	; (800bd7c <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bca0:	e008      	b.n	800bcb4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800bca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800bca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d007      	beq.n	800bcbe <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d3f2      	bcc.n	800bca2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800bcbc:	e000      	b.n	800bcc0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800bcbe:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d055      	beq.n	800bd72 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bcc6:	f3ef 8311 	mrs	r3, BASEPRI
 800bcca:	f04f 0120 	mov.w	r1, #32
 800bcce:	f381 8811 	msr	BASEPRI, r1
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	482a      	ldr	r0, [pc, #168]	; (800bd80 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800bcd6:	f7ff f837 	bl	800ad48 <_PreparePacket>
 800bcda:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	623b      	str	r3, [r7, #32]
 800bce8:	e00b      	b.n	800bd02 <SEGGER_SYSVIEW_SendModule+0x7e>
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	1c59      	adds	r1, r3, #1
 800bcf2:	6279      	str	r1, [r7, #36]	; 0x24
 800bcf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bcf8:	b2d2      	uxtb	r2, r2
 800bcfa:	701a      	strb	r2, [r3, #0]
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	09db      	lsrs	r3, r3, #7
 800bd00:	623b      	str	r3, [r7, #32]
 800bd02:	6a3b      	ldr	r3, [r7, #32]
 800bd04:	2b7f      	cmp	r3, #127	; 0x7f
 800bd06:	d8f0      	bhi.n	800bcea <SEGGER_SYSVIEW_SendModule+0x66>
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	627a      	str	r2, [r7, #36]	; 0x24
 800bd0e:	6a3a      	ldr	r2, [r7, #32]
 800bd10:	b2d2      	uxtb	r2, r2
 800bd12:	701a      	strb	r2, [r3, #0]
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	61fb      	str	r3, [r7, #28]
 800bd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	61bb      	str	r3, [r7, #24]
 800bd22:	e00b      	b.n	800bd3c <SEGGER_SYSVIEW_SendModule+0xb8>
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	1c59      	adds	r1, r3, #1
 800bd2c:	61f9      	str	r1, [r7, #28]
 800bd2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd32:	b2d2      	uxtb	r2, r2
 800bd34:	701a      	strb	r2, [r3, #0]
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	09db      	lsrs	r3, r3, #7
 800bd3a:	61bb      	str	r3, [r7, #24]
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	2b7f      	cmp	r3, #127	; 0x7f
 800bd40:	d8f0      	bhi.n	800bd24 <SEGGER_SYSVIEW_SendModule+0xa0>
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	61fa      	str	r2, [r7, #28]
 800bd48:	69ba      	ldr	r2, [r7, #24]
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2280      	movs	r2, #128	; 0x80
 800bd58:	4619      	mov	r1, r3
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7fe ffa4 	bl	800aca8 <_EncodeStr>
 800bd60:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800bd62:	2216      	movs	r2, #22
 800bd64:	68f9      	ldr	r1, [r7, #12]
 800bd66:	6938      	ldr	r0, [r7, #16]
 800bd68:	f7ff f8dc 	bl	800af24 <_SendPacket>
      RECORD_END();
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800bd72:	bf00      	nop
 800bd74:	3730      	adds	r7, #48	; 0x30
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	2002af90 	.word	0x2002af90
 800bd80:	2002af98 	.word	0x2002af98

0800bd84 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800bd8a:	4b0c      	ldr	r3, [pc, #48]	; (800bdbc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00f      	beq.n	800bdb2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800bd92:	4b0a      	ldr	r3, [pc, #40]	; (800bdbc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	68db      	ldr	r3, [r3, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	68db      	ldr	r3, [r3, #12]
 800bda4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1f2      	bne.n	800bd98 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	2002af90 	.word	0x2002af90

0800bdc0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800bdc6:	f3ef 8311 	mrs	r3, BASEPRI
 800bdca:	f04f 0120 	mov.w	r1, #32
 800bdce:	f381 8811 	msr	BASEPRI, r1
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	4817      	ldr	r0, [pc, #92]	; (800be34 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800bdd6:	f7fe ffb7 	bl	800ad48 <_PreparePacket>
 800bdda:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	4b14      	ldr	r3, [pc, #80]	; (800be38 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	613b      	str	r3, [r7, #16]
 800bdea:	e00b      	b.n	800be04 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	1c59      	adds	r1, r3, #1
 800bdf4:	6179      	str	r1, [r7, #20]
 800bdf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	09db      	lsrs	r3, r3, #7
 800be02:	613b      	str	r3, [r7, #16]
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2b7f      	cmp	r3, #127	; 0x7f
 800be08:	d8f0      	bhi.n	800bdec <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	617a      	str	r2, [r7, #20]
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	701a      	strb	r2, [r3, #0]
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800be1a:	221b      	movs	r2, #27
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	68b8      	ldr	r0, [r7, #8]
 800be20:	f7ff f880 	bl	800af24 <_SendPacket>
  RECORD_END();
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f383 8811 	msr	BASEPRI, r3
}
 800be2a:	bf00      	nop
 800be2c:	3718      	adds	r7, #24
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	2002af98 	.word	0x2002af98
 800be38:	2002af94 	.word	0x2002af94

0800be3c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08a      	sub	sp, #40	; 0x28
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800be44:	f3ef 8311 	mrs	r3, BASEPRI
 800be48:	f04f 0120 	mov.w	r1, #32
 800be4c:	f381 8811 	msr	BASEPRI, r1
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	4827      	ldr	r0, [pc, #156]	; (800bef0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800be54:	f7fe ff78 	bl	800ad48 <_PreparePacket>
 800be58:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800be5a:	2280      	movs	r2, #128	; 0x80
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	6938      	ldr	r0, [r7, #16]
 800be60:	f7fe ff22 	bl	800aca8 <_EncodeStr>
 800be64:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	627b      	str	r3, [r7, #36]	; 0x24
 800be6a:	2301      	movs	r3, #1
 800be6c:	623b      	str	r3, [r7, #32]
 800be6e:	e00b      	b.n	800be88 <SEGGER_SYSVIEW_Warn+0x4c>
 800be70:	6a3b      	ldr	r3, [r7, #32]
 800be72:	b2da      	uxtb	r2, r3
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	1c59      	adds	r1, r3, #1
 800be78:	6279      	str	r1, [r7, #36]	; 0x24
 800be7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be7e:	b2d2      	uxtb	r2, r2
 800be80:	701a      	strb	r2, [r3, #0]
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	09db      	lsrs	r3, r3, #7
 800be86:	623b      	str	r3, [r7, #32]
 800be88:	6a3b      	ldr	r3, [r7, #32]
 800be8a:	2b7f      	cmp	r3, #127	; 0x7f
 800be8c:	d8f0      	bhi.n	800be70 <SEGGER_SYSVIEW_Warn+0x34>
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	627a      	str	r2, [r7, #36]	; 0x24
 800be94:	6a3a      	ldr	r2, [r7, #32]
 800be96:	b2d2      	uxtb	r2, r2
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	61fb      	str	r3, [r7, #28]
 800bea2:	2300      	movs	r3, #0
 800bea4:	61bb      	str	r3, [r7, #24]
 800bea6:	e00b      	b.n	800bec0 <SEGGER_SYSVIEW_Warn+0x84>
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	1c59      	adds	r1, r3, #1
 800beb0:	61f9      	str	r1, [r7, #28]
 800beb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800beb6:	b2d2      	uxtb	r2, r2
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	09db      	lsrs	r3, r3, #7
 800bebe:	61bb      	str	r3, [r7, #24]
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2b7f      	cmp	r3, #127	; 0x7f
 800bec4:	d8f0      	bhi.n	800bea8 <SEGGER_SYSVIEW_Warn+0x6c>
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	1c5a      	adds	r2, r3, #1
 800beca:	61fa      	str	r2, [r7, #28]
 800becc:	69ba      	ldr	r2, [r7, #24]
 800bece:	b2d2      	uxtb	r2, r2
 800bed0:	701a      	strb	r2, [r3, #0]
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800bed6:	221a      	movs	r2, #26
 800bed8:	68f9      	ldr	r1, [r7, #12]
 800beda:	6938      	ldr	r0, [r7, #16]
 800bedc:	f7ff f822 	bl	800af24 <_SendPacket>
  RECORD_END();
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f383 8811 	msr	BASEPRI, r3
}
 800bee6:	bf00      	nop
 800bee8:	3728      	adds	r7, #40	; 0x28
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	2002af98 	.word	0x2002af98

0800bef4 <__NVIC_EnableIRQ>:
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	4603      	mov	r3, r0
 800befc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800befe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	db0b      	blt.n	800bf1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bf06:	79fb      	ldrb	r3, [r7, #7]
 800bf08:	f003 021f 	and.w	r2, r3, #31
 800bf0c:	4907      	ldr	r1, [pc, #28]	; (800bf2c <__NVIC_EnableIRQ+0x38>)
 800bf0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf12:	095b      	lsrs	r3, r3, #5
 800bf14:	2001      	movs	r0, #1
 800bf16:	fa00 f202 	lsl.w	r2, r0, r2
 800bf1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bf1e:	bf00      	nop
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	e000e100 	.word	0xe000e100

0800bf30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800bf38:	4b08      	ldr	r3, [pc, #32]	; (800bf5c <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf3c:	4907      	ldr	r1, [pc, #28]	; (800bf5c <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800bf44:	4b05      	ldr	r3, [pc, #20]	; (800bf5c <LL_APB1_GRP1_EnableClock+0x2c>)
 800bf46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
}
 800bf50:	bf00      	nop
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	40023800 	.word	0x40023800

0800bf60 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f043 0201 	orr.w	r2, r3, #1
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	601a      	str	r2, [r3, #0]
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	683a      	ldr	r2, [r7, #0]
 800bf8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f06f 0201 	mvn.w	r2, #1
 800bfaa:	611a      	str	r2, [r3, #16]
}
 800bfac:	bf00      	nop
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	691b      	ldr	r3, [r3, #16]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d101      	bne.n	800bfd0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e000      	b.n	800bfd2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	370c      	adds	r7, #12
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f043 0201 	orr.w	r2, r3, #1
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	60da      	str	r2, [r3, #12]
}
 800bff2:	bf00      	nop
 800bff4:	370c      	adds	r7, #12
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
	...

0800c000 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c004:	4802      	ldr	r0, [pc, #8]	; (800c010 <_cbSendSystemDesc+0x10>)
 800c006:	f7ff fcf5 	bl	800b9f4 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800c00a:	bf00      	nop
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	0800d704 	.word	0x0800d704

0800c014 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800c018:	4807      	ldr	r0, [pc, #28]	; (800c038 <TIM7_IRQHandler+0x24>)
 800c01a:	f7ff ffcd 	bl	800bfb8 <LL_TIM_IsActiveFlag_UPDATE>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800c024:	4804      	ldr	r0, [pc, #16]	; (800c038 <TIM7_IRQHandler+0x24>)
 800c026:	f7ff ffb9 	bl	800bf9c <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800c02a:	4b04      	ldr	r3, [pc, #16]	; (800c03c <TIM7_IRQHandler+0x28>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3301      	adds	r3, #1
 800c030:	4a02      	ldr	r2, [pc, #8]	; (800c03c <TIM7_IRQHandler+0x28>)
 800c032:	6013      	str	r3, [r2, #0]
	}
}
 800c034:	bf00      	nop
 800c036:	bd80      	pop	{r7, pc}
 800c038:	40001400 	.word	0x40001400
 800c03c:	2002ab5c 	.word	0x2002ab5c

0800c040 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800c044:	2020      	movs	r0, #32
 800c046:	f7ff ff73 	bl	800bf30 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800c04a:	4b0d      	ldr	r3, [pc, #52]	; (800c080 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	085a      	lsrs	r2, r3, #1
 800c050:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	441a      	add	r2, r3
 800c056:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c05e:	3b01      	subs	r3, #1
 800c060:	4619      	mov	r1, r3
 800c062:	4808      	ldr	r0, [pc, #32]	; (800c084 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c064:	f7ff ff8c 	bl	800bf80 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800c068:	2037      	movs	r0, #55	; 0x37
 800c06a:	f7ff ff43 	bl	800bef4 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800c06e:	4805      	ldr	r0, [pc, #20]	; (800c084 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c070:	f7ff ffb5 	bl	800bfde <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800c074:	4803      	ldr	r0, [pc, #12]	; (800c084 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800c076:	f7ff ff73 	bl	800bf60 <LL_TIM_EnableCounter>
}
 800c07a:	bf00      	nop
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20000010 	.word	0x20000010
 800c084:	40001400 	.word	0x40001400

0800c088 <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800c088:	b580      	push	{r7, lr}
 800c08a:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800c08c:	f7ff ffd8 	bl	800c040 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800c090:	4b06      	ldr	r3, [pc, #24]	; (800c0ac <SEGGER_SYSVIEW_Conf+0x24>)
 800c092:	6818      	ldr	r0, [r3, #0]
 800c094:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <SEGGER_SYSVIEW_Conf+0x24>)
 800c096:	6819      	ldr	r1, [r3, #0]
 800c098:	4b05      	ldr	r3, [pc, #20]	; (800c0b0 <SEGGER_SYSVIEW_Conf+0x28>)
 800c09a:	4a06      	ldr	r2, [pc, #24]	; (800c0b4 <SEGGER_SYSVIEW_Conf+0x2c>)
 800c09c:	f7ff f828 	bl	800b0f0 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c0a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c0a4:	f7ff f868 	bl	800b178 <SEGGER_SYSVIEW_SetRAMBase>
}
 800c0a8:	bf00      	nop
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20000010 	.word	0x20000010
 800c0b0:	0800c001 	.word	0x0800c001
 800c0b4:	0800ec00 	.word	0x0800ec00

0800c0b8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c0be:	2300      	movs	r3, #0
 800c0c0:	607b      	str	r3, [r7, #4]
 800c0c2:	e048      	b.n	800c156 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800c0c4:	4929      	ldr	r1, [pc, #164]	; (800c16c <_cbSendTaskList+0xb4>)
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	440b      	add	r3, r1
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7fd f91f 	bl	8009318 <uxTaskGetStackHighWaterMark>
 800c0da:	4601      	mov	r1, r0
 800c0dc:	4823      	ldr	r0, [pc, #140]	; (800c16c <_cbSendTaskList+0xb4>)
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	4413      	add	r3, r2
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4403      	add	r3, r0
 800c0ea:	3310      	adds	r3, #16
 800c0ec:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c0ee:	491f      	ldr	r1, [pc, #124]	; (800c16c <_cbSendTaskList+0xb4>)
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	6818      	ldr	r0, [r3, #0]
 800c0fe:	491b      	ldr	r1, [pc, #108]	; (800c16c <_cbSendTaskList+0xb4>)
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	4613      	mov	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	440b      	add	r3, r1
 800c10c:	3304      	adds	r3, #4
 800c10e:	6819      	ldr	r1, [r3, #0]
 800c110:	4c16      	ldr	r4, [pc, #88]	; (800c16c <_cbSendTaskList+0xb4>)
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4423      	add	r3, r4
 800c11e:	3308      	adds	r3, #8
 800c120:	681c      	ldr	r4, [r3, #0]
 800c122:	4d12      	ldr	r5, [pc, #72]	; (800c16c <_cbSendTaskList+0xb4>)
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	4613      	mov	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	442b      	add	r3, r5
 800c130:	330c      	adds	r3, #12
 800c132:	681d      	ldr	r5, [r3, #0]
 800c134:	4e0d      	ldr	r6, [pc, #52]	; (800c16c <_cbSendTaskList+0xb4>)
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	4613      	mov	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4413      	add	r3, r2
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4433      	add	r3, r6
 800c142:	3310      	adds	r3, #16
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	462b      	mov	r3, r5
 800c14a:	4622      	mov	r2, r4
 800c14c:	f000 f8be 	bl	800c2cc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3301      	adds	r3, #1
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	4b06      	ldr	r3, [pc, #24]	; (800c170 <_cbSendTaskList+0xb8>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d3b1      	bcc.n	800c0c4 <_cbSendTaskList+0xc>
  }
}
 800c160:	bf00      	nop
 800c162:	bf00      	nop
 800c164:	370c      	adds	r7, #12
 800c166:	46bd      	mov	sp, r7
 800c168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c16a:	bf00      	nop
 800c16c:	2002b07c 	.word	0x2002b07c
 800c170:	2002b11c 	.word	0x2002b11c

0800c174 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c178:	b082      	sub	sp, #8
 800c17a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c17c:	f7fc fd0a 	bl	8008b94 <xTaskGetTickCountFromISR>
 800c180:	4603      	mov	r3, r0
 800c182:	2200      	movs	r2, #0
 800c184:	469a      	mov	sl, r3
 800c186:	4693      	mov	fp, r2
 800c188:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c18c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	f04f 0a00 	mov.w	sl, #0
 800c198:	f04f 0b00 	mov.w	fp, #0
 800c19c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c1a0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c1a4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c1a8:	4652      	mov	r2, sl
 800c1aa:	465b      	mov	r3, fp
 800c1ac:	1a14      	subs	r4, r2, r0
 800c1ae:	eb63 0501 	sbc.w	r5, r3, r1
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	00ab      	lsls	r3, r5, #2
 800c1bc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c1c0:	00a2      	lsls	r2, r4, #2
 800c1c2:	4614      	mov	r4, r2
 800c1c4:	461d      	mov	r5, r3
 800c1c6:	eb14 0800 	adds.w	r8, r4, r0
 800c1ca:	eb45 0901 	adc.w	r9, r5, r1
 800c1ce:	f04f 0200 	mov.w	r2, #0
 800c1d2:	f04f 0300 	mov.w	r3, #0
 800c1d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1e2:	4690      	mov	r8, r2
 800c1e4:	4699      	mov	r9, r3
 800c1e6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800c1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c1fc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af02      	add	r7, sp, #8
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c20a:	2205      	movs	r2, #5
 800c20c:	492b      	ldr	r1, [pc, #172]	; (800c2bc <SYSVIEW_AddTask+0xc0>)
 800c20e:	68b8      	ldr	r0, [r7, #8]
 800c210:	f000 f9b3 	bl	800c57a <memcmp>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d04b      	beq.n	800c2b2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c21a:	4b29      	ldr	r3, [pc, #164]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	2b07      	cmp	r3, #7
 800c220:	d903      	bls.n	800c22a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c222:	4828      	ldr	r0, [pc, #160]	; (800c2c4 <SYSVIEW_AddTask+0xc8>)
 800c224:	f7ff fe0a 	bl	800be3c <SEGGER_SYSVIEW_Warn>
    return;
 800c228:	e044      	b.n	800c2b4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c22a:	4b25      	ldr	r3, [pc, #148]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	4926      	ldr	r1, [pc, #152]	; (800c2c8 <SYSVIEW_AddTask+0xcc>)
 800c230:	4613      	mov	r3, r2
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	440b      	add	r3, r1
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c23e:	4b20      	ldr	r3, [pc, #128]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	4921      	ldr	r1, [pc, #132]	; (800c2c8 <SYSVIEW_AddTask+0xcc>)
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	3304      	adds	r3, #4
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800c254:	4b1a      	ldr	r3, [pc, #104]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	491b      	ldr	r1, [pc, #108]	; (800c2c8 <SYSVIEW_AddTask+0xcc>)
 800c25a:	4613      	mov	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	4413      	add	r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	440b      	add	r3, r1
 800c264:	3308      	adds	r3, #8
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800c26a:	4b15      	ldr	r3, [pc, #84]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	4916      	ldr	r1, [pc, #88]	; (800c2c8 <SYSVIEW_AddTask+0xcc>)
 800c270:	4613      	mov	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	440b      	add	r3, r1
 800c27a:	330c      	adds	r3, #12
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	4910      	ldr	r1, [pc, #64]	; (800c2c8 <SYSVIEW_AddTask+0xcc>)
 800c286:	4613      	mov	r3, r2
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4413      	add	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	440b      	add	r3, r1
 800c290:	3310      	adds	r3, #16
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800c296:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	3301      	adds	r3, #1
 800c29c:	4a08      	ldr	r2, [pc, #32]	; (800c2c0 <SYSVIEW_AddTask+0xc4>)
 800c29e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	68b9      	ldr	r1, [r7, #8]
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f000 f80e 	bl	800c2cc <SYSVIEW_SendTaskInfo>
 800c2b0:	e000      	b.n	800c2b4 <SYSVIEW_AddTask+0xb8>
    return;
 800c2b2:	bf00      	nop

}
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	0800d738 	.word	0x0800d738
 800c2c0:	2002b11c 	.word	0x2002b11c
 800c2c4:	0800d740 	.word	0x0800d740
 800c2c8:	2002b07c 	.word	0x2002b07c

0800c2cc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b08a      	sub	sp, #40	; 0x28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	60b9      	str	r1, [r7, #8]
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800c2da:	f107 0314 	add.w	r3, r7, #20
 800c2de:	2214      	movs	r2, #20
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f000 f959 	bl	800c59a <memset>
  TaskInfo.TaskID     = TaskID;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800c2fc:	f107 0314 	add.w	r3, r7, #20
 800c300:	4618      	mov	r0, r3
 800c302:	f7ff fa7f 	bl	800b804 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800c306:	bf00      	nop
 800c308:	3728      	adds	r7, #40	; 0x28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <__assert_func>:
 800c310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c312:	4614      	mov	r4, r2
 800c314:	461a      	mov	r2, r3
 800c316:	4b09      	ldr	r3, [pc, #36]	; (800c33c <__assert_func+0x2c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	4605      	mov	r5, r0
 800c31c:	68d8      	ldr	r0, [r3, #12]
 800c31e:	b14c      	cbz	r4, 800c334 <__assert_func+0x24>
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <__assert_func+0x30>)
 800c322:	9100      	str	r1, [sp, #0]
 800c324:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c328:	4906      	ldr	r1, [pc, #24]	; (800c344 <__assert_func+0x34>)
 800c32a:	462b      	mov	r3, r5
 800c32c:	f000 f8b2 	bl	800c494 <fiprintf>
 800c330:	f000 f9bd 	bl	800c6ae <abort>
 800c334:	4b04      	ldr	r3, [pc, #16]	; (800c348 <__assert_func+0x38>)
 800c336:	461c      	mov	r4, r3
 800c338:	e7f3      	b.n	800c322 <__assert_func+0x12>
 800c33a:	bf00      	nop
 800c33c:	20000078 	.word	0x20000078
 800c340:	0800ec08 	.word	0x0800ec08
 800c344:	0800ec15 	.word	0x0800ec15
 800c348:	0800ec43 	.word	0x0800ec43

0800c34c <std>:
 800c34c:	2300      	movs	r3, #0
 800c34e:	b510      	push	{r4, lr}
 800c350:	4604      	mov	r4, r0
 800c352:	e9c0 3300 	strd	r3, r3, [r0]
 800c356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c35a:	6083      	str	r3, [r0, #8]
 800c35c:	8181      	strh	r1, [r0, #12]
 800c35e:	6643      	str	r3, [r0, #100]	; 0x64
 800c360:	81c2      	strh	r2, [r0, #14]
 800c362:	6183      	str	r3, [r0, #24]
 800c364:	4619      	mov	r1, r3
 800c366:	2208      	movs	r2, #8
 800c368:	305c      	adds	r0, #92	; 0x5c
 800c36a:	f000 f916 	bl	800c59a <memset>
 800c36e:	4b0d      	ldr	r3, [pc, #52]	; (800c3a4 <std+0x58>)
 800c370:	6263      	str	r3, [r4, #36]	; 0x24
 800c372:	4b0d      	ldr	r3, [pc, #52]	; (800c3a8 <std+0x5c>)
 800c374:	62a3      	str	r3, [r4, #40]	; 0x28
 800c376:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <std+0x60>)
 800c378:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c37a:	4b0d      	ldr	r3, [pc, #52]	; (800c3b0 <std+0x64>)
 800c37c:	6323      	str	r3, [r4, #48]	; 0x30
 800c37e:	4b0d      	ldr	r3, [pc, #52]	; (800c3b4 <std+0x68>)
 800c380:	6224      	str	r4, [r4, #32]
 800c382:	429c      	cmp	r4, r3
 800c384:	d006      	beq.n	800c394 <std+0x48>
 800c386:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c38a:	4294      	cmp	r4, r2
 800c38c:	d002      	beq.n	800c394 <std+0x48>
 800c38e:	33d0      	adds	r3, #208	; 0xd0
 800c390:	429c      	cmp	r4, r3
 800c392:	d105      	bne.n	800c3a0 <std+0x54>
 800c394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c39c:	f000 b976 	b.w	800c68c <__retarget_lock_init_recursive>
 800c3a0:	bd10      	pop	{r4, pc}
 800c3a2:	bf00      	nop
 800c3a4:	0800c4f5 	.word	0x0800c4f5
 800c3a8:	0800c517 	.word	0x0800c517
 800c3ac:	0800c54f 	.word	0x0800c54f
 800c3b0:	0800c573 	.word	0x0800c573
 800c3b4:	2002b120 	.word	0x2002b120

0800c3b8 <stdio_exit_handler>:
 800c3b8:	4a02      	ldr	r2, [pc, #8]	; (800c3c4 <stdio_exit_handler+0xc>)
 800c3ba:	4903      	ldr	r1, [pc, #12]	; (800c3c8 <stdio_exit_handler+0x10>)
 800c3bc:	4803      	ldr	r0, [pc, #12]	; (800c3cc <stdio_exit_handler+0x14>)
 800c3be:	f000 b87b 	b.w	800c4b8 <_fwalk_sglue>
 800c3c2:	bf00      	nop
 800c3c4:	20000020 	.word	0x20000020
 800c3c8:	0800cf61 	.word	0x0800cf61
 800c3cc:	2000002c 	.word	0x2000002c

0800c3d0 <cleanup_stdio>:
 800c3d0:	6841      	ldr	r1, [r0, #4]
 800c3d2:	4b0c      	ldr	r3, [pc, #48]	; (800c404 <cleanup_stdio+0x34>)
 800c3d4:	4299      	cmp	r1, r3
 800c3d6:	b510      	push	{r4, lr}
 800c3d8:	4604      	mov	r4, r0
 800c3da:	d001      	beq.n	800c3e0 <cleanup_stdio+0x10>
 800c3dc:	f000 fdc0 	bl	800cf60 <_fflush_r>
 800c3e0:	68a1      	ldr	r1, [r4, #8]
 800c3e2:	4b09      	ldr	r3, [pc, #36]	; (800c408 <cleanup_stdio+0x38>)
 800c3e4:	4299      	cmp	r1, r3
 800c3e6:	d002      	beq.n	800c3ee <cleanup_stdio+0x1e>
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 fdb9 	bl	800cf60 <_fflush_r>
 800c3ee:	68e1      	ldr	r1, [r4, #12]
 800c3f0:	4b06      	ldr	r3, [pc, #24]	; (800c40c <cleanup_stdio+0x3c>)
 800c3f2:	4299      	cmp	r1, r3
 800c3f4:	d004      	beq.n	800c400 <cleanup_stdio+0x30>
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3fc:	f000 bdb0 	b.w	800cf60 <_fflush_r>
 800c400:	bd10      	pop	{r4, pc}
 800c402:	bf00      	nop
 800c404:	2002b120 	.word	0x2002b120
 800c408:	2002b188 	.word	0x2002b188
 800c40c:	2002b1f0 	.word	0x2002b1f0

0800c410 <global_stdio_init.part.0>:
 800c410:	b510      	push	{r4, lr}
 800c412:	4b0b      	ldr	r3, [pc, #44]	; (800c440 <global_stdio_init.part.0+0x30>)
 800c414:	4c0b      	ldr	r4, [pc, #44]	; (800c444 <global_stdio_init.part.0+0x34>)
 800c416:	4a0c      	ldr	r2, [pc, #48]	; (800c448 <global_stdio_init.part.0+0x38>)
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	4620      	mov	r0, r4
 800c41c:	2200      	movs	r2, #0
 800c41e:	2104      	movs	r1, #4
 800c420:	f7ff ff94 	bl	800c34c <std>
 800c424:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c428:	2201      	movs	r2, #1
 800c42a:	2109      	movs	r1, #9
 800c42c:	f7ff ff8e 	bl	800c34c <std>
 800c430:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c434:	2202      	movs	r2, #2
 800c436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c43a:	2112      	movs	r1, #18
 800c43c:	f7ff bf86 	b.w	800c34c <std>
 800c440:	2002b258 	.word	0x2002b258
 800c444:	2002b120 	.word	0x2002b120
 800c448:	0800c3b9 	.word	0x0800c3b9

0800c44c <__sfp_lock_acquire>:
 800c44c:	4801      	ldr	r0, [pc, #4]	; (800c454 <__sfp_lock_acquire+0x8>)
 800c44e:	f000 b91e 	b.w	800c68e <__retarget_lock_acquire_recursive>
 800c452:	bf00      	nop
 800c454:	2002b261 	.word	0x2002b261

0800c458 <__sfp_lock_release>:
 800c458:	4801      	ldr	r0, [pc, #4]	; (800c460 <__sfp_lock_release+0x8>)
 800c45a:	f000 b919 	b.w	800c690 <__retarget_lock_release_recursive>
 800c45e:	bf00      	nop
 800c460:	2002b261 	.word	0x2002b261

0800c464 <__sinit>:
 800c464:	b510      	push	{r4, lr}
 800c466:	4604      	mov	r4, r0
 800c468:	f7ff fff0 	bl	800c44c <__sfp_lock_acquire>
 800c46c:	6a23      	ldr	r3, [r4, #32]
 800c46e:	b11b      	cbz	r3, 800c478 <__sinit+0x14>
 800c470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c474:	f7ff bff0 	b.w	800c458 <__sfp_lock_release>
 800c478:	4b04      	ldr	r3, [pc, #16]	; (800c48c <__sinit+0x28>)
 800c47a:	6223      	str	r3, [r4, #32]
 800c47c:	4b04      	ldr	r3, [pc, #16]	; (800c490 <__sinit+0x2c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1f5      	bne.n	800c470 <__sinit+0xc>
 800c484:	f7ff ffc4 	bl	800c410 <global_stdio_init.part.0>
 800c488:	e7f2      	b.n	800c470 <__sinit+0xc>
 800c48a:	bf00      	nop
 800c48c:	0800c3d1 	.word	0x0800c3d1
 800c490:	2002b258 	.word	0x2002b258

0800c494 <fiprintf>:
 800c494:	b40e      	push	{r1, r2, r3}
 800c496:	b503      	push	{r0, r1, lr}
 800c498:	4601      	mov	r1, r0
 800c49a:	ab03      	add	r3, sp, #12
 800c49c:	4805      	ldr	r0, [pc, #20]	; (800c4b4 <fiprintf+0x20>)
 800c49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4a2:	6800      	ldr	r0, [r0, #0]
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	f000 fa2b 	bl	800c900 <_vfiprintf_r>
 800c4aa:	b002      	add	sp, #8
 800c4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b0:	b003      	add	sp, #12
 800c4b2:	4770      	bx	lr
 800c4b4:	20000078 	.word	0x20000078

0800c4b8 <_fwalk_sglue>:
 800c4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	4607      	mov	r7, r0
 800c4be:	4688      	mov	r8, r1
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	2600      	movs	r6, #0
 800c4c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4c8:	f1b9 0901 	subs.w	r9, r9, #1
 800c4cc:	d505      	bpl.n	800c4da <_fwalk_sglue+0x22>
 800c4ce:	6824      	ldr	r4, [r4, #0]
 800c4d0:	2c00      	cmp	r4, #0
 800c4d2:	d1f7      	bne.n	800c4c4 <_fwalk_sglue+0xc>
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d907      	bls.n	800c4f0 <_fwalk_sglue+0x38>
 800c4e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	d003      	beq.n	800c4f0 <_fwalk_sglue+0x38>
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	47c0      	blx	r8
 800c4ee:	4306      	orrs	r6, r0
 800c4f0:	3568      	adds	r5, #104	; 0x68
 800c4f2:	e7e9      	b.n	800c4c8 <_fwalk_sglue+0x10>

0800c4f4 <__sread>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4fc:	f000 f878 	bl	800c5f0 <_read_r>
 800c500:	2800      	cmp	r0, #0
 800c502:	bfab      	itete	ge
 800c504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c506:	89a3      	ldrhlt	r3, [r4, #12]
 800c508:	181b      	addge	r3, r3, r0
 800c50a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c50e:	bfac      	ite	ge
 800c510:	6563      	strge	r3, [r4, #84]	; 0x54
 800c512:	81a3      	strhlt	r3, [r4, #12]
 800c514:	bd10      	pop	{r4, pc}

0800c516 <__swrite>:
 800c516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c51a:	461f      	mov	r7, r3
 800c51c:	898b      	ldrh	r3, [r1, #12]
 800c51e:	05db      	lsls	r3, r3, #23
 800c520:	4605      	mov	r5, r0
 800c522:	460c      	mov	r4, r1
 800c524:	4616      	mov	r6, r2
 800c526:	d505      	bpl.n	800c534 <__swrite+0x1e>
 800c528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52c:	2302      	movs	r3, #2
 800c52e:	2200      	movs	r2, #0
 800c530:	f000 f84c 	bl	800c5cc <_lseek_r>
 800c534:	89a3      	ldrh	r3, [r4, #12]
 800c536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c53a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c53e:	81a3      	strh	r3, [r4, #12]
 800c540:	4632      	mov	r2, r6
 800c542:	463b      	mov	r3, r7
 800c544:	4628      	mov	r0, r5
 800c546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c54a:	f000 b863 	b.w	800c614 <_write_r>

0800c54e <__sseek>:
 800c54e:	b510      	push	{r4, lr}
 800c550:	460c      	mov	r4, r1
 800c552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c556:	f000 f839 	bl	800c5cc <_lseek_r>
 800c55a:	1c43      	adds	r3, r0, #1
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	bf15      	itete	ne
 800c560:	6560      	strne	r0, [r4, #84]	; 0x54
 800c562:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c566:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c56a:	81a3      	strheq	r3, [r4, #12]
 800c56c:	bf18      	it	ne
 800c56e:	81a3      	strhne	r3, [r4, #12]
 800c570:	bd10      	pop	{r4, pc}

0800c572 <__sclose>:
 800c572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c576:	f000 b819 	b.w	800c5ac <_close_r>

0800c57a <memcmp>:
 800c57a:	b510      	push	{r4, lr}
 800c57c:	3901      	subs	r1, #1
 800c57e:	4402      	add	r2, r0
 800c580:	4290      	cmp	r0, r2
 800c582:	d101      	bne.n	800c588 <memcmp+0xe>
 800c584:	2000      	movs	r0, #0
 800c586:	e005      	b.n	800c594 <memcmp+0x1a>
 800c588:	7803      	ldrb	r3, [r0, #0]
 800c58a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c58e:	42a3      	cmp	r3, r4
 800c590:	d001      	beq.n	800c596 <memcmp+0x1c>
 800c592:	1b18      	subs	r0, r3, r4
 800c594:	bd10      	pop	{r4, pc}
 800c596:	3001      	adds	r0, #1
 800c598:	e7f2      	b.n	800c580 <memcmp+0x6>

0800c59a <memset>:
 800c59a:	4402      	add	r2, r0
 800c59c:	4603      	mov	r3, r0
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d100      	bne.n	800c5a4 <memset+0xa>
 800c5a2:	4770      	bx	lr
 800c5a4:	f803 1b01 	strb.w	r1, [r3], #1
 800c5a8:	e7f9      	b.n	800c59e <memset+0x4>
	...

0800c5ac <_close_r>:
 800c5ac:	b538      	push	{r3, r4, r5, lr}
 800c5ae:	4d06      	ldr	r5, [pc, #24]	; (800c5c8 <_close_r+0x1c>)
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	4608      	mov	r0, r1
 800c5b6:	602b      	str	r3, [r5, #0]
 800c5b8:	f7f6 fd54 	bl	8003064 <_close>
 800c5bc:	1c43      	adds	r3, r0, #1
 800c5be:	d102      	bne.n	800c5c6 <_close_r+0x1a>
 800c5c0:	682b      	ldr	r3, [r5, #0]
 800c5c2:	b103      	cbz	r3, 800c5c6 <_close_r+0x1a>
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	bd38      	pop	{r3, r4, r5, pc}
 800c5c8:	2002b25c 	.word	0x2002b25c

0800c5cc <_lseek_r>:
 800c5cc:	b538      	push	{r3, r4, r5, lr}
 800c5ce:	4d07      	ldr	r5, [pc, #28]	; (800c5ec <_lseek_r+0x20>)
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	4608      	mov	r0, r1
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	602a      	str	r2, [r5, #0]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	f7f6 fd69 	bl	80030b2 <_lseek>
 800c5e0:	1c43      	adds	r3, r0, #1
 800c5e2:	d102      	bne.n	800c5ea <_lseek_r+0x1e>
 800c5e4:	682b      	ldr	r3, [r5, #0]
 800c5e6:	b103      	cbz	r3, 800c5ea <_lseek_r+0x1e>
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
 800c5ec:	2002b25c 	.word	0x2002b25c

0800c5f0 <_read_r>:
 800c5f0:	b538      	push	{r3, r4, r5, lr}
 800c5f2:	4d07      	ldr	r5, [pc, #28]	; (800c610 <_read_r+0x20>)
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	4608      	mov	r0, r1
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	602a      	str	r2, [r5, #0]
 800c5fe:	461a      	mov	r2, r3
 800c600:	f7f6 fcf7 	bl	8002ff2 <_read>
 800c604:	1c43      	adds	r3, r0, #1
 800c606:	d102      	bne.n	800c60e <_read_r+0x1e>
 800c608:	682b      	ldr	r3, [r5, #0]
 800c60a:	b103      	cbz	r3, 800c60e <_read_r+0x1e>
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	bd38      	pop	{r3, r4, r5, pc}
 800c610:	2002b25c 	.word	0x2002b25c

0800c614 <_write_r>:
 800c614:	b538      	push	{r3, r4, r5, lr}
 800c616:	4d07      	ldr	r5, [pc, #28]	; (800c634 <_write_r+0x20>)
 800c618:	4604      	mov	r4, r0
 800c61a:	4608      	mov	r0, r1
 800c61c:	4611      	mov	r1, r2
 800c61e:	2200      	movs	r2, #0
 800c620:	602a      	str	r2, [r5, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	f7f6 fd02 	bl	800302c <_write>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_write_r+0x1e>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_write_r+0x1e>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	2002b25c 	.word	0x2002b25c

0800c638 <__errno>:
 800c638:	4b01      	ldr	r3, [pc, #4]	; (800c640 <__errno+0x8>)
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	20000078 	.word	0x20000078

0800c644 <__libc_init_array>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	4d0d      	ldr	r5, [pc, #52]	; (800c67c <__libc_init_array+0x38>)
 800c648:	4c0d      	ldr	r4, [pc, #52]	; (800c680 <__libc_init_array+0x3c>)
 800c64a:	1b64      	subs	r4, r4, r5
 800c64c:	10a4      	asrs	r4, r4, #2
 800c64e:	2600      	movs	r6, #0
 800c650:	42a6      	cmp	r6, r4
 800c652:	d109      	bne.n	800c668 <__libc_init_array+0x24>
 800c654:	4d0b      	ldr	r5, [pc, #44]	; (800c684 <__libc_init_array+0x40>)
 800c656:	4c0c      	ldr	r4, [pc, #48]	; (800c688 <__libc_init_array+0x44>)
 800c658:	f000 fe18 	bl	800d28c <_init>
 800c65c:	1b64      	subs	r4, r4, r5
 800c65e:	10a4      	asrs	r4, r4, #2
 800c660:	2600      	movs	r6, #0
 800c662:	42a6      	cmp	r6, r4
 800c664:	d105      	bne.n	800c672 <__libc_init_array+0x2e>
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66c:	4798      	blx	r3
 800c66e:	3601      	adds	r6, #1
 800c670:	e7ee      	b.n	800c650 <__libc_init_array+0xc>
 800c672:	f855 3b04 	ldr.w	r3, [r5], #4
 800c676:	4798      	blx	r3
 800c678:	3601      	adds	r6, #1
 800c67a:	e7f2      	b.n	800c662 <__libc_init_array+0x1e>
 800c67c:	0800ec80 	.word	0x0800ec80
 800c680:	0800ec80 	.word	0x0800ec80
 800c684:	0800ec80 	.word	0x0800ec80
 800c688:	0800ec84 	.word	0x0800ec84

0800c68c <__retarget_lock_init_recursive>:
 800c68c:	4770      	bx	lr

0800c68e <__retarget_lock_acquire_recursive>:
 800c68e:	4770      	bx	lr

0800c690 <__retarget_lock_release_recursive>:
 800c690:	4770      	bx	lr

0800c692 <memcpy>:
 800c692:	440a      	add	r2, r1
 800c694:	4291      	cmp	r1, r2
 800c696:	f100 33ff 	add.w	r3, r0, #4294967295
 800c69a:	d100      	bne.n	800c69e <memcpy+0xc>
 800c69c:	4770      	bx	lr
 800c69e:	b510      	push	{r4, lr}
 800c6a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a8:	4291      	cmp	r1, r2
 800c6aa:	d1f9      	bne.n	800c6a0 <memcpy+0xe>
 800c6ac:	bd10      	pop	{r4, pc}

0800c6ae <abort>:
 800c6ae:	b508      	push	{r3, lr}
 800c6b0:	2006      	movs	r0, #6
 800c6b2:	f000 fd3b 	bl	800d12c <raise>
 800c6b6:	2001      	movs	r0, #1
 800c6b8:	f7f6 fc91 	bl	8002fde <_exit>

0800c6bc <_free_r>:
 800c6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6be:	2900      	cmp	r1, #0
 800c6c0:	d044      	beq.n	800c74c <_free_r+0x90>
 800c6c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c6:	9001      	str	r0, [sp, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ce:	bfb8      	it	lt
 800c6d0:	18e4      	addlt	r4, r4, r3
 800c6d2:	f000 f8df 	bl	800c894 <__malloc_lock>
 800c6d6:	4a1e      	ldr	r2, [pc, #120]	; (800c750 <_free_r+0x94>)
 800c6d8:	9801      	ldr	r0, [sp, #4]
 800c6da:	6813      	ldr	r3, [r2, #0]
 800c6dc:	b933      	cbnz	r3, 800c6ec <_free_r+0x30>
 800c6de:	6063      	str	r3, [r4, #4]
 800c6e0:	6014      	str	r4, [r2, #0]
 800c6e2:	b003      	add	sp, #12
 800c6e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6e8:	f000 b8da 	b.w	800c8a0 <__malloc_unlock>
 800c6ec:	42a3      	cmp	r3, r4
 800c6ee:	d908      	bls.n	800c702 <_free_r+0x46>
 800c6f0:	6825      	ldr	r5, [r4, #0]
 800c6f2:	1961      	adds	r1, r4, r5
 800c6f4:	428b      	cmp	r3, r1
 800c6f6:	bf01      	itttt	eq
 800c6f8:	6819      	ldreq	r1, [r3, #0]
 800c6fa:	685b      	ldreq	r3, [r3, #4]
 800c6fc:	1949      	addeq	r1, r1, r5
 800c6fe:	6021      	streq	r1, [r4, #0]
 800c700:	e7ed      	b.n	800c6de <_free_r+0x22>
 800c702:	461a      	mov	r2, r3
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	b10b      	cbz	r3, 800c70c <_free_r+0x50>
 800c708:	42a3      	cmp	r3, r4
 800c70a:	d9fa      	bls.n	800c702 <_free_r+0x46>
 800c70c:	6811      	ldr	r1, [r2, #0]
 800c70e:	1855      	adds	r5, r2, r1
 800c710:	42a5      	cmp	r5, r4
 800c712:	d10b      	bne.n	800c72c <_free_r+0x70>
 800c714:	6824      	ldr	r4, [r4, #0]
 800c716:	4421      	add	r1, r4
 800c718:	1854      	adds	r4, r2, r1
 800c71a:	42a3      	cmp	r3, r4
 800c71c:	6011      	str	r1, [r2, #0]
 800c71e:	d1e0      	bne.n	800c6e2 <_free_r+0x26>
 800c720:	681c      	ldr	r4, [r3, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	6053      	str	r3, [r2, #4]
 800c726:	440c      	add	r4, r1
 800c728:	6014      	str	r4, [r2, #0]
 800c72a:	e7da      	b.n	800c6e2 <_free_r+0x26>
 800c72c:	d902      	bls.n	800c734 <_free_r+0x78>
 800c72e:	230c      	movs	r3, #12
 800c730:	6003      	str	r3, [r0, #0]
 800c732:	e7d6      	b.n	800c6e2 <_free_r+0x26>
 800c734:	6825      	ldr	r5, [r4, #0]
 800c736:	1961      	adds	r1, r4, r5
 800c738:	428b      	cmp	r3, r1
 800c73a:	bf04      	itt	eq
 800c73c:	6819      	ldreq	r1, [r3, #0]
 800c73e:	685b      	ldreq	r3, [r3, #4]
 800c740:	6063      	str	r3, [r4, #4]
 800c742:	bf04      	itt	eq
 800c744:	1949      	addeq	r1, r1, r5
 800c746:	6021      	streq	r1, [r4, #0]
 800c748:	6054      	str	r4, [r2, #4]
 800c74a:	e7ca      	b.n	800c6e2 <_free_r+0x26>
 800c74c:	b003      	add	sp, #12
 800c74e:	bd30      	pop	{r4, r5, pc}
 800c750:	2002b264 	.word	0x2002b264

0800c754 <sbrk_aligned>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	4e0e      	ldr	r6, [pc, #56]	; (800c790 <sbrk_aligned+0x3c>)
 800c758:	460c      	mov	r4, r1
 800c75a:	6831      	ldr	r1, [r6, #0]
 800c75c:	4605      	mov	r5, r0
 800c75e:	b911      	cbnz	r1, 800c766 <sbrk_aligned+0x12>
 800c760:	f000 fd00 	bl	800d164 <_sbrk_r>
 800c764:	6030      	str	r0, [r6, #0]
 800c766:	4621      	mov	r1, r4
 800c768:	4628      	mov	r0, r5
 800c76a:	f000 fcfb 	bl	800d164 <_sbrk_r>
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	d00a      	beq.n	800c788 <sbrk_aligned+0x34>
 800c772:	1cc4      	adds	r4, r0, #3
 800c774:	f024 0403 	bic.w	r4, r4, #3
 800c778:	42a0      	cmp	r0, r4
 800c77a:	d007      	beq.n	800c78c <sbrk_aligned+0x38>
 800c77c:	1a21      	subs	r1, r4, r0
 800c77e:	4628      	mov	r0, r5
 800c780:	f000 fcf0 	bl	800d164 <_sbrk_r>
 800c784:	3001      	adds	r0, #1
 800c786:	d101      	bne.n	800c78c <sbrk_aligned+0x38>
 800c788:	f04f 34ff 	mov.w	r4, #4294967295
 800c78c:	4620      	mov	r0, r4
 800c78e:	bd70      	pop	{r4, r5, r6, pc}
 800c790:	2002b268 	.word	0x2002b268

0800c794 <_malloc_r>:
 800c794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c798:	1ccd      	adds	r5, r1, #3
 800c79a:	f025 0503 	bic.w	r5, r5, #3
 800c79e:	3508      	adds	r5, #8
 800c7a0:	2d0c      	cmp	r5, #12
 800c7a2:	bf38      	it	cc
 800c7a4:	250c      	movcc	r5, #12
 800c7a6:	2d00      	cmp	r5, #0
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	db01      	blt.n	800c7b0 <_malloc_r+0x1c>
 800c7ac:	42a9      	cmp	r1, r5
 800c7ae:	d905      	bls.n	800c7bc <_malloc_r+0x28>
 800c7b0:	230c      	movs	r3, #12
 800c7b2:	603b      	str	r3, [r7, #0]
 800c7b4:	2600      	movs	r6, #0
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c890 <_malloc_r+0xfc>
 800c7c0:	f000 f868 	bl	800c894 <__malloc_lock>
 800c7c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c8:	461c      	mov	r4, r3
 800c7ca:	bb5c      	cbnz	r4, 800c824 <_malloc_r+0x90>
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	f7ff ffc0 	bl	800c754 <sbrk_aligned>
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	d155      	bne.n	800c886 <_malloc_r+0xf2>
 800c7da:	f8d8 4000 	ldr.w	r4, [r8]
 800c7de:	4626      	mov	r6, r4
 800c7e0:	2e00      	cmp	r6, #0
 800c7e2:	d145      	bne.n	800c870 <_malloc_r+0xdc>
 800c7e4:	2c00      	cmp	r4, #0
 800c7e6:	d048      	beq.n	800c87a <_malloc_r+0xe6>
 800c7e8:	6823      	ldr	r3, [r4, #0]
 800c7ea:	4631      	mov	r1, r6
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	eb04 0903 	add.w	r9, r4, r3
 800c7f2:	f000 fcb7 	bl	800d164 <_sbrk_r>
 800c7f6:	4581      	cmp	r9, r0
 800c7f8:	d13f      	bne.n	800c87a <_malloc_r+0xe6>
 800c7fa:	6821      	ldr	r1, [r4, #0]
 800c7fc:	1a6d      	subs	r5, r5, r1
 800c7fe:	4629      	mov	r1, r5
 800c800:	4638      	mov	r0, r7
 800c802:	f7ff ffa7 	bl	800c754 <sbrk_aligned>
 800c806:	3001      	adds	r0, #1
 800c808:	d037      	beq.n	800c87a <_malloc_r+0xe6>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	442b      	add	r3, r5
 800c80e:	6023      	str	r3, [r4, #0]
 800c810:	f8d8 3000 	ldr.w	r3, [r8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d038      	beq.n	800c88a <_malloc_r+0xf6>
 800c818:	685a      	ldr	r2, [r3, #4]
 800c81a:	42a2      	cmp	r2, r4
 800c81c:	d12b      	bne.n	800c876 <_malloc_r+0xe2>
 800c81e:	2200      	movs	r2, #0
 800c820:	605a      	str	r2, [r3, #4]
 800c822:	e00f      	b.n	800c844 <_malloc_r+0xb0>
 800c824:	6822      	ldr	r2, [r4, #0]
 800c826:	1b52      	subs	r2, r2, r5
 800c828:	d41f      	bmi.n	800c86a <_malloc_r+0xd6>
 800c82a:	2a0b      	cmp	r2, #11
 800c82c:	d917      	bls.n	800c85e <_malloc_r+0xca>
 800c82e:	1961      	adds	r1, r4, r5
 800c830:	42a3      	cmp	r3, r4
 800c832:	6025      	str	r5, [r4, #0]
 800c834:	bf18      	it	ne
 800c836:	6059      	strne	r1, [r3, #4]
 800c838:	6863      	ldr	r3, [r4, #4]
 800c83a:	bf08      	it	eq
 800c83c:	f8c8 1000 	streq.w	r1, [r8]
 800c840:	5162      	str	r2, [r4, r5]
 800c842:	604b      	str	r3, [r1, #4]
 800c844:	4638      	mov	r0, r7
 800c846:	f104 060b 	add.w	r6, r4, #11
 800c84a:	f000 f829 	bl	800c8a0 <__malloc_unlock>
 800c84e:	f026 0607 	bic.w	r6, r6, #7
 800c852:	1d23      	adds	r3, r4, #4
 800c854:	1af2      	subs	r2, r6, r3
 800c856:	d0ae      	beq.n	800c7b6 <_malloc_r+0x22>
 800c858:	1b9b      	subs	r3, r3, r6
 800c85a:	50a3      	str	r3, [r4, r2]
 800c85c:	e7ab      	b.n	800c7b6 <_malloc_r+0x22>
 800c85e:	42a3      	cmp	r3, r4
 800c860:	6862      	ldr	r2, [r4, #4]
 800c862:	d1dd      	bne.n	800c820 <_malloc_r+0x8c>
 800c864:	f8c8 2000 	str.w	r2, [r8]
 800c868:	e7ec      	b.n	800c844 <_malloc_r+0xb0>
 800c86a:	4623      	mov	r3, r4
 800c86c:	6864      	ldr	r4, [r4, #4]
 800c86e:	e7ac      	b.n	800c7ca <_malloc_r+0x36>
 800c870:	4634      	mov	r4, r6
 800c872:	6876      	ldr	r6, [r6, #4]
 800c874:	e7b4      	b.n	800c7e0 <_malloc_r+0x4c>
 800c876:	4613      	mov	r3, r2
 800c878:	e7cc      	b.n	800c814 <_malloc_r+0x80>
 800c87a:	230c      	movs	r3, #12
 800c87c:	603b      	str	r3, [r7, #0]
 800c87e:	4638      	mov	r0, r7
 800c880:	f000 f80e 	bl	800c8a0 <__malloc_unlock>
 800c884:	e797      	b.n	800c7b6 <_malloc_r+0x22>
 800c886:	6025      	str	r5, [r4, #0]
 800c888:	e7dc      	b.n	800c844 <_malloc_r+0xb0>
 800c88a:	605b      	str	r3, [r3, #4]
 800c88c:	deff      	udf	#255	; 0xff
 800c88e:	bf00      	nop
 800c890:	2002b264 	.word	0x2002b264

0800c894 <__malloc_lock>:
 800c894:	4801      	ldr	r0, [pc, #4]	; (800c89c <__malloc_lock+0x8>)
 800c896:	f7ff befa 	b.w	800c68e <__retarget_lock_acquire_recursive>
 800c89a:	bf00      	nop
 800c89c:	2002b260 	.word	0x2002b260

0800c8a0 <__malloc_unlock>:
 800c8a0:	4801      	ldr	r0, [pc, #4]	; (800c8a8 <__malloc_unlock+0x8>)
 800c8a2:	f7ff bef5 	b.w	800c690 <__retarget_lock_release_recursive>
 800c8a6:	bf00      	nop
 800c8a8:	2002b260 	.word	0x2002b260

0800c8ac <__sfputc_r>:
 800c8ac:	6893      	ldr	r3, [r2, #8]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	b410      	push	{r4}
 800c8b4:	6093      	str	r3, [r2, #8]
 800c8b6:	da08      	bge.n	800c8ca <__sfputc_r+0x1e>
 800c8b8:	6994      	ldr	r4, [r2, #24]
 800c8ba:	42a3      	cmp	r3, r4
 800c8bc:	db01      	blt.n	800c8c2 <__sfputc_r+0x16>
 800c8be:	290a      	cmp	r1, #10
 800c8c0:	d103      	bne.n	800c8ca <__sfputc_r+0x1e>
 800c8c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c6:	f000 bb73 	b.w	800cfb0 <__swbuf_r>
 800c8ca:	6813      	ldr	r3, [r2, #0]
 800c8cc:	1c58      	adds	r0, r3, #1
 800c8ce:	6010      	str	r0, [r2, #0]
 800c8d0:	7019      	strb	r1, [r3, #0]
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <__sfputs_r>:
 800c8da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8dc:	4606      	mov	r6, r0
 800c8de:	460f      	mov	r7, r1
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	18d5      	adds	r5, r2, r3
 800c8e4:	42ac      	cmp	r4, r5
 800c8e6:	d101      	bne.n	800c8ec <__sfputs_r+0x12>
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	e007      	b.n	800c8fc <__sfputs_r+0x22>
 800c8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f0:	463a      	mov	r2, r7
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f7ff ffda 	bl	800c8ac <__sfputc_r>
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	d1f3      	bne.n	800c8e4 <__sfputs_r+0xa>
 800c8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c900 <_vfiprintf_r>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	460d      	mov	r5, r1
 800c906:	b09d      	sub	sp, #116	; 0x74
 800c908:	4614      	mov	r4, r2
 800c90a:	4698      	mov	r8, r3
 800c90c:	4606      	mov	r6, r0
 800c90e:	b118      	cbz	r0, 800c918 <_vfiprintf_r+0x18>
 800c910:	6a03      	ldr	r3, [r0, #32]
 800c912:	b90b      	cbnz	r3, 800c918 <_vfiprintf_r+0x18>
 800c914:	f7ff fda6 	bl	800c464 <__sinit>
 800c918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c91a:	07d9      	lsls	r1, r3, #31
 800c91c:	d405      	bmi.n	800c92a <_vfiprintf_r+0x2a>
 800c91e:	89ab      	ldrh	r3, [r5, #12]
 800c920:	059a      	lsls	r2, r3, #22
 800c922:	d402      	bmi.n	800c92a <_vfiprintf_r+0x2a>
 800c924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c926:	f7ff feb2 	bl	800c68e <__retarget_lock_acquire_recursive>
 800c92a:	89ab      	ldrh	r3, [r5, #12]
 800c92c:	071b      	lsls	r3, r3, #28
 800c92e:	d501      	bpl.n	800c934 <_vfiprintf_r+0x34>
 800c930:	692b      	ldr	r3, [r5, #16]
 800c932:	b99b      	cbnz	r3, 800c95c <_vfiprintf_r+0x5c>
 800c934:	4629      	mov	r1, r5
 800c936:	4630      	mov	r0, r6
 800c938:	f000 fb78 	bl	800d02c <__swsetup_r>
 800c93c:	b170      	cbz	r0, 800c95c <_vfiprintf_r+0x5c>
 800c93e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c940:	07dc      	lsls	r4, r3, #31
 800c942:	d504      	bpl.n	800c94e <_vfiprintf_r+0x4e>
 800c944:	f04f 30ff 	mov.w	r0, #4294967295
 800c948:	b01d      	add	sp, #116	; 0x74
 800c94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94e:	89ab      	ldrh	r3, [r5, #12]
 800c950:	0598      	lsls	r0, r3, #22
 800c952:	d4f7      	bmi.n	800c944 <_vfiprintf_r+0x44>
 800c954:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c956:	f7ff fe9b 	bl	800c690 <__retarget_lock_release_recursive>
 800c95a:	e7f3      	b.n	800c944 <_vfiprintf_r+0x44>
 800c95c:	2300      	movs	r3, #0
 800c95e:	9309      	str	r3, [sp, #36]	; 0x24
 800c960:	2320      	movs	r3, #32
 800c962:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c966:	f8cd 800c 	str.w	r8, [sp, #12]
 800c96a:	2330      	movs	r3, #48	; 0x30
 800c96c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb20 <_vfiprintf_r+0x220>
 800c970:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c974:	f04f 0901 	mov.w	r9, #1
 800c978:	4623      	mov	r3, r4
 800c97a:	469a      	mov	sl, r3
 800c97c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c980:	b10a      	cbz	r2, 800c986 <_vfiprintf_r+0x86>
 800c982:	2a25      	cmp	r2, #37	; 0x25
 800c984:	d1f9      	bne.n	800c97a <_vfiprintf_r+0x7a>
 800c986:	ebba 0b04 	subs.w	fp, sl, r4
 800c98a:	d00b      	beq.n	800c9a4 <_vfiprintf_r+0xa4>
 800c98c:	465b      	mov	r3, fp
 800c98e:	4622      	mov	r2, r4
 800c990:	4629      	mov	r1, r5
 800c992:	4630      	mov	r0, r6
 800c994:	f7ff ffa1 	bl	800c8da <__sfputs_r>
 800c998:	3001      	adds	r0, #1
 800c99a:	f000 80a9 	beq.w	800caf0 <_vfiprintf_r+0x1f0>
 800c99e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9a0:	445a      	add	r2, fp
 800c9a2:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f000 80a1 	beq.w	800caf0 <_vfiprintf_r+0x1f0>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9b8:	f10a 0a01 	add.w	sl, sl, #1
 800c9bc:	9304      	str	r3, [sp, #16]
 800c9be:	9307      	str	r3, [sp, #28]
 800c9c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9c4:	931a      	str	r3, [sp, #104]	; 0x68
 800c9c6:	4654      	mov	r4, sl
 800c9c8:	2205      	movs	r2, #5
 800c9ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ce:	4854      	ldr	r0, [pc, #336]	; (800cb20 <_vfiprintf_r+0x220>)
 800c9d0:	f7f3 fc5e 	bl	8000290 <memchr>
 800c9d4:	9a04      	ldr	r2, [sp, #16]
 800c9d6:	b9d8      	cbnz	r0, 800ca10 <_vfiprintf_r+0x110>
 800c9d8:	06d1      	lsls	r1, r2, #27
 800c9da:	bf44      	itt	mi
 800c9dc:	2320      	movmi	r3, #32
 800c9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e2:	0713      	lsls	r3, r2, #28
 800c9e4:	bf44      	itt	mi
 800c9e6:	232b      	movmi	r3, #43	; 0x2b
 800c9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f2:	d015      	beq.n	800ca20 <_vfiprintf_r+0x120>
 800c9f4:	9a07      	ldr	r2, [sp, #28]
 800c9f6:	4654      	mov	r4, sl
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	f04f 0c0a 	mov.w	ip, #10
 800c9fe:	4621      	mov	r1, r4
 800ca00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca04:	3b30      	subs	r3, #48	; 0x30
 800ca06:	2b09      	cmp	r3, #9
 800ca08:	d94d      	bls.n	800caa6 <_vfiprintf_r+0x1a6>
 800ca0a:	b1b0      	cbz	r0, 800ca3a <_vfiprintf_r+0x13a>
 800ca0c:	9207      	str	r2, [sp, #28]
 800ca0e:	e014      	b.n	800ca3a <_vfiprintf_r+0x13a>
 800ca10:	eba0 0308 	sub.w	r3, r0, r8
 800ca14:	fa09 f303 	lsl.w	r3, r9, r3
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	9304      	str	r3, [sp, #16]
 800ca1c:	46a2      	mov	sl, r4
 800ca1e:	e7d2      	b.n	800c9c6 <_vfiprintf_r+0xc6>
 800ca20:	9b03      	ldr	r3, [sp, #12]
 800ca22:	1d19      	adds	r1, r3, #4
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	9103      	str	r1, [sp, #12]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	bfbb      	ittet	lt
 800ca2c:	425b      	neglt	r3, r3
 800ca2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ca32:	9307      	strge	r3, [sp, #28]
 800ca34:	9307      	strlt	r3, [sp, #28]
 800ca36:	bfb8      	it	lt
 800ca38:	9204      	strlt	r2, [sp, #16]
 800ca3a:	7823      	ldrb	r3, [r4, #0]
 800ca3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ca3e:	d10c      	bne.n	800ca5a <_vfiprintf_r+0x15a>
 800ca40:	7863      	ldrb	r3, [r4, #1]
 800ca42:	2b2a      	cmp	r3, #42	; 0x2a
 800ca44:	d134      	bne.n	800cab0 <_vfiprintf_r+0x1b0>
 800ca46:	9b03      	ldr	r3, [sp, #12]
 800ca48:	1d1a      	adds	r2, r3, #4
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	9203      	str	r2, [sp, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bfb8      	it	lt
 800ca52:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca56:	3402      	adds	r4, #2
 800ca58:	9305      	str	r3, [sp, #20]
 800ca5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb30 <_vfiprintf_r+0x230>
 800ca5e:	7821      	ldrb	r1, [r4, #0]
 800ca60:	2203      	movs	r2, #3
 800ca62:	4650      	mov	r0, sl
 800ca64:	f7f3 fc14 	bl	8000290 <memchr>
 800ca68:	b138      	cbz	r0, 800ca7a <_vfiprintf_r+0x17a>
 800ca6a:	9b04      	ldr	r3, [sp, #16]
 800ca6c:	eba0 000a 	sub.w	r0, r0, sl
 800ca70:	2240      	movs	r2, #64	; 0x40
 800ca72:	4082      	lsls	r2, r0
 800ca74:	4313      	orrs	r3, r2
 800ca76:	3401      	adds	r4, #1
 800ca78:	9304      	str	r3, [sp, #16]
 800ca7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7e:	4829      	ldr	r0, [pc, #164]	; (800cb24 <_vfiprintf_r+0x224>)
 800ca80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca84:	2206      	movs	r2, #6
 800ca86:	f7f3 fc03 	bl	8000290 <memchr>
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d03f      	beq.n	800cb0e <_vfiprintf_r+0x20e>
 800ca8e:	4b26      	ldr	r3, [pc, #152]	; (800cb28 <_vfiprintf_r+0x228>)
 800ca90:	bb1b      	cbnz	r3, 800cada <_vfiprintf_r+0x1da>
 800ca92:	9b03      	ldr	r3, [sp, #12]
 800ca94:	3307      	adds	r3, #7
 800ca96:	f023 0307 	bic.w	r3, r3, #7
 800ca9a:	3308      	adds	r3, #8
 800ca9c:	9303      	str	r3, [sp, #12]
 800ca9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa0:	443b      	add	r3, r7
 800caa2:	9309      	str	r3, [sp, #36]	; 0x24
 800caa4:	e768      	b.n	800c978 <_vfiprintf_r+0x78>
 800caa6:	fb0c 3202 	mla	r2, ip, r2, r3
 800caaa:	460c      	mov	r4, r1
 800caac:	2001      	movs	r0, #1
 800caae:	e7a6      	b.n	800c9fe <_vfiprintf_r+0xfe>
 800cab0:	2300      	movs	r3, #0
 800cab2:	3401      	adds	r4, #1
 800cab4:	9305      	str	r3, [sp, #20]
 800cab6:	4619      	mov	r1, r3
 800cab8:	f04f 0c0a 	mov.w	ip, #10
 800cabc:	4620      	mov	r0, r4
 800cabe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cac2:	3a30      	subs	r2, #48	; 0x30
 800cac4:	2a09      	cmp	r2, #9
 800cac6:	d903      	bls.n	800cad0 <_vfiprintf_r+0x1d0>
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d0c6      	beq.n	800ca5a <_vfiprintf_r+0x15a>
 800cacc:	9105      	str	r1, [sp, #20]
 800cace:	e7c4      	b.n	800ca5a <_vfiprintf_r+0x15a>
 800cad0:	fb0c 2101 	mla	r1, ip, r1, r2
 800cad4:	4604      	mov	r4, r0
 800cad6:	2301      	movs	r3, #1
 800cad8:	e7f0      	b.n	800cabc <_vfiprintf_r+0x1bc>
 800cada:	ab03      	add	r3, sp, #12
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	462a      	mov	r2, r5
 800cae0:	4b12      	ldr	r3, [pc, #72]	; (800cb2c <_vfiprintf_r+0x22c>)
 800cae2:	a904      	add	r1, sp, #16
 800cae4:	4630      	mov	r0, r6
 800cae6:	f3af 8000 	nop.w
 800caea:	4607      	mov	r7, r0
 800caec:	1c78      	adds	r0, r7, #1
 800caee:	d1d6      	bne.n	800ca9e <_vfiprintf_r+0x19e>
 800caf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caf2:	07d9      	lsls	r1, r3, #31
 800caf4:	d405      	bmi.n	800cb02 <_vfiprintf_r+0x202>
 800caf6:	89ab      	ldrh	r3, [r5, #12]
 800caf8:	059a      	lsls	r2, r3, #22
 800cafa:	d402      	bmi.n	800cb02 <_vfiprintf_r+0x202>
 800cafc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cafe:	f7ff fdc7 	bl	800c690 <__retarget_lock_release_recursive>
 800cb02:	89ab      	ldrh	r3, [r5, #12]
 800cb04:	065b      	lsls	r3, r3, #25
 800cb06:	f53f af1d 	bmi.w	800c944 <_vfiprintf_r+0x44>
 800cb0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb0c:	e71c      	b.n	800c948 <_vfiprintf_r+0x48>
 800cb0e:	ab03      	add	r3, sp, #12
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	462a      	mov	r2, r5
 800cb14:	4b05      	ldr	r3, [pc, #20]	; (800cb2c <_vfiprintf_r+0x22c>)
 800cb16:	a904      	add	r1, sp, #16
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f000 f879 	bl	800cc10 <_printf_i>
 800cb1e:	e7e4      	b.n	800caea <_vfiprintf_r+0x1ea>
 800cb20:	0800ec44 	.word	0x0800ec44
 800cb24:	0800ec4e 	.word	0x0800ec4e
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	0800c8db 	.word	0x0800c8db
 800cb30:	0800ec4a 	.word	0x0800ec4a

0800cb34 <_printf_common>:
 800cb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb38:	4616      	mov	r6, r2
 800cb3a:	4699      	mov	r9, r3
 800cb3c:	688a      	ldr	r2, [r1, #8]
 800cb3e:	690b      	ldr	r3, [r1, #16]
 800cb40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb44:	4293      	cmp	r3, r2
 800cb46:	bfb8      	it	lt
 800cb48:	4613      	movlt	r3, r2
 800cb4a:	6033      	str	r3, [r6, #0]
 800cb4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb50:	4607      	mov	r7, r0
 800cb52:	460c      	mov	r4, r1
 800cb54:	b10a      	cbz	r2, 800cb5a <_printf_common+0x26>
 800cb56:	3301      	adds	r3, #1
 800cb58:	6033      	str	r3, [r6, #0]
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	0699      	lsls	r1, r3, #26
 800cb5e:	bf42      	ittt	mi
 800cb60:	6833      	ldrmi	r3, [r6, #0]
 800cb62:	3302      	addmi	r3, #2
 800cb64:	6033      	strmi	r3, [r6, #0]
 800cb66:	6825      	ldr	r5, [r4, #0]
 800cb68:	f015 0506 	ands.w	r5, r5, #6
 800cb6c:	d106      	bne.n	800cb7c <_printf_common+0x48>
 800cb6e:	f104 0a19 	add.w	sl, r4, #25
 800cb72:	68e3      	ldr	r3, [r4, #12]
 800cb74:	6832      	ldr	r2, [r6, #0]
 800cb76:	1a9b      	subs	r3, r3, r2
 800cb78:	42ab      	cmp	r3, r5
 800cb7a:	dc26      	bgt.n	800cbca <_printf_common+0x96>
 800cb7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb80:	1e13      	subs	r3, r2, #0
 800cb82:	6822      	ldr	r2, [r4, #0]
 800cb84:	bf18      	it	ne
 800cb86:	2301      	movne	r3, #1
 800cb88:	0692      	lsls	r2, r2, #26
 800cb8a:	d42b      	bmi.n	800cbe4 <_printf_common+0xb0>
 800cb8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb90:	4649      	mov	r1, r9
 800cb92:	4638      	mov	r0, r7
 800cb94:	47c0      	blx	r8
 800cb96:	3001      	adds	r0, #1
 800cb98:	d01e      	beq.n	800cbd8 <_printf_common+0xa4>
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	6922      	ldr	r2, [r4, #16]
 800cb9e:	f003 0306 	and.w	r3, r3, #6
 800cba2:	2b04      	cmp	r3, #4
 800cba4:	bf02      	ittt	eq
 800cba6:	68e5      	ldreq	r5, [r4, #12]
 800cba8:	6833      	ldreq	r3, [r6, #0]
 800cbaa:	1aed      	subeq	r5, r5, r3
 800cbac:	68a3      	ldr	r3, [r4, #8]
 800cbae:	bf0c      	ite	eq
 800cbb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbb4:	2500      	movne	r5, #0
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	bfc4      	itt	gt
 800cbba:	1a9b      	subgt	r3, r3, r2
 800cbbc:	18ed      	addgt	r5, r5, r3
 800cbbe:	2600      	movs	r6, #0
 800cbc0:	341a      	adds	r4, #26
 800cbc2:	42b5      	cmp	r5, r6
 800cbc4:	d11a      	bne.n	800cbfc <_printf_common+0xc8>
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	e008      	b.n	800cbdc <_printf_common+0xa8>
 800cbca:	2301      	movs	r3, #1
 800cbcc:	4652      	mov	r2, sl
 800cbce:	4649      	mov	r1, r9
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	47c0      	blx	r8
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d103      	bne.n	800cbe0 <_printf_common+0xac>
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe0:	3501      	adds	r5, #1
 800cbe2:	e7c6      	b.n	800cb72 <_printf_common+0x3e>
 800cbe4:	18e1      	adds	r1, r4, r3
 800cbe6:	1c5a      	adds	r2, r3, #1
 800cbe8:	2030      	movs	r0, #48	; 0x30
 800cbea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbee:	4422      	add	r2, r4
 800cbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbf8:	3302      	adds	r3, #2
 800cbfa:	e7c7      	b.n	800cb8c <_printf_common+0x58>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	4622      	mov	r2, r4
 800cc00:	4649      	mov	r1, r9
 800cc02:	4638      	mov	r0, r7
 800cc04:	47c0      	blx	r8
 800cc06:	3001      	adds	r0, #1
 800cc08:	d0e6      	beq.n	800cbd8 <_printf_common+0xa4>
 800cc0a:	3601      	adds	r6, #1
 800cc0c:	e7d9      	b.n	800cbc2 <_printf_common+0x8e>
	...

0800cc10 <_printf_i>:
 800cc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc14:	7e0f      	ldrb	r7, [r1, #24]
 800cc16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc18:	2f78      	cmp	r7, #120	; 0x78
 800cc1a:	4691      	mov	r9, r2
 800cc1c:	4680      	mov	r8, r0
 800cc1e:	460c      	mov	r4, r1
 800cc20:	469a      	mov	sl, r3
 800cc22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc26:	d807      	bhi.n	800cc38 <_printf_i+0x28>
 800cc28:	2f62      	cmp	r7, #98	; 0x62
 800cc2a:	d80a      	bhi.n	800cc42 <_printf_i+0x32>
 800cc2c:	2f00      	cmp	r7, #0
 800cc2e:	f000 80d4 	beq.w	800cdda <_printf_i+0x1ca>
 800cc32:	2f58      	cmp	r7, #88	; 0x58
 800cc34:	f000 80c0 	beq.w	800cdb8 <_printf_i+0x1a8>
 800cc38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc40:	e03a      	b.n	800ccb8 <_printf_i+0xa8>
 800cc42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc46:	2b15      	cmp	r3, #21
 800cc48:	d8f6      	bhi.n	800cc38 <_printf_i+0x28>
 800cc4a:	a101      	add	r1, pc, #4	; (adr r1, 800cc50 <_printf_i+0x40>)
 800cc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc50:	0800cca9 	.word	0x0800cca9
 800cc54:	0800ccbd 	.word	0x0800ccbd
 800cc58:	0800cc39 	.word	0x0800cc39
 800cc5c:	0800cc39 	.word	0x0800cc39
 800cc60:	0800cc39 	.word	0x0800cc39
 800cc64:	0800cc39 	.word	0x0800cc39
 800cc68:	0800ccbd 	.word	0x0800ccbd
 800cc6c:	0800cc39 	.word	0x0800cc39
 800cc70:	0800cc39 	.word	0x0800cc39
 800cc74:	0800cc39 	.word	0x0800cc39
 800cc78:	0800cc39 	.word	0x0800cc39
 800cc7c:	0800cdc1 	.word	0x0800cdc1
 800cc80:	0800cce9 	.word	0x0800cce9
 800cc84:	0800cd7b 	.word	0x0800cd7b
 800cc88:	0800cc39 	.word	0x0800cc39
 800cc8c:	0800cc39 	.word	0x0800cc39
 800cc90:	0800cde3 	.word	0x0800cde3
 800cc94:	0800cc39 	.word	0x0800cc39
 800cc98:	0800cce9 	.word	0x0800cce9
 800cc9c:	0800cc39 	.word	0x0800cc39
 800cca0:	0800cc39 	.word	0x0800cc39
 800cca4:	0800cd83 	.word	0x0800cd83
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	1d1a      	adds	r2, r3, #4
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	602a      	str	r2, [r5, #0]
 800ccb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccb8:	2301      	movs	r3, #1
 800ccba:	e09f      	b.n	800cdfc <_printf_i+0x1ec>
 800ccbc:	6820      	ldr	r0, [r4, #0]
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	0607      	lsls	r7, r0, #24
 800ccc2:	f103 0104 	add.w	r1, r3, #4
 800ccc6:	6029      	str	r1, [r5, #0]
 800ccc8:	d501      	bpl.n	800ccce <_printf_i+0xbe>
 800ccca:	681e      	ldr	r6, [r3, #0]
 800cccc:	e003      	b.n	800ccd6 <_printf_i+0xc6>
 800ccce:	0646      	lsls	r6, r0, #25
 800ccd0:	d5fb      	bpl.n	800ccca <_printf_i+0xba>
 800ccd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	da03      	bge.n	800cce2 <_printf_i+0xd2>
 800ccda:	232d      	movs	r3, #45	; 0x2d
 800ccdc:	4276      	negs	r6, r6
 800ccde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cce2:	485a      	ldr	r0, [pc, #360]	; (800ce4c <_printf_i+0x23c>)
 800cce4:	230a      	movs	r3, #10
 800cce6:	e012      	b.n	800cd0e <_printf_i+0xfe>
 800cce8:	682b      	ldr	r3, [r5, #0]
 800ccea:	6820      	ldr	r0, [r4, #0]
 800ccec:	1d19      	adds	r1, r3, #4
 800ccee:	6029      	str	r1, [r5, #0]
 800ccf0:	0605      	lsls	r5, r0, #24
 800ccf2:	d501      	bpl.n	800ccf8 <_printf_i+0xe8>
 800ccf4:	681e      	ldr	r6, [r3, #0]
 800ccf6:	e002      	b.n	800ccfe <_printf_i+0xee>
 800ccf8:	0641      	lsls	r1, r0, #25
 800ccfa:	d5fb      	bpl.n	800ccf4 <_printf_i+0xe4>
 800ccfc:	881e      	ldrh	r6, [r3, #0]
 800ccfe:	4853      	ldr	r0, [pc, #332]	; (800ce4c <_printf_i+0x23c>)
 800cd00:	2f6f      	cmp	r7, #111	; 0x6f
 800cd02:	bf0c      	ite	eq
 800cd04:	2308      	moveq	r3, #8
 800cd06:	230a      	movne	r3, #10
 800cd08:	2100      	movs	r1, #0
 800cd0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd0e:	6865      	ldr	r5, [r4, #4]
 800cd10:	60a5      	str	r5, [r4, #8]
 800cd12:	2d00      	cmp	r5, #0
 800cd14:	bfa2      	ittt	ge
 800cd16:	6821      	ldrge	r1, [r4, #0]
 800cd18:	f021 0104 	bicge.w	r1, r1, #4
 800cd1c:	6021      	strge	r1, [r4, #0]
 800cd1e:	b90e      	cbnz	r6, 800cd24 <_printf_i+0x114>
 800cd20:	2d00      	cmp	r5, #0
 800cd22:	d04b      	beq.n	800cdbc <_printf_i+0x1ac>
 800cd24:	4615      	mov	r5, r2
 800cd26:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd2a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd2e:	5dc7      	ldrb	r7, [r0, r7]
 800cd30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd34:	4637      	mov	r7, r6
 800cd36:	42bb      	cmp	r3, r7
 800cd38:	460e      	mov	r6, r1
 800cd3a:	d9f4      	bls.n	800cd26 <_printf_i+0x116>
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d10b      	bne.n	800cd58 <_printf_i+0x148>
 800cd40:	6823      	ldr	r3, [r4, #0]
 800cd42:	07de      	lsls	r6, r3, #31
 800cd44:	d508      	bpl.n	800cd58 <_printf_i+0x148>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	6861      	ldr	r1, [r4, #4]
 800cd4a:	4299      	cmp	r1, r3
 800cd4c:	bfde      	ittt	le
 800cd4e:	2330      	movle	r3, #48	; 0x30
 800cd50:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd54:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd58:	1b52      	subs	r2, r2, r5
 800cd5a:	6122      	str	r2, [r4, #16]
 800cd5c:	f8cd a000 	str.w	sl, [sp]
 800cd60:	464b      	mov	r3, r9
 800cd62:	aa03      	add	r2, sp, #12
 800cd64:	4621      	mov	r1, r4
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7ff fee4 	bl	800cb34 <_printf_common>
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d14a      	bne.n	800ce06 <_printf_i+0x1f6>
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295
 800cd74:	b004      	add	sp, #16
 800cd76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7a:	6823      	ldr	r3, [r4, #0]
 800cd7c:	f043 0320 	orr.w	r3, r3, #32
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	4833      	ldr	r0, [pc, #204]	; (800ce50 <_printf_i+0x240>)
 800cd84:	2778      	movs	r7, #120	; 0x78
 800cd86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	6829      	ldr	r1, [r5, #0]
 800cd8e:	061f      	lsls	r7, r3, #24
 800cd90:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd94:	d402      	bmi.n	800cd9c <_printf_i+0x18c>
 800cd96:	065f      	lsls	r7, r3, #25
 800cd98:	bf48      	it	mi
 800cd9a:	b2b6      	uxthmi	r6, r6
 800cd9c:	07df      	lsls	r7, r3, #31
 800cd9e:	bf48      	it	mi
 800cda0:	f043 0320 	orrmi.w	r3, r3, #32
 800cda4:	6029      	str	r1, [r5, #0]
 800cda6:	bf48      	it	mi
 800cda8:	6023      	strmi	r3, [r4, #0]
 800cdaa:	b91e      	cbnz	r6, 800cdb4 <_printf_i+0x1a4>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	f023 0320 	bic.w	r3, r3, #32
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	2310      	movs	r3, #16
 800cdb6:	e7a7      	b.n	800cd08 <_printf_i+0xf8>
 800cdb8:	4824      	ldr	r0, [pc, #144]	; (800ce4c <_printf_i+0x23c>)
 800cdba:	e7e4      	b.n	800cd86 <_printf_i+0x176>
 800cdbc:	4615      	mov	r5, r2
 800cdbe:	e7bd      	b.n	800cd3c <_printf_i+0x12c>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	6826      	ldr	r6, [r4, #0]
 800cdc4:	6961      	ldr	r1, [r4, #20]
 800cdc6:	1d18      	adds	r0, r3, #4
 800cdc8:	6028      	str	r0, [r5, #0]
 800cdca:	0635      	lsls	r5, r6, #24
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	d501      	bpl.n	800cdd4 <_printf_i+0x1c4>
 800cdd0:	6019      	str	r1, [r3, #0]
 800cdd2:	e002      	b.n	800cdda <_printf_i+0x1ca>
 800cdd4:	0670      	lsls	r0, r6, #25
 800cdd6:	d5fb      	bpl.n	800cdd0 <_printf_i+0x1c0>
 800cdd8:	8019      	strh	r1, [r3, #0]
 800cdda:	2300      	movs	r3, #0
 800cddc:	6123      	str	r3, [r4, #16]
 800cdde:	4615      	mov	r5, r2
 800cde0:	e7bc      	b.n	800cd5c <_printf_i+0x14c>
 800cde2:	682b      	ldr	r3, [r5, #0]
 800cde4:	1d1a      	adds	r2, r3, #4
 800cde6:	602a      	str	r2, [r5, #0]
 800cde8:	681d      	ldr	r5, [r3, #0]
 800cdea:	6862      	ldr	r2, [r4, #4]
 800cdec:	2100      	movs	r1, #0
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7f3 fa4e 	bl	8000290 <memchr>
 800cdf4:	b108      	cbz	r0, 800cdfa <_printf_i+0x1ea>
 800cdf6:	1b40      	subs	r0, r0, r5
 800cdf8:	6060      	str	r0, [r4, #4]
 800cdfa:	6863      	ldr	r3, [r4, #4]
 800cdfc:	6123      	str	r3, [r4, #16]
 800cdfe:	2300      	movs	r3, #0
 800ce00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce04:	e7aa      	b.n	800cd5c <_printf_i+0x14c>
 800ce06:	6923      	ldr	r3, [r4, #16]
 800ce08:	462a      	mov	r2, r5
 800ce0a:	4649      	mov	r1, r9
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	47d0      	blx	sl
 800ce10:	3001      	adds	r0, #1
 800ce12:	d0ad      	beq.n	800cd70 <_printf_i+0x160>
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	079b      	lsls	r3, r3, #30
 800ce18:	d413      	bmi.n	800ce42 <_printf_i+0x232>
 800ce1a:	68e0      	ldr	r0, [r4, #12]
 800ce1c:	9b03      	ldr	r3, [sp, #12]
 800ce1e:	4298      	cmp	r0, r3
 800ce20:	bfb8      	it	lt
 800ce22:	4618      	movlt	r0, r3
 800ce24:	e7a6      	b.n	800cd74 <_printf_i+0x164>
 800ce26:	2301      	movs	r3, #1
 800ce28:	4632      	mov	r2, r6
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	47d0      	blx	sl
 800ce30:	3001      	adds	r0, #1
 800ce32:	d09d      	beq.n	800cd70 <_printf_i+0x160>
 800ce34:	3501      	adds	r5, #1
 800ce36:	68e3      	ldr	r3, [r4, #12]
 800ce38:	9903      	ldr	r1, [sp, #12]
 800ce3a:	1a5b      	subs	r3, r3, r1
 800ce3c:	42ab      	cmp	r3, r5
 800ce3e:	dcf2      	bgt.n	800ce26 <_printf_i+0x216>
 800ce40:	e7eb      	b.n	800ce1a <_printf_i+0x20a>
 800ce42:	2500      	movs	r5, #0
 800ce44:	f104 0619 	add.w	r6, r4, #25
 800ce48:	e7f5      	b.n	800ce36 <_printf_i+0x226>
 800ce4a:	bf00      	nop
 800ce4c:	0800ec55 	.word	0x0800ec55
 800ce50:	0800ec66 	.word	0x0800ec66

0800ce54 <__sflush_r>:
 800ce54:	898a      	ldrh	r2, [r1, #12]
 800ce56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	0710      	lsls	r0, r2, #28
 800ce5e:	460c      	mov	r4, r1
 800ce60:	d458      	bmi.n	800cf14 <__sflush_r+0xc0>
 800ce62:	684b      	ldr	r3, [r1, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dc05      	bgt.n	800ce74 <__sflush_r+0x20>
 800ce68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	dc02      	bgt.n	800ce74 <__sflush_r+0x20>
 800ce6e:	2000      	movs	r0, #0
 800ce70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce76:	2e00      	cmp	r6, #0
 800ce78:	d0f9      	beq.n	800ce6e <__sflush_r+0x1a>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce80:	682f      	ldr	r7, [r5, #0]
 800ce82:	6a21      	ldr	r1, [r4, #32]
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	d032      	beq.n	800ceee <__sflush_r+0x9a>
 800ce88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce8a:	89a3      	ldrh	r3, [r4, #12]
 800ce8c:	075a      	lsls	r2, r3, #29
 800ce8e:	d505      	bpl.n	800ce9c <__sflush_r+0x48>
 800ce90:	6863      	ldr	r3, [r4, #4]
 800ce92:	1ac0      	subs	r0, r0, r3
 800ce94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce96:	b10b      	cbz	r3, 800ce9c <__sflush_r+0x48>
 800ce98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce9a:	1ac0      	subs	r0, r0, r3
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4602      	mov	r2, r0
 800cea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cea2:	6a21      	ldr	r1, [r4, #32]
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b0      	blx	r6
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	d106      	bne.n	800cebc <__sflush_r+0x68>
 800ceae:	6829      	ldr	r1, [r5, #0]
 800ceb0:	291d      	cmp	r1, #29
 800ceb2:	d82b      	bhi.n	800cf0c <__sflush_r+0xb8>
 800ceb4:	4a29      	ldr	r2, [pc, #164]	; (800cf5c <__sflush_r+0x108>)
 800ceb6:	410a      	asrs	r2, r1
 800ceb8:	07d6      	lsls	r6, r2, #31
 800ceba:	d427      	bmi.n	800cf0c <__sflush_r+0xb8>
 800cebc:	2200      	movs	r2, #0
 800cebe:	6062      	str	r2, [r4, #4]
 800cec0:	04d9      	lsls	r1, r3, #19
 800cec2:	6922      	ldr	r2, [r4, #16]
 800cec4:	6022      	str	r2, [r4, #0]
 800cec6:	d504      	bpl.n	800ced2 <__sflush_r+0x7e>
 800cec8:	1c42      	adds	r2, r0, #1
 800ceca:	d101      	bne.n	800ced0 <__sflush_r+0x7c>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b903      	cbnz	r3, 800ced2 <__sflush_r+0x7e>
 800ced0:	6560      	str	r0, [r4, #84]	; 0x54
 800ced2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ced4:	602f      	str	r7, [r5, #0]
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d0c9      	beq.n	800ce6e <__sflush_r+0x1a>
 800ceda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cede:	4299      	cmp	r1, r3
 800cee0:	d002      	beq.n	800cee8 <__sflush_r+0x94>
 800cee2:	4628      	mov	r0, r5
 800cee4:	f7ff fbea 	bl	800c6bc <_free_r>
 800cee8:	2000      	movs	r0, #0
 800ceea:	6360      	str	r0, [r4, #52]	; 0x34
 800ceec:	e7c0      	b.n	800ce70 <__sflush_r+0x1c>
 800ceee:	2301      	movs	r3, #1
 800cef0:	4628      	mov	r0, r5
 800cef2:	47b0      	blx	r6
 800cef4:	1c41      	adds	r1, r0, #1
 800cef6:	d1c8      	bne.n	800ce8a <__sflush_r+0x36>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0c5      	beq.n	800ce8a <__sflush_r+0x36>
 800cefe:	2b1d      	cmp	r3, #29
 800cf00:	d001      	beq.n	800cf06 <__sflush_r+0xb2>
 800cf02:	2b16      	cmp	r3, #22
 800cf04:	d101      	bne.n	800cf0a <__sflush_r+0xb6>
 800cf06:	602f      	str	r7, [r5, #0]
 800cf08:	e7b1      	b.n	800ce6e <__sflush_r+0x1a>
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf10:	81a3      	strh	r3, [r4, #12]
 800cf12:	e7ad      	b.n	800ce70 <__sflush_r+0x1c>
 800cf14:	690f      	ldr	r7, [r1, #16]
 800cf16:	2f00      	cmp	r7, #0
 800cf18:	d0a9      	beq.n	800ce6e <__sflush_r+0x1a>
 800cf1a:	0793      	lsls	r3, r2, #30
 800cf1c:	680e      	ldr	r6, [r1, #0]
 800cf1e:	bf08      	it	eq
 800cf20:	694b      	ldreq	r3, [r1, #20]
 800cf22:	600f      	str	r7, [r1, #0]
 800cf24:	bf18      	it	ne
 800cf26:	2300      	movne	r3, #0
 800cf28:	eba6 0807 	sub.w	r8, r6, r7
 800cf2c:	608b      	str	r3, [r1, #8]
 800cf2e:	f1b8 0f00 	cmp.w	r8, #0
 800cf32:	dd9c      	ble.n	800ce6e <__sflush_r+0x1a>
 800cf34:	6a21      	ldr	r1, [r4, #32]
 800cf36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf38:	4643      	mov	r3, r8
 800cf3a:	463a      	mov	r2, r7
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	47b0      	blx	r6
 800cf40:	2800      	cmp	r0, #0
 800cf42:	dc06      	bgt.n	800cf52 <__sflush_r+0xfe>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4a:	81a3      	strh	r3, [r4, #12]
 800cf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf50:	e78e      	b.n	800ce70 <__sflush_r+0x1c>
 800cf52:	4407      	add	r7, r0
 800cf54:	eba8 0800 	sub.w	r8, r8, r0
 800cf58:	e7e9      	b.n	800cf2e <__sflush_r+0xda>
 800cf5a:	bf00      	nop
 800cf5c:	dfbffffe 	.word	0xdfbffffe

0800cf60 <_fflush_r>:
 800cf60:	b538      	push	{r3, r4, r5, lr}
 800cf62:	690b      	ldr	r3, [r1, #16]
 800cf64:	4605      	mov	r5, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	b913      	cbnz	r3, 800cf70 <_fflush_r+0x10>
 800cf6a:	2500      	movs	r5, #0
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	bd38      	pop	{r3, r4, r5, pc}
 800cf70:	b118      	cbz	r0, 800cf7a <_fflush_r+0x1a>
 800cf72:	6a03      	ldr	r3, [r0, #32]
 800cf74:	b90b      	cbnz	r3, 800cf7a <_fflush_r+0x1a>
 800cf76:	f7ff fa75 	bl	800c464 <__sinit>
 800cf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d0f3      	beq.n	800cf6a <_fflush_r+0xa>
 800cf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf84:	07d0      	lsls	r0, r2, #31
 800cf86:	d404      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf88:	0599      	lsls	r1, r3, #22
 800cf8a:	d402      	bmi.n	800cf92 <_fflush_r+0x32>
 800cf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8e:	f7ff fb7e 	bl	800c68e <__retarget_lock_acquire_recursive>
 800cf92:	4628      	mov	r0, r5
 800cf94:	4621      	mov	r1, r4
 800cf96:	f7ff ff5d 	bl	800ce54 <__sflush_r>
 800cf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf9c:	07da      	lsls	r2, r3, #31
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	d4e4      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	059b      	lsls	r3, r3, #22
 800cfa6:	d4e1      	bmi.n	800cf6c <_fflush_r+0xc>
 800cfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfaa:	f7ff fb71 	bl	800c690 <__retarget_lock_release_recursive>
 800cfae:	e7dd      	b.n	800cf6c <_fflush_r+0xc>

0800cfb0 <__swbuf_r>:
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	460e      	mov	r6, r1
 800cfb4:	4614      	mov	r4, r2
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	b118      	cbz	r0, 800cfc2 <__swbuf_r+0x12>
 800cfba:	6a03      	ldr	r3, [r0, #32]
 800cfbc:	b90b      	cbnz	r3, 800cfc2 <__swbuf_r+0x12>
 800cfbe:	f7ff fa51 	bl	800c464 <__sinit>
 800cfc2:	69a3      	ldr	r3, [r4, #24]
 800cfc4:	60a3      	str	r3, [r4, #8]
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	071a      	lsls	r2, r3, #28
 800cfca:	d525      	bpl.n	800d018 <__swbuf_r+0x68>
 800cfcc:	6923      	ldr	r3, [r4, #16]
 800cfce:	b31b      	cbz	r3, 800d018 <__swbuf_r+0x68>
 800cfd0:	6823      	ldr	r3, [r4, #0]
 800cfd2:	6922      	ldr	r2, [r4, #16]
 800cfd4:	1a98      	subs	r0, r3, r2
 800cfd6:	6963      	ldr	r3, [r4, #20]
 800cfd8:	b2f6      	uxtb	r6, r6
 800cfda:	4283      	cmp	r3, r0
 800cfdc:	4637      	mov	r7, r6
 800cfde:	dc04      	bgt.n	800cfea <__swbuf_r+0x3a>
 800cfe0:	4621      	mov	r1, r4
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	f7ff ffbc 	bl	800cf60 <_fflush_r>
 800cfe8:	b9e0      	cbnz	r0, 800d024 <__swbuf_r+0x74>
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	3b01      	subs	r3, #1
 800cfee:	60a3      	str	r3, [r4, #8]
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	6022      	str	r2, [r4, #0]
 800cff6:	701e      	strb	r6, [r3, #0]
 800cff8:	6962      	ldr	r2, [r4, #20]
 800cffa:	1c43      	adds	r3, r0, #1
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d004      	beq.n	800d00a <__swbuf_r+0x5a>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	07db      	lsls	r3, r3, #31
 800d004:	d506      	bpl.n	800d014 <__swbuf_r+0x64>
 800d006:	2e0a      	cmp	r6, #10
 800d008:	d104      	bne.n	800d014 <__swbuf_r+0x64>
 800d00a:	4621      	mov	r1, r4
 800d00c:	4628      	mov	r0, r5
 800d00e:	f7ff ffa7 	bl	800cf60 <_fflush_r>
 800d012:	b938      	cbnz	r0, 800d024 <__swbuf_r+0x74>
 800d014:	4638      	mov	r0, r7
 800d016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d018:	4621      	mov	r1, r4
 800d01a:	4628      	mov	r0, r5
 800d01c:	f000 f806 	bl	800d02c <__swsetup_r>
 800d020:	2800      	cmp	r0, #0
 800d022:	d0d5      	beq.n	800cfd0 <__swbuf_r+0x20>
 800d024:	f04f 37ff 	mov.w	r7, #4294967295
 800d028:	e7f4      	b.n	800d014 <__swbuf_r+0x64>
	...

0800d02c <__swsetup_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4b2a      	ldr	r3, [pc, #168]	; (800d0d8 <__swsetup_r+0xac>)
 800d030:	4605      	mov	r5, r0
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	460c      	mov	r4, r1
 800d036:	b118      	cbz	r0, 800d040 <__swsetup_r+0x14>
 800d038:	6a03      	ldr	r3, [r0, #32]
 800d03a:	b90b      	cbnz	r3, 800d040 <__swsetup_r+0x14>
 800d03c:	f7ff fa12 	bl	800c464 <__sinit>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d046:	0718      	lsls	r0, r3, #28
 800d048:	d422      	bmi.n	800d090 <__swsetup_r+0x64>
 800d04a:	06d9      	lsls	r1, r3, #27
 800d04c:	d407      	bmi.n	800d05e <__swsetup_r+0x32>
 800d04e:	2309      	movs	r3, #9
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d056:	81a3      	strh	r3, [r4, #12]
 800d058:	f04f 30ff 	mov.w	r0, #4294967295
 800d05c:	e034      	b.n	800d0c8 <__swsetup_r+0x9c>
 800d05e:	0758      	lsls	r0, r3, #29
 800d060:	d512      	bpl.n	800d088 <__swsetup_r+0x5c>
 800d062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d064:	b141      	cbz	r1, 800d078 <__swsetup_r+0x4c>
 800d066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d06a:	4299      	cmp	r1, r3
 800d06c:	d002      	beq.n	800d074 <__swsetup_r+0x48>
 800d06e:	4628      	mov	r0, r5
 800d070:	f7ff fb24 	bl	800c6bc <_free_r>
 800d074:	2300      	movs	r3, #0
 800d076:	6363      	str	r3, [r4, #52]	; 0x34
 800d078:	89a3      	ldrh	r3, [r4, #12]
 800d07a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d07e:	81a3      	strh	r3, [r4, #12]
 800d080:	2300      	movs	r3, #0
 800d082:	6063      	str	r3, [r4, #4]
 800d084:	6923      	ldr	r3, [r4, #16]
 800d086:	6023      	str	r3, [r4, #0]
 800d088:	89a3      	ldrh	r3, [r4, #12]
 800d08a:	f043 0308 	orr.w	r3, r3, #8
 800d08e:	81a3      	strh	r3, [r4, #12]
 800d090:	6923      	ldr	r3, [r4, #16]
 800d092:	b94b      	cbnz	r3, 800d0a8 <__swsetup_r+0x7c>
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d09a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d09e:	d003      	beq.n	800d0a8 <__swsetup_r+0x7c>
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f000 f894 	bl	800d1d0 <__smakebuf_r>
 800d0a8:	89a0      	ldrh	r0, [r4, #12]
 800d0aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0ae:	f010 0301 	ands.w	r3, r0, #1
 800d0b2:	d00a      	beq.n	800d0ca <__swsetup_r+0x9e>
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	60a3      	str	r3, [r4, #8]
 800d0b8:	6963      	ldr	r3, [r4, #20]
 800d0ba:	425b      	negs	r3, r3
 800d0bc:	61a3      	str	r3, [r4, #24]
 800d0be:	6923      	ldr	r3, [r4, #16]
 800d0c0:	b943      	cbnz	r3, 800d0d4 <__swsetup_r+0xa8>
 800d0c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0c6:	d1c4      	bne.n	800d052 <__swsetup_r+0x26>
 800d0c8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ca:	0781      	lsls	r1, r0, #30
 800d0cc:	bf58      	it	pl
 800d0ce:	6963      	ldrpl	r3, [r4, #20]
 800d0d0:	60a3      	str	r3, [r4, #8]
 800d0d2:	e7f4      	b.n	800d0be <__swsetup_r+0x92>
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	e7f7      	b.n	800d0c8 <__swsetup_r+0x9c>
 800d0d8:	20000078 	.word	0x20000078

0800d0dc <_raise_r>:
 800d0dc:	291f      	cmp	r1, #31
 800d0de:	b538      	push	{r3, r4, r5, lr}
 800d0e0:	4604      	mov	r4, r0
 800d0e2:	460d      	mov	r5, r1
 800d0e4:	d904      	bls.n	800d0f0 <_raise_r+0x14>
 800d0e6:	2316      	movs	r3, #22
 800d0e8:	6003      	str	r3, [r0, #0]
 800d0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d0f2:	b112      	cbz	r2, 800d0fa <_raise_r+0x1e>
 800d0f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0f8:	b94b      	cbnz	r3, 800d10e <_raise_r+0x32>
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	f000 f830 	bl	800d160 <_getpid_r>
 800d100:	462a      	mov	r2, r5
 800d102:	4601      	mov	r1, r0
 800d104:	4620      	mov	r0, r4
 800d106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d10a:	f000 b817 	b.w	800d13c <_kill_r>
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d00a      	beq.n	800d128 <_raise_r+0x4c>
 800d112:	1c59      	adds	r1, r3, #1
 800d114:	d103      	bne.n	800d11e <_raise_r+0x42>
 800d116:	2316      	movs	r3, #22
 800d118:	6003      	str	r3, [r0, #0]
 800d11a:	2001      	movs	r0, #1
 800d11c:	e7e7      	b.n	800d0ee <_raise_r+0x12>
 800d11e:	2400      	movs	r4, #0
 800d120:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d124:	4628      	mov	r0, r5
 800d126:	4798      	blx	r3
 800d128:	2000      	movs	r0, #0
 800d12a:	e7e0      	b.n	800d0ee <_raise_r+0x12>

0800d12c <raise>:
 800d12c:	4b02      	ldr	r3, [pc, #8]	; (800d138 <raise+0xc>)
 800d12e:	4601      	mov	r1, r0
 800d130:	6818      	ldr	r0, [r3, #0]
 800d132:	f7ff bfd3 	b.w	800d0dc <_raise_r>
 800d136:	bf00      	nop
 800d138:	20000078 	.word	0x20000078

0800d13c <_kill_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4d07      	ldr	r5, [pc, #28]	; (800d15c <_kill_r+0x20>)
 800d140:	2300      	movs	r3, #0
 800d142:	4604      	mov	r4, r0
 800d144:	4608      	mov	r0, r1
 800d146:	4611      	mov	r1, r2
 800d148:	602b      	str	r3, [r5, #0]
 800d14a:	f7f5 ff38 	bl	8002fbe <_kill>
 800d14e:	1c43      	adds	r3, r0, #1
 800d150:	d102      	bne.n	800d158 <_kill_r+0x1c>
 800d152:	682b      	ldr	r3, [r5, #0]
 800d154:	b103      	cbz	r3, 800d158 <_kill_r+0x1c>
 800d156:	6023      	str	r3, [r4, #0]
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop
 800d15c:	2002b25c 	.word	0x2002b25c

0800d160 <_getpid_r>:
 800d160:	f7f5 bf25 	b.w	8002fae <_getpid>

0800d164 <_sbrk_r>:
 800d164:	b538      	push	{r3, r4, r5, lr}
 800d166:	4d06      	ldr	r5, [pc, #24]	; (800d180 <_sbrk_r+0x1c>)
 800d168:	2300      	movs	r3, #0
 800d16a:	4604      	mov	r4, r0
 800d16c:	4608      	mov	r0, r1
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	f7f5 ffac 	bl	80030cc <_sbrk>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_sbrk_r+0x1a>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_sbrk_r+0x1a>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	2002b25c 	.word	0x2002b25c

0800d184 <__swhatbuf_r>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	460c      	mov	r4, r1
 800d188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18c:	2900      	cmp	r1, #0
 800d18e:	b096      	sub	sp, #88	; 0x58
 800d190:	4615      	mov	r5, r2
 800d192:	461e      	mov	r6, r3
 800d194:	da0d      	bge.n	800d1b2 <__swhatbuf_r+0x2e>
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d19c:	f04f 0100 	mov.w	r1, #0
 800d1a0:	bf0c      	ite	eq
 800d1a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d1a6:	2340      	movne	r3, #64	; 0x40
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	6031      	str	r1, [r6, #0]
 800d1ac:	602b      	str	r3, [r5, #0]
 800d1ae:	b016      	add	sp, #88	; 0x58
 800d1b0:	bd70      	pop	{r4, r5, r6, pc}
 800d1b2:	466a      	mov	r2, sp
 800d1b4:	f000 f848 	bl	800d248 <_fstat_r>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	dbec      	blt.n	800d196 <__swhatbuf_r+0x12>
 800d1bc:	9901      	ldr	r1, [sp, #4]
 800d1be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d1c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d1c6:	4259      	negs	r1, r3
 800d1c8:	4159      	adcs	r1, r3
 800d1ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1ce:	e7eb      	b.n	800d1a8 <__swhatbuf_r+0x24>

0800d1d0 <__smakebuf_r>:
 800d1d0:	898b      	ldrh	r3, [r1, #12]
 800d1d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1d4:	079d      	lsls	r5, r3, #30
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	460c      	mov	r4, r1
 800d1da:	d507      	bpl.n	800d1ec <__smakebuf_r+0x1c>
 800d1dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1e0:	6023      	str	r3, [r4, #0]
 800d1e2:	6123      	str	r3, [r4, #16]
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	6163      	str	r3, [r4, #20]
 800d1e8:	b002      	add	sp, #8
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	ab01      	add	r3, sp, #4
 800d1ee:	466a      	mov	r2, sp
 800d1f0:	f7ff ffc8 	bl	800d184 <__swhatbuf_r>
 800d1f4:	9900      	ldr	r1, [sp, #0]
 800d1f6:	4605      	mov	r5, r0
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	f7ff facb 	bl	800c794 <_malloc_r>
 800d1fe:	b948      	cbnz	r0, 800d214 <__smakebuf_r+0x44>
 800d200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d204:	059a      	lsls	r2, r3, #22
 800d206:	d4ef      	bmi.n	800d1e8 <__smakebuf_r+0x18>
 800d208:	f023 0303 	bic.w	r3, r3, #3
 800d20c:	f043 0302 	orr.w	r3, r3, #2
 800d210:	81a3      	strh	r3, [r4, #12]
 800d212:	e7e3      	b.n	800d1dc <__smakebuf_r+0xc>
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	6020      	str	r0, [r4, #0]
 800d218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d21c:	81a3      	strh	r3, [r4, #12]
 800d21e:	9b00      	ldr	r3, [sp, #0]
 800d220:	6163      	str	r3, [r4, #20]
 800d222:	9b01      	ldr	r3, [sp, #4]
 800d224:	6120      	str	r0, [r4, #16]
 800d226:	b15b      	cbz	r3, 800d240 <__smakebuf_r+0x70>
 800d228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d22c:	4630      	mov	r0, r6
 800d22e:	f000 f81d 	bl	800d26c <_isatty_r>
 800d232:	b128      	cbz	r0, 800d240 <__smakebuf_r+0x70>
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	f023 0303 	bic.w	r3, r3, #3
 800d23a:	f043 0301 	orr.w	r3, r3, #1
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	431d      	orrs	r5, r3
 800d244:	81a5      	strh	r5, [r4, #12]
 800d246:	e7cf      	b.n	800d1e8 <__smakebuf_r+0x18>

0800d248 <_fstat_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	4d07      	ldr	r5, [pc, #28]	; (800d268 <_fstat_r+0x20>)
 800d24c:	2300      	movs	r3, #0
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	4611      	mov	r1, r2
 800d254:	602b      	str	r3, [r5, #0]
 800d256:	f7f5 ff11 	bl	800307c <_fstat>
 800d25a:	1c43      	adds	r3, r0, #1
 800d25c:	d102      	bne.n	800d264 <_fstat_r+0x1c>
 800d25e:	682b      	ldr	r3, [r5, #0]
 800d260:	b103      	cbz	r3, 800d264 <_fstat_r+0x1c>
 800d262:	6023      	str	r3, [r4, #0]
 800d264:	bd38      	pop	{r3, r4, r5, pc}
 800d266:	bf00      	nop
 800d268:	2002b25c 	.word	0x2002b25c

0800d26c <_isatty_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d06      	ldr	r5, [pc, #24]	; (800d288 <_isatty_r+0x1c>)
 800d270:	2300      	movs	r3, #0
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	602b      	str	r3, [r5, #0]
 800d278:	f7f5 ff10 	bl	800309c <_isatty>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	d102      	bne.n	800d286 <_isatty_r+0x1a>
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	b103      	cbz	r3, 800d286 <_isatty_r+0x1a>
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	bd38      	pop	{r3, r4, r5, pc}
 800d288:	2002b25c 	.word	0x2002b25c

0800d28c <_init>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr

0800d298 <_fini>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	bf00      	nop
 800d29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29e:	bc08      	pop	{r3}
 800d2a0:	469e      	mov	lr, r3
 800d2a2:	4770      	bx	lr
