
McDermott_Frank_RTOS_Lab7_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001610  0800c478  0800c478  0001c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da88  0800da88  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800da88  0800da88  0001da88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da90  0800da90  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da90  0800da90  0001da90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da94  0800da94  0001da94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800da98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0002b1bc  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2002b238  2002b238  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002571b  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005289  00000000  00000000  0004580a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000021d8  00000000  00000000  0004aa98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a04  00000000  00000000  0004cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007809  00000000  00000000  0004e674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000268fc  00000000  00000000  00055e7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fbc2c  00000000  00000000  0007c779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009894  00000000  00000000  001783a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ee  00000000  00000000  00181c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c460 	.word	0x0800c460

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800c460 	.word	0x0800c460

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2002a580 	.word	0x2002a580
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8000630:	f000 f80a 	bl	8000648 <Gyro_Power_On>
	osDelay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f005 f897 	bl	8005768 <osDelay>
	Gyro_Config_Regs();
 800063a:	f000 f885 	bl	8000748 <Gyro_Config_Regs>
	Gyro_Reboot();
 800063e:	f000 f847 	bl	80006d0 <Gyro_Reboot>


}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000656:	f000 f8ef 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800065a:	bf00      	nop
 800065c:	2102      	movs	r1, #2
 800065e:	481a      	ldr	r0, [pc, #104]	; (80006c8 <Gyro_Power_On+0x80>)
 8000660:	f002 fcce 	bl	8003000 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f8      	bne.n	800065c <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f915 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f8f7 	bl	8000868 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800067a:	f000 f8e9 	bl	8000850 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 800067e:	2320      	movs	r3, #32
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	b2db      	uxtb	r3, r3
 800068a:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 800068c:	f000 f8d4 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000690:	bf00      	nop
 8000692:	2102      	movs	r1, #2
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <Gyro_Power_On+0x80>)
 8000696:	f002 fcb3 	bl	8003000 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f8      	bne.n	8000692 <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f8fa 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 80006a8:	1d7b      	adds	r3, r7, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f8f6 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80006b0:	f000 f8ce 	bl	8000850 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <Gyro_Power_On+0x84>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d000      	beq.n	80006be <Gyro_Power_On+0x76>
	{
		while(1);
 80006bc:	e7fe      	b.n	80006bc <Gyro_Power_On+0x74>
	}
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020800 	.word	0x40020800
 80006cc:	20000098 	.word	0x20000098

080006d0 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 80006d6:	23a4      	movs	r3, #164	; 0xa4
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80006de:	f000 f8ab 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80006e2:	bf00      	nop
 80006e4:	2102      	movs	r1, #2
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <Gyro_Reboot+0x74>)
 80006e8:	f002 fc8a 	bl	8003000 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f8      	bne.n	80006e4 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f8d1 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f8b3 	bl	8000868 <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000702:	f000 f8a5 	bl	8000850 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 8000706:	2324      	movs	r3, #36	; 0x24
 8000708:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000710:	b2db      	uxtb	r3, r3
 8000712:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8000714:	f000 f890 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000718:	bf00      	nop
 800071a:	2102      	movs	r1, #2
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <Gyro_Reboot+0x74>)
 800071e:	f002 fc6f 	bl	8003000 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f8      	bne.n	800071a <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8b6 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000730:	1d7b      	adds	r3, r7, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f8b2 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000738:	f000 f88a 	bl	8000850 <Gyro_Slave_Disable>

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020800 	.word	0x40020800

08000748 <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 800074e:	2320      	movs	r3, #32
 8000750:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 8000752:	231a      	movs	r3, #26
 8000754:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000756:	f000 f86f 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800075a:	bf00      	nop
 800075c:	2102      	movs	r1, #2
 800075e:	482e      	ldr	r0, [pc, #184]	; (8000818 <Gyro_Config_Regs+0xd0>)
 8000760:	f002 fc4e 	bl	8003000 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f8      	bne.n	800075c <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f895 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000772:	1dbb      	adds	r3, r7, #6
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f891 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800077a:	f000 f869 	bl	8000850 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 800077e:	2323      	movs	r3, #35	; 0x23
 8000780:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 8000782:	2310      	movs	r3, #16
 8000784:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000786:	f000 f857 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800078a:	bf00      	nop
 800078c:	2102      	movs	r1, #2
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <Gyro_Config_Regs+0xd0>)
 8000790:	f002 fc36 	bl	8003000 <HAL_GPIO_ReadPin>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1f8      	bne.n	800078c <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	4618      	mov	r0, r3
 800079e:	f000 f87d 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f879 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80007aa:	f000 f851 	bl	8000850 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 80007ae:	2324      	movs	r3, #36	; 0x24
 80007b0:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 80007b2:	23c0      	movs	r3, #192	; 0xc0
 80007b4:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007b6:	f000 f83f 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007ba:	bf00      	nop
 80007bc:	2102      	movs	r1, #2
 80007be:	4816      	ldr	r0, [pc, #88]	; (8000818 <Gyro_Config_Regs+0xd0>)
 80007c0:	f002 fc1e 	bl	8003000 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f865 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f861 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80007da:	f000 f839 	bl	8000850 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 80007de:	232e      	movs	r3, #46	; 0x2e
 80007e0:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 80007e2:	2300      	movs	r3, #0
 80007e4:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007e6:	f000 f827 	bl	8000838 <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007ea:	bf00      	nop
 80007ec:	2102      	movs	r1, #2
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <Gyro_Config_Regs+0xd0>)
 80007f0:	f002 fc06 	bl	8003000 <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f8      	bne.n	80007ec <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 80007fa:	1dfb      	adds	r3, r7, #7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f84d 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000802:	1dbb      	adds	r3, r7, #6
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f849 	bl	800089c <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800080a:	f000 f821 	bl	8000850 <Gyro_Slave_Disable>




}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020800 	.word	0x40020800

0800081c <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <Gyro_HAL_Check+0x18>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d000      	beq.n	800082a <Gyro_HAL_Check+0xe>
		while(1);
 8000828:	e7fe      	b.n	8000828 <Gyro_HAL_Check+0xc>
	}
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	20000098 	.word	0x20000098

08000838 <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2102      	movs	r1, #2
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <Gyro_Slave_Enable+0x14>)
 8000842:	f002 fbf5 	bl	8003030 <HAL_GPIO_WritePin>
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020800 	.word	0x40020800

08000850 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2102      	movs	r1, #2
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <Gyro_Slave_Disable+0x14>)
 800085a:	f002 fbe9 	bl	8003030 <HAL_GPIO_WritePin>
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40020800 	.word	0x40020800

08000868 <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 8000870:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000874:	2201      	movs	r2, #1
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <Gyro_Receive_Data+0x2c>)
 800087a:	f004 f8be 	bl	80049fa <HAL_SPI_Receive>
 800087e:	4603      	mov	r3, r0
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <Gyro_Receive_Data+0x30>)
 8000884:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 8000886:	f7ff ffc9 	bl	800081c <Gyro_HAL_Check>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20025b2c 	.word	0x20025b2c
 8000898:	20000098 	.word	0x20000098

0800089c <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 80008a4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008a8:	2201      	movs	r2, #1
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	4806      	ldr	r0, [pc, #24]	; (80008c8 <Gyro_Transmit_Data+0x2c>)
 80008ae:	f003 ff68 	bl	8004782 <HAL_SPI_Transmit>
 80008b2:	4603      	mov	r3, r0
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <Gyro_Transmit_Data+0x30>)
 80008b8:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 80008ba:	f7ff ffaf 	bl	800081c <Gyro_HAL_Check>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20025b2c 	.word	0x20025b2c
 80008cc:	20000098 	.word	0x20000098

080008d0 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	; 0x30
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <LCD_GPIO_Init+0x174>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <LCD_GPIO_Init+0x174>)
 80008e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <LCD_GPIO_Init+0x174>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008ee:	61bb      	str	r3, [r7, #24]
 80008f0:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <LCD_GPIO_Init+0x174>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a52      	ldr	r2, [pc, #328]	; (8000a44 <LCD_GPIO_Init+0x174>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b4c      	ldr	r3, [pc, #304]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a4b      	ldr	r2, [pc, #300]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a44      	ldr	r2, [pc, #272]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b42      	ldr	r3, [pc, #264]	; (8000a44 <LCD_GPIO_Init+0x174>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b3e      	ldr	r3, [pc, #248]	; (8000a44 <LCD_GPIO_Init+0x174>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a3d      	ldr	r2, [pc, #244]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <LCD_GPIO_Init+0x174>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <LCD_GPIO_Init+0x174>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800099a:	f641 0358 	movw	r3, #6232	; 0x1858
 800099e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80009a8:	2302      	movs	r3, #2
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80009ac:	230e      	movs	r3, #14
 80009ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4824      	ldr	r0, [pc, #144]	; (8000a48 <LCD_GPIO_Init+0x178>)
 80009b8:	f002 f86a 	bl	8002a90 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80009bc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80009c0:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <LCD_GPIO_Init+0x17c>)
 80009ca:	f002 f861 	bl	8002a90 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80009ce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	481d      	ldr	r0, [pc, #116]	; (8000a50 <LCD_GPIO_Init+0x180>)
 80009dc:	f002 f858 	bl	8002a90 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80009e0:	2348      	movs	r3, #72	; 0x48
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	481a      	ldr	r0, [pc, #104]	; (8000a54 <LCD_GPIO_Init+0x184>)
 80009ec:	f002 f850 	bl	8002a90 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80009f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4816      	ldr	r0, [pc, #88]	; (8000a58 <LCD_GPIO_Init+0x188>)
 80009fe:	f002 f847 	bl	8002a90 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a02:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a06:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <LCD_GPIO_Init+0x18c>)
 8000a10:	f002 f83e 	bl	8002a90 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a14:	2303      	movs	r3, #3
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	4619      	mov	r1, r3
 8000a22:	480a      	ldr	r0, [pc, #40]	; (8000a4c <LCD_GPIO_Init+0x17c>)
 8000a24:	f002 f834 	bl	8002a90 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <LCD_GPIO_Init+0x18c>)
 8000a36:	f002 f82b 	bl	8002a90 <HAL_GPIO_Init>
}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	; 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40021400 	.word	0x40021400
 8000a5c:	40021800 	.word	0x40021800

08000a60 <LTCD__Init>:


void LTCD__Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8000a64:	4b2a      	ldr	r3, [pc, #168]	; (8000b10 <LTCD__Init+0xb0>)
 8000a66:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <LTCD__Init+0xb4>)
 8000a68:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000a6a:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <LTCD__Init+0xb0>)
 8000a6c:	2209      	movs	r2, #9
 8000a6e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <LTCD__Init+0xb0>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <LTCD__Init+0xb0>)
 8000a78:	221d      	movs	r2, #29
 8000a7a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <LTCD__Init+0xb0>)
 8000a7e:	2203      	movs	r2, #3
 8000a80:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <LTCD__Init+0xb0>)
 8000a84:	f240 120d 	movw	r2, #269	; 0x10d
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <LTCD__Init+0xb0>)
 8000a8c:	f240 1243 	movw	r2, #323	; 0x143
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <LTCD__Init+0xb0>)
 8000a94:	f240 1217 	movw	r2, #279	; 0x117
 8000a98:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <LTCD__Init+0xb0>)
 8000a9c:	f240 1247 	movw	r2, #327	; 0x147
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <LTCD__Init+0xb0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <LTCD__Init+0xb0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <LTCD__Init+0xb0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <LTCD__Init+0xb8>)
 8000abc:	2208      	movs	r2, #8
 8000abe:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <LTCD__Init+0xb8>)
 8000ac2:	22c0      	movs	r2, #192	; 0xc0
 8000ac4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <LTCD__Init+0xb8>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <LTCD__Init+0xb8>)
 8000ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000ad4:	4810      	ldr	r0, [pc, #64]	; (8000b18 <LTCD__Init+0xb8>)
 8000ad6:	f003 fbaf 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <LTCD__Init+0xb0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <LTCD__Init+0xb0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <LTCD__Init+0xb0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <LTCD__Init+0xb0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000af2:	f7ff feed 	bl	80008d0 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <LTCD__Init+0xb0>)
 8000af8:	f002 fc74 	bl	80033e4 <HAL_LTDC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b02:	f000 f88d 	bl	8000c20 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b06:	f000 f88e 	bl	8000c26 <ili9341_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000009c 	.word	0x2000009c
 8000b14:	40016800 	.word	0x40016800
 8000b18:	20000144 	.word	0x20000144

08000b1c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b2a:	23f0      	movs	r3, #240	; 0xf0
 8000b2c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b36:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000b3c:	23ff      	movs	r3, #255	; 0xff
 8000b3e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <LTCD_Layer_Init+0x78>)
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000b58:	23f0      	movs	r3, #240	; 0xf0
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000b5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000b74:	79fa      	ldrb	r2, [r7, #7]
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <LTCD_Layer_Init+0x7c>)
 8000b7e:	f002 fd01 	bl	8003584 <HAL_LTDC_ConfigLayer>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000b88:	f000 f84a 	bl	8000c20 <LCD_Error_Handler>
	}

}
 8000b8c:	bf00      	nop
 8000b8e:	3740      	adds	r7, #64	; 0x40
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200001d0 	.word	0x200001d0
 8000b98:	2000009c 	.word	0x2000009c

08000b9c <LCD_SetTextColor>:
	}

}

void LCD_SetTextColor(uint16_t Color)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <LCD_SetTextColor+0x1c>)
 8000ba8:	88fb      	ldrh	r3, [r7, #6]
 8000baa:	8013      	strh	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000000 	.word	0x20000000

08000bbc <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <LCD_SetFont+0x1c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000174 	.word	0x20000174

08000bdc <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10e      	bne.n	8000c10 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e007      	b.n	8000c08 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000bf8:	4908      	ldr	r1, [pc, #32]	; (8000c1c <LCD_Clear+0x40>)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	88ba      	ldrh	r2, [r7, #4]
 8000bfe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000c0e:	d3f3      	bcc.n	8000bf8 <LCD_Clear+0x1c>
		}
	}
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	200001d0 	.word	0x200001d0

08000c20 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8000c24:	e7fe      	b.n	8000c24 <LCD_Error_Handler+0x4>

08000c26 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000c2a:	f000 f9ff 	bl	800102c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000c2e:	20ca      	movs	r0, #202	; 0xca
 8000c30:	f000 f943 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000c34:	20c3      	movs	r0, #195	; 0xc3
 8000c36:	f000 f94d 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000c3a:	2008      	movs	r0, #8
 8000c3c:	f000 f94a 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000c40:	2050      	movs	r0, #80	; 0x50
 8000c42:	f000 f947 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000c46:	20cf      	movs	r0, #207	; 0xcf
 8000c48:	f000 f937 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f941 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000c52:	20c1      	movs	r0, #193	; 0xc1
 8000c54:	f000 f93e 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000c58:	2030      	movs	r0, #48	; 0x30
 8000c5a:	f000 f93b 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000c5e:	20ed      	movs	r0, #237	; 0xed
 8000c60:	f000 f92b 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000c64:	2064      	movs	r0, #100	; 0x64
 8000c66:	f000 f935 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000c6a:	2003      	movs	r0, #3
 8000c6c:	f000 f932 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000c70:	2012      	movs	r0, #18
 8000c72:	f000 f92f 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000c76:	2081      	movs	r0, #129	; 0x81
 8000c78:	f000 f92c 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000c7c:	20e8      	movs	r0, #232	; 0xe8
 8000c7e:	f000 f91c 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000c82:	2085      	movs	r0, #133	; 0x85
 8000c84:	f000 f926 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 f923 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000c8e:	2078      	movs	r0, #120	; 0x78
 8000c90:	f000 f920 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000c94:	20cb      	movs	r0, #203	; 0xcb
 8000c96:	f000 f910 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000c9a:	2039      	movs	r0, #57	; 0x39
 8000c9c:	f000 f91a 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000ca0:	202c      	movs	r0, #44	; 0x2c
 8000ca2:	f000 f917 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 f914 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000cac:	2034      	movs	r0, #52	; 0x34
 8000cae:	f000 f911 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f000 f90e 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000cb8:	20f7      	movs	r0, #247	; 0xf7
 8000cba:	f000 f8fe 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000cbe:	2020      	movs	r0, #32
 8000cc0:	f000 f908 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000cc4:	20ea      	movs	r0, #234	; 0xea
 8000cc6:	f000 f8f8 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f000 f902 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f8ff 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8000cd6:	20b1      	movs	r0, #177	; 0xb1
 8000cd8:	f000 f8ef 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f8f9 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000ce2:	201b      	movs	r0, #27
 8000ce4:	f000 f8f6 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000ce8:	20b6      	movs	r0, #182	; 0xb6
 8000cea:	f000 f8e6 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f000 f8f0 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8000cf4:	20a2      	movs	r0, #162	; 0xa2
 8000cf6:	f000 f8ed 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8000cfa:	20c0      	movs	r0, #192	; 0xc0
 8000cfc:	f000 f8dd 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d00:	2010      	movs	r0, #16
 8000d02:	f000 f8e7 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8000d06:	20c1      	movs	r0, #193	; 0xc1
 8000d08:	f000 f8d7 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8000d0c:	2010      	movs	r0, #16
 8000d0e:	f000 f8e1 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8000d12:	20c5      	movs	r0, #197	; 0xc5
 8000d14:	f000 f8d1 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8000d18:	2045      	movs	r0, #69	; 0x45
 8000d1a:	f000 f8db 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8000d1e:	2015      	movs	r0, #21
 8000d20:	f000 f8d8 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8000d24:	20c7      	movs	r0, #199	; 0xc7
 8000d26:	f000 f8c8 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8000d2a:	2090      	movs	r0, #144	; 0x90
 8000d2c:	f000 f8d2 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8000d30:	2036      	movs	r0, #54	; 0x36
 8000d32:	f000 f8c2 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8000d36:	20c8      	movs	r0, #200	; 0xc8
 8000d38:	f000 f8cc 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8000d3c:	20f2      	movs	r0, #242	; 0xf2
 8000d3e:	f000 f8bc 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f8c6 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8000d48:	20b0      	movs	r0, #176	; 0xb0
 8000d4a:	f000 f8b6 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8000d4e:	20c2      	movs	r0, #194	; 0xc2
 8000d50:	f000 f8c0 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8000d54:	20b6      	movs	r0, #182	; 0xb6
 8000d56:	f000 f8b0 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8000d5a:	200a      	movs	r0, #10
 8000d5c:	f000 f8ba 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8000d60:	20a7      	movs	r0, #167	; 0xa7
 8000d62:	f000 f8b7 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8000d66:	2027      	movs	r0, #39	; 0x27
 8000d68:	f000 f8b4 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000d6c:	2004      	movs	r0, #4
 8000d6e:	f000 f8b1 	bl	8000ed4 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8000d72:	202a      	movs	r0, #42	; 0x2a
 8000d74:	f000 f8a1 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f8ab 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f8a8 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 f8a5 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8000d8a:	20ef      	movs	r0, #239	; 0xef
 8000d8c:	f000 f8a2 	bl	8000ed4 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8000d90:	202b      	movs	r0, #43	; 0x2b
 8000d92:	f000 f892 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f89c 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f000 f899 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 f896 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8000da8:	203f      	movs	r0, #63	; 0x3f
 8000daa:	f000 f893 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8000dae:	20f6      	movs	r0, #246	; 0xf6
 8000db0:	f000 f883 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 f88d 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 f88a 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8000dc0:	2006      	movs	r0, #6
 8000dc2:	f000 f887 	bl	8000ed4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8000dc6:	202c      	movs	r0, #44	; 0x2c
 8000dc8:	f000 f877 	bl	8000eba <ili9341_Write_Reg>
  LCD_Delay(200);
 8000dcc:	20c8      	movs	r0, #200	; 0xc8
 8000dce:	f000 f9e9 	bl	80011a4 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8000dd2:	2026      	movs	r0, #38	; 0x26
 8000dd4:	f000 f871 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 f87b 	bl	8000ed4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8000dde:	20e0      	movs	r0, #224	; 0xe0
 8000de0:	f000 f86b 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8000de4:	200f      	movs	r0, #15
 8000de6:	f000 f875 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8000dea:	2029      	movs	r0, #41	; 0x29
 8000dec:	f000 f872 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8000df0:	2024      	movs	r0, #36	; 0x24
 8000df2:	f000 f86f 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000df6:	200c      	movs	r0, #12
 8000df8:	f000 f86c 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8000dfc:	200e      	movs	r0, #14
 8000dfe:	f000 f869 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e02:	2009      	movs	r0, #9
 8000e04:	f000 f866 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8000e08:	204e      	movs	r0, #78	; 0x4e
 8000e0a:	f000 f863 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000e0e:	2078      	movs	r0, #120	; 0x78
 8000e10:	f000 f860 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8000e14:	203c      	movs	r0, #60	; 0x3c
 8000e16:	f000 f85d 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8000e1a:	2009      	movs	r0, #9
 8000e1c:	f000 f85a 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8000e20:	2013      	movs	r0, #19
 8000e22:	f000 f857 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e26:	2005      	movs	r0, #5
 8000e28:	f000 f854 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8000e2c:	2017      	movs	r0, #23
 8000e2e:	f000 f851 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e32:	2011      	movs	r0, #17
 8000e34:	f000 f84e 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f84b 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8000e3e:	20e1      	movs	r0, #225	; 0xe1
 8000e40:	f000 f83b 	bl	8000eba <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f845 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8000e4a:	2016      	movs	r0, #22
 8000e4c:	f000 f842 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8000e50:	201b      	movs	r0, #27
 8000e52:	f000 f83f 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f000 f83c 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8000e5c:	2011      	movs	r0, #17
 8000e5e:	f000 f839 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8000e62:	2007      	movs	r0, #7
 8000e64:	f000 f836 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8000e68:	2031      	movs	r0, #49	; 0x31
 8000e6a:	f000 f833 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8000e6e:	2033      	movs	r0, #51	; 0x33
 8000e70:	f000 f830 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8000e74:	2042      	movs	r0, #66	; 0x42
 8000e76:	f000 f82d 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8000e7a:	2005      	movs	r0, #5
 8000e7c:	f000 f82a 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8000e80:	200c      	movs	r0, #12
 8000e82:	f000 f827 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8000e86:	200a      	movs	r0, #10
 8000e88:	f000 f824 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8000e8c:	2028      	movs	r0, #40	; 0x28
 8000e8e:	f000 f821 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8000e92:	202f      	movs	r0, #47	; 0x2f
 8000e94:	f000 f81e 	bl	8000ed4 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8000e98:	200f      	movs	r0, #15
 8000e9a:	f000 f81b 	bl	8000ed4 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8000e9e:	2011      	movs	r0, #17
 8000ea0:	f000 f80b 	bl	8000eba <ili9341_Write_Reg>
  LCD_Delay(200);
 8000ea4:	20c8      	movs	r0, #200	; 0xc8
 8000ea6:	f000 f97d 	bl	80011a4 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8000eaa:	2029      	movs	r0, #41	; 0x29
 8000eac:	f000 f805 	bl	8000eba <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8000eb0:	202c      	movs	r0, #44	; 0x2c
 8000eb2:	f000 f802 	bl	8000eba <ili9341_Write_Reg>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f94a 	bl	8001160 <LCD_IO_WriteReg>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f91b 	bl	800111c <LCD_IO_WriteData>
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000ef4:	4819      	ldr	r0, [pc, #100]	; (8000f5c <SPI_Init+0x6c>)
 8000ef6:	f004 f833 	bl	8004f60 <HAL_SPI_GetState>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d12b      	bne.n	8000f58 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <SPI_Init+0x6c>)
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <SPI_Init+0x70>)
 8000f04:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <SPI_Init+0x6c>)
 8000f08:	2218      	movs	r2, #24
 8000f0a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <SPI_Init+0x6c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SPI_Init+0x6c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <SPI_Init+0x6c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <SPI_Init+0x6c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <SPI_Init+0x6c>)
 8000f26:	2207      	movs	r2, #7
 8000f28:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <SPI_Init+0x6c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <SPI_Init+0x6c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <SPI_Init+0x6c>)
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <SPI_Init+0x6c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SPI_Init+0x6c>)
 8000f46:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f4a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <SPI_Init+0x6c>)
 8000f4e:	f000 f833 	bl	8000fb8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <SPI_Init+0x6c>)
 8000f54:	f003 fb64 	bl	8004620 <HAL_SPI_Init>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000178 	.word	0x20000178
 8000f60:	40015000 	.word	0x40015000

08000f64 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <SPI_Write+0x34>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	1db9      	adds	r1, r7, #6
 8000f78:	2201      	movs	r2, #1
 8000f7a:	4808      	ldr	r0, [pc, #32]	; (8000f9c <SPI_Write+0x38>)
 8000f7c:	f003 fc01 	bl	8004782 <HAL_SPI_Transmit>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8000f8a:	f000 f809 	bl	8000fa0 <SPI_Error>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	20000178 	.word	0x20000178

08000fa0 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <SPI_Error+0x14>)
 8000fa6:	f003 fbc4 	bl	8004732 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8000faa:	f7ff ffa1 	bl	8000ef0 <SPI_Init>
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000178 	.word	0x20000178

08000fb8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <SPI_MspInit+0x6c>)
 8000fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc8:	4a16      	ldr	r2, [pc, #88]	; (8001024 <SPI_MspInit+0x6c>)
 8000fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000fce:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <SPI_MspInit+0x6c>)
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <SPI_MspInit+0x6c>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <SPI_MspInit+0x6c>)
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <SPI_MspInit+0x6c>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8000ff8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001002:	2302      	movs	r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001006:	2301      	movs	r3, #1
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800100a:	2305      	movs	r3, #5
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <SPI_MspInit+0x70>)
 8001016:	f001 fd3b 	bl	8002a90 <HAL_GPIO_Init>
}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40021400 	.word	0x40021400

0800102c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001032:	4b36      	ldr	r3, [pc, #216]	; (800110c <LCD_IO_Init+0xe0>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d164      	bne.n	8001104 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <LCD_IO_Init+0xe0>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <LCD_IO_Init+0xe4>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a31      	ldr	r2, [pc, #196]	; (8001110 <LCD_IO_Init+0xe4>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <LCD_IO_Init+0xe4>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800105c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001060:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4827      	ldr	r0, [pc, #156]	; (8001114 <LCD_IO_Init+0xe8>)
 8001076:	f001 fd0b 	bl	8002a90 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <LCD_IO_Init+0xe4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <LCD_IO_Init+0xe4>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <LCD_IO_Init+0xe4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001096:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4619      	mov	r1, r3
 80010ae:	4819      	ldr	r0, [pc, #100]	; (8001114 <LCD_IO_Init+0xe8>)
 80010b0:	f001 fcee 	bl	8002a90 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <LCD_IO_Init+0xe4>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <LCD_IO_Init+0xe4>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6313      	str	r3, [r2, #48]	; 0x30
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <LCD_IO_Init+0xe4>)
 80010c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80010d0:	2304      	movs	r3, #4
 80010d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80010dc:	2302      	movs	r3, #2
 80010de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <LCD_IO_Init+0xec>)
 80010e8:	f001 fcd2 	bl	8002a90 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80010ec:	2200      	movs	r2, #0
 80010ee:	2104      	movs	r1, #4
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <LCD_IO_Init+0xec>)
 80010f2:	f001 ff9d 	bl	8003030 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80010f6:	2201      	movs	r2, #1
 80010f8:	2104      	movs	r1, #4
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <LCD_IO_Init+0xec>)
 80010fc:	f001 ff98 	bl	8003030 <HAL_GPIO_WritePin>

    SPI_Init();
 8001100:	f7ff fef6 	bl	8000ef0 <SPI_Init>
  }
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200259d0 	.word	0x200259d0
 8001110:	40023800 	.word	0x40023800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40020800 	.word	0x40020800

0800111c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112c:	480a      	ldr	r0, [pc, #40]	; (8001158 <LCD_IO_WriteData+0x3c>)
 800112e:	f001 ff7f 	bl	8003030 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001132:	2200      	movs	r2, #0
 8001134:	2104      	movs	r1, #4
 8001136:	4809      	ldr	r0, [pc, #36]	; (800115c <LCD_IO_WriteData+0x40>)
 8001138:	f001 ff7a 	bl	8003030 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff10 	bl	8000f64 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001144:	2201      	movs	r2, #1
 8001146:	2104      	movs	r1, #4
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <LCD_IO_WriteData+0x40>)
 800114a:	f001 ff71 	bl	8003030 <HAL_GPIO_WritePin>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40020800 	.word	0x40020800

08001160 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	480a      	ldr	r0, [pc, #40]	; (800119c <LCD_IO_WriteReg+0x3c>)
 8001172:	f001 ff5d 	bl	8003030 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <LCD_IO_WriteReg+0x40>)
 800117c:	f001 ff58 	bl	8003030 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff feed 	bl	8000f64 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800118a:	2201      	movs	r2, #1
 800118c:	2104      	movs	r1, #4
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <LCD_IO_WriteReg+0x40>)
 8001190:	f001 ff4e 	bl	8003030 <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40020800 	.word	0x40020800

080011a4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f004 fadb 	bl	8005768 <osDelay>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <appInit>:

/*
 * @brief Initialize the application
 */
void appInit(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
	// Initialize Tasks, Timers, and ITC structures
	initTimers();
 80011be:	f000 f831 	bl	8001224 <initTimers>

	initSempahores();
 80011c2:	f000 f853 	bl	800126c <initSempahores>
	initMutexes();
 80011c6:	f000 f873 	bl	80012b0 <initMutexes>
	initEventFlags();
 80011ca:	f000 f891 	bl	80012f0 <initEventFlags>

	// Initialize the LTCD
	lcdInit();
 80011ce:	f000 f8af 	bl	8001330 <lcdInit>

	// Initialize the Gyro
	Gyro_Init();
 80011d2:	f7ff fa2b 	bl	800062c <Gyro_Init>

	// Start timers
	initTasks();
 80011d6:	f000 f803 	bl	80011e0 <initTasks>
//	startTimers();
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <initTasks>:

/*
 * @brief Initialize all tasks
 */
void initTasks(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	// Create new task threads
	speedSetpointTaskID = osThreadNew(speedSetpointTask, NULL, &speedSetpointTaskAttr);
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <initTasks+0x2c>)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <initTasks+0x30>)
 80011ea:	f004 fa2b 	bl	8005644 <osThreadNew>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4a08      	ldr	r2, [pc, #32]	; (8001214 <initTasks+0x34>)
 80011f2:	6013      	str	r3, [r2, #0]
	lcdDisplayTaskID = osThreadNew(lcdDisplayTask, NULL, &lcdDisplayTaskAttr);
	ledOutputTaskID = osThreadNew(ledOutputTask, NULL, &ledOutputTaskAttr);
	#endif

	// Verify that all task threads were created successfully
	assert(speedSetpointTaskID != NULL);
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <initTasks+0x34>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d105      	bne.n	8001208 <initTasks+0x28>
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <initTasks+0x38>)
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <initTasks+0x3c>)
 8001200:	21d1      	movs	r1, #209	; 0xd1
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <initTasks+0x40>)
 8001204:	f00a f96e 	bl	800b4e4 <__assert_func>
	assert(vehicleDirectionTaskID != NULL);
	assert(vehicleMonitorTaskID != NULL);
	assert(lcdDisplayTaskID != NULL);
	assert(ledOutputTaskID != NULL);
	#endif
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	0800c710 	.word	0x0800c710
 8001210:	08001429 	.word	0x08001429
 8001214:	200259d8 	.word	0x200259d8
 8001218:	0800c4d8 	.word	0x0800c4d8
 800121c:	0800c774 	.word	0x0800c774
 8001220:	0800c4f4 	.word	0x0800c4f4

08001224 <initTimers>:

/*
 * @brief Initalize app timers
 */
void initTimers(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	// Create timers
	holdButtonTimerID = osTimerNew(holdButtonTimerCallback, osTimerOnce, NULL, &holdButtonTimerAttr);
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <initTimers+0x30>)
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <initTimers+0x34>)
 8001230:	f004 faca 	bl	80057c8 <osTimerNew>
 8001234:	4603      	mov	r3, r0
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <initTimers+0x38>)
 8001238:	6013      	str	r3, [r2, #0]
	lcdDisplayWakeupTimerID = osTimerNew(lcdDisplayWakeupTimerCallback, osTimerPeriodic, NULL, &lcdDisplayWakeupTimerAttr);
	directionAlertTimerID = osTimerNew(directionAlertTimerCallback, osTimerOnce, NULL, &directionAlertTimerAttr);
	#endif

	// Verify each of the timers was setup properly
	assert(holdButtonTimerID != NULL);
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <initTimers+0x38>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d105      	bne.n	800124e <initTimers+0x2a>
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <initTimers+0x3c>)
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <initTimers+0x40>)
 8001246:	21eb      	movs	r1, #235	; 0xeb
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <initTimers+0x44>)
 800124a:	f00a f94b 	bl	800b4e4 <__assert_func>
	#ifdef DEBUGGING
	assert(vehicleDirWakeupTimerID != NULL);
	assert(lcdDisplayWakeupTimerID != NULL);
	assert(directionAlertTimerID != NULL);
	#endif
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	0800c734 	.word	0x0800c734
 8001258:	08001515 	.word	0x08001515
 800125c:	200259dc 	.word	0x200259dc
 8001260:	0800c508 	.word	0x0800c508
 8001264:	0800c780 	.word	0x0800c780
 8001268:	0800c4f4 	.word	0x0800c4f4

0800126c <initSempahores>:

/*
 * @brief Initialize app semaphores
 */
void initSempahores(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	// Create new app semaphores
	buttonStateSemaphorID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <initSempahores+0x30>)
 8001272:	2100      	movs	r1, #0
 8001274:	2001      	movs	r0, #1
 8001276:	f004 fd35 	bl	8005ce4 <osSemaphoreNew>
 800127a:	4603      	mov	r3, r0
 800127c:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <initSempahores+0x34>)
 800127e:	6013      	str	r3, [r2, #0]
	lcdDisplaySemaphoreID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
										   &lcdDisplaySemaphoreAttr);
	#endif

	// Verify each semaphore was initialized sucessfully
	assert(buttonStateSemaphorID != NULL);
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <initSempahores+0x34>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d106      	bne.n	8001296 <initSempahores+0x2a>
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <initSempahores+0x38>)
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <initSempahores+0x3c>)
 800128c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <initSempahores+0x40>)
 8001292:	f00a f927 	bl	800b4e4 <__assert_func>
	#ifdef DEBUGGING
	assert(vehicleDirSemaphoreID != NULL);
	assert(lcdDisplaySemaphoreID != NULL);
	#endif
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	0800c744 	.word	0x0800c744
 80012a0:	200259e0 	.word	0x200259e0
 80012a4:	0800c524 	.word	0x0800c524
 80012a8:	0800c78c 	.word	0x0800c78c
 80012ac:	0800c4f4 	.word	0x0800c4f4

080012b0 <initMutexes>:

/*
 * @brief Initialize app mutexes
 */
void initMutexes(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	// Create app mutexes
	speedDataMutexID = osMutexNew(&speedDataMutexAttr);
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <initMutexes+0x2c>)
 80012b6:	f004 fc07 	bl	8005ac8 <osMutexNew>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <initMutexes+0x30>)
 80012be:	6013      	str	r3, [r2, #0]
	#ifdef DEBUGGING
	vehicleDirDataMutexID = osMutexNew(&vehicleDirDataMutexAttr);
	#endif

	// Verifiy that the mutexes were created successfully
	assert(speedDataMutexID != NULL);
 80012c0:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <initMutexes+0x30>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d106      	bne.n	80012d6 <initMutexes+0x26>
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <initMutexes+0x34>)
 80012ca:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <initMutexes+0x38>)
 80012cc:	f240 111b 	movw	r1, #283	; 0x11b
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <initMutexes+0x3c>)
 80012d2:	f00a f907 	bl	800b4e4 <__assert_func>

	#ifdef DEBUGGING
	assert(vehicleDirDataMutexID != NULL);
	#endif
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	0800c754 	.word	0x0800c754
 80012e0:	200259e4 	.word	0x200259e4
 80012e4:	0800c544 	.word	0x0800c544
 80012e8:	0800c79c 	.word	0x0800c79c
 80012ec:	0800c4f4 	.word	0x0800c4f4

080012f0 <initEventFlags>:

/*
 * @brief Initialize app event flags
 */
void initEventFlags(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	// Create app event flags
	vehicleMonitorEventFlagID = osEventFlagsNew(&vehicleMonitorEventFlagAttr);
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <initEventFlags+0x2c>)
 80012f6:	f004 fb64 	bl	80059c2 <osEventFlagsNew>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <initEventFlags+0x30>)
 80012fe:	6013      	str	r3, [r2, #0]
	#ifdef DEBUGGING
	ledOutputEventFlagID = osEventFlagsNew(&ledOutputEventFlagAttr);
	#endif

	// Verify that the event flags were created successfully
	assert(vehicleMonitorEventFlagID != NULL);
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <initEventFlags+0x30>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d106      	bne.n	8001316 <initEventFlags+0x26>
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <initEventFlags+0x34>)
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <initEventFlags+0x38>)
 800130c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <initEventFlags+0x3c>)
 8001312:	f00a f8e7 	bl	800b4e4 <__assert_func>

	#ifdef DEBUGGING
	assert(ledOutputEventFlagID != NULL);
	#endif
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	0800c764 	.word	0x0800c764
 8001320:	200259e8 	.word	0x200259e8
 8001324:	0800c560 	.word	0x0800c560
 8001328:	0800c7a8 	.word	0x0800c7a8
 800132c:	0800c4f4 	.word	0x0800c4f4

08001330 <lcdInit>:

/*
 * @brief Initialize the LCD
 */
void lcdInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	LTCD__Init();
 8001334:	f7ff fb94 	bl	8000a60 <LTCD__Init>
	LTCD_Layer_Init(0);
 8001338:	2000      	movs	r0, #0
 800133a:	f7ff fbef 	bl	8000b1c <LTCD_Layer_Init>

	LCD_Clear(0,LCD_COLOR_CYAN);
 800133e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fc4a 	bl	8000bdc <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001348:	2000      	movs	r0, #0
 800134a:	f7ff fc27 	bl	8000b9c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800134e:	4802      	ldr	r0, [pc, #8]	; (8001358 <lcdInit+0x28>)
 8001350:	f7ff fc34 	bl	8000bbc <LCD_SetFont>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000008 	.word	0x20000008

0800135c <updateVehicleSpeedData>:

/*
 *
 */
void updateVehicleSpeedData(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
	// Since the button was pressed, accelerate by 5
	int acceleration = 5;
 8001362:	2305      	movs	r3, #5
 8001364:	60fb      	str	r3, [r7, #12]

	// If the button was held sufficiently long (1 second), flip the sign
	// of acceleration (from 5 to -5) so signal deceleration
	if(buttonHeld == true) { buttonHeld = false; acceleration *= -1; }
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <updateVehicleSpeedData+0xb4>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <updateVehicleSpeedData+0x20>
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <updateVehicleSpeedData+0xb4>)
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	425b      	negs	r3, r3
 800137a:	60fb      	str	r3, [r7, #12]

	// Acquire the speed data mutex to set the new speed data
	osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 800137c:	4b25      	ldr	r3, [pc, #148]	; (8001414 <updateVehicleSpeedData+0xb8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	4618      	mov	r0, r3
 8001386:	f004 fc25 	bl	8005bd4 <osMutexAcquire>
 800138a:	60b8      	str	r0, [r7, #8]
	assert(mutexStatus == osOK);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <updateVehicleSpeedData+0x44>
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <updateVehicleSpeedData+0xbc>)
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <updateVehicleSpeedData+0xc0>)
 8001396:	f240 1165 	movw	r1, #357	; 0x165
 800139a:	4821      	ldr	r0, [pc, #132]	; (8001420 <updateVehicleSpeedData+0xc4>)
 800139c:	f00a f8a2 	bl	800b4e4 <__assert_func>

	// Update vehicle speed
	uint8_t currentSpeed = speedData.speed;
 80013a0:	4b20      	ldr	r3, [pc, #128]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	71fb      	strb	r3, [r7, #7]

	// Update vehicle speed
	// NOTE: Speed should never be negative
	if((currentSpeed + acceleration) < 0){ speedData.speed = 0; }
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	da03      	bge.n	80013b8 <updateVehicleSpeedData+0x5c>
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	701a      	strb	r2, [r3, #0]
 80013b6:	e007      	b.n	80013c8 <updateVehicleSpeedData+0x6c>
	else { speedData.speed += acceleration; }
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013ba:	781a      	ldrb	r2, [r3, #0]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013c6:	701a      	strb	r2, [r3, #0]

	// Update vehicle increment/decrement counts
	if(acceleration > 0) { speedData.speedIncrementCount++; }
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dd06      	ble.n	80013dc <updateVehicleSpeedData+0x80>
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013d8:	705a      	strb	r2, [r3, #1]
 80013da:	e005      	b.n	80013e8 <updateVehicleSpeedData+0x8c>
	else { speedData.speedDecrementCount++; }
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013de:	789b      	ldrb	r3, [r3, #2]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <updateVehicleSpeedData+0xc8>)
 80013e6:	709a      	strb	r2, [r3, #2]


	// speedData updated, release the mutex
	mutexStatus = osMutexRelease(speedDataMutexID);
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <updateVehicleSpeedData+0xb8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f004 fc3c 	bl	8005c6a <osMutexRelease>
 80013f2:	60b8      	str	r0, [r7, #8]
	assert(mutexStatus == osOK);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <updateVehicleSpeedData+0xac>
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <updateVehicleSpeedData+0xbc>)
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <updateVehicleSpeedData+0xc0>)
 80013fe:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8001402:	4807      	ldr	r0, [pc, #28]	; (8001420 <updateVehicleSpeedData+0xc4>)
 8001404:	f00a f86e 	bl	800b4e4 <__assert_func>
}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200259ec 	.word	0x200259ec
 8001414:	200259e4 	.word	0x200259e4
 8001418:	0800c584 	.word	0x0800c584
 800141c:	0800c7b8 	.word	0x0800c7b8
 8001420:	0800c4f4 	.word	0x0800c4f4
 8001424:	200259d4 	.word	0x200259d4

08001428 <speedSetpointTask>:
 * 			signal this change to the Vehicle Monitor Task.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void speedSetpointTask(void* arg)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Acquire the button state sempahore to wake up the task
		osStatus_t semaphoreStatus = osSemaphoreAcquire(buttonStateSemaphorID, osWaitForever);
 8001430:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <speedSetpointTask+0xcc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fcdd 	bl	8005df8 <osSemaphoreAcquire>
 800143e:	6178      	str	r0, [r7, #20]
		assert(semaphoreStatus == osOK);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <speedSetpointTask+0x2c>
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <speedSetpointTask+0xd0>)
 8001448:	4a2c      	ldr	r2, [pc, #176]	; (80014fc <speedSetpointTask+0xd4>)
 800144a:	f240 210f 	movw	r1, #527	; 0x20f
 800144e:	482c      	ldr	r0, [pc, #176]	; (8001500 <speedSetpointTask+0xd8>)
 8001450:	f00a f848 	bl	800b4e4 <__assert_func>

		// Start the oneshot hold button timer
		osStatus_t status = osTimerStart(holdButtonTimerID, HOLD_BTN_TIMER_TICKS_3S);
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <speedSetpointTask+0xdc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800145c:	4618      	mov	r0, r3
 800145e:	f004 fa2f 	bl	80058c0 <osTimerStart>
 8001462:	6138      	str	r0, [r7, #16]
		assert(status == osOK);
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <speedSetpointTask+0x50>
 800146a:	4b27      	ldr	r3, [pc, #156]	; (8001508 <speedSetpointTask+0xe0>)
 800146c:	4a23      	ldr	r2, [pc, #140]	; (80014fc <speedSetpointTask+0xd4>)
 800146e:	f240 2113 	movw	r1, #531	; 0x213
 8001472:	4823      	ldr	r0, [pc, #140]	; (8001500 <speedSetpointTask+0xd8>)
 8001474:	f00a f836 	bl	800b4e4 <__assert_func>

		// Pend on the button state semaphore (wait for the button to be released)
		semaphoreStatus = osSemaphoreAcquire(buttonStateSemaphorID, osWaitForever);
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <speedSetpointTask+0xcc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	4618      	mov	r0, r3
 8001482:	f004 fcb9 	bl	8005df8 <osSemaphoreAcquire>
 8001486:	6178      	str	r0, [r7, #20]
		assert(semaphoreStatus == osOK);
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <speedSetpointTask+0x74>
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <speedSetpointTask+0xd0>)
 8001490:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <speedSetpointTask+0xd4>)
 8001492:	f240 2117 	movw	r1, #535	; 0x217
 8001496:	481a      	ldr	r0, [pc, #104]	; (8001500 <speedSetpointTask+0xd8>)
 8001498:	f00a f824 	bl	800b4e4 <__assert_func>

		if(osTimerIsRunning(holdButtonTimerID) == true)
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <speedSetpointTask+0xdc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f004 fa72 	bl	800598a <osTimerIsRunning>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10f      	bne.n	80014cc <speedSetpointTask+0xa4>
		{
			status = osTimerStop(holdButtonTimerID);
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <speedSetpointTask+0xdc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fa33 	bl	800591c <osTimerStop>
 80014b6:	6138      	str	r0, [r7, #16]
			assert(status == osOK);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d006      	beq.n	80014cc <speedSetpointTask+0xa4>
 80014be:	4b12      	ldr	r3, [pc, #72]	; (8001508 <speedSetpointTask+0xe0>)
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <speedSetpointTask+0xd4>)
 80014c2:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <speedSetpointTask+0xd8>)
 80014c8:	f00a f80c 	bl	800b4e4 <__assert_func>
		}

		updateVehicleSpeedData();
 80014cc:	f7ff ff46 	bl	800135c <updateVehicleSpeedData>

		// Raise the speed update event flag to signal to the Vehicle Monitor
		// Task that the speed has been updated
		uint32_t flags = osEventFlagsSet(vehicleMonitorEventFlagID, speedUpdateEventFlag);
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <speedSetpointTask+0xe4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2108      	movs	r1, #8
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 fab2 	bl	8005a40 <osEventFlagsSet>
 80014dc:	60f8      	str	r0, [r7, #12]

		// Verify that the event flag was set successfully
		assert(flags == speedUpdateEventFlag);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d0a5      	beq.n	8001430 <speedSetpointTask+0x8>
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <speedSetpointTask+0xe8>)
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <speedSetpointTask+0xd4>)
 80014e8:	f240 2126 	movw	r1, #550	; 0x226
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <speedSetpointTask+0xd8>)
 80014ee:	f009 fff9 	bl	800b4e4 <__assert_func>
 80014f2:	bf00      	nop
 80014f4:	200259e0 	.word	0x200259e0
 80014f8:	0800c5f8 	.word	0x0800c5f8
 80014fc:	0800c7d0 	.word	0x0800c7d0
 8001500:	0800c4f4 	.word	0x0800c4f4
 8001504:	200259dc 	.word	0x200259dc
 8001508:	0800c610 	.word	0x0800c610
 800150c:	200259e8 	.word	0x200259e8
 8001510:	0800c620 	.word	0x0800c620

08001514 <holdButtonTimerCallback>:
 * 			was held for more than 1 second.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void holdButtonTimerCallback(void* arg)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	SEGGER_SYSVIEW_RecordEnterTimer((uint32_t)holdButtonTimerID);
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <holdButtonTimerCallback+0x24>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f009 fb4b 	bl	800abbc <SEGGER_SYSVIEW_RecordEnterTimer>

	// Notify the speedSetpoint task that the button was held
	buttonHeld = true;
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <holdButtonTimerCallback+0x28>)
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]

	SEGGER_SYSVIEW_RecordExitTimer();
 800152c:	f009 fb86 	bl	800ac3c <SEGGER_SYSVIEW_RecordExitTimer>
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200259dc 	.word	0x200259dc
 800153c:	200259ec 	.word	0x200259ec

08001540 <EXTI0_IRQHandler>:
 * 			post on the Button State Semaphore inorder to wake up the
 * 			Speed Setpoint Task. Toggles the buttonPressed global variable
 * 			on press/release.
 */
void EXTI0_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	// Disable interrupts
	HAL_NVIC_DisableIRQ(BUTTON_IRQn);
 8001546:	2006      	movs	r0, #6
 8001548:	f001 f9ad 	bl	80028a6 <HAL_NVIC_DisableIRQ>
	SEGGER_SYSVIEW_RecordEnterISR();
 800154c:	f009 fad8 	bl	800ab00 <SEGGER_SYSVIEW_RecordEnterISR>

	// Clear interrupt flag
	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_PIN);
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <EXTI0_IRQHandler+0x48>)
 8001552:	2201      	movs	r2, #1
 8001554:	615a      	str	r2, [r3, #20]

	// POST on the button state sempahore
	osStatus_t status = osSemaphoreRelease(buttonStateSemaphorID);
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <EXTI0_IRQHandler+0x4c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fc9e 	bl	8005e9c <osSemaphoreRelease>
 8001560:	6078      	str	r0, [r7, #4]
	assert(status == osOK);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <EXTI0_IRQHandler+0x36>
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <EXTI0_IRQHandler+0x50>)
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <EXTI0_IRQHandler+0x54>)
 800156c:	f240 31b5 	movw	r1, #949	; 0x3b5
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <EXTI0_IRQHandler+0x58>)
 8001572:	f009 ffb7 	bl	800b4e4 <__assert_func>


	SEGGER_SYSVIEW_RecordExitISR();
 8001576:	f009 fb05 	bl	800ab84 <SEGGER_SYSVIEW_RecordExitISR>

	// Re-enable interrupts
	HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 800157a:	2006      	movs	r0, #6
 800157c:	f001 f985 	bl	800288a <HAL_NVIC_EnableIRQ>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40013c00 	.word	0x40013c00
 800158c:	200259e0 	.word	0x200259e0
 8001590:	0800c610 	.word	0x0800c610
 8001594:	0800c7e4 	.word	0x0800c7e4
 8001598:	0800c4f4 	.word	0x0800c4f4

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b092      	sub	sp, #72	; 0x48
 80015f4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <systemClockOverride+0x7c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a1b      	ldr	r2, [pc, #108]	; (800166c <systemClockOverride+0x7c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <systemClockOverride+0x7c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001612:	2301      	movs	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161c:	2302      	movs	r3, #2
 800161e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001620:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001626:	2308      	movs	r3, #8
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800162a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001634:	2307      	movs	r3, #7
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4618      	mov	r0, r3
 800163c:	f002 f978 	bl	8003930 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001640:	230f      	movs	r3, #15
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001644:	2302      	movs	r3, #2
 8001646:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800164c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001650:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001658:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800165c:	2105      	movs	r1, #5
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fbde 	bl	8003e20 <HAL_RCC_ClockConfig>
}
 8001664:	bf00      	nop
 8001666:	3748      	adds	r7, #72	; 0x48
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800

08001670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001674:	f000 ff7c 	bl	8002570 <HAL_Init>
  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 8001678:	f7ff ffba 	bl	80015f0 <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800167c:	f000 f9f6 	bl	8001a6c <MX_GPIO_Init>
  MX_SPI5_Init();
 8001680:	f000 f94c 	bl	800191c <MX_SPI5_Init>
  MX_LTDC_Init();
 8001684:	f000 f898 	bl	80017b8 <MX_LTDC_Init>
  MX_TIM11_Init();
 8001688:	f000 f97e 	bl	8001988 <MX_TIM11_Init>
  MX_DMA2D_Init();
 800168c:	f000 f822 	bl	80016d4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001690:	f000 f99e 	bl	80019d0 <MX_FMC_Init>
  MX_I2C3_Init();
 8001694:	f000 f850 	bl	8001738 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 8001698:	2006      	movs	r0, #6
 800169a:	f001 f8f6 	bl	800288a <HAL_NVIC_EnableIRQ>
  NVIC_SetPriority(BUTTON_IRQn, 13);
 800169e:	210d      	movs	r1, #13
 80016a0:	2006      	movs	r0, #6
 80016a2:	f7ff ff7b 	bl	800159c <__NVIC_SetPriority>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80016a6:	f003 ff83 	bl	80055b0 <osKernelInitialize>

  appInit();
 80016aa:	f7ff fd86 	bl	80011ba <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80016ae:	4a06      	ldr	r2, [pc, #24]	; (80016c8 <main+0x58>)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4806      	ldr	r0, [pc, #24]	; (80016cc <main+0x5c>)
 80016b4:	f003 ffc6 	bl	8005644 <osThreadNew>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <main+0x60>)
 80016bc:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 80016be:	f009 fdcd 	bl	800b25c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016c2:	f003 ff99 	bl	80055f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <main+0x56>
 80016c8:	0800d9c8 	.word	0x0800d9c8
 80016cc:	08001d05 	.word	0x08001d05
 80016d0:	20025c00 	.word	0x20025c00

080016d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_DMA2D_Init+0x5c>)
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <MX_DMA2D_Init+0x60>)
 80016dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_DMA2D_Init+0x5c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_DMA2D_Init+0x5c>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_DMA2D_Init+0x5c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_DMA2D_Init+0x5c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_DMA2D_Init+0x5c>)
 80016f8:	2202      	movs	r2, #2
 80016fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_DMA2D_Init+0x5c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_DMA2D_Init+0x5c>)
 8001704:	2200      	movs	r2, #0
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <MX_DMA2D_Init+0x5c>)
 800170a:	f001 f8e6 	bl	80028da <HAL_DMA2D_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001714:	f000 fafe 	bl	8001d14 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001718:	2101      	movs	r1, #1
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_DMA2D_Init+0x5c>)
 800171c:	f001 f926 	bl	800296c <HAL_DMA2D_ConfigLayer>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001726:	f000 faf5 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200259f0 	.word	0x200259f0
 8001734:	4002b000 	.word	0x4002b000

08001738 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_I2C3_Init+0x74>)
 800173e:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <MX_I2C3_Init+0x78>)
 8001740:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_I2C3_Init+0x74>)
 8001744:	4a1b      	ldr	r2, [pc, #108]	; (80017b4 <MX_I2C3_Init+0x7c>)
 8001746:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001748:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_I2C3_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_I2C3_Init+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_I2C3_Init+0x74>)
 8001756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_I2C3_Init+0x74>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_I2C3_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_I2C3_Init+0x74>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_I2C3_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_I2C3_Init+0x74>)
 8001776:	f001 fc75 	bl	8003064 <HAL_I2C_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001780:	f000 fac8 	bl	8001d14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001784:	2100      	movs	r1, #0
 8001786:	4809      	ldr	r0, [pc, #36]	; (80017ac <MX_I2C3_Init+0x74>)
 8001788:	f001 fdb0 	bl	80032ec <HAL_I2CEx_ConfigAnalogFilter>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001792:	f000 fabf 	bl	8001d14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001796:	2100      	movs	r1, #0
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_I2C3_Init+0x74>)
 800179a:	f001 fde3 	bl	8003364 <HAL_I2CEx_ConfigDigitalFilter>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80017a4:	f000 fab6 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20025a30 	.word	0x20025a30
 80017b0:	40005c00 	.word	0x40005c00
 80017b4:	000186a0 	.word	0x000186a0

080017b8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b09a      	sub	sp, #104	; 0x68
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80017be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c2:	2234      	movs	r2, #52	; 0x34
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f009 ffd1 	bl	800b76e <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80017cc:	463b      	mov	r3, r7
 80017ce:	2234      	movs	r2, #52	; 0x34
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f009 ffcb 	bl	800b76e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017d8:	4b4e      	ldr	r3, [pc, #312]	; (8001914 <MX_LTDC_Init+0x15c>)
 80017da:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <MX_LTDC_Init+0x160>)
 80017dc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <MX_LTDC_Init+0x15c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017e4:	4b4b      	ldr	r3, [pc, #300]	; (8001914 <MX_LTDC_Init+0x15c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017ea:	4b4a      	ldr	r3, [pc, #296]	; (8001914 <MX_LTDC_Init+0x15c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <MX_LTDC_Init+0x15c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <MX_LTDC_Init+0x15c>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80017fc:	4b45      	ldr	r3, [pc, #276]	; (8001914 <MX_LTDC_Init+0x15c>)
 80017fe:	2203      	movs	r2, #3
 8001800:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001804:	220e      	movs	r2, #14
 8001806:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001808:	4b42      	ldr	r3, [pc, #264]	; (8001914 <MX_LTDC_Init+0x15c>)
 800180a:	2205      	movs	r2, #5
 800180c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001810:	f240 228e 	movw	r2, #654	; 0x28e
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001818:	f240 12e5 	movw	r2, #485	; 0x1e5
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001820:	f44f 7225 	mov.w	r2, #660	; 0x294
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001826:	4b3b      	ldr	r3, [pc, #236]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001828:	f240 12e7 	movw	r2, #487	; 0x1e7
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001836:	4b37      	ldr	r3, [pc, #220]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800183e:	4b35      	ldr	r3, [pc, #212]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001846:	4833      	ldr	r0, [pc, #204]	; (8001914 <MX_LTDC_Init+0x15c>)
 8001848:	f001 fdcc 	bl	80033e4 <HAL_LTDC_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001852:	f000 fa5f 	bl	8001d14 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001866:	2300      	movs	r3, #0
 8001868:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001878:	2305      	movs	r3, #5
 800187a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800189a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	481c      	ldr	r0, [pc, #112]	; (8001914 <MX_LTDC_Init+0x15c>)
 80018a4:	f001 fe6e 	bl	8003584 <HAL_LTDC_ConfigLayer>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80018ae:	f000 fa31 	bl	8001d14 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80018ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80018d4:	2305      	movs	r3, #5
 80018d6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80018f6:	463b      	mov	r3, r7
 80018f8:	2201      	movs	r2, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_LTDC_Init+0x15c>)
 80018fe:	f001 fe41 	bl	8003584 <HAL_LTDC_ConfigLayer>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001908:	f000 fa04 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3768      	adds	r7, #104	; 0x68
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20025a84 	.word	0x20025a84
 8001918:	40016800 	.word	0x40016800

0800191c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001920:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_SPI5_Init+0x64>)
 8001922:	4a18      	ldr	r2, [pc, #96]	; (8001984 <MX_SPI5_Init+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001926:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_SPI5_Init+0x64>)
 8001928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800192c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <MX_SPI5_Init+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <MX_SPI5_Init+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_SPI5_Init+0x64>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_SPI5_Init+0x64>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_SPI5_Init+0x64>)
 8001948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_SPI5_Init+0x64>)
 8001950:	2200      	movs	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <MX_SPI5_Init+0x64>)
 8001956:	2200      	movs	r2, #0
 8001958:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_SPI5_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <MX_SPI5_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_SPI5_Init+0x64>)
 8001968:	220a      	movs	r2, #10
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <MX_SPI5_Init+0x64>)
 800196e:	f002 fe57 	bl	8004620 <HAL_SPI_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001978:	f000 f9cc 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20025b2c 	.word	0x20025b2c
 8001984:	40015000 	.word	0x40015000

08001988 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_TIM11_Init+0x40>)
 800198e:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <MX_TIM11_Init+0x44>)
 8001990:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001992:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <MX_TIM11_Init+0x40>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_TIM11_Init+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_TIM11_Init+0x40>)
 80019a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <MX_TIM11_Init+0x40>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <MX_TIM11_Init+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_TIM11_Init+0x40>)
 80019b4:	f003 fc12 	bl	80051dc <HAL_TIM_Base_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80019be:	f000 f9a9 	bl	8001d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20025b84 	.word	0x20025b84
 80019cc:	40014800 	.word	0x40014800

080019d0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	615a      	str	r2, [r3, #20]
 80019e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <MX_FMC_Init+0x94>)
 80019ea:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <MX_FMC_Init+0x98>)
 80019ec:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_FMC_Init+0x94>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_FMC_Init+0x94>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_FMC_Init+0x94>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a02:	2210      	movs	r2, #16
 8001a04:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001a2a:	2310      	movs	r3, #16
 8001a2c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001a2e:	2310      	movs	r3, #16
 8001a30:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001a32:	2310      	movs	r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001a36:	2310      	movs	r3, #16
 8001a38:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001a3a:	2310      	movs	r3, #16
 8001a3c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001a3e:	2310      	movs	r3, #16
 8001a40:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001a42:	2310      	movs	r3, #16
 8001a44:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_FMC_Init+0x94>)
 8001a4c:	f002 fdb4 	bl	80045b8 <HAL_SDRAM_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001a56:	f000 f95d 	bl	8001d14 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20025bcc 	.word	0x20025bcc
 8001a68:	a0000140 	.word	0xa0000140

08001a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08e      	sub	sp, #56	; 0x38
 8001a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
 8001a86:	4b99      	ldr	r3, [pc, #612]	; (8001cec <MX_GPIO_Init+0x280>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a98      	ldr	r2, [pc, #608]	; (8001cec <MX_GPIO_Init+0x280>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b96      	ldr	r3, [pc, #600]	; (8001cec <MX_GPIO_Init+0x280>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	623b      	str	r3, [r7, #32]
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	4b92      	ldr	r3, [pc, #584]	; (8001cec <MX_GPIO_Init+0x280>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a91      	ldr	r2, [pc, #580]	; (8001cec <MX_GPIO_Init+0x280>)
 8001aa8:	f043 0320 	orr.w	r3, r3, #32
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <MX_GPIO_Init+0x280>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	61fb      	str	r3, [r7, #28]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <MX_GPIO_Init+0x280>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a8a      	ldr	r2, [pc, #552]	; (8001cec <MX_GPIO_Init+0x280>)
 8001ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b88      	ldr	r3, [pc, #544]	; (8001cec <MX_GPIO_Init+0x280>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	4b84      	ldr	r3, [pc, #528]	; (8001cec <MX_GPIO_Init+0x280>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a83      	ldr	r2, [pc, #524]	; (8001cec <MX_GPIO_Init+0x280>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b81      	ldr	r3, [pc, #516]	; (8001cec <MX_GPIO_Init+0x280>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <MX_GPIO_Init+0x280>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a7c      	ldr	r2, [pc, #496]	; (8001cec <MX_GPIO_Init+0x280>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b7a      	ldr	r3, [pc, #488]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b68      	ldr	r3, [pc, #416]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a67      	ldr	r2, [pc, #412]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b65      	ldr	r3, [pc, #404]	; (8001cec <MX_GPIO_Init+0x280>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2116      	movs	r1, #22
 8001b66:	4862      	ldr	r0, [pc, #392]	; (8001cf0 <MX_GPIO_Init+0x284>)
 8001b68:	f001 fa62 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	4860      	ldr	r0, [pc, #384]	; (8001cf4 <MX_GPIO_Init+0x288>)
 8001b72:	f001 fa5d 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b7c:	485e      	ldr	r0, [pc, #376]	; (8001cf8 <MX_GPIO_Init+0x28c>)
 8001b7e:	f001 fa57 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001b88:	485c      	ldr	r0, [pc, #368]	; (8001cfc <MX_GPIO_Init+0x290>)
 8001b8a:	f001 fa51 	bl	8003030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001b8e:	2316      	movs	r3, #22
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4852      	ldr	r0, [pc, #328]	; (8001cf0 <MX_GPIO_Init+0x284>)
 8001ba6:	f000 ff73 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001baa:	2301      	movs	r3, #1
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bae:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	484d      	ldr	r0, [pc, #308]	; (8001cf4 <MX_GPIO_Init+0x288>)
 8001bc0:	f000 ff66 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001bc4:	f248 0306 	movw	r3, #32774	; 0x8006
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4846      	ldr	r0, [pc, #280]	; (8001cf4 <MX_GPIO_Init+0x288>)
 8001bdc:	f000 ff58 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	483f      	ldr	r0, [pc, #252]	; (8001cf4 <MX_GPIO_Init+0x288>)
 8001bf8:	f000 ff4a 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001bfc:	2320      	movs	r3, #32
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4837      	ldr	r0, [pc, #220]	; (8001cf0 <MX_GPIO_Init+0x284>)
 8001c12:	f000 ff3d 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c16:	2304      	movs	r3, #4
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	4619      	mov	r1, r3
 8001c28:	4835      	ldr	r0, [pc, #212]	; (8001d00 <MX_GPIO_Init+0x294>)
 8001c2a:	f000 ff31 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001c2e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001c40:	230c      	movs	r3, #12
 8001c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	482d      	ldr	r0, [pc, #180]	; (8001d00 <MX_GPIO_Init+0x294>)
 8001c4c:	f000 ff20 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c62:	4619      	mov	r1, r3
 8001c64:	4826      	ldr	r0, [pc, #152]	; (8001d00 <MX_GPIO_Init+0x294>)
 8001c66:	f000 ff13 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001c6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2300      	movs	r3, #0
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481e      	ldr	r0, [pc, #120]	; (8001cf8 <MX_GPIO_Init+0x28c>)
 8001c80:	f000 ff06 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001c84:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <MX_GPIO_Init+0x28c>)
 8001c9e:	f000 fef7 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <MX_GPIO_Init+0x288>)
 8001cc0:	f000 fee6 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001cc4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_GPIO_Init+0x290>)
 8001cde:	f000 fed7 	bl	8002a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3738      	adds	r7, #56	; 0x38
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40020400 	.word	0x40020400

08001d04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f003 fd2b 	bl	8005768 <osDelay>
 8001d12:	e7fb      	b.n	8001d0c <StartDefaultTask+0x8>

08001d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <Error_Handler+0x8>
	...

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_MspInit+0x54>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a11      	ldr	r2, [pc, #68]	; (8001d74 <HAL_MspInit+0x54>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_MspInit+0x54>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_MspInit+0x54>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_MspInit+0x54>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_MspInit+0x54>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	210f      	movs	r1, #15
 8001d62:	f06f 0001 	mvn.w	r0, #1
 8001d66:	f000 fd74 	bl	8002852 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <HAL_DMA2D_MspInit+0x3c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10d      	bne.n	8001da6 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_DMA2D_MspInit+0x40>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <HAL_DMA2D_MspInit+0x40>)
 8001d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <HAL_DMA2D_MspInit+0x40>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	4002b000 	.word	0x4002b000
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <HAL_I2C_MspInit+0xc4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d14b      	bne.n	8001e76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a27      	ldr	r2, [pc, #156]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1c:	2312      	movs	r3, #18
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4815      	ldr	r0, [pc, #84]	; (8001e88 <HAL_I2C_MspInit+0xcc>)
 8001e34:	f000 fe2c 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <HAL_I2C_MspInit+0xd0>)
 8001e56:	f000 fe1b 	bl	8002a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001e64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_I2C_MspInit+0xc8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40005c00 	.word	0x40005c00
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40020000 	.word	0x40020000

08001e90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b09a      	sub	sp, #104	; 0x68
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eac:	2230      	movs	r2, #48	; 0x30
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f009 fc5c 	bl	800b76e <memset>
  if(hltdc->Instance==LTDC)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a81      	ldr	r2, [pc, #516]	; (80020c0 <HAL_LTDC_MspInit+0x230>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	f040 80fa 	bne.w	80020b6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001ec6:	2332      	movs	r3, #50	; 0x32
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 f9ae 	bl	8004238 <HAL_RCCEx_PeriphCLKConfig>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001ee2:	f7ff ff17 	bl	8001d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
 8001eea:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a75      	ldr	r2, [pc, #468]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001ef0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f0c:	f043 0320 	orr.w	r3, r3, #32
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b6c      	ldr	r3, [pc, #432]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f003 0320 	and.w	r3, r3, #32
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a67      	ldr	r2, [pc, #412]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b65      	ldr	r3, [pc, #404]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	4b61      	ldr	r3, [pc, #388]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a60      	ldr	r2, [pc, #384]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a59      	ldr	r2, [pc, #356]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b57      	ldr	r3, [pc, #348]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_LTDC_MspInit+0x234>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fbc:	230e      	movs	r3, #14
 8001fbe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001fc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4840      	ldr	r0, [pc, #256]	; (80020c8 <HAL_LTDC_MspInit+0x238>)
 8001fc8:	f000 fd62 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001fcc:	f641 0358 	movw	r3, #6232	; 0x1858
 8001fd0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001fde:	230e      	movs	r3, #14
 8001fe0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4838      	ldr	r0, [pc, #224]	; (80020cc <HAL_LTDC_MspInit+0x23c>)
 8001fea:	f000 fd51 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ffe:	2309      	movs	r3, #9
 8002000:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002002:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002006:	4619      	mov	r1, r3
 8002008:	4831      	ldr	r0, [pc, #196]	; (80020d0 <HAL_LTDC_MspInit+0x240>)
 800200a:	f000 fd41 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800200e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002012:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201c:	2300      	movs	r3, #0
 800201e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002020:	230e      	movs	r3, #14
 8002022:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002024:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002028:	4619      	mov	r1, r3
 800202a:	4829      	ldr	r0, [pc, #164]	; (80020d0 <HAL_LTDC_MspInit+0x240>)
 800202c:	f000 fd30 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002030:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002034:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002042:	230e      	movs	r3, #14
 8002044:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800204a:	4619      	mov	r1, r3
 800204c:	4821      	ldr	r0, [pc, #132]	; (80020d4 <HAL_LTDC_MspInit+0x244>)
 800204e:	f000 fd1f 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002052:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002056:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002064:	230e      	movs	r3, #14
 8002066:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002068:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800206c:	4619      	mov	r1, r3
 800206e:	481a      	ldr	r0, [pc, #104]	; (80020d8 <HAL_LTDC_MspInit+0x248>)
 8002070:	f000 fd0e 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002074:	2348      	movs	r3, #72	; 0x48
 8002076:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002084:	230e      	movs	r3, #14
 8002086:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002088:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800208c:	4619      	mov	r1, r3
 800208e:	4813      	ldr	r0, [pc, #76]	; (80020dc <HAL_LTDC_MspInit+0x24c>)
 8002090:	f000 fcfe 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002094:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002098:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020a6:	2309      	movs	r3, #9
 80020a8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ae:	4619      	mov	r1, r3
 80020b0:	4808      	ldr	r0, [pc, #32]	; (80020d4 <HAL_LTDC_MspInit+0x244>)
 80020b2:	f000 fced 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80020b6:	bf00      	nop
 80020b8:	3768      	adds	r7, #104	; 0x68
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40016800 	.word	0x40016800
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40021400 	.word	0x40021400
 80020cc:	40020000 	.word	0x40020000
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40021800 	.word	0x40021800
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020c00 	.word	0x40020c00

080020e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_SPI_MspInit+0x84>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d12c      	bne.n	800215c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_SPI_MspInit+0x88>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_SPI_MspInit+0x88>)
 800210c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_SPI_MspInit+0x88>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_SPI_MspInit+0x88>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_SPI_MspInit+0x88>)
 8002128:	f043 0320 	orr.w	r3, r3, #32
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_SPI_MspInit+0x88>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800213a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800214c:	2305      	movs	r3, #5
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_SPI_MspInit+0x8c>)
 8002158:	f000 fc9a 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800215c:	bf00      	nop
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40015000 	.word	0x40015000
 8002168:	40023800 	.word	0x40023800
 800216c:	40021400 	.word	0x40021400

08002170 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_SPI_MspDeInit+0x30>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10a      	bne.n	8002198 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_SPI_MspDeInit+0x34>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_SPI_MspDeInit+0x34>)
 8002188:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800218e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <HAL_SPI_MspDeInit+0x38>)
 8002194:	f000 fe28 	bl	8002de8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40015000 	.word	0x40015000
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40021400 	.word	0x40021400

080021ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0b      	ldr	r2, [pc, #44]	; (80021e8 <HAL_TIM_Base_MspInit+0x3c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10d      	bne.n	80021da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_TIM_Base_MspInit+0x40>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_TIM_Base_MspInit+0x40>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <HAL_TIM_Base_MspInit+0x40>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40014800 	.word	0x40014800
 80021ec:	40023800 	.word	0x40023800

080021f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002204:	4b3b      	ldr	r3, [pc, #236]	; (80022f4 <HAL_FMC_MspInit+0x104>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d16f      	bne.n	80022ec <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800220c:	4b39      	ldr	r3, [pc, #228]	; (80022f4 <HAL_FMC_MspInit+0x104>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_FMC_MspInit+0x108>)
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <HAL_FMC_MspInit+0x108>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6393      	str	r3, [r2, #56]	; 0x38
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_FMC_MspInit+0x108>)
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800222e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002232:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002240:	230c      	movs	r3, #12
 8002242:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	4619      	mov	r1, r3
 8002248:	482c      	ldr	r0, [pc, #176]	; (80022fc <HAL_FMC_MspInit+0x10c>)
 800224a:	f000 fc21 	bl	8002a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800224e:	2301      	movs	r3, #1
 8002250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800225e:	230c      	movs	r3, #12
 8002260:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	4619      	mov	r1, r3
 8002266:	4826      	ldr	r0, [pc, #152]	; (8002300 <HAL_FMC_MspInit+0x110>)
 8002268:	f000 fc12 	bl	8002a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800226c:	f248 1333 	movw	r3, #33075	; 0x8133
 8002270:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800227e:	230c      	movs	r3, #12
 8002280:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	4619      	mov	r1, r3
 8002286:	481f      	ldr	r0, [pc, #124]	; (8002304 <HAL_FMC_MspInit+0x114>)
 8002288:	f000 fc02 	bl	8002a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800228c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002290:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800229e:	230c      	movs	r3, #12
 80022a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	4619      	mov	r1, r3
 80022a6:	4818      	ldr	r0, [pc, #96]	; (8002308 <HAL_FMC_MspInit+0x118>)
 80022a8:	f000 fbf2 	bl	8002a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80022ac:	f24c 7303 	movw	r3, #50947	; 0xc703
 80022b0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ba:	2303      	movs	r3, #3
 80022bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022be:	230c      	movs	r3, #12
 80022c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4811      	ldr	r0, [pc, #68]	; (800230c <HAL_FMC_MspInit+0x11c>)
 80022c8:	f000 fbe2 	bl	8002a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80022cc:	2360      	movs	r3, #96	; 0x60
 80022ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022dc:	230c      	movs	r3, #12
 80022de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	480a      	ldr	r0, [pc, #40]	; (8002310 <HAL_FMC_MspInit+0x120>)
 80022e6:	f000 fbd3 	bl	8002a90 <HAL_GPIO_Init>
 80022ea:	e000      	b.n	80022ee <HAL_FMC_MspInit+0xfe>
    return;
 80022ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20025c04 	.word	0x20025c04
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40021400 	.word	0x40021400
 8002300:	40020800 	.word	0x40020800
 8002304:	40021800 	.word	0x40021800
 8002308:	40021000 	.word	0x40021000
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40020400 	.word	0x40020400

08002314 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800231c:	f7ff ff68 	bl	80021f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f000 f95c 	bl	8002614 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800235c:	f006 f8a6 	bl	80084ac <xTaskGetSchedulerState>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002366:	f007 f8a7 	bl	80094b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}

0800236e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_kill>:

int _kill(int pid, int sig)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002388:	f009 fa40 	bl	800b80c <__errno>
 800238c:	4603      	mov	r3, r0
 800238e:	2216      	movs	r2, #22
 8002390:	601a      	str	r2, [r3, #0]
  return -1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_exit>:

void _exit (int status)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023a6:	f04f 31ff 	mov.w	r1, #4294967295
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffe7 	bl	800237e <_kill>
  while (1) {}    /* Make sure we hang here */
 80023b0:	e7fe      	b.n	80023b0 <_exit+0x12>

080023b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e00a      	b.n	80023da <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023c4:	f3af 8000 	nop.w
 80023c8:	4601      	mov	r1, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	60ba      	str	r2, [r7, #8]
 80023d0:	b2ca      	uxtb	r2, r1
 80023d2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	3301      	adds	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbf0      	blt.n	80023c4 <_read+0x12>
  }

  return len;
 80023e2:	687b      	ldr	r3, [r7, #4]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	e009      	b.n	8002412 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	60ba      	str	r2, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	dbf1      	blt.n	80023fe <_write+0x12>
  }
  return len;
 800241a:	687b      	ldr	r3, [r7, #4]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <_close>:

int _close(int file)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800242c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244c:	605a      	str	r2, [r3, #4]
  return 0;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_isatty>:

int _isatty(int file)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f009 f9a6 	bl	800b80c <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20030000 	.word	0x20030000
 80024ec:	00000400 	.word	0x00000400
 80024f0:	20025c08 	.word	0x20025c08
 80024f4:	2002b238 	.word	0x2002b238

080024f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <SystemInit+0x20>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <SystemInit+0x20>)
 8002504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800251c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002554 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002522:	490e      	ldr	r1, [pc, #56]	; (800255c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002538:	4c0b      	ldr	r4, [pc, #44]	; (8002568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002546:	f7ff ffd7 	bl	80024f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254a:	f009 f965 	bl	800b818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254e:	f7ff f88f 	bl	8001670 <main>
  bx  lr    
 8002552:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002554:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800255c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002560:	0800da98 	.word	0x0800da98
  ldr r2, =_sbss
 8002564:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002568:	2002b238 	.word	0x2002b238

0800256c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800256c:	e7fe      	b.n	800256c <ADC_IRQHandler>
	...

08002570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_Init+0x40>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_Init+0x40>)
 800257a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800257e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_Init+0x40>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <HAL_Init+0x40>)
 8002586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_Init+0x40>)
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 f94f 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259e:	200f      	movs	r0, #15
 80025a0:	f000 f808 	bl	80025b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a4:	f7ff fbbc 	bl	8001d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023c00 	.word	0x40023c00

080025b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x54>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f975 	bl	80028c2 <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00e      	b.n	8002600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d80a      	bhi.n	80025fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	f000 f92f 	bl	8002852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_InitTick+0x5c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000010 	.word	0x20000010
 800260c:	20000018 	.word	0x20000018
 8002610:	20000014 	.word	0x20000014

08002614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_IncTick+0x20>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_IncTick+0x24>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_IncTick+0x24>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000018 	.word	0x20000018
 8002638:	20025c0c 	.word	0x20025c0c

0800263c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b03      	ldr	r3, [pc, #12]	; (8002650 <HAL_GetTick+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20025c0c 	.word	0x20025c0c

08002654 <__NVIC_SetPriorityGrouping>:
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002664:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002670:	4013      	ands	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800267c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <__NVIC_SetPriorityGrouping+0x44>)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	60d3      	str	r3, [r2, #12]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_GetPriorityGrouping>:
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <__NVIC_GetPriorityGrouping+0x18>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 0307 	and.w	r3, r3, #7
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <__NVIC_EnableIRQ>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db0b      	blt.n	80026e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	f003 021f 	and.w	r2, r3, #31
 80026d0:	4907      	ldr	r1, [pc, #28]	; (80026f0 <__NVIC_EnableIRQ+0x38>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2001      	movs	r0, #1
 80026da:	fa00 f202 	lsl.w	r2, r0, r2
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	e000e100 	.word	0xe000e100

080026f4 <__NVIC_DisableIRQ>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db12      	blt.n	800272c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	490a      	ldr	r1, [pc, #40]	; (8002738 <__NVIC_DisableIRQ+0x44>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	3320      	adds	r3, #32
 800271c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002720:	f3bf 8f4f 	dsb	sy
}
 8002724:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002726:	f3bf 8f6f 	isb	sy
}
 800272a:	bf00      	nop
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	; (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	; (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff05 	bl	8002654 <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff1a 	bl	800269c <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff8e 	bl	8002790 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5d 	bl	800273c <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff0d 	bl	80026b8 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff1d 	bl	80026f4 <__NVIC_DisableIRQ>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ff94 	bl	80027f8 <SysTick_Config>
 80028d0:	4603      	mov	r3, r0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e03b      	b.n	8002964 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fa39 	bl	8001d78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	f023 0107 	bic.w	r1, r3, #7
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002944:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68d1      	ldr	r1, [r2, #12]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_DMA2D_ConfigLayer+0x20>
 8002988:	2302      	movs	r3, #2
 800298a:	e079      	b.n	8002a80 <HAL_DMA2D_ConfigLayer+0x114>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	3318      	adds	r3, #24
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80029b6:	4b35      	ldr	r3, [pc, #212]	; (8002a8c <HAL_DMA2D_ConfigLayer+0x120>)
 80029b8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b0a      	cmp	r3, #10
 80029c0:	d003      	beq.n	80029ca <HAL_DMA2D_ConfigLayer+0x5e>
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b09      	cmp	r3, #9
 80029c8:	d107      	bne.n	80029da <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e005      	b.n	80029e6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d120      	bne.n	8002a2e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	ea02 0103 	and.w	r1, r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b0a      	cmp	r3, #10
 8002a14:	d003      	beq.n	8002a1e <HAL_DMA2D_ConfigLayer+0xb2>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d127      	bne.n	8002a6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002a2c:	e01f      	b.n	8002a6e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	ea02 0103 	and.w	r1, r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b0a      	cmp	r3, #10
 8002a56:	d003      	beq.n	8002a60 <HAL_DMA2D_ConfigLayer+0xf4>
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b09      	cmp	r3, #9
 8002a5e:	d106      	bne.n	8002a6e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a6c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	371c      	adds	r7, #28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	ff03000f 	.word	0xff03000f

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e177      	b.n	8002d9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8166 	bne.w	8002d96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d005      	beq.n	8002ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d017      	beq.n	8002b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80c0 	beq.w	8002d96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c32:	4a61      	ldr	r2, [pc, #388]	; (8002db8 <HAL_GPIO_Init+0x328>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_GPIO_Init+0x32c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d037      	beq.n	8002cce <HAL_GPIO_Init+0x23e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_GPIO_Init+0x23a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d02b      	beq.n	8002cc6 <HAL_GPIO_Init+0x236>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <HAL_GPIO_Init+0x338>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d025      	beq.n	8002cc2 <HAL_GPIO_Init+0x232>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a54      	ldr	r2, [pc, #336]	; (8002dcc <HAL_GPIO_Init+0x33c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <HAL_GPIO_Init+0x22e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a53      	ldr	r2, [pc, #332]	; (8002dd0 <HAL_GPIO_Init+0x340>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x22a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_GPIO_Init+0x344>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x226>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <HAL_GPIO_Init+0x348>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x222>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x21e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x21a>
 8002ca6:	2309      	movs	r3, #9
 8002ca8:	e012      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002caa:	230a      	movs	r3, #10
 8002cac:	e010      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	e00e      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e00c      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00a      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e008      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e004      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e002      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	f002 0203 	and.w	r2, r2, #3
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	4093      	lsls	r3, r2
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce0:	4935      	ldr	r1, [pc, #212]	; (8002db8 <HAL_GPIO_Init+0x328>)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d12:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d18:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d3c:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	f67f ae84 	bls.w	8002aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40021400 	.word	0x40021400
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	40021c00 	.word	0x40021c00
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40022400 	.word	0x40022400
 8002de4:	40013c00 	.word	0x40013c00

08002de8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002df2:	2300      	movs	r3, #0
 8002df4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e0d9      	b.n	8002fb8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e04:	2201      	movs	r2, #1
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	f040 80c9 	bne.w	8002fb2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e20:	4a6b      	ldr	r2, [pc, #428]	; (8002fd0 <HAL_GPIO_DeInit+0x1e8>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a63      	ldr	r2, [pc, #396]	; (8002fd4 <HAL_GPIO_DeInit+0x1ec>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d037      	beq.n	8002eba <HAL_GPIO_DeInit+0xd2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a62      	ldr	r2, [pc, #392]	; (8002fd8 <HAL_GPIO_DeInit+0x1f0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d031      	beq.n	8002eb6 <HAL_GPIO_DeInit+0xce>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <HAL_GPIO_DeInit+0x1f4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02b      	beq.n	8002eb2 <HAL_GPIO_DeInit+0xca>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a60      	ldr	r2, [pc, #384]	; (8002fe0 <HAL_GPIO_DeInit+0x1f8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d025      	beq.n	8002eae <HAL_GPIO_DeInit+0xc6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a5f      	ldr	r2, [pc, #380]	; (8002fe4 <HAL_GPIO_DeInit+0x1fc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01f      	beq.n	8002eaa <HAL_GPIO_DeInit+0xc2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a5e      	ldr	r2, [pc, #376]	; (8002fe8 <HAL_GPIO_DeInit+0x200>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d019      	beq.n	8002ea6 <HAL_GPIO_DeInit+0xbe>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a5d      	ldr	r2, [pc, #372]	; (8002fec <HAL_GPIO_DeInit+0x204>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <HAL_GPIO_DeInit+0xba>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a5c      	ldr	r2, [pc, #368]	; (8002ff0 <HAL_GPIO_DeInit+0x208>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00d      	beq.n	8002e9e <HAL_GPIO_DeInit+0xb6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a5b      	ldr	r2, [pc, #364]	; (8002ff4 <HAL_GPIO_DeInit+0x20c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d007      	beq.n	8002e9a <HAL_GPIO_DeInit+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a5a      	ldr	r2, [pc, #360]	; (8002ff8 <HAL_GPIO_DeInit+0x210>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_GPIO_DeInit+0xae>
 8002e92:	2309      	movs	r3, #9
 8002e94:	e012      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002e96:	230a      	movs	r3, #10
 8002e98:	e010      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	e00e      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	e00c      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002ea2:	2306      	movs	r3, #6
 8002ea4:	e00a      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002ea6:	2305      	movs	r3, #5
 8002ea8:	e008      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002eaa:	2304      	movs	r3, #4
 8002eac:	e006      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e004      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_GPIO_DeInit+0xd4>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	f002 0203 	and.w	r2, r2, #3
 8002ec2:	0092      	lsls	r2, r2, #2
 8002ec4:	4093      	lsls	r3, r2
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d132      	bne.n	8002f32 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	4949      	ldr	r1, [pc, #292]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002eda:	4b48      	ldr	r3, [pc, #288]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4946      	ldr	r1, [pc, #280]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ee8:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	4942      	ldr	r1, [pc, #264]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	493f      	ldr	r1, [pc, #252]	; (8002ffc <HAL_GPIO_DeInit+0x214>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002f14:	4a2e      	ldr	r2, [pc, #184]	; (8002fd0 <HAL_GPIO_DeInit+0x1e8>)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	43da      	mvns	r2, r3
 8002f24:	482a      	ldr	r0, [pc, #168]	; (8002fd0 <HAL_GPIO_DeInit+0x1e8>)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2103      	movs	r1, #3
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	08da      	lsrs	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3208      	adds	r2, #8
 8002f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	08d2      	lsrs	r2, r2, #3
 8002f68:	4019      	ands	r1, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3208      	adds	r2, #8
 8002f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2103      	movs	r1, #3
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	401a      	ands	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	2103      	movs	r1, #3
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	401a      	ands	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	f67f af22 	bls.w	8002e04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40013800 	.word	0x40013800
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40020c00 	.word	0x40020c00
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40021400 	.word	0x40021400
 8002fec:	40021800 	.word	0x40021800
 8002ff0:	40021c00 	.word	0x40021c00
 8002ff4:	40022000 	.word	0x40022000
 8002ff8:	40022400 	.word	0x40022400
 8002ffc:	40013c00 	.word	0x40013c00

08003000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e001      	b.n	8003022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
 800303c:	4613      	mov	r3, r2
 800303e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003040:	787b      	ldrb	r3, [r7, #1]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003046:	887a      	ldrh	r2, [r7, #2]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800304c:	e003      	b.n	8003056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	041a      	lsls	r2, r3, #16
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	619a      	str	r2, [r3, #24]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e12b      	b.n	80032ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe fe96 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	; 0x24
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c8:	f001 f8a2 	bl	8004210 <HAL_RCC_GetPCLK1Freq>
 80030cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a81      	ldr	r2, [pc, #516]	; (80032d8 <HAL_I2C_Init+0x274>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d807      	bhi.n	80030e8 <HAL_I2C_Init+0x84>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a80      	ldr	r2, [pc, #512]	; (80032dc <HAL_I2C_Init+0x278>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e006      	b.n	80030f6 <HAL_I2C_Init+0x92>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a7d      	ldr	r2, [pc, #500]	; (80032e0 <HAL_I2C_Init+0x27c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf94      	ite	ls
 80030f0:	2301      	movls	r3, #1
 80030f2:	2300      	movhi	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0e7      	b.n	80032ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a78      	ldr	r2, [pc, #480]	; (80032e4 <HAL_I2C_Init+0x280>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9b      	lsrs	r3, r3, #18
 8003108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a6a      	ldr	r2, [pc, #424]	; (80032d8 <HAL_I2C_Init+0x274>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d802      	bhi.n	8003138 <HAL_I2C_Init+0xd4>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	e009      	b.n	800314c <HAL_I2C_Init+0xe8>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	4a69      	ldr	r2, [pc, #420]	; (80032e8 <HAL_I2C_Init+0x284>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	3301      	adds	r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	430b      	orrs	r3, r1
 8003152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800315e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	495c      	ldr	r1, [pc, #368]	; (80032d8 <HAL_I2C_Init+0x274>)
 8003168:	428b      	cmp	r3, r1
 800316a:	d819      	bhi.n	80031a0 <HAL_I2C_Init+0x13c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e59      	subs	r1, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fbb1 f3f3 	udiv	r3, r1, r3
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003180:	400b      	ands	r3, r1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_I2C_Init+0x138>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e59      	subs	r1, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fbb1 f3f3 	udiv	r3, r1, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	e051      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 800319c:	2304      	movs	r3, #4
 800319e:	e04f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <HAL_I2C_Init+0x168>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e012      	b.n	80031f2 <HAL_I2C_Init+0x18e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	0099      	lsls	r1, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Init+0x196>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e022      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10e      	bne.n	8003220 <HAL_I2C_Init+0x1bc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e58      	subs	r0, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	440b      	add	r3, r1
 8003210:	fbb0 f3f3 	udiv	r3, r0, r3
 8003214:	3301      	adds	r3, #1
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321e:	e00f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e58      	subs	r0, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	0099      	lsls	r1, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	6809      	ldr	r1, [r1, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800326e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6911      	ldr	r1, [r2, #16]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	000186a0 	.word	0x000186a0
 80032dc:	001e847f 	.word	0x001e847f
 80032e0:	003d08ff 	.word	0x003d08ff
 80032e4:	431bde83 	.word	0x431bde83
 80032e8:	10624dd3 	.word	0x10624dd3

080032ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b20      	cmp	r3, #32
 8003300:	d129      	bne.n	8003356 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2224      	movs	r2, #36	; 0x24
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0210 	bic.w	r2, r2, #16
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800336e:	2300      	movs	r3, #0
 8003370:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	d12a      	bne.n	80033d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2224      	movs	r2, #36	; 0x24
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800339e:	89fb      	ldrh	r3, [r7, #14]
 80033a0:	f023 030f 	bic.w	r3, r3, #15
 80033a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	89fb      	ldrh	r3, [r7, #14]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	89fa      	ldrh	r2, [r7, #14]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e000      	b.n	80033d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
  }
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0bf      	b.n	8003576 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe fd40 	bl	8001e90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003426:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6999      	ldr	r1, [r3, #24]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800343c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_LTDC_Init+0x19c>)
 8003458:	400b      	ands	r3, r1
 800345a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6899      	ldr	r1, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68d9      	ldr	r1, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <HAL_LTDC_Init+0x19c>)
 8003486:	400b      	ands	r3, r1
 8003488:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68d9      	ldr	r1, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1a      	ldr	r2, [r3, #32]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6919      	ldr	r1, [r3, #16]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	4b33      	ldr	r3, [pc, #204]	; (8003580 <HAL_LTDC_Init+0x19c>)
 80034b4:	400b      	ands	r3, r1
 80034b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6919      	ldr	r1, [r3, #16]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6959      	ldr	r1, [r3, #20]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_LTDC_Init+0x19c>)
 80034e2:	400b      	ands	r3, r1
 80034e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	041b      	lsls	r3, r3, #16
 80034ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6959      	ldr	r1, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003514:	041b      	lsls	r3, r3, #16
 8003516:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0206 	orr.w	r2, r2, #6
 8003552:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	f000f800 	.word	0xf000f800

08003584 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003584:	b5b0      	push	{r4, r5, r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_LTDC_ConfigLayer+0x1a>
 800359a:	2302      	movs	r3, #2
 800359c:	e02c      	b.n	80035f8 <HAL_LTDC_ConfigLayer+0x74>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2134      	movs	r1, #52	; 0x34
 80035b4:	fb01 f303 	mul.w	r3, r1, r3
 80035b8:	4413      	add	r3, r2
 80035ba:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4614      	mov	r4, r2
 80035c2:	461d      	mov	r5, r3
 80035c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035d0:	682b      	ldr	r3, [r5, #0]
 80035d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f811 	bl	8003600 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2201      	movs	r2, #1
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bdb0      	pop	{r4, r5, r7, pc}

08003600 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	0c1b      	lsrs	r3, r3, #16
 8003618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361c:	4413      	add	r3, r2
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	01db      	lsls	r3, r3, #7
 800362c:	4413      	add	r3, r2
 800362e:	3384      	adds	r3, #132	; 0x84
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	4611      	mov	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	01d2      	lsls	r2, r2, #7
 800363c:	440a      	add	r2, r1
 800363e:	3284      	adds	r2, #132	; 0x84
 8003640:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003644:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003656:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003658:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4619      	mov	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	01db      	lsls	r3, r3, #7
 8003664:	440b      	add	r3, r1
 8003666:	3384      	adds	r3, #132	; 0x84
 8003668:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800366e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800367e:	4413      	add	r3, r2
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	01db      	lsls	r3, r3, #7
 800368e:	4413      	add	r3, r2
 8003690:	3384      	adds	r3, #132	; 0x84
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	6812      	ldr	r2, [r2, #0]
 8003698:	4611      	mov	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	01d2      	lsls	r2, r2, #7
 800369e:	440a      	add	r2, r1
 80036a0:	3284      	adds	r2, #132	; 0x84
 80036a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b6:	4413      	add	r3, r2
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	01db      	lsls	r3, r3, #7
 80036c4:	440b      	add	r3, r1
 80036c6:	3384      	adds	r3, #132	; 0x84
 80036c8:	4619      	mov	r1, r3
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	01db      	lsls	r3, r3, #7
 80036da:	4413      	add	r3, r2
 80036dc:	3384      	adds	r3, #132	; 0x84
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	4611      	mov	r1, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	01d2      	lsls	r2, r2, #7
 80036ea:	440a      	add	r2, r1
 80036ec:	3284      	adds	r2, #132	; 0x84
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	01db      	lsls	r3, r3, #7
 80036fe:	4413      	add	r3, r2
 8003700:	3384      	adds	r3, #132	; 0x84
 8003702:	461a      	mov	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	061b      	lsls	r3, r3, #24
 8003724:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	01db      	lsls	r3, r3, #7
 8003730:	4413      	add	r3, r2
 8003732:	3384      	adds	r3, #132	; 0x84
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	01db      	lsls	r3, r3, #7
 8003740:	4413      	add	r3, r2
 8003742:	3384      	adds	r3, #132	; 0x84
 8003744:	461a      	mov	r2, r3
 8003746:	2300      	movs	r3, #0
 8003748:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003750:	461a      	mov	r2, r3
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	431a      	orrs	r2, r3
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	01db      	lsls	r3, r3, #7
 8003764:	440b      	add	r3, r1
 8003766:	3384      	adds	r3, #132	; 0x84
 8003768:	4619      	mov	r1, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	01db      	lsls	r3, r3, #7
 800377a:	4413      	add	r3, r2
 800377c:	3384      	adds	r3, #132	; 0x84
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	4611      	mov	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	01d2      	lsls	r2, r2, #7
 800378a:	440a      	add	r2, r1
 800378c:	3284      	adds	r2, #132	; 0x84
 800378e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003792:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	01db      	lsls	r3, r3, #7
 800379e:	4413      	add	r3, r2
 80037a0:	3384      	adds	r3, #132	; 0x84
 80037a2:	461a      	mov	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	01db      	lsls	r3, r3, #7
 80037b4:	4413      	add	r3, r2
 80037b6:	3384      	adds	r3, #132	; 0x84
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	4611      	mov	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	01d2      	lsls	r2, r2, #7
 80037c4:	440a      	add	r2, r1
 80037c6:	3284      	adds	r2, #132	; 0x84
 80037c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80037cc:	f023 0307 	bic.w	r3, r3, #7
 80037d0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	6809      	ldr	r1, [r1, #0]
 80037de:	4608      	mov	r0, r1
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	01c9      	lsls	r1, r1, #7
 80037e4:	4401      	add	r1, r0
 80037e6:	3184      	adds	r1, #132	; 0x84
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	01db      	lsls	r3, r3, #7
 80037f6:	4413      	add	r3, r2
 80037f8:	3384      	adds	r3, #132	; 0x84
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	01db      	lsls	r3, r3, #7
 8003806:	4413      	add	r3, r2
 8003808:	3384      	adds	r3, #132	; 0x84
 800380a:	461a      	mov	r2, r3
 800380c:	2300      	movs	r3, #0
 800380e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	461a      	mov	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	01db      	lsls	r3, r3, #7
 800381a:	4413      	add	r3, r2
 800381c:	3384      	adds	r3, #132	; 0x84
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800382e:	2304      	movs	r3, #4
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	e01b      	b.n	800386c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d102      	bne.n	8003842 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800383c:	2303      	movs	r3, #3
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e014      	b.n	800386c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d00b      	beq.n	8003862 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800384e:	2b02      	cmp	r3, #2
 8003850:	d007      	beq.n	8003862 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003856:	2b03      	cmp	r3, #3
 8003858:	d003      	beq.n	8003862 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800385e:	2b07      	cmp	r3, #7
 8003860:	d102      	bne.n	8003868 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003862:	2302      	movs	r3, #2
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	e001      	b.n	800386c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003868:	2301      	movs	r3, #1
 800386a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	01db      	lsls	r3, r3, #7
 8003876:	4413      	add	r3, r2
 8003878:	3384      	adds	r3, #132	; 0x84
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	4611      	mov	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	01d2      	lsls	r2, r2, #7
 8003886:	440a      	add	r2, r1
 8003888:	3284      	adds	r2, #132	; 0x84
 800388a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800388e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	fb02 f303 	mul.w	r3, r2, r3
 800389a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	1acb      	subs	r3, r1, r3
 80038a6:	69f9      	ldr	r1, [r7, #28]
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	6809      	ldr	r1, [r1, #0]
 80038b2:	4608      	mov	r0, r1
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	01c9      	lsls	r1, r1, #7
 80038b8:	4401      	add	r1, r0
 80038ba:	3184      	adds	r1, #132	; 0x84
 80038bc:	4313      	orrs	r3, r2
 80038be:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	461a      	mov	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	01db      	lsls	r3, r3, #7
 80038ca:	4413      	add	r3, r2
 80038cc:	3384      	adds	r3, #132	; 0x84
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	4611      	mov	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	01d2      	lsls	r2, r2, #7
 80038da:	440a      	add	r2, r1
 80038dc:	3284      	adds	r2, #132	; 0x84
 80038de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80038e2:	f023 0307 	bic.w	r3, r3, #7
 80038e6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	01db      	lsls	r3, r3, #7
 80038f2:	4413      	add	r3, r2
 80038f4:	3384      	adds	r3, #132	; 0x84
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	01db      	lsls	r3, r3, #7
 8003908:	4413      	add	r3, r2
 800390a:	3384      	adds	r3, #132	; 0x84
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	4611      	mov	r1, r2
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	01d2      	lsls	r2, r2, #7
 8003918:	440a      	add	r2, r1
 800391a:	3284      	adds	r2, #132	; 0x84
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e267      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d075      	beq.n	8003a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800394e:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b04      	cmp	r3, #4
 8003958:	d00c      	beq.n	8003974 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395a:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003962:	2b08      	cmp	r3, #8
 8003964:	d112      	bne.n	800398c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800396e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003972:	d10b      	bne.n	800398c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003974:	4b7e      	ldr	r3, [pc, #504]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d05b      	beq.n	8003a38 <HAL_RCC_OscConfig+0x108>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d157      	bne.n	8003a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e242      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d106      	bne.n	80039a4 <HAL_RCC_OscConfig+0x74>
 8003996:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a75      	ldr	r2, [pc, #468]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e01d      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b70      	ldr	r3, [pc, #448]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a6f      	ldr	r2, [pc, #444]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b6d      	ldr	r3, [pc, #436]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6c      	ldr	r2, [pc, #432]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0xb0>
 80039c8:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a68      	ldr	r2, [pc, #416]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b66      	ldr	r3, [pc, #408]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a65      	ldr	r2, [pc, #404]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 80039da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fe fe28 	bl	800263c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe fe24 	bl	800263c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e207      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	4b5b      	ldr	r3, [pc, #364]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xc0>
 8003a0e:	e014      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe fe14 	bl	800263c <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe fe10 	bl	800263c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	; 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e1f3      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f0      	bne.n	8003a18 <HAL_RCC_OscConfig+0xe8>
 8003a36:	e000      	b.n	8003a3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d063      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a46:	4b4a      	ldr	r3, [pc, #296]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d11c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d116      	bne.n	8003a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_RCC_OscConfig+0x152>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e1c7      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a82:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4937      	ldr	r1, [pc, #220]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a96:	e03a      	b.n	8003b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa0:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fdc9 	bl	800263c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aae:	f7fe fdc5 	bl	800263c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e1a8      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4925      	ldr	r1, [pc, #148]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]
 8003ae0:	e015      	b.n	8003b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fe fda8 	bl	800263c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af0:	f7fe fda4 	bl	800263c <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e187      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d036      	beq.n	8003b88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d016      	beq.n	8003b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <HAL_RCC_OscConfig+0x248>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fe fd88 	bl	800263c <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b30:	f7fe fd84 	bl	800263c <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e167      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_OscConfig+0x240>)
 8003b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0x200>
 8003b4e:	e01b      	b.n	8003b88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_OscConfig+0x248>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fe fd71 	bl	800263c <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b5c:	e00e      	b.n	8003b7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5e:	f7fe fd6d 	bl	800263c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d907      	bls.n	8003b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e150      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
 8003b70:	40023800 	.word	0x40023800
 8003b74:	42470000 	.word	0x42470000
 8003b78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7c:	4b88      	ldr	r3, [pc, #544]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ea      	bne.n	8003b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8097 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9a:	4b81      	ldr	r3, [pc, #516]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	4b7d      	ldr	r3, [pc, #500]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4a7c      	ldr	r2, [pc, #496]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb6:	4b7a      	ldr	r3, [pc, #488]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b77      	ldr	r3, [pc, #476]	; (8003da4 <HAL_RCC_OscConfig+0x474>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d118      	bne.n	8003c04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd2:	4b74      	ldr	r3, [pc, #464]	; (8003da4 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a73      	ldr	r2, [pc, #460]	; (8003da4 <HAL_RCC_OscConfig+0x474>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bde:	f7fe fd2d 	bl	800263c <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be6:	f7fe fd29 	bl	800263c <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e10c      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	4b6a      	ldr	r3, [pc, #424]	; (8003da4 <HAL_RCC_OscConfig+0x474>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x2ea>
 8003c0c:	4b64      	ldr	r3, [pc, #400]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a63      	ldr	r2, [pc, #396]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
 8003c18:	e01c      	b.n	8003c54 <HAL_RCC_OscConfig+0x324>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b05      	cmp	r3, #5
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x30c>
 8003c22:	4b5f      	ldr	r3, [pc, #380]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	4a5e      	ldr	r2, [pc, #376]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2e:	4b5c      	ldr	r3, [pc, #368]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4a5b      	ldr	r2, [pc, #364]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCC_OscConfig+0x324>
 8003c3c:	4b58      	ldr	r3, [pc, #352]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
 8003c48:	4b55      	ldr	r3, [pc, #340]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a54      	ldr	r2, [pc, #336]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f023 0304 	bic.w	r3, r3, #4
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fcee 	bl	800263c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c64:	f7fe fcea 	bl	800263c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e0cb      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c7a:	4b49      	ldr	r3, [pc, #292]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ee      	beq.n	8003c64 <HAL_RCC_OscConfig+0x334>
 8003c86:	e014      	b.n	8003cb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c88:	f7fe fcd8 	bl	800263c <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c90:	f7fe fcd4 	bl	800263c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e0b5      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca6:	4b3e      	ldr	r3, [pc, #248]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1ee      	bne.n	8003c90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d105      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	4a38      	ldr	r2, [pc, #224]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 80a1 	beq.w	8003e10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cce:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d05c      	beq.n	8003d94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d141      	bne.n	8003d66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <HAL_RCC_OscConfig+0x478>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe fca8 	bl	800263c <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7fe fca4 	bl	800263c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e087      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	4b27      	ldr	r3, [pc, #156]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	019b      	lsls	r3, r3, #6
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	041b      	lsls	r3, r3, #16
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	491b      	ldr	r1, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCC_OscConfig+0x478>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7fe fc7d 	bl	800263c <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d46:	f7fe fc79 	bl	800263c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e05c      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x416>
 8003d64:	e054      	b.n	8003e10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b10      	ldr	r3, [pc, #64]	; (8003da8 <HAL_RCC_OscConfig+0x478>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fc66 	bl	800263c <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fe fc62 	bl	800263c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e045      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_RCC_OscConfig+0x470>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x444>
 8003d92:	e03d      	b.n	8003e10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d107      	bne.n	8003dac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e038      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000
 8003da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dac:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x4ec>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d028      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d121      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d11a      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ddc:	4013      	ands	r3, r2
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d111      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	3b01      	subs	r3, #1
 8003df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800

08003e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0cc      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e34:	4b68      	ldr	r3, [pc, #416]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d90c      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b65      	ldr	r3, [pc, #404]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b63      	ldr	r3, [pc, #396]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0b8      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d020      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e74:	4b59      	ldr	r3, [pc, #356]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a58      	ldr	r2, [pc, #352]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e8c:	4b53      	ldr	r3, [pc, #332]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a52      	ldr	r2, [pc, #328]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b50      	ldr	r3, [pc, #320]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	494d      	ldr	r1, [pc, #308]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d044      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d119      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e07f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d003      	beq.n	8003ede <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eda:	2b03      	cmp	r3, #3
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e06f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eee:	4b3b      	ldr	r3, [pc, #236]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e067      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efe:	4b37      	ldr	r3, [pc, #220]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f023 0203 	bic.w	r2, r3, #3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4934      	ldr	r1, [pc, #208]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f10:	f7fe fb94 	bl	800263c <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f16:	e00a      	b.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f18:	f7fe fb90 	bl	800263c <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e04f      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 020c 	and.w	r2, r3, #12
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d1eb      	bne.n	8003f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d20c      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4e:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d001      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e032      	b.n	8003fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f74:	4b19      	ldr	r3, [pc, #100]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4916      	ldr	r1, [pc, #88]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f92:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	490e      	ldr	r1, [pc, #56]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa6:	f000 f821 	bl	8003fec <HAL_RCC_GetSysClockFreq>
 8003faa:	4602      	mov	r2, r0
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	091b      	lsrs	r3, r3, #4
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	490a      	ldr	r1, [pc, #40]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	5ccb      	ldrb	r3, [r1, r3]
 8003fba:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fe faf4 	bl	80025b4 <HAL_InitTick>

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023c00 	.word	0x40023c00
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	0800d9ec 	.word	0x0800d9ec
 8003fe4:	20000010 	.word	0x20000010
 8003fe8:	20000014 	.word	0x20000014

08003fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff0:	b094      	sub	sp, #80	; 0x50
 8003ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004004:	4b79      	ldr	r3, [pc, #484]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d00d      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x40>
 8004010:	2b08      	cmp	r3, #8
 8004012:	f200 80e1 	bhi.w	80041d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x34>
 800401a:	2b04      	cmp	r3, #4
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x3a>
 800401e:	e0db      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b73      	ldr	r3, [pc, #460]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004022:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004024:	e0db      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004026:	4b73      	ldr	r3, [pc, #460]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402a:	e0d8      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800402c:	4b6f      	ldr	r3, [pc, #444]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004036:	4b6d      	ldr	r3, [pc, #436]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b6a      	ldr	r3, [pc, #424]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	2200      	movs	r2, #0
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38
 800404c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004054:	633b      	str	r3, [r7, #48]	; 0x30
 8004056:	2300      	movs	r3, #0
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
 800405a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800405e:	4622      	mov	r2, r4
 8004060:	462b      	mov	r3, r5
 8004062:	f04f 0000 	mov.w	r0, #0
 8004066:	f04f 0100 	mov.w	r1, #0
 800406a:	0159      	lsls	r1, r3, #5
 800406c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004070:	0150      	lsls	r0, r2, #5
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4621      	mov	r1, r4
 8004078:	1a51      	subs	r1, r2, r1
 800407a:	6139      	str	r1, [r7, #16]
 800407c:	4629      	mov	r1, r5
 800407e:	eb63 0301 	sbc.w	r3, r3, r1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004090:	4659      	mov	r1, fp
 8004092:	018b      	lsls	r3, r1, #6
 8004094:	4651      	mov	r1, sl
 8004096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800409a:	4651      	mov	r1, sl
 800409c:	018a      	lsls	r2, r1, #6
 800409e:	4651      	mov	r1, sl
 80040a0:	ebb2 0801 	subs.w	r8, r2, r1
 80040a4:	4659      	mov	r1, fp
 80040a6:	eb63 0901 	sbc.w	r9, r3, r1
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040be:	4690      	mov	r8, r2
 80040c0:	4699      	mov	r9, r3
 80040c2:	4623      	mov	r3, r4
 80040c4:	eb18 0303 	adds.w	r3, r8, r3
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	462b      	mov	r3, r5
 80040cc:	eb49 0303 	adc.w	r3, r9, r3
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040de:	4629      	mov	r1, r5
 80040e0:	024b      	lsls	r3, r1, #9
 80040e2:	4621      	mov	r1, r4
 80040e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e8:	4621      	mov	r1, r4
 80040ea:	024a      	lsls	r2, r1, #9
 80040ec:	4610      	mov	r0, r2
 80040ee:	4619      	mov	r1, r3
 80040f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f2:	2200      	movs	r2, #0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fc:	f7fc f918 	bl	8000330 <__aeabi_uldivmod>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4613      	mov	r3, r2
 8004106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004108:	e058      	b.n	80041bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800410a:	4b38      	ldr	r3, [pc, #224]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	2200      	movs	r2, #0
 8004112:	4618      	mov	r0, r3
 8004114:	4611      	mov	r1, r2
 8004116:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	2300      	movs	r3, #0
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004124:	4642      	mov	r2, r8
 8004126:	464b      	mov	r3, r9
 8004128:	f04f 0000 	mov.w	r0, #0
 800412c:	f04f 0100 	mov.w	r1, #0
 8004130:	0159      	lsls	r1, r3, #5
 8004132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004136:	0150      	lsls	r0, r2, #5
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4641      	mov	r1, r8
 800413e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004142:	4649      	mov	r1, r9
 8004144:	eb63 0b01 	sbc.w	fp, r3, r1
 8004148:	f04f 0200 	mov.w	r2, #0
 800414c:	f04f 0300 	mov.w	r3, #0
 8004150:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004154:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004158:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800415c:	ebb2 040a 	subs.w	r4, r2, sl
 8004160:	eb63 050b 	sbc.w	r5, r3, fp
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	00eb      	lsls	r3, r5, #3
 800416e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004172:	00e2      	lsls	r2, r4, #3
 8004174:	4614      	mov	r4, r2
 8004176:	461d      	mov	r5, r3
 8004178:	4643      	mov	r3, r8
 800417a:	18e3      	adds	r3, r4, r3
 800417c:	603b      	str	r3, [r7, #0]
 800417e:	464b      	mov	r3, r9
 8004180:	eb45 0303 	adc.w	r3, r5, r3
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004192:	4629      	mov	r1, r5
 8004194:	028b      	lsls	r3, r1, #10
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800419c:	4621      	mov	r1, r4
 800419e:	028a      	lsls	r2, r1, #10
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	61fa      	str	r2, [r7, #28]
 80041ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041b0:	f7fc f8be 	bl	8000330 <__aeabi_uldivmod>
 80041b4:	4602      	mov	r2, r0
 80041b6:	460b      	mov	r3, r1
 80041b8:	4613      	mov	r3, r2
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCC_GetSysClockFreq+0x200>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	3301      	adds	r3, #1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d6:	e002      	b.n	80041de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3750      	adds	r7, #80	; 0x50
 80041e4:	46bd      	mov	sp, r7
 80041e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	00f42400 	.word	0x00f42400
 80041f4:	007a1200 	.word	0x007a1200

080041f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_RCC_GetHCLKFreq+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000010 	.word	0x20000010

08004210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004214:	f7ff fff0 	bl	80041f8 <HAL_RCC_GetHCLKFreq>
 8004218:	4602      	mov	r2, r0
 800421a:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	4903      	ldr	r1, [pc, #12]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004226:	5ccb      	ldrb	r3, [r1, r3]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800422c:	4618      	mov	r0, r3
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40023800 	.word	0x40023800
 8004234:	0800d9fc 	.word	0x0800d9fc

08004238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10b      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800425c:	2b00      	cmp	r3, #0
 800425e:	d105      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004268:	2b00      	cmp	r3, #0
 800426a:	d075      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800426c:	4b91      	ldr	r3, [pc, #580]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004272:	f7fe f9e3 	bl	800263c <HAL_GetTick>
 8004276:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004278:	e008      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800427a:	f7fe f9df 	bl	800263c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e189      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800428c:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d009      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	019a      	lsls	r2, r3, #6
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	071b      	lsls	r3, r3, #28
 80042b0:	4981      	ldr	r1, [pc, #516]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c4:	4b7c      	ldr	r3, [pc, #496]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	0f1b      	lsrs	r3, r3, #28
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	019a      	lsls	r2, r3, #6
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	431a      	orrs	r2, r3
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	071b      	lsls	r3, r3, #28
 80042e4:	4974      	ldr	r1, [pc, #464]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042ec:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f2:	f023 021f 	bic.w	r2, r3, #31
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	496e      	ldr	r1, [pc, #440]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00d      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	019a      	lsls	r2, r3, #6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	061b      	lsls	r3, r3, #24
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	071b      	lsls	r3, r3, #28
 8004324:	4964      	ldr	r1, [pc, #400]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800432c:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004332:	f7fe f983 	bl	800263c <HAL_GetTick>
 8004336:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004338:	e008      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800433a:	f7fe f97f 	bl	800263c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e129      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434c:	4b5a      	ldr	r3, [pc, #360]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800436c:	2b00      	cmp	r3, #0
 800436e:	d079      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004370:	4b52      	ldr	r3, [pc, #328]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004376:	f7fe f961 	bl	800263c <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800437c:	e008      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800437e:	f7fe f95d 	bl	800263c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e107      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004390:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439c:	d0ef      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043aa:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	0f1b      	lsrs	r3, r3, #28
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	019a      	lsls	r2, r3, #6
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	061b      	lsls	r3, r3, #24
 80043c4:	431a      	orrs	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	071b      	lsls	r3, r3, #28
 80043ca:	493b      	ldr	r1, [pc, #236]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043d2:	4b39      	ldr	r3, [pc, #228]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	4934      	ldr	r1, [pc, #208]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01e      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043f8:	4b2f      	ldr	r3, [pc, #188]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	0e1b      	lsrs	r3, r3, #24
 8004400:	f003 030f 	and.w	r3, r3, #15
 8004404:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	019a      	lsls	r2, r3, #6
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	061b      	lsls	r3, r3, #24
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	071b      	lsls	r3, r3, #28
 8004418:	4927      	ldr	r1, [pc, #156]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800441a:	4313      	orrs	r3, r2
 800441c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004426:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	4922      	ldr	r1, [pc, #136]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004436:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800443c:	f7fe f8fe 	bl	800263c <HAL_GetTick>
 8004440:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004444:	f7fe f8fa 	bl	800263c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e0a4      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004456:	4b18      	ldr	r3, [pc, #96]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800445e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004462:	d1ef      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 808b 	beq.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	4a0f      	ldr	r2, [pc, #60]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004480:	6413      	str	r3, [r2, #64]	; 0x40
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800449a:	f7fe f8cf 	bl	800263c <HAL_GetTick>
 800449e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044a0:	e010      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fe f8cb 	bl	800263c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d909      	bls.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e075      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80044b4:	42470068 	.word	0x42470068
 80044b8:	40023800 	.word	0x40023800
 80044bc:	42470070 	.word	0x42470070
 80044c0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044c4:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0e8      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044d0:	4b36      	ldr	r3, [pc, #216]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02f      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d028      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80044f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044f8:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044fe:	4b2c      	ldr	r3, [pc, #176]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004504:	4a29      	ldr	r2, [pc, #164]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d114      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe f891 	bl	800263c <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fe f88d 	bl	800263c <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e035      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ee      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454c:	d10d      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800454e:	4b17      	ldr	r3, [pc, #92]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004562:	4912      	ldr	r1, [pc, #72]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004564:	4313      	orrs	r3, r2
 8004566:	608b      	str	r3, [r1, #8]
 8004568:	e005      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004570:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004574:	6093      	str	r3, [r2, #8]
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004582:	490a      	ldr	r1, [pc, #40]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004584:	4313      	orrs	r3, r2
 8004586:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0310 	and.w	r3, r3, #16
 8004590:	2b00      	cmp	r3, #0
 8004592:	d004      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800459c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40007000 	.word	0x40007000
 80045ac:	40023800 	.word	0x40023800
 80045b0:	42470e40 	.word	0x42470e40
 80045b4:	424711e0 	.word	0x424711e0

080045b8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e025      	b.n	8004618 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7fd fe97 	bl	8002314 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3304      	adds	r3, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4610      	mov	r0, r2
 80045fa:	f000 fedf 	bl	80053bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	461a      	mov	r2, r3
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	f000 ff34 	bl	8005476 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e07b      	b.n	800472a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d108      	bne.n	800464c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004642:	d009      	beq.n	8004658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	61da      	str	r2, [r3, #28]
 800464a:	e005      	b.n	8004658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fd34 	bl	80020e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	ea42 0103 	orr.w	r1, r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	f003 0104 	and.w	r1, r3, #4
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	f003 0210 	and.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e01a      	b.n	800477a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800475a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fd fd07 	bl	8002170 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b088      	sub	sp, #32
 8004786:	af00      	add	r7, sp, #0
 8004788:	60f8      	str	r0, [r7, #12]
 800478a:	60b9      	str	r1, [r7, #8]
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_SPI_Transmit+0x22>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e126      	b.n	80049f2 <HAL_SPI_Transmit+0x270>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ac:	f7fd ff46 	bl	800263c <HAL_GetTick>
 80047b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d002      	beq.n	80047c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
 80047c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c6:	e10b      	b.n	80049e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_SPI_Transmit+0x52>
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047d8:	e102      	b.n	80049e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2203      	movs	r2, #3
 80047de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	88fa      	ldrh	r2, [r7, #6]
 80047f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004820:	d10f      	bne.n	8004842 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d007      	beq.n	8004860 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800485e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004868:	d14b      	bne.n	8004902 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_SPI_Transmit+0xf6>
 8004872:	8afb      	ldrh	r3, [r7, #22]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d13e      	bne.n	80048f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800489c:	e02b      	b.n	80048f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d112      	bne.n	80048d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	881a      	ldrh	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	1c9a      	adds	r2, r3, #2
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3b01      	subs	r3, #1
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80048d0:	e011      	b.n	80048f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d2:	f7fd feb3 	bl	800263c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d803      	bhi.n	80048ea <HAL_SPI_Transmit+0x168>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e8:	d102      	bne.n	80048f0 <HAL_SPI_Transmit+0x16e>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048f4:	e074      	b.n	80049e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1ce      	bne.n	800489e <HAL_SPI_Transmit+0x11c>
 8004900:	e04c      	b.n	800499c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <HAL_SPI_Transmit+0x18e>
 800490a:	8afb      	ldrh	r3, [r7, #22]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d140      	bne.n	8004992 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	7812      	ldrb	r2, [r2, #0]
 800491c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004936:	e02c      	b.n	8004992 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b02      	cmp	r3, #2
 8004944:	d113      	bne.n	800496e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	86da      	strh	r2, [r3, #54]	; 0x36
 800496c:	e011      	b.n	8004992 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800496e:	f7fd fe65 	bl	800263c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d803      	bhi.n	8004986 <HAL_SPI_Transmit+0x204>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d102      	bne.n	800498c <HAL_SPI_Transmit+0x20a>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004990:	e026      	b.n	80049e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1cd      	bne.n	8004938 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	6839      	ldr	r1, [r7, #0]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fbd9 	bl	8005158 <SPI_EndRxTxTransaction>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	613b      	str	r3, [r7, #16]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e000      	b.n	80049e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b088      	sub	sp, #32
 80049fe:	af02      	add	r7, sp, #8
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a16:	d112      	bne.n	8004a3e <HAL_SPI_Receive+0x44>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10e      	bne.n	8004a3e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2204      	movs	r2, #4
 8004a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a28:	88fa      	ldrh	r2, [r7, #6]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f8f1 	bl	8004c1c <HAL_SPI_TransmitReceive>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	e0ea      	b.n	8004c14 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_SPI_Receive+0x52>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e0e3      	b.n	8004c14 <HAL_SPI_Receive+0x21a>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a54:	f7fd fdf2 	bl	800263c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a6a:	e0ca      	b.n	8004c02 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d002      	beq.n	8004a78 <HAL_SPI_Receive+0x7e>
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a7c:	e0c1      	b.n	8004c02 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2204      	movs	r2, #4
 8004a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d10f      	bne.n	8004ae6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ae4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b40      	cmp	r3, #64	; 0x40
 8004af2:	d007      	beq.n	8004b04 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b02:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d162      	bne.n	8004bd2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b0c:	e02e      	b.n	8004b6c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d115      	bne.n	8004b48 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f103 020c 	add.w	r2, r3, #12
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	7812      	ldrb	r2, [r2, #0]
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b46:	e011      	b.n	8004b6c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b48:	f7fd fd78 	bl	800263c <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d803      	bhi.n	8004b60 <HAL_SPI_Receive+0x166>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d102      	bne.n	8004b66 <HAL_SPI_Receive+0x16c>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b6a:	e04a      	b.n	8004c02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1cb      	bne.n	8004b0e <HAL_SPI_Receive+0x114>
 8004b76:	e031      	b.n	8004bdc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d113      	bne.n	8004bae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	b292      	uxth	r2, r2
 8004b92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	1c9a      	adds	r2, r3, #2
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bac:	e011      	b.n	8004bd2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bae:	f7fd fd45 	bl	800263c <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d803      	bhi.n	8004bc6 <HAL_SPI_Receive+0x1cc>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_Receive+0x1d2>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bd0:	e017      	b.n	8004c02 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1cd      	bne.n	8004b78 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fa53 	bl	800508c <SPI_EndRxTransaction>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	75fb      	strb	r3, [r7, #23]
 8004bfe:	e000      	b.n	8004c02 <HAL_SPI_Receive+0x208>
  }

error :
 8004c00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	; 0x30
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x26>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e18a      	b.n	8004f58 <HAL_SPI_TransmitReceive+0x33c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4a:	f7fd fcf7 	bl	800263c <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c60:	887b      	ldrh	r3, [r7, #2]
 8004c62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d00f      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x70>
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c72:	d107      	bne.n	8004c84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <HAL_SPI_TransmitReceive+0x68>
 8004c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d003      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c8a:	e15b      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x82>
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ca4:	e14e      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d003      	beq.n	8004cba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2205      	movs	r2, #5
 8004cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	887a      	ldrh	r2, [r7, #2]
 8004cca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	887a      	ldrh	r2, [r7, #2]
 8004ce2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d007      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d16:	d178      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x10a>
 8004d20:	8b7b      	ldrh	r3, [r7, #26]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d166      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	881a      	ldrh	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	1c9a      	adds	r2, r3, #2
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4a:	e053      	b.n	8004df4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d11b      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x176>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d016      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x176>
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d113      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d119      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x1b8>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d014      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	b292      	uxth	r2, r2
 8004db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	1c9a      	adds	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dd4:	f7fd fc32 	bl	800263c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d807      	bhi.n	8004df4 <HAL_SPI_TransmitReceive+0x1d8>
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d003      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004df2:	e0a7      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1a6      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x130>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1a1      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x130>
 8004e08:	e07c      	b.n	8004f04 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x1fc>
 8004e12:	8b7b      	ldrh	r3, [r7, #26]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d16b      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	7812      	ldrb	r2, [r2, #0]
 8004e24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e3e:	e057      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d11c      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x26c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d017      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x26c>
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d114      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d119      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x2ae>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d014      	beq.n	8004eca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eca:	f7fd fbb7 	bl	800263c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d803      	bhi.n	8004ee2 <HAL_SPI_TransmitReceive+0x2c6>
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d102      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x2cc>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004eee:	e029      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1a2      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x224>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d19d      	bne.n	8004e40 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 f925 	bl	8005158 <SPI_EndRxTxTransaction>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d006      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f20:	e010      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	e000      	b.n	8004f44 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f54:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3730      	adds	r7, #48	; 0x30
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f6e:	b2db      	uxtb	r3, r3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f8c:	f7fd fb56 	bl	800263c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f9c:	f7fd fb4e 	bl	800263c <HAL_GetTick>
 8004fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fa2:	4b39      	ldr	r3, [pc, #228]	; (8005088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	015b      	lsls	r3, r3, #5
 8004fa8:	0d1b      	lsrs	r3, r3, #20
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb2:	e054      	b.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fba:	d050      	beq.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fbc:	f7fd fb3e 	bl	800263c <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d902      	bls.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d13d      	bne.n	800504e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fea:	d111      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff4:	d004      	beq.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d107      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800500e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005018:	d10f      	bne.n	800503a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e017      	b.n	800507e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3b01      	subs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	429a      	cmp	r2, r3
 800507a:	d19b      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000010 	.word	0x20000010

0800508c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a0:	d111      	bne.n	80050c6 <SPI_EndRxTransaction+0x3a>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050aa:	d004      	beq.n	80050b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d107      	bne.n	80050c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050ce:	d12a      	bne.n	8005126 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d8:	d012      	beq.n	8005100 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff ff49 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02d      	beq.n	800514c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e026      	b.n	800514e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	2101      	movs	r1, #1
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff ff36 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01a      	beq.n	800514c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e013      	b.n	800514e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	2101      	movs	r1, #1
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff23 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e000      	b.n	800514e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005164:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <SPI_EndRxTxTransaction+0x7c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <SPI_EndRxTxTransaction+0x80>)
 800516a:	fba2 2303 	umull	r2, r3, r2, r3
 800516e:	0d5b      	lsrs	r3, r3, #21
 8005170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005182:	d112      	bne.n	80051aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	2180      	movs	r1, #128	; 0x80
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff fef4 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d016      	beq.n	80051c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f043 0220 	orr.w	r2, r3, #32
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00f      	b.n	80051ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	2b80      	cmp	r3, #128	; 0x80
 80051c2:	d0f2      	beq.n	80051aa <SPI_EndRxTxTransaction+0x52>
 80051c4:	e000      	b.n	80051c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80051c6:	bf00      	nop
  }

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010
 80051d8:	165e9f81 	.word	0x165e9f81

080051dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e041      	b.n	8005272 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fc ffd2 	bl	80021ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f000 f82e 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a40      	ldr	r2, [pc, #256]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d00f      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a3d      	ldr	r2, [pc, #244]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00b      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a3c      	ldr	r2, [pc, #240]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d007      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d003      	beq.n	80052bc <TIM_Base_SetConfig+0x40>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a3a      	ldr	r2, [pc, #232]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d108      	bne.n	80052ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a2f      	ldr	r2, [pc, #188]	; (8005390 <TIM_Base_SetConfig+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052dc:	d027      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a2c      	ldr	r2, [pc, #176]	; (8005394 <TIM_Base_SetConfig+0x118>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d023      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <TIM_Base_SetConfig+0x11c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2a      	ldr	r2, [pc, #168]	; (800539c <TIM_Base_SetConfig+0x120>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d01b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d017      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <TIM_Base_SetConfig+0x128>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a27      	ldr	r2, [pc, #156]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00f      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a26      	ldr	r2, [pc, #152]	; (80053ac <TIM_Base_SetConfig+0x130>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00b      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a25      	ldr	r2, [pc, #148]	; (80053b0 <TIM_Base_SetConfig+0x134>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d007      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a24      	ldr	r2, [pc, #144]	; (80053b4 <TIM_Base_SetConfig+0x138>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a23      	ldr	r2, [pc, #140]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a0a      	ldr	r2, [pc, #40]	; (8005390 <TIM_Base_SetConfig+0x114>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d003      	beq.n	8005374 <TIM_Base_SetConfig+0xf8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <TIM_Base_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d103      	bne.n	800537c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691a      	ldr	r2, [r3, #16]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	615a      	str	r2, [r3, #20]
}
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40010000 	.word	0x40010000
 8005394:	40000400 	.word	0x40000400
 8005398:	40000800 	.word	0x40000800
 800539c:	40000c00 	.word	0x40000c00
 80053a0:	40010400 	.word	0x40010400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800
 80053b0:	40001800 	.word	0x40001800
 80053b4:	40001c00 	.word	0x40001c00
 80053b8:	40002000 	.word	0x40002000

080053bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d123      	bne.n	8005416 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80053d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	6851      	ldr	r1, [r2, #4]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	6892      	ldr	r2, [r2, #8]
 80053e2:	4311      	orrs	r1, r2
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	68d2      	ldr	r2, [r2, #12]
 80053e8:	4311      	orrs	r1, r2
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	6912      	ldr	r2, [r2, #16]
 80053ee:	4311      	orrs	r1, r2
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	6952      	ldr	r2, [r2, #20]
 80053f4:	4311      	orrs	r1, r2
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	6992      	ldr	r2, [r2, #24]
 80053fa:	4311      	orrs	r1, r2
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	69d2      	ldr	r2, [r2, #28]
 8005400:	4311      	orrs	r1, r2
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	6a12      	ldr	r2, [r2, #32]
 8005406:	4311      	orrs	r1, r2
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800540c:	430a      	orrs	r2, r1
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e028      	b.n	8005468 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	69d9      	ldr	r1, [r3, #28]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4319      	orrs	r1, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	430b      	orrs	r3, r1
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800543c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	6851      	ldr	r1, [r2, #4]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	6892      	ldr	r2, [r2, #8]
 8005448:	4311      	orrs	r1, r2
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	68d2      	ldr	r2, [r2, #12]
 800544e:	4311      	orrs	r1, r2
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	6912      	ldr	r2, [r2, #16]
 8005454:	4311      	orrs	r1, r2
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	6952      	ldr	r2, [r2, #20]
 800545a:	4311      	orrs	r1, r2
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	6992      	ldr	r2, [r2, #24]
 8005460:	430a      	orrs	r2, r1
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d128      	bne.n	80054da <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	1e59      	subs	r1, r3, #1
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	3b01      	subs	r3, #1
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4319      	orrs	r1, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	4319      	orrs	r1, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	031b      	lsls	r3, r3, #12
 80054b2:	4319      	orrs	r1, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	4319      	orrs	r1, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	051b      	lsls	r3, r3, #20
 80054c6:	4319      	orrs	r1, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	430b      	orrs	r3, r1
 80054d2:	431a      	orrs	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	e02f      	b.n	800553a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	68d2      	ldr	r2, [r2, #12]
 80054ea:	3a01      	subs	r2, #1
 80054ec:	0311      	lsls	r1, r2, #12
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	6952      	ldr	r2, [r2, #20]
 80054f2:	3a01      	subs	r2, #1
 80054f4:	0512      	lsls	r2, r2, #20
 80054f6:	430a      	orrs	r2, r1
 80054f8:	431a      	orrs	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	1e59      	subs	r1, r3, #1
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	3b01      	subs	r3, #1
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	4319      	orrs	r1, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	3b01      	subs	r3, #1
 800551c:	021b      	lsls	r3, r3, #8
 800551e:	4319      	orrs	r1, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	3b01      	subs	r3, #1
 8005526:	041b      	lsls	r3, r3, #16
 8005528:	4319      	orrs	r1, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	3b01      	subs	r3, #1
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	430b      	orrs	r3, r1
 8005534:	431a      	orrs	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <__NVIC_SetPriority>:
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	4603      	mov	r3, r0
 8005550:	6039      	str	r1, [r7, #0]
 8005552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005558:	2b00      	cmp	r3, #0
 800555a:	db0a      	blt.n	8005572 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	490c      	ldr	r1, [pc, #48]	; (8005594 <__NVIC_SetPriority+0x4c>)
 8005562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005566:	0112      	lsls	r2, r2, #4
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	440b      	add	r3, r1
 800556c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005570:	e00a      	b.n	8005588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	b2da      	uxtb	r2, r3
 8005576:	4908      	ldr	r1, [pc, #32]	; (8005598 <__NVIC_SetPriority+0x50>)
 8005578:	79fb      	ldrb	r3, [r7, #7]
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	3b04      	subs	r3, #4
 8005580:	0112      	lsls	r2, r2, #4
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	440b      	add	r3, r1
 8005586:	761a      	strb	r2, [r3, #24]
}
 8005588:	bf00      	nop
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000e100 	.word	0xe000e100
 8005598:	e000ed00 	.word	0xe000ed00

0800559c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80055a0:	2100      	movs	r1, #0
 80055a2:	f06f 0004 	mvn.w	r0, #4
 80055a6:	f7ff ffcf 	bl	8005548 <__NVIC_SetPriority>
#endif
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b6:	f3ef 8305 	mrs	r3, IPSR
 80055ba:	603b      	str	r3, [r7, #0]
  return(result);
 80055bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055c2:	f06f 0305 	mvn.w	r3, #5
 80055c6:	607b      	str	r3, [r7, #4]
 80055c8:	e00c      	b.n	80055e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <osKernelInitialize+0x44>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d105      	bne.n	80055de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <osKernelInitialize+0x44>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055d8:	2300      	movs	r3, #0
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	e002      	b.n	80055e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055de:	f04f 33ff 	mov.w	r3, #4294967295
 80055e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055e4:	687b      	ldr	r3, [r7, #4]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20025c10 	.word	0x20025c10

080055f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055fe:	f3ef 8305 	mrs	r3, IPSR
 8005602:	603b      	str	r3, [r7, #0]
  return(result);
 8005604:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <osKernelStart+0x1a>
    stat = osErrorISR;
 800560a:	f06f 0305 	mvn.w	r3, #5
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	e010      	b.n	8005634 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <osKernelStart+0x48>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d109      	bne.n	800562e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800561a:	f7ff ffbf 	bl	800559c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <osKernelStart+0x48>)
 8005620:	2202      	movs	r2, #2
 8005622:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005624:	f002 fa04 	bl	8007a30 <vTaskStartScheduler>
      stat = osOK;
 8005628:	2300      	movs	r3, #0
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	e002      	b.n	8005634 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295
 8005632:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005634:	687b      	ldr	r3, [r7, #4]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20025c10 	.word	0x20025c10

08005644 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af04      	add	r7, sp, #16
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005654:	f3ef 8305 	mrs	r3, IPSR
 8005658:	617b      	str	r3, [r7, #20]
  return(result);
 800565a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800565c:	2b00      	cmp	r3, #0
 800565e:	d17e      	bne.n	800575e <osThreadNew+0x11a>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d07b      	beq.n	800575e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800566a:	2318      	movs	r3, #24
 800566c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d045      	beq.n	800570a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <osThreadNew+0x48>
        name = attr->name;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <osThreadNew+0x6e>
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b38      	cmp	r3, #56	; 0x38
 80056a4:	d805      	bhi.n	80056b2 <osThreadNew+0x6e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <osThreadNew+0x72>
        return (NULL);
 80056b2:	2300      	movs	r3, #0
 80056b4:	e054      	b.n	8005760 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00e      	beq.n	80056ec <osThreadNew+0xa8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	2b6b      	cmp	r3, #107	; 0x6b
 80056d4:	d90a      	bls.n	80056ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d006      	beq.n	80056ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d002      	beq.n	80056ec <osThreadNew+0xa8>
        mem = 1;
 80056e6:	2301      	movs	r3, #1
 80056e8:	61bb      	str	r3, [r7, #24]
 80056ea:	e010      	b.n	800570e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10c      	bne.n	800570e <osThreadNew+0xca>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d108      	bne.n	800570e <osThreadNew+0xca>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d104      	bne.n	800570e <osThreadNew+0xca>
          mem = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	e001      	b.n	800570e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d110      	bne.n	8005736 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800571c:	9202      	str	r2, [sp, #8]
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6a3a      	ldr	r2, [r7, #32]
 8005728:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f001 ff88 	bl	8007640 <xTaskCreateStatic>
 8005730:	4603      	mov	r3, r0
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	e013      	b.n	800575e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d110      	bne.n	800575e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	b29a      	uxth	r2, r3
 8005740:	f107 0310 	add.w	r3, r7, #16
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f001 ffd3 	bl	80076fa <xTaskCreate>
 8005754:	4603      	mov	r3, r0
 8005756:	2b01      	cmp	r3, #1
 8005758:	d001      	beq.n	800575e <osThreadNew+0x11a>
            hTask = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800575e:	693b      	ldr	r3, [r7, #16]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3728      	adds	r7, #40	; 0x28
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005770:	f3ef 8305 	mrs	r3, IPSR
 8005774:	60bb      	str	r3, [r7, #8]
  return(result);
 8005776:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <osDelay+0x1c>
    stat = osErrorISR;
 800577c:	f06f 0305 	mvn.w	r3, #5
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e007      	b.n	8005794 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <osDelay+0x2c>
      vTaskDelay(ticks);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f002 f916 	bl	80079c0 <vTaskDelay>
    }
  }

  return (stat);
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f003 fc89 	bl	80090be <pvTimerGetTimerID>
 80057ac:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <TimerCallback+0x22>
    callb->func (callb->arg);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	6852      	ldr	r2, [r2, #4]
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
  }
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	; 0x30
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	460b      	mov	r3, r1
 80057d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80057d8:	2300      	movs	r3, #0
 80057da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057dc:	f3ef 8305 	mrs	r3, IPSR
 80057e0:	613b      	str	r3, [r7, #16]
  return(result);
 80057e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d163      	bne.n	80058b0 <osTimerNew+0xe8>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d060      	beq.n	80058b0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80057ee:	2008      	movs	r0, #8
 80057f0:	f003 fef2 	bl	80095d8 <pvPortMalloc>
 80057f4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d059      	beq.n	80058b0 <osTimerNew+0xe8>
      callb->func = func;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005808:	7afb      	ldrb	r3, [r7, #11]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <osTimerNew+0x4c>
        reload = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	e001      	b.n	8005818 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005818:	f04f 33ff 	mov.w	r3, #4294967295
 800581c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01c      	beq.n	8005862 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <osTimerNew+0x6e>
          name = attr->name;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d006      	beq.n	800584c <osTimerNew+0x84>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	2b2b      	cmp	r3, #43	; 0x2b
 8005844:	d902      	bls.n	800584c <osTimerNew+0x84>
          mem = 1;
 8005846:	2301      	movs	r3, #1
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	e00c      	b.n	8005866 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d108      	bne.n	8005866 <osTimerNew+0x9e>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <osTimerNew+0x9e>
            mem = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e001      	b.n	8005866 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d10c      	bne.n	8005886 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	4b12      	ldr	r3, [pc, #72]	; (80058bc <osTimerNew+0xf4>)
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	2101      	movs	r1, #1
 800587c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800587e:	f003 f876 	bl	800896e <xTimerCreateStatic>
 8005882:	6238      	str	r0, [r7, #32]
 8005884:	e00b      	b.n	800589e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d108      	bne.n	800589e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800588c:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <osTimerNew+0xf4>)
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	2101      	movs	r1, #1
 8005896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005898:	f003 f848 	bl	800892c <xTimerCreate>
 800589c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d105      	bne.n	80058b0 <osTimerNew+0xe8>
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <osTimerNew+0xe8>
        vPortFree (callb);
 80058aa:	6978      	ldr	r0, [r7, #20]
 80058ac:	f003 ff60 	bl	8009770 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80058b0:	6a3b      	ldr	r3, [r7, #32]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3728      	adds	r7, #40	; 0x28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	0800579f 	.word	0x0800579f

080058c0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af02      	add	r7, sp, #8
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ce:	f3ef 8305 	mrs	r3, IPSR
 80058d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80058d4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <osTimerStart+0x22>
    stat = osErrorISR;
 80058da:	f06f 0305 	mvn.w	r3, #5
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e017      	b.n	8005912 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d103      	bne.n	80058f0 <osTimerStart+0x30>
    stat = osErrorParameter;
 80058e8:	f06f 0303 	mvn.w	r3, #3
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e010      	b.n	8005912 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80058f0:	2300      	movs	r3, #0
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	2104      	movs	r1, #4
 80058fa:	6938      	ldr	r0, [r7, #16]
 80058fc:	f003 f8b0 	bl	8008a60 <xTimerGenericCommand>
 8005900:	4603      	mov	r3, r0
 8005902:	2b01      	cmp	r3, #1
 8005904:	d102      	bne.n	800590c <osTimerStart+0x4c>
      stat = osOK;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	e002      	b.n	8005912 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800590c:	f06f 0302 	mvn.w	r3, #2
 8005910:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005912:	697b      	ldr	r3, [r7, #20]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005928:	f3ef 8305 	mrs	r3, IPSR
 800592c:	60fb      	str	r3, [r7, #12]
  return(result);
 800592e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <osTimerStop+0x20>
    stat = osErrorISR;
 8005934:	f06f 0305 	mvn.w	r3, #5
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e021      	b.n	8005980 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d103      	bne.n	800594a <osTimerStop+0x2e>
    stat = osErrorParameter;
 8005942:	f06f 0303 	mvn.w	r3, #3
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	e01a      	b.n	8005980 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f003 fb8e 	bl	800906c <xTimerIsTimerActive>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <osTimerStop+0x42>
      stat = osErrorResource;
 8005956:	f06f 0302 	mvn.w	r3, #2
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e010      	b.n	8005980 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800595e:	2300      	movs	r3, #0
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	2300      	movs	r3, #0
 8005964:	2200      	movs	r2, #0
 8005966:	2103      	movs	r1, #3
 8005968:	6938      	ldr	r0, [r7, #16]
 800596a:	f003 f879 	bl	8008a60 <xTimerGenericCommand>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	d102      	bne.n	800597a <osTimerStop+0x5e>
        stat = osOK;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e002      	b.n	8005980 <osTimerStop+0x64>
      } else {
        stat = osError;
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005980:	697b      	ldr	r3, [r7, #20]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800598a:	b580      	push	{r7, lr}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005996:	f3ef 8305 	mrs	r3, IPSR
 800599a:	60fb      	str	r3, [r7, #12]
  return(result);
 800599c:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <osTimerIsRunning+0x1e>
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <osTimerIsRunning+0x24>
    running = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	e004      	b.n	80059b8 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80059ae:	6938      	ldr	r0, [r7, #16]
 80059b0:	f003 fb5c 	bl	800906c <xTimerIsTimerActive>
 80059b4:	4603      	mov	r3, r0
 80059b6:	617b      	str	r3, [r7, #20]
  }

  return (running);
 80059b8:	697b      	ldr	r3, [r7, #20]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b086      	sub	sp, #24
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ce:	f3ef 8305 	mrs	r3, IPSR
 80059d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d12d      	bne.n	8005a36 <osEventFlagsNew+0x74>
    mem = -1;
 80059da:	f04f 33ff 	mov.w	r3, #4294967295
 80059de:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d015      	beq.n	8005a12 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d006      	beq.n	80059fc <osEventFlagsNew+0x3a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	2b1f      	cmp	r3, #31
 80059f4:	d902      	bls.n	80059fc <osEventFlagsNew+0x3a>
        mem = 1;
 80059f6:	2301      	movs	r3, #1
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e00c      	b.n	8005a16 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d108      	bne.n	8005a16 <osEventFlagsNew+0x54>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d104      	bne.n	8005a16 <osEventFlagsNew+0x54>
          mem = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e001      	b.n	8005a16 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d106      	bne.n	8005a2a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fab3 	bl	8005f8c <xEventGroupCreateStatic>
 8005a26:	6178      	str	r0, [r7, #20]
 8005a28:	e005      	b.n	8005a36 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005a30:	f000 fae3 	bl	8005ffa <xEventGroupCreate>
 8005a34:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005a36:	697b      	ldr	r3, [r7, #20]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <osEventFlagsSet+0x1e>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005a5e:	f06f 0303 	mvn.w	r3, #3
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e028      	b.n	8005ab8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a66:	f3ef 8305 	mrs	r3, IPSR
 8005a6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d01d      	beq.n	8005aae <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6938      	ldr	r0, [r7, #16]
 8005a80:	f000 fb6e 	bl	8006160 <xEventGroupSetBitsFromISR>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8005a8a:	f06f 0302 	mvn.w	r3, #2
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e012      	b.n	8005ab8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00d      	beq.n	8005ab8 <osEventFlagsSet+0x78>
 8005a9c:	4b09      	ldr	r3, [pc, #36]	; (8005ac4 <osEventFlagsSet+0x84>)
 8005a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa2:	601a      	str	r2, [r3, #0]
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	e004      	b.n	8005ab8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6938      	ldr	r0, [r7, #16]
 8005ab2:	f000 fabc 	bl	800602e <xEventGroupSetBits>
 8005ab6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8005ab8:	697b      	ldr	r3, [r7, #20]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	e000ed04 	.word	0xe000ed04

08005ac8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad4:	f3ef 8305 	mrs	r3, IPSR
 8005ad8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ada:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d174      	bne.n	8005bca <osMutexNew+0x102>
    if (attr != NULL) {
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	61bb      	str	r3, [r7, #24]
 8005aec:	e001      	b.n	8005af2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <osMutexNew+0x3a>
      rmtx = 1U;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e001      	b.n	8005b06 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d15c      	bne.n	8005bca <osMutexNew+0x102>
      mem = -1;
 8005b10:	f04f 33ff 	mov.w	r3, #4294967295
 8005b14:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d015      	beq.n	8005b48 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <osMutexNew+0x6a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b4f      	cmp	r3, #79	; 0x4f
 8005b2a:	d902      	bls.n	8005b32 <osMutexNew+0x6a>
          mem = 1;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	e00c      	b.n	8005b4c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d108      	bne.n	8005b4c <osMutexNew+0x84>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d104      	bne.n	8005b4c <osMutexNew+0x84>
            mem = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	e001      	b.n	8005b4c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d112      	bne.n	8005b78 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	2004      	movs	r0, #4
 8005b60:	f000 fd3b 	bl	80065da <xQueueCreateMutexStatic>
 8005b64:	61f8      	str	r0, [r7, #28]
 8005b66:	e016      	b.n	8005b96 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	2001      	movs	r0, #1
 8005b70:	f000 fd33 	bl	80065da <xQueueCreateMutexStatic>
 8005b74:	61f8      	str	r0, [r7, #28]
 8005b76:	e00e      	b.n	8005b96 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d004      	beq.n	8005b8e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005b84:	2004      	movs	r0, #4
 8005b86:	f000 fd10 	bl	80065aa <xQueueCreateMutex>
 8005b8a:	61f8      	str	r0, [r7, #28]
 8005b8c:	e003      	b.n	8005b96 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005b8e:	2001      	movs	r0, #1
 8005b90:	f000 fd0b 	bl	80065aa <xQueueCreateMutex>
 8005b94:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00c      	beq.n	8005bb6 <osMutexNew+0xee>
        if (attr != NULL) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <osMutexNew+0xe2>
          name = attr->name;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]
 8005ba8:	e001      	b.n	8005bae <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	69f8      	ldr	r0, [r7, #28]
 8005bb2:	f001 fcb5 	bl	8007520 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d006      	beq.n	8005bca <osMutexNew+0x102>
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005bca:	69fb      	ldr	r3, [r7, #28]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf2:	f3ef 8305 	mrs	r3, IPSR
 8005bf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bf8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005bfe:	f06f 0305 	mvn.w	r3, #5
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e02c      	b.n	8005c60 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d103      	bne.n	8005c14 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005c0c:	f06f 0303 	mvn.w	r3, #3
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e025      	b.n	8005c60 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d011      	beq.n	8005c3e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005c1a:	6839      	ldr	r1, [r7, #0]
 8005c1c:	6938      	ldr	r0, [r7, #16]
 8005c1e:	f000 fd2b 	bl	8006678 <xQueueTakeMutexRecursive>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d01b      	beq.n	8005c60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005c2e:	f06f 0301 	mvn.w	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	e014      	b.n	8005c60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c36:	f06f 0302 	mvn.w	r3, #2
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e010      	b.n	8005c60 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6938      	ldr	r0, [r7, #16]
 8005c42:	f001 f93f 	bl	8006ec4 <xQueueSemaphoreTake>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d009      	beq.n	8005c60 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005c52:	f06f 0301 	mvn.w	r3, #1
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e002      	b.n	8005c60 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c5a:	f06f 0302 	mvn.w	r3, #2
 8005c5e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005c60:	697b      	ldr	r3, [r7, #20]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c86:	f3ef 8305 	mrs	r3, IPSR
 8005c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c8c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d003      	beq.n	8005c9a <osMutexRelease+0x30>
    stat = osErrorISR;
 8005c92:	f06f 0305 	mvn.w	r3, #5
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	e01f      	b.n	8005cda <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d103      	bne.n	8005ca8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005ca0:	f06f 0303 	mvn.w	r3, #3
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e018      	b.n	8005cda <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005cae:	6938      	ldr	r0, [r7, #16]
 8005cb0:	f000 fcae 	bl	8006610 <xQueueGiveMutexRecursive>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d00f      	beq.n	8005cda <osMutexRelease+0x70>
        stat = osErrorResource;
 8005cba:	f06f 0302 	mvn.w	r3, #2
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e00b      	b.n	8005cda <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	6938      	ldr	r0, [r7, #16]
 8005cca:	f000 fd75 	bl	80067b8 <xQueueGenericSend>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d002      	beq.n	8005cda <osMutexRelease+0x70>
        stat = osErrorResource;
 8005cd4:	f06f 0302 	mvn.w	r3, #2
 8005cd8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	; 0x28
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf4:	f3ef 8305 	mrs	r3, IPSR
 8005cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8005cfa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d175      	bne.n	8005dec <osSemaphoreNew+0x108>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d072      	beq.n	8005dec <osSemaphoreNew+0x108>
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d86e      	bhi.n	8005dec <osSemaphoreNew+0x108>
    mem = -1;
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d015      	beq.n	8005d46 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d006      	beq.n	8005d30 <osSemaphoreNew+0x4c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b4f      	cmp	r3, #79	; 0x4f
 8005d28:	d902      	bls.n	8005d30 <osSemaphoreNew+0x4c>
        mem = 1;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	61bb      	str	r3, [r7, #24]
 8005d2e:	e00c      	b.n	8005d4a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d108      	bne.n	8005d4a <osSemaphoreNew+0x66>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <osSemaphoreNew+0x66>
          mem = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	e001      	b.n	8005d4a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d04c      	beq.n	8005dec <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d128      	bne.n	8005daa <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d10a      	bne.n	8005d74 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2203      	movs	r2, #3
 8005d64:	9200      	str	r2, [sp, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	2100      	movs	r1, #0
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	f000 fb28 	bl	80063c0 <xQueueGenericCreateStatic>
 8005d70:	61f8      	str	r0, [r7, #28]
 8005d72:	e005      	b.n	8005d80 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005d74:	2203      	movs	r2, #3
 8005d76:	2100      	movs	r1, #0
 8005d78:	2001      	movs	r0, #1
 8005d7a:	f000 fb99 	bl	80064b0 <xQueueGenericCreate>
 8005d7e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d022      	beq.n	8005dcc <osSemaphoreNew+0xe8>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01f      	beq.n	8005dcc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2100      	movs	r1, #0
 8005d92:	69f8      	ldr	r0, [r7, #28]
 8005d94:	f000 fd10 	bl	80067b8 <xQueueGenericSend>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d016      	beq.n	8005dcc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005d9e:	69f8      	ldr	r0, [r7, #28]
 8005da0:	f001 fa6a 	bl	8007278 <vQueueDelete>
            hSemaphore = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e010      	b.n	8005dcc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d108      	bne.n	8005dc2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	461a      	mov	r2, r3
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 fc93 	bl	80066e4 <xQueueCreateCountingSemaphoreStatic>
 8005dbe:	61f8      	str	r0, [r7, #28]
 8005dc0:	e004      	b.n	8005dcc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fcc4 	bl	8006752 <xQueueCreateCountingSemaphore>
 8005dca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00c      	beq.n	8005dec <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	617b      	str	r3, [r7, #20]
 8005dde:	e001      	b.n	8005de4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005de4:	6979      	ldr	r1, [r7, #20]
 8005de6:	69f8      	ldr	r0, [r7, #28]
 8005de8:	f001 fb9a 	bl	8007520 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005dec:	69fb      	ldr	r3, [r7, #28]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3720      	adds	r7, #32
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005e10:	f06f 0303 	mvn.w	r3, #3
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e039      	b.n	8005e8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e18:	f3ef 8305 	mrs	r3, IPSR
 8005e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d022      	beq.n	8005e6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005e2a:	f06f 0303 	mvn.w	r3, #3
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e02c      	b.n	8005e8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	6938      	ldr	r0, [r7, #16]
 8005e40:	f001 f97c 	bl	800713c <xQueueReceiveFromISR>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d003      	beq.n	8005e52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005e4a:	f06f 0302 	mvn.w	r3, #2
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e01c      	b.n	8005e8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d019      	beq.n	8005e8c <osSemaphoreAcquire+0x94>
 8005e58:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <osSemaphoreAcquire+0xa0>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	e010      	b.n	8005e8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6938      	ldr	r0, [r7, #16]
 8005e6e:	f001 f829 	bl	8006ec4 <xQueueSemaphoreTake>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d009      	beq.n	8005e8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005e7e:	f06f 0301 	mvn.w	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e002      	b.n	8005e8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005e86:	f06f 0302 	mvn.w	r3, #2
 8005e8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005e8c:	697b      	ldr	r3, [r7, #20]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005eb2:	f06f 0303 	mvn.w	r3, #3
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e02c      	b.n	8005f14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eba:	f3ef 8305 	mrs	r3, IPSR
 8005ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01a      	beq.n	8005efc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6938      	ldr	r0, [r7, #16]
 8005ed2:	f000 fe46 	bl	8006b62 <xQueueGiveFromISR>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d003      	beq.n	8005ee4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005edc:	f06f 0302 	mvn.w	r3, #2
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e017      	b.n	8005f14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <osSemaphoreRelease+0x78>
 8005eea:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <osSemaphoreRelease+0x84>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	e00b      	b.n	8005f14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005efc:	2300      	movs	r3, #0
 8005efe:	2200      	movs	r2, #0
 8005f00:	2100      	movs	r1, #0
 8005f02:	6938      	ldr	r0, [r7, #16]
 8005f04:	f000 fc58 	bl	80067b8 <xQueueGenericSend>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d002      	beq.n	8005f14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005f0e:	f06f 0302 	mvn.w	r3, #2
 8005f12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005f14:	697b      	ldr	r3, [r7, #20]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4a07      	ldr	r2, [pc, #28]	; (8005f50 <vApplicationGetIdleTaskMemory+0x2c>)
 8005f34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4a06      	ldr	r2, [pc, #24]	; (8005f54 <vApplicationGetIdleTaskMemory+0x30>)
 8005f3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2280      	movs	r2, #128	; 0x80
 8005f40:	601a      	str	r2, [r3, #0]
}
 8005f42:	bf00      	nop
 8005f44:	3714      	adds	r7, #20
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	20025c14 	.word	0x20025c14
 8005f54:	20025c80 	.word	0x20025c80

08005f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a07      	ldr	r2, [pc, #28]	; (8005f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <vApplicationGetTimerTaskMemory+0x30>)
 8005f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f76:	601a      	str	r2, [r3, #0]
}
 8005f78:	bf00      	nop
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	20025e80 	.word	0x20025e80
 8005f88:	20025eec 	.word	0x20025eec

08005f8c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d00a      	beq.n	8005fd0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60fb      	str	r3, [r7, #12]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f8cf 	bl	8006188 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2201      	movs	r2, #1
 8005fee:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005ff0:	697b      	ldr	r3, [r7, #20]
	}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006000:	2020      	movs	r0, #32
 8006002:	f003 fae9 	bl	80095d8 <pvPortMalloc>
 8006006:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3304      	adds	r3, #4
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f8b5 	bl	8006188 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006024:	687b      	ldr	r3, [r7, #4]
	}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b08e      	sub	sp, #56	; 0x38
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006038:	2300      	movs	r3, #0
 800603a:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006040:	2300      	movs	r3, #0
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <xEventGroupSetBits+0x32>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	613b      	str	r3, [r7, #16]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <xEventGroupSetBits+0x52>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	60fb      	str	r3, [r7, #12]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	3304      	adds	r3, #4
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	3308      	adds	r3, #8
 800608a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800608c:	f001 fd4c 	bl	8007b28 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	431a      	orrs	r2, r3
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80060a2:	e03c      	b.n	800611e <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80060aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060ba:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80060c2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	4013      	ands	r3, r2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060de:	e008      	b.n	80060f2 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d101      	bne.n	80060f2 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80060ee:	2301      	movs	r3, #1
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d010      	beq.n	800611a <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	4313      	orrs	r3, r2
 8006108:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006112:	4619      	mov	r1, r3
 8006114:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006116:	f001 ffc1 	bl	800809c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800611e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	429a      	cmp	r2, r3
 8006124:	d1be      	bne.n	80060a4 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	43db      	mvns	r3, r3
 800612e:	401a      	ands	r2, r3
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006134:	f001 fd06 	bl	8007b44 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3738      	adds	r7, #56	; 0x38
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff6c 	bl	800602e <xEventGroupSetBits>
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	68f9      	ldr	r1, [r7, #12]
 8006172:	4804      	ldr	r0, [pc, #16]	; (8006184 <xEventGroupSetBitsFromISR+0x24>)
 8006174:	f002 ffc4 	bl	8009100 <xTimerPendFunctionCallFromISR>
 8006178:	6178      	str	r0, [r7, #20]

		return xReturn;
 800617a:	697b      	ldr	r3, [r7, #20]
	}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	08006145 	.word	0x08006145

08006188 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f103 0208 	add.w	r2, r3, #8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f04f 32ff 	mov.w	r2, #4294967295
 80061a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f103 0208 	add.w	r2, r3, #8
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f103 0208 	add.w	r2, r3, #8
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	601a      	str	r2, [r3, #0]
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d103      	bne.n	800624a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e00c      	b.n	8006264 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3308      	adds	r3, #8
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e002      	b.n	8006258 <vListInsert+0x2e>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d2f6      	bcs.n	8006252 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	601a      	str	r2, [r3, #0]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6892      	ldr	r2, [r2, #8]
 80062b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6852      	ldr	r2, [r2, #4]
 80062bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d103      	bne.n	80062d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	1e5a      	subs	r2, r3, #1
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <xQueueGenericReset+0x2a>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60bb      	str	r3, [r7, #8]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800631a:	f003 f83b 	bl	8009394 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800632a:	fb01 f303 	mul.w	r3, r1, r3
 800632e:	441a      	add	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	3b01      	subs	r3, #1
 800634c:	68f9      	ldr	r1, [r7, #12]
 800634e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	22ff      	movs	r2, #255	; 0xff
 800635e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	22ff      	movs	r2, #255	; 0xff
 8006366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d114      	bne.n	800639a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d01a      	beq.n	80063ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3310      	adds	r3, #16
 800637c:	4618      	mov	r0, r3
 800637e:	f001 fe25 	bl	8007fcc <xTaskRemoveFromEventList>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d012      	beq.n	80063ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <xQueueGenericReset+0xcc>)
 800638a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	e009      	b.n	80063ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3310      	adds	r3, #16
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff fef2 	bl	8006188 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3324      	adds	r3, #36	; 0x24
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff feed 	bl	8006188 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063ae:	f003 f821 	bl	80093f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80063b2:	2301      	movs	r3, #1
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08e      	sub	sp, #56	; 0x38
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <xQueueGenericCreateStatic+0x52>
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <xQueueGenericCreateStatic+0x56>
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <xQueueGenericCreateStatic+0x58>
 8006416:	2300      	movs	r3, #0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10a      	bne.n	8006432 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	623b      	str	r3, [r7, #32]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <xQueueGenericCreateStatic+0x7e>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <xQueueGenericCreateStatic+0x82>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <xQueueGenericCreateStatic+0x84>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61fb      	str	r3, [r7, #28]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800645e:	2350      	movs	r3, #80	; 0x50
 8006460:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2b50      	cmp	r3, #80	; 0x50
 8006466:	d00a      	beq.n	800647e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61bb      	str	r3, [r7, #24]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800647e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00d      	beq.n	80064a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006492:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	4613      	mov	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f83f 	bl	8006524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3730      	adds	r7, #48	; 0x30
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	; 0x28
 80064b4:	af02      	add	r7, sp, #8
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xQueueGenericCreate+0x2a>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	613b      	str	r3, [r7, #16]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	fb02 f303 	mul.w	r3, r2, r3
 80064e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	3350      	adds	r3, #80	; 0x50
 80064e8:	4618      	mov	r0, r3
 80064ea:	f003 f875 	bl	80095d8 <pvPortMalloc>
 80064ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d011      	beq.n	800651a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	3350      	adds	r3, #80	; 0x50
 80064fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006508:	79fa      	ldrb	r2, [r7, #7]
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	4613      	mov	r3, r2
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	68b9      	ldr	r1, [r7, #8]
 8006514:	68f8      	ldr	r0, [r7, #12]
 8006516:	f000 f805 	bl	8006524 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800651a:	69bb      	ldr	r3, [r7, #24]
	}
 800651c:	4618      	mov	r0, r3
 800651e:	3720      	adds	r7, #32
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d103      	bne.n	8006540 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e002      	b.n	8006546 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006552:	2101      	movs	r1, #1
 8006554:	69b8      	ldr	r0, [r7, #24]
 8006556:	f7ff fecb 	bl	80062f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	2073      	movs	r0, #115	; 0x73
 800656a:	f003 fef9 	bl	800a360 <SEGGER_SYSVIEW_RecordU32x3>
}
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006576:	b580      	push	{r7, lr}
 8006578:	b082      	sub	sp, #8
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00e      	beq.n	80065a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006596:	2300      	movs	r3, #0
 8006598:	2200      	movs	r2, #0
 800659a:	2100      	movs	r1, #0
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f90b 	bl	80067b8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80065a2:	bf00      	nop
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b086      	sub	sp, #24
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	4603      	mov	r3, r0
 80065b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065b4:	2301      	movs	r3, #1
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	461a      	mov	r2, r3
 80065c0:	6939      	ldr	r1, [r7, #16]
 80065c2:	6978      	ldr	r0, [r7, #20]
 80065c4:	f7ff ff74 	bl	80064b0 <xQueueGenericCreate>
 80065c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7ff ffd3 	bl	8006576 <prvInitialiseMutex>

		return xNewQueue;
 80065d0:	68fb      	ldr	r3, [r7, #12]
	}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b088      	sub	sp, #32
 80065de:	af02      	add	r7, sp, #8
 80065e0:	4603      	mov	r3, r0
 80065e2:	6039      	str	r1, [r7, #0]
 80065e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2200      	movs	r2, #0
 80065f6:	6939      	ldr	r1, [r7, #16]
 80065f8:	6978      	ldr	r0, [r7, #20]
 80065fa:	f7ff fee1 	bl	80063c0 <xQueueGenericCreateStatic>
 80065fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff ffb8 	bl	8006576 <prvInitialiseMutex>

		return xNewQueue;
 8006606:	68fb      	ldr	r3, [r7, #12]
	}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60fb      	str	r3, [r7, #12]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	689c      	ldr	r4, [r3, #8]
 800663c:	f001 ff26 	bl	800848c <xTaskGetCurrentTaskHandle>
 8006640:	4603      	mov	r3, r0
 8006642:	429c      	cmp	r4, r3
 8006644:	d111      	bne.n	800666a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	1e5a      	subs	r2, r3, #1
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d105      	bne.n	8006664 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006658:	2300      	movs	r3, #0
 800665a:	2200      	movs	r2, #0
 800665c:	2100      	movs	r1, #0
 800665e:	6938      	ldr	r0, [r7, #16]
 8006660:	f000 f8aa 	bl	80067b8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006664:	2301      	movs	r3, #1
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	e001      	b.n	800666e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800666e:	697b      	ldr	r3, [r7, #20]
	}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd90      	pop	{r4, r7, pc}

08006678 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006678:	b590      	push	{r4, r7, lr}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10a      	bne.n	80066a2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	60fb      	str	r3, [r7, #12]
}
 800669e:	bf00      	nop
 80066a0:	e7fe      	b.n	80066a0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	689c      	ldr	r4, [r3, #8]
 80066a6:	f001 fef1 	bl	800848c <xTaskGetCurrentTaskHandle>
 80066aa:	4603      	mov	r3, r0
 80066ac:	429c      	cmp	r4, r3
 80066ae:	d107      	bne.n	80066c0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80066ba:	2301      	movs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e00c      	b.n	80066da <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6938      	ldr	r0, [r7, #16]
 80066c4:	f000 fbfe 	bl	8006ec4 <xQueueSemaphoreTake>
 80066c8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80066da:	697b      	ldr	r3, [r7, #20]
	}
 80066dc:	4618      	mov	r0, r3
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd90      	pop	{r4, r7, pc}

080066e4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	61bb      	str	r3, [r7, #24]
}
 8006708:	bf00      	nop
 800670a:	e7fe      	b.n	800670a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	429a      	cmp	r2, r3
 8006712:	d90a      	bls.n	800672a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	617b      	str	r3, [r7, #20]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800672a:	2302      	movs	r3, #2
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	2100      	movs	r1, #0
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fe43 	bl	80063c0 <xQueueGenericCreateStatic>
 800673a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006748:	69fb      	ldr	r3, [r7, #28]
	}
 800674a:	4618      	mov	r0, r3
 800674c:	3720      	adds	r7, #32
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	613b      	str	r3, [r7, #16]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	429a      	cmp	r2, r3
 800677e:	d90a      	bls.n	8006796 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006796:	2202      	movs	r2, #2
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff fe88 	bl	80064b0 <xQueueGenericCreate>
 80067a0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80067ae:	697b      	ldr	r3, [r7, #20]
	}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b090      	sub	sp, #64	; 0x40
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067c6:	2300      	movs	r3, #0
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <xQueueGenericSend+0x32>
	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d103      	bne.n	80067f8 <xQueueGenericSend+0x40>
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <xQueueGenericSend+0x44>
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <xQueueGenericSend+0x46>
 80067fc:	2300      	movs	r3, #0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <xQueueGenericSend+0x60>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d103      	bne.n	8006826 <xQueueGenericSend+0x6e>
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <xQueueGenericSend+0x72>
 8006826:	2301      	movs	r3, #1
 8006828:	e000      	b.n	800682c <xQueueGenericSend+0x74>
 800682a:	2300      	movs	r3, #0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10a      	bne.n	8006846 <xQueueGenericSend+0x8e>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	623b      	str	r3, [r7, #32]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006846:	f001 fe31 	bl	80084ac <xTaskGetSchedulerState>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <xQueueGenericSend+0x9e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <xQueueGenericSend+0xa2>
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <xQueueGenericSend+0xa4>
 800685a:	2300      	movs	r3, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d10a      	bne.n	8006876 <xQueueGenericSend+0xbe>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	61fb      	str	r3, [r7, #28]
}
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006876:	f002 fd8d 	bl	8009394 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006882:	429a      	cmp	r2, r3
 8006884:	d302      	bcc.n	800688c <xQueueGenericSend+0xd4>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d136      	bne.n	80068fa <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	4618      	mov	r0, r3
 8006890:	f004 fad2 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	460b      	mov	r3, r1
 800689e:	4601      	mov	r1, r0
 80068a0:	205a      	movs	r0, #90	; 0x5a
 80068a2:	f003 fdd3 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ac:	f000 fd28 	bl	8007300 <prvCopyDataToQueue>
 80068b0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d010      	beq.n	80068dc <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068bc:	3324      	adds	r3, #36	; 0x24
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fb84 	bl	8007fcc <xTaskRemoveFromEventList>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d013      	beq.n	80068f2 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068ca:	4b4d      	ldr	r3, [pc, #308]	; (8006a00 <xQueueGenericSend+0x248>)
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	601a      	str	r2, [r3, #0]
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	e00a      	b.n	80068f2 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068e2:	4b47      	ldr	r3, [pc, #284]	; (8006a00 <xQueueGenericSend+0x248>)
 80068e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068f2:	f002 fd7f 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e07d      	b.n	80069f6 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d110      	bne.n	8006922 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006900:	f002 fd78 	bl	80093f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	4618      	mov	r0, r3
 8006908:	f004 fa96 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	6879      	ldr	r1, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	460b      	mov	r3, r1
 8006916:	4601      	mov	r1, r0
 8006918:	205a      	movs	r0, #90	; 0x5a
 800691a:	f003 fd97 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800691e:	2300      	movs	r3, #0
 8006920:	e069      	b.n	80069f6 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	2b00      	cmp	r3, #0
 8006926:	d106      	bne.n	8006936 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	4618      	mov	r0, r3
 800692e:	f001 fc1b 	bl	8008168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006932:	2301      	movs	r3, #1
 8006934:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006936:	f002 fd5d 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800693a:	f001 f8f5 	bl	8007b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800693e:	f002 fd29 	bl	8009394 <vPortEnterCritical>
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006948:	b25b      	sxtb	r3, r3
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d103      	bne.n	8006958 <xQueueGenericSend+0x1a0>
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800695e:	b25b      	sxtb	r3, r3
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d103      	bne.n	800696e <xQueueGenericSend+0x1b6>
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800696e:	f002 fd41 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006972:	1d3a      	adds	r2, r7, #4
 8006974:	f107 0314 	add.w	r3, r7, #20
 8006978:	4611      	mov	r1, r2
 800697a:	4618      	mov	r0, r3
 800697c:	f001 fc0a 	bl	8008194 <xTaskCheckForTimeOut>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d124      	bne.n	80069d0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006988:	f000 fdb2 	bl	80074f0 <prvIsQueueFull>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d018      	beq.n	80069c4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	3310      	adds	r3, #16
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f001 fac4 	bl	8007f28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069a2:	f000 fd3d 	bl	8007420 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069a6:	f001 f8cd 	bl	8007b44 <xTaskResumeAll>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f47f af62 	bne.w	8006876 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069b2:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <xQueueGenericSend+0x248>)
 80069b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	e758      	b.n	8006876 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c6:	f000 fd2b 	bl	8007420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ca:	f001 f8bb 	bl	8007b44 <xTaskResumeAll>
 80069ce:	e752      	b.n	8006876 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069d2:	f000 fd25 	bl	8007420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069d6:	f001 f8b5 	bl	8007b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	4618      	mov	r0, r3
 80069de:	f004 fa2b 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	460b      	mov	r3, r1
 80069ec:	4601      	mov	r1, r0
 80069ee:	205a      	movs	r0, #90	; 0x5a
 80069f0:	f003 fd2c 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80069f4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3738      	adds	r7, #56	; 0x38
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b090      	sub	sp, #64	; 0x40
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d103      	bne.n	8006a40 <xQueueGenericSendFromISR+0x3c>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <xQueueGenericSendFromISR+0x40>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <xQueueGenericSendFromISR+0x42>
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a5c:	bf00      	nop
 8006a5e:	e7fe      	b.n	8006a5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d103      	bne.n	8006a6e <xQueueGenericSendFromISR+0x6a>
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <xQueueGenericSendFromISR+0x6e>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <xQueueGenericSendFromISR+0x70>
 8006a72:	2300      	movs	r3, #0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	623b      	str	r3, [r7, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a8e:	f002 fd63 	bl	8009558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a92:	f3ef 8211 	mrs	r2, BASEPRI
 8006a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	61fa      	str	r2, [r7, #28]
 8006aa8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <xQueueGenericSendFromISR+0xbc>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d139      	bne.n	8006b34 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f004 f9b0 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006ad8:	4601      	mov	r1, r0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	461a      	mov	r2, r3
 8006ade:	2060      	movs	r0, #96	; 0x60
 8006ae0:	f003 fbe4 	bl	800a2ac <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006aea:	f000 fc09 	bl	8007300 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006aee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af6:	d112      	bne.n	8006b1e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d016      	beq.n	8006b2e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 fa61 	bl	8007fcc <xTaskRemoveFromEventList>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e007      	b.n	8006b2e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b22:	3301      	adds	r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	b25a      	sxtb	r2, r3
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006b32:	e00b      	b.n	8006b4c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	4618      	mov	r0, r3
 8006b38:	f004 f97e 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	461a      	mov	r2, r3
 8006b42:	2060      	movs	r0, #96	; 0x60
 8006b44:	f003 fbb2 	bl	800a2ac <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3740      	adds	r7, #64	; 0x40
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b08e      	sub	sp, #56	; 0x38
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	623b      	str	r3, [r7, #32]
}
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <xQueueGiveFromISR+0x48>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	61fb      	str	r3, [r7, #28]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <xQueueGiveFromISR+0x58>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <xQueueGiveFromISR+0x5c>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueGiveFromISR+0x5e>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <xQueueGiveFromISR+0x78>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	61bb      	str	r3, [r7, #24]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bda:	f002 fcbd 	bl	8009558 <vPortValidateInterruptPriority>
	__asm volatile
 8006bde:	f3ef 8211 	mrs	r2, BASEPRI
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	617a      	str	r2, [r7, #20]
 8006bf4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006bf6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d235      	bcs.n	8006c76 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	4618      	mov	r0, r3
 8006c18:	f004 f90e 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006c1c:	4601      	mov	r1, r0
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	2060      	movs	r0, #96	; 0x60
 8006c24:	f003 fb42 	bl	800a2ac <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	1c5a      	adds	r2, r3, #1
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d112      	bne.n	8006c60 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d016      	beq.n	8006c70 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	3324      	adds	r3, #36	; 0x24
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f9c0 	bl	8007fcc <xTaskRemoveFromEventList>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00e      	beq.n	8006c70 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e007      	b.n	8006c70 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c64:	3301      	adds	r3, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	b25a      	sxtb	r2, r3
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c70:	2301      	movs	r3, #1
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
 8006c74:	e00b      	b.n	8006c8e <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f004 f8dd 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006c7e:	4601      	mov	r1, r0
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	2060      	movs	r0, #96	; 0x60
 8006c86:	f003 fb11 	bl	800a2ac <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3738      	adds	r7, #56	; 0x38
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ca4:	b590      	push	{r4, r7, lr}
 8006ca6:	b08f      	sub	sp, #60	; 0x3c
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <xQueueReceive+0x30>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	623b      	str	r3, [r7, #32]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <xQueueReceive+0x3e>
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <xQueueReceive+0x42>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <xQueueReceive+0x44>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueReceive+0x5e>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	61fb      	str	r3, [r7, #28]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d02:	f001 fbd3 	bl	80084ac <xTaskGetSchedulerState>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <xQueueReceive+0x6e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <xQueueReceive+0x72>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e000      	b.n	8006d18 <xQueueReceive+0x74>
 8006d16:	2300      	movs	r3, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <xQueueReceive+0x8e>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	61bb      	str	r3, [r7, #24]
}
 8006d2e:	bf00      	nop
 8006d30:	e7fe      	b.n	8006d30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d32:	f002 fb2f 	bl	8009394 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d02f      	beq.n	8006da2 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d46:	f000 fb45 	bl	80073d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f004 f873 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006d52:	4604      	mov	r4, r0
 8006d54:	2000      	movs	r0, #0
 8006d56:	f004 f86f 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2101      	movs	r1, #1
 8006d60:	9100      	str	r1, [sp, #0]
 8006d62:	4621      	mov	r1, r4
 8006d64:	205c      	movs	r0, #92	; 0x5c
 8006d66:	f003 fb71 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	1e5a      	subs	r2, r3, #1
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00f      	beq.n	8006d9a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 f924 	bl	8007fcc <xTaskRemoveFromEventList>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d8a:	4b4d      	ldr	r3, [pc, #308]	; (8006ec0 <xQueueReceive+0x21c>)
 8006d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d9a:	f002 fb2b 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e08a      	b.n	8006eb8 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d113      	bne.n	8006dd0 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006da8:	f002 fb24 	bl	80093f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dae:	4618      	mov	r0, r3
 8006db0:	f004 f842 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006db4:	4604      	mov	r4, r0
 8006db6:	2000      	movs	r0, #0
 8006db8:	f004 f83e 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	9100      	str	r1, [sp, #0]
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	205c      	movs	r0, #92	; 0x5c
 8006dc8:	f003 fb40 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e073      	b.n	8006eb8 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d106      	bne.n	8006de4 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dd6:	f107 0310 	add.w	r3, r7, #16
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f9c4 	bl	8008168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006de0:	2301      	movs	r3, #1
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006de4:	f002 fb06 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006de8:	f000 fe9e 	bl	8007b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dec:	f002 fad2 	bl	8009394 <vPortEnterCritical>
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006df6:	b25b      	sxtb	r3, r3
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d103      	bne.n	8006e06 <xQueueReceive+0x162>
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e0c:	b25b      	sxtb	r3, r3
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d103      	bne.n	8006e1c <xQueueReceive+0x178>
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e1c:	f002 faea 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e20:	1d3a      	adds	r2, r7, #4
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	4611      	mov	r1, r2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f9b3 	bl	8008194 <xTaskCheckForTimeOut>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d124      	bne.n	8006e7e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e36:	f000 fb45 	bl	80074c4 <prvIsQueueEmpty>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d018      	beq.n	8006e72 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	3324      	adds	r3, #36	; 0x24
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	4611      	mov	r1, r2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f001 f86d 	bl	8007f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e50:	f000 fae6 	bl	8007420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e54:	f000 fe76 	bl	8007b44 <xTaskResumeAll>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f47f af69 	bne.w	8006d32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e60:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <xQueueReceive+0x21c>)
 8006e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	f3bf 8f6f 	isb	sy
 8006e70:	e75f      	b.n	8006d32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e74:	f000 fad4 	bl	8007420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e78:	f000 fe64 	bl	8007b44 <xTaskResumeAll>
 8006e7c:	e759      	b.n	8006d32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e80:	f000 face 	bl	8007420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e84:	f000 fe5e 	bl	8007b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8a:	f000 fb1b 	bl	80074c4 <prvIsQueueEmpty>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f43f af4e 	beq.w	8006d32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f003 ffcd 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	f003 ffc9 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2101      	movs	r1, #1
 8006eac:	9100      	str	r1, [sp, #0]
 8006eae:	4621      	mov	r1, r4
 8006eb0:	205c      	movs	r0, #92	; 0x5c
 8006eb2:	f003 facb 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8006eb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3734      	adds	r7, #52	; 0x34
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd90      	pop	{r4, r7, pc}
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ec4:	b590      	push	{r4, r7, lr}
 8006ec6:	b091      	sub	sp, #68	; 0x44
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	623b      	str	r3, [r7, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	61fb      	str	r3, [r7, #28]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f14:	f001 faca 	bl	80084ac <xTaskGetSchedulerState>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <xQueueSemaphoreTake+0x60>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <xQueueSemaphoreTake+0x64>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <xQueueSemaphoreTake+0x66>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	61bb      	str	r3, [r7, #24]
}
 8006f40:	bf00      	nop
 8006f42:	e7fe      	b.n	8006f42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f44:	f002 fa26 	bl	8009394 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d034      	beq.n	8006fbe <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8006f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f56:	4618      	mov	r0, r3
 8006f58:	f003 ff6e 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f003 ff6a 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006f64:	4602      	mov	r2, r0
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2101      	movs	r1, #1
 8006f6a:	9100      	str	r1, [sp, #0]
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	205c      	movs	r0, #92	; 0x5c
 8006f70:	f003 fa6c 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	1e5a      	subs	r2, r3, #1
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f84:	f001 fc22 	bl	80087cc <pvTaskIncrementMutexHeldCount>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	3310      	adds	r3, #16
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 f816 	bl	8007fcc <xTaskRemoveFromEventList>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fa6:	4b64      	ldr	r3, [pc, #400]	; (8007138 <xQueueSemaphoreTake+0x274>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fb6:	f002 fa1d 	bl	80093f4 <vPortExitCritical>
				return pdPASS;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e0b7      	b.n	800712e <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d121      	bne.n	8007008 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	617b      	str	r3, [r7, #20]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fe0:	f002 fa08 	bl	80093f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f003 ff26 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006fec:	4604      	mov	r4, r0
 8006fee:	2000      	movs	r0, #0
 8006ff0:	f003 ff22 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	9100      	str	r1, [sp, #0]
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	205c      	movs	r0, #92	; 0x5c
 8007000:	f003 fa24 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007004:	2300      	movs	r3, #0
 8007006:	e092      	b.n	800712e <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800700e:	f107 030c 	add.w	r3, r7, #12
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f8a8 	bl	8008168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007018:	2301      	movs	r3, #1
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800701c:	f002 f9ea 	bl	80093f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007020:	f000 fd82 	bl	8007b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007024:	f002 f9b6 	bl	8009394 <vPortEnterCritical>
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800702e:	b25b      	sxtb	r3, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d103      	bne.n	800703e <xQueueSemaphoreTake+0x17a>
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007044:	b25b      	sxtb	r3, r3
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d103      	bne.n	8007054 <xQueueSemaphoreTake+0x190>
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007054:	f002 f9ce 	bl	80093f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007058:	463a      	mov	r2, r7
 800705a:	f107 030c 	add.w	r3, r7, #12
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f897 	bl	8008194 <xTaskCheckForTimeOut>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d132      	bne.n	80070d2 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800706c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800706e:	f000 fa29 	bl	80074c4 <prvIsQueueEmpty>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d026      	beq.n	80070c6 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d109      	bne.n	8007094 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8007080:	f002 f988 	bl	8009394 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	4618      	mov	r0, r3
 800708a:	f001 fa2d 	bl	80084e8 <xTaskPriorityInherit>
 800708e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007090:	f002 f9b0 	bl	80093f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	3324      	adds	r3, #36	; 0x24
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	4611      	mov	r1, r2
 800709c:	4618      	mov	r0, r3
 800709e:	f000 ff43 	bl	8007f28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a4:	f000 f9bc 	bl	8007420 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070a8:	f000 fd4c 	bl	8007b44 <xTaskResumeAll>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f47f af48 	bne.w	8006f44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80070b4:	4b20      	ldr	r3, [pc, #128]	; (8007138 <xQueueSemaphoreTake+0x274>)
 80070b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	e73e      	b.n	8006f44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c8:	f000 f9aa 	bl	8007420 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070cc:	f000 fd3a 	bl	8007b44 <xTaskResumeAll>
 80070d0:	e738      	b.n	8006f44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070d4:	f000 f9a4 	bl	8007420 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070d8:	f000 fd34 	bl	8007b44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070de:	f000 f9f1 	bl	80074c4 <prvIsQueueEmpty>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f43f af2d 	beq.w	8006f44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00d      	beq.n	800710c <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 80070f0:	f002 f950 	bl	8009394 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070f6:	f000 f8eb 	bl	80072d0 <prvGetDisinheritPriorityAfterTimeout>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007102:	4618      	mov	r0, r3
 8007104:	f001 fad8 	bl	80086b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007108:	f002 f974 	bl	80093f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	4618      	mov	r0, r3
 8007110:	f003 fe92 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8007114:	4604      	mov	r4, r0
 8007116:	2000      	movs	r0, #0
 8007118:	f003 fe8e 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 800711c:	4602      	mov	r2, r0
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2101      	movs	r1, #1
 8007122:	9100      	str	r1, [sp, #0]
 8007124:	4621      	mov	r1, r4
 8007126:	205c      	movs	r0, #92	; 0x5c
 8007128:	f003 f990 	bl	800a44c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800712c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800712e:	4618      	mov	r0, r3
 8007130:	373c      	adds	r7, #60	; 0x3c
 8007132:	46bd      	mov	sp, r7
 8007134:	bd90      	pop	{r4, r7, pc}
 8007136:	bf00      	nop
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b08f      	sub	sp, #60	; 0x3c
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	623b      	str	r3, [r7, #32]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d103      	bne.n	8007176 <xQueueReceiveFromISR+0x3a>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <xQueueReceiveFromISR+0x3e>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <xQueueReceiveFromISR+0x40>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	61fb      	str	r3, [r7, #28]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007196:	f002 f9df 	bl	8009558 <vPortValidateInterruptPriority>
	__asm volatile
 800719a:	f3ef 8211 	mrs	r2, BASEPRI
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	61ba      	str	r2, [r7, #24]
 80071b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d03e      	beq.n	8007240 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	4618      	mov	r0, r3
 80071d0:	f003 fe32 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 80071d4:	4604      	mov	r4, r0
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4618      	mov	r0, r3
 80071da:	f003 fe2d 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 80071de:	4602      	mov	r2, r0
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4621      	mov	r1, r4
 80071e4:	2062      	movs	r0, #98	; 0x62
 80071e6:	f003 f8bb 	bl	800a360 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ee:	f000 f8f1 	bl	80073d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	1e5a      	subs	r2, r3, #1
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007202:	d112      	bne.n	800722a <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d016      	beq.n	800723a <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	3310      	adds	r3, #16
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fedb 	bl	8007fcc <xTaskRemoveFromEventList>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00e      	beq.n	800723a <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e007      	b.n	800723a <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800722a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800722e:	3301      	adds	r3, #1
 8007230:	b2db      	uxtb	r3, r3
 8007232:	b25a      	sxtb	r2, r3
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800723a:	2301      	movs	r3, #1
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
 800723e:	e010      	b.n	8007262 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8007240:	2300      	movs	r3, #0
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	4618      	mov	r0, r3
 8007248:	f003 fdf6 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 800724c:	4604      	mov	r4, r0
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4618      	mov	r0, r3
 8007252:	f003 fdf1 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 8007256:	4602      	mov	r2, r0
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4621      	mov	r1, r4
 800725c:	2062      	movs	r0, #98	; 0x62
 800725e:	f003 f87f 	bl	800a360 <SEGGER_SYSVIEW_RecordU32x3>
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f383 8811 	msr	BASEPRI, r3
}
 800726c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007270:	4618      	mov	r0, r3
 8007272:	373c      	adds	r7, #60	; 0x3c
 8007274:	46bd      	mov	sp, r7
 8007276:	bd90      	pop	{r4, r7, pc}

08007278 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10a      	bne.n	80072a0 <vQueueDelete+0x28>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	60bb      	str	r3, [r7, #8]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f003 fdc8 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 80072a8:	4603      	mov	r3, r0
 80072aa:	4619      	mov	r1, r3
 80072ac:	205f      	movs	r0, #95	; 0x5f
 80072ae:	f002 ffc1 	bl	800a234 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f966 	bl	8007584 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f002 fa54 	bl	8009770 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80072c8:	bf00      	nop
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d006      	beq.n	80072ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80072ea:	60fb      	str	r3, [r7, #12]
 80072ec:	e001      	b.n	80072f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072f2:	68fb      	ldr	r3, [r7, #12]
	}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10d      	bne.n	800733a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d14d      	bne.n	80073c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	4618      	mov	r0, r3
 800732c:	f001 f94e 	bl	80085cc <xTaskPriorityDisinherit>
 8007330:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	609a      	str	r2, [r3, #8]
 8007338:	e043      	b.n	80073c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d119      	bne.n	8007374 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6858      	ldr	r0, [r3, #4]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	461a      	mov	r2, r3
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	f004 fa8b 	bl	800b866 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	441a      	add	r2, r3
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685a      	ldr	r2, [r3, #4]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	d32b      	bcc.n	80073c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	e026      	b.n	80073c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	68d8      	ldr	r0, [r3, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737c:	461a      	mov	r2, r3
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	f004 fa71 	bl	800b866 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	425b      	negs	r3, r3
 800738e:	441a      	add	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d207      	bcs.n	80073b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	425b      	negs	r3, r3
 80073aa:	441a      	add	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d105      	bne.n	80073c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3b01      	subs	r3, #1
 80073c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073ca:	697b      	ldr	r3, [r7, #20]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d018      	beq.n	8007418 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	441a      	add	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d303      	bcc.n	8007408 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68d9      	ldr	r1, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007410:	461a      	mov	r2, r3
 8007412:	6838      	ldr	r0, [r7, #0]
 8007414:	f004 fa27 	bl	800b866 <memcpy>
	}
}
 8007418:	bf00      	nop
 800741a:	3708      	adds	r7, #8
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007428:	f001 ffb4 	bl	8009394 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007432:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007434:	e011      	b.n	800745a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d012      	beq.n	8007464 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3324      	adds	r3, #36	; 0x24
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fdc2 	bl	8007fcc <xTaskRemoveFromEventList>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800744e:	f000 ff03 	bl	8008258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	3b01      	subs	r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800745a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	dce9      	bgt.n	8007436 <prvUnlockQueue+0x16>
 8007462:	e000      	b.n	8007466 <prvUnlockQueue+0x46>
					break;
 8007464:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	22ff      	movs	r2, #255	; 0xff
 800746a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800746e:	f001 ffc1 	bl	80093f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007472:	f001 ff8f 	bl	8009394 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800747c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800747e:	e011      	b.n	80074a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3310      	adds	r3, #16
 800748c:	4618      	mov	r0, r3
 800748e:	f000 fd9d 	bl	8007fcc <xTaskRemoveFromEventList>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007498:	f000 fede 	bl	8008258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	3b01      	subs	r3, #1
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	dce9      	bgt.n	8007480 <prvUnlockQueue+0x60>
 80074ac:	e000      	b.n	80074b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	22ff      	movs	r2, #255	; 0xff
 80074b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074b8:	f001 ff9c 	bl	80093f4 <vPortExitCritical>
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074cc:	f001 ff62 	bl	8009394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e001      	b.n	80074e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074e2:	f001 ff87 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 80074e6:	68fb      	ldr	r3, [r7, #12]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074f8:	f001 ff4c 	bl	8009394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007504:	429a      	cmp	r2, r3
 8007506:	d102      	bne.n	800750e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007508:	2301      	movs	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e001      	b.n	8007512 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007512:	f001 ff6f 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 8007516:	68fb      	ldr	r3, [r7, #12]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800752a:	2300      	movs	r3, #0
 800752c:	60fb      	str	r3, [r7, #12]
 800752e:	e01e      	b.n	800756e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007530:	4a13      	ldr	r2, [pc, #76]	; (8007580 <vQueueAddToRegistry+0x60>)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d115      	bne.n	8007568 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800753c:	4910      	ldr	r1, [pc, #64]	; (8007580 <vQueueAddToRegistry+0x60>)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007546:	4a0e      	ldr	r2, [pc, #56]	; (8007580 <vQueueAddToRegistry+0x60>)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	4413      	add	r3, r2
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4618      	mov	r0, r3
 8007556:	f003 fc6f 	bl	800ae38 <SEGGER_SYSVIEW_ShrinkId>
 800755a:	4601      	mov	r1, r0
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	2071      	movs	r0, #113	; 0x71
 8007562:	f002 fea3 	bl	800a2ac <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8007566:	e006      	b.n	8007576 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b07      	cmp	r3, #7
 8007572:	d9dd      	bls.n	8007530 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200262ec 	.word	0x200262ec

08007584 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e016      	b.n	80075c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007592:	4a10      	ldr	r2, [pc, #64]	; (80075d4 <vQueueUnregisterQueue+0x50>)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d10b      	bne.n	80075ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80075a2:	4a0c      	ldr	r2, [pc, #48]	; (80075d4 <vQueueUnregisterQueue+0x50>)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2100      	movs	r1, #0
 80075a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80075ac:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <vQueueUnregisterQueue+0x50>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
				break;
 80075b8:	e006      	b.n	80075c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b07      	cmp	r3, #7
 80075c4:	d9e5      	bls.n	8007592 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	200262ec 	.word	0x200262ec

080075d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075e8:	f001 fed4 	bl	8009394 <vPortEnterCritical>
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075f2:	b25b      	sxtb	r3, r3
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f8:	d103      	bne.n	8007602 <vQueueWaitForMessageRestricted+0x2a>
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007608:	b25b      	sxtb	r3, r3
 800760a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760e:	d103      	bne.n	8007618 <vQueueWaitForMessageRestricted+0x40>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007618:	f001 feec 	bl	80093f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	2b00      	cmp	r3, #0
 8007622:	d106      	bne.n	8007632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	3324      	adds	r3, #36	; 0x24
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fc9f 	bl	8007f70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007632:	6978      	ldr	r0, [r7, #20]
 8007634:	f7ff fef4 	bl	8007420 <prvUnlockQueue>
	}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08e      	sub	sp, #56	; 0x38
 8007644:	af04      	add	r7, sp, #16
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	623b      	str	r3, [r7, #32]
}
 8007666:	bf00      	nop
 8007668:	e7fe      	b.n	8007668 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <xTaskCreateStatic+0x46>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	61fb      	str	r3, [r7, #28]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007686:	236c      	movs	r3, #108	; 0x6c
 8007688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	2b6c      	cmp	r3, #108	; 0x6c
 800768e:	d00a      	beq.n	80076a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8007690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	61bb      	str	r3, [r7, #24]
}
 80076a2:	bf00      	nop
 80076a4:	e7fe      	b.n	80076a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d01e      	beq.n	80076ec <xTaskCreateStatic+0xac>
 80076ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01b      	beq.n	80076ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	2202      	movs	r2, #2
 80076c2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076c6:	2300      	movs	r3, #0
 80076c8:	9303      	str	r3, [sp, #12]
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	9302      	str	r3, [sp, #8]
 80076ce:	f107 0314 	add.w	r3, r7, #20
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 f850 	bl	8007784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076e6:	f000 f8dd 	bl	80078a4 <prvAddNewTaskToReadyList>
 80076ea:	e001      	b.n	80076f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076f0:	697b      	ldr	r3, [r7, #20]
	}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3728      	adds	r7, #40	; 0x28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b08c      	sub	sp, #48	; 0x30
 80076fe:	af04      	add	r7, sp, #16
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	60b9      	str	r1, [r7, #8]
 8007704:	603b      	str	r3, [r7, #0]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4618      	mov	r0, r3
 8007710:	f001 ff62 	bl	80095d8 <pvPortMalloc>
 8007714:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00e      	beq.n	800773a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800771c:	206c      	movs	r0, #108	; 0x6c
 800771e:	f001 ff5b 	bl	80095d8 <pvPortMalloc>
 8007722:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	631a      	str	r2, [r3, #48]	; 0x30
 8007730:	e005      	b.n	800773e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007732:	6978      	ldr	r0, [r7, #20]
 8007734:	f002 f81c 	bl	8009770 <vPortFree>
 8007738:	e001      	b.n	800773e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	2300      	movs	r3, #0
 8007750:	9303      	str	r3, [sp, #12]
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	9302      	str	r3, [sp, #8]
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	9301      	str	r3, [sp, #4]
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f80e 	bl	8007784 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007768:	69f8      	ldr	r0, [r7, #28]
 800776a:	f000 f89b 	bl	80078a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800776e:	2301      	movs	r3, #1
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	e002      	b.n	800777a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007774:	f04f 33ff 	mov.w	r3, #4294967295
 8007778:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800777a:	69bb      	ldr	r3, [r7, #24]
	}
 800777c:	4618      	mov	r0, r3
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	461a      	mov	r2, r3
 800779c:	21a5      	movs	r1, #165	; 0xa5
 800779e:	f003 ffe6 	bl	800b76e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077ac:	3b01      	subs	r3, #1
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	617b      	str	r3, [r7, #20]
}
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d01f      	beq.n	8007822 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
 80077e6:	e012      	b.n	800780e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	7819      	ldrb	r1, [r3, #0]
 80077f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	3334      	adds	r3, #52	; 0x34
 80077f8:	460a      	mov	r2, r1
 80077fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	4413      	add	r3, r2
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d006      	beq.n	8007816 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	3301      	adds	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	2b1d      	cmp	r3, #29
 8007812:	d9e9      	bls.n	80077e8 <prvInitialiseNewTask+0x64>
 8007814:	e000      	b.n	8007818 <prvInitialiseNewTask+0x94>
			{
				break;
 8007816:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8007820:	e003      	b.n	800782a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	2b37      	cmp	r3, #55	; 0x37
 800782e:	d901      	bls.n	8007834 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007830:	2337      	movs	r3, #55	; 0x37
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007838:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783e:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	2200      	movs	r2, #0
 8007844:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	3304      	adds	r3, #4
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe fcbc 	bl	80061c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	3318      	adds	r3, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fcb7 	bl	80061c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	2200      	movs	r2, #0
 8007874:	665a      	str	r2, [r3, #100]	; 0x64
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	68f9      	ldr	r1, [r7, #12]
 8007882:	69b8      	ldr	r0, [r7, #24]
 8007884:	f001 fc5c 	bl	8009140 <pxPortInitialiseStack>
 8007888:	4602      	mov	r2, r0
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800789a:	bf00      	nop
 800789c:	3720      	adds	r7, #32
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078a4:	b5b0      	push	{r4, r5, r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af02      	add	r7, sp, #8
 80078aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078ac:	f001 fd72 	bl	8009394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078b0:	4b3c      	ldr	r3, [pc, #240]	; (80079a4 <prvAddNewTaskToReadyList+0x100>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	4a3b      	ldr	r2, [pc, #236]	; (80079a4 <prvAddNewTaskToReadyList+0x100>)
 80078b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ba:	4b3b      	ldr	r3, [pc, #236]	; (80079a8 <prvAddNewTaskToReadyList+0x104>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078c2:	4a39      	ldr	r2, [pc, #228]	; (80079a8 <prvAddNewTaskToReadyList+0x104>)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078c8:	4b36      	ldr	r3, [pc, #216]	; (80079a4 <prvAddNewTaskToReadyList+0x100>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d110      	bne.n	80078f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078d0:	f000 fce6 	bl	80082a0 <prvInitialiseTaskLists>
 80078d4:	e00d      	b.n	80078f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078d6:	4b35      	ldr	r3, [pc, #212]	; (80079ac <prvAddNewTaskToReadyList+0x108>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078de:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <prvAddNewTaskToReadyList+0x104>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d802      	bhi.n	80078f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078ec:	4a2e      	ldr	r2, [pc, #184]	; (80079a8 <prvAddNewTaskToReadyList+0x104>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078f2:	4b2f      	ldr	r3, [pc, #188]	; (80079b0 <prvAddNewTaskToReadyList+0x10c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3301      	adds	r3, #1
 80078f8:	4a2d      	ldr	r2, [pc, #180]	; (80079b0 <prvAddNewTaskToReadyList+0x10c>)
 80078fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078fc:	4b2c      	ldr	r3, [pc, #176]	; (80079b0 <prvAddNewTaskToReadyList+0x10c>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d016      	beq.n	8007938 <prvAddNewTaskToReadyList+0x94>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4618      	mov	r0, r3
 800790e:	f003 f9cd 	bl	800acac <SEGGER_SYSVIEW_OnTaskCreate>
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	461d      	mov	r5, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	461c      	mov	r4, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	1ae3      	subs	r3, r4, r3
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	462b      	mov	r3, r5
 8007934:	f003 fd4c 	bl	800b3d0 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4618      	mov	r0, r3
 800793c:	f003 fa3a 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007944:	4b1b      	ldr	r3, [pc, #108]	; (80079b4 <prvAddNewTaskToReadyList+0x110>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d903      	bls.n	8007954 <prvAddNewTaskToReadyList+0xb0>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	4a18      	ldr	r2, [pc, #96]	; (80079b4 <prvAddNewTaskToReadyList+0x110>)
 8007952:	6013      	str	r3, [r2, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4a15      	ldr	r2, [pc, #84]	; (80079b8 <prvAddNewTaskToReadyList+0x114>)
 8007962:	441a      	add	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3304      	adds	r3, #4
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fe fc39 	bl	80061e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007970:	f001 fd40 	bl	80093f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007974:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <prvAddNewTaskToReadyList+0x108>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00e      	beq.n	800799a <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <prvAddNewTaskToReadyList+0x104>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	429a      	cmp	r2, r3
 8007988:	d207      	bcs.n	800799a <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800798a:	4b0c      	ldr	r3, [pc, #48]	; (80079bc <prvAddNewTaskToReadyList+0x118>)
 800798c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007990:	601a      	str	r2, [r3, #0]
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bdb0      	pop	{r4, r5, r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20026800 	.word	0x20026800
 80079a8:	2002632c 	.word	0x2002632c
 80079ac:	2002680c 	.word	0x2002680c
 80079b0:	2002681c 	.word	0x2002681c
 80079b4:	20026808 	.word	0x20026808
 80079b8:	20026330 	.word	0x20026330
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d01b      	beq.n	8007a0a <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079d2:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <vTaskDelay+0x68>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00a      	beq.n	80079f0 <vTaskDelay+0x30>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60bb      	str	r3, [r7, #8]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079f0:	f000 f89a 	bl	8007b28 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	2023      	movs	r0, #35	; 0x23
 80079f8:	f002 fc1c 	bl	800a234 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079fc:	2100      	movs	r1, #0
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fef8 	bl	80087f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a04:	f000 f89e 	bl	8007b44 <xTaskResumeAll>
 8007a08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d107      	bne.n	8007a20 <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <vTaskDelay+0x6c>)
 8007a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20026828 	.word	0x20026828
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a3e:	463a      	mov	r2, r7
 8007a40:	1d39      	adds	r1, r7, #4
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fa6c 	bl	8005f24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	9202      	str	r2, [sp, #8]
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	2300      	movs	r3, #0
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	460a      	mov	r2, r1
 8007a5e:	492b      	ldr	r1, [pc, #172]	; (8007b0c <vTaskStartScheduler+0xdc>)
 8007a60:	482b      	ldr	r0, [pc, #172]	; (8007b10 <vTaskStartScheduler+0xe0>)
 8007a62:	f7ff fded 	bl	8007640 <xTaskCreateStatic>
 8007a66:	4603      	mov	r3, r0
 8007a68:	4a2a      	ldr	r2, [pc, #168]	; (8007b14 <vTaskStartScheduler+0xe4>)
 8007a6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a6c:	4b29      	ldr	r3, [pc, #164]	; (8007b14 <vTaskStartScheduler+0xe4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e001      	b.n	8007a7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d102      	bne.n	8007a8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a84:	f000 ff0a 	bl	800889c <xTimerCreateTimerTask>
 8007a88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d129      	bne.n	8007ae4 <vTaskStartScheduler+0xb4>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <vTaskStartScheduler+0xe8>)
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007aac:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <vTaskStartScheduler+0xec>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ab2:	4b1b      	ldr	r3, [pc, #108]	; (8007b20 <vTaskStartScheduler+0xf0>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8007ab8:	4b1a      	ldr	r3, [pc, #104]	; (8007b24 <vTaskStartScheduler+0xf4>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3334      	adds	r3, #52	; 0x34
 8007abe:	2205      	movs	r2, #5
 8007ac0:	4912      	ldr	r1, [pc, #72]	; (8007b0c <vTaskStartScheduler+0xdc>)
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f003 fe43 	bl	800b74e <memcmp>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <vTaskStartScheduler+0xaa>
 8007ace:	4b15      	ldr	r3, [pc, #84]	; (8007b24 <vTaskStartScheduler+0xf4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f003 f92c 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartExec>
 8007ad8:	e001      	b.n	8007ade <vTaskStartScheduler+0xae>
 8007ada:	f003 f8cb 	bl	800ac74 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ade:	f001 fbb7 	bl	8009250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ae2:	e00e      	b.n	8007b02 <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aea:	d10a      	bne.n	8007b02 <vTaskStartScheduler+0xd2>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <vTaskStartScheduler+0xd0>
}
 8007b02:	bf00      	nop
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	0800c64c 	.word	0x0800c64c
 8007b10:	08008271 	.word	0x08008271
 8007b14:	20026824 	.word	0x20026824
 8007b18:	20026820 	.word	0x20026820
 8007b1c:	2002680c 	.word	0x2002680c
 8007b20:	20026804 	.word	0x20026804
 8007b24:	2002632c 	.word	0x2002632c

08007b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b2c:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <vTaskSuspendAll+0x18>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	4a03      	ldr	r2, [pc, #12]	; (8007b40 <vTaskSuspendAll+0x18>)
 8007b34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b36:	bf00      	nop
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	20026828 	.word	0x20026828

08007b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b52:	4b44      	ldr	r3, [pc, #272]	; (8007c64 <xTaskResumeAll+0x120>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b70:	f001 fc10 	bl	8009394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b74:	4b3b      	ldr	r3, [pc, #236]	; (8007c64 <xTaskResumeAll+0x120>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	4a3a      	ldr	r2, [pc, #232]	; (8007c64 <xTaskResumeAll+0x120>)
 8007b7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b7e:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <xTaskResumeAll+0x120>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d166      	bne.n	8007c54 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b86:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <xTaskResumeAll+0x124>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d062      	beq.n	8007c54 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b8e:	e033      	b.n	8007bf8 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b90:	4b36      	ldr	r3, [pc, #216]	; (8007c6c <xTaskResumeAll+0x128>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fb7d 	bl	800629c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fb78 	bl	800629c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f003 f900 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <xTaskResumeAll+0x12c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d903      	bls.n	8007bc8 <xTaskResumeAll+0x84>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc4:	4a2a      	ldr	r2, [pc, #168]	; (8007c70 <xTaskResumeAll+0x12c>)
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4a27      	ldr	r2, [pc, #156]	; (8007c74 <xTaskResumeAll+0x130>)
 8007bd6:	441a      	add	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f7fe faff 	bl	80061e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4b23      	ldr	r3, [pc, #140]	; (8007c78 <xTaskResumeAll+0x134>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d302      	bcc.n	8007bf8 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8007bf2:	4b22      	ldr	r3, [pc, #136]	; (8007c7c <xTaskResumeAll+0x138>)
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bf8:	4b1c      	ldr	r3, [pc, #112]	; (8007c6c <xTaskResumeAll+0x128>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1c7      	bne.n	8007b90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c06:	f000 fc21 	bl	800844c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c0a:	4b1d      	ldr	r3, [pc, #116]	; (8007c80 <xTaskResumeAll+0x13c>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d010      	beq.n	8007c38 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c16:	f000 f859 	bl	8007ccc <xTaskIncrementTick>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8007c20:	4b16      	ldr	r3, [pc, #88]	; (8007c7c <xTaskResumeAll+0x138>)
 8007c22:	2201      	movs	r2, #1
 8007c24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f1      	bne.n	8007c16 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8007c32:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <xTaskResumeAll+0x13c>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c38:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <xTaskResumeAll+0x138>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d009      	beq.n	8007c54 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c40:	2301      	movs	r3, #1
 8007c42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c44:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <xTaskResumeAll+0x140>)
 8007c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c54:	f001 fbce 	bl	80093f4 <vPortExitCritical>

	return xAlreadyYielded;
 8007c58:	68bb      	ldr	r3, [r7, #8]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20026828 	.word	0x20026828
 8007c68:	20026800 	.word	0x20026800
 8007c6c:	200267c0 	.word	0x200267c0
 8007c70:	20026808 	.word	0x20026808
 8007c74:	20026330 	.word	0x20026330
 8007c78:	2002632c 	.word	0x2002632c
 8007c7c:	20026814 	.word	0x20026814
 8007c80:	20026810 	.word	0x20026810
 8007c84:	e000ed04 	.word	0xe000ed04

08007c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <xTaskGetTickCount+0x1c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c94:	687b      	ldr	r3, [r7, #4]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	20026804 	.word	0x20026804

08007ca8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007cae:	f001 fc53 	bl	8009558 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007cb6:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <xTaskGetTickCountFromISR+0x20>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cbc:	683b      	ldr	r3, [r7, #0]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20026804 	.word	0x20026804

08007ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd6:	4b51      	ldr	r3, [pc, #324]	; (8007e1c <xTaskIncrementTick+0x150>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f040 8093 	bne.w	8007e06 <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ce0:	4b4f      	ldr	r3, [pc, #316]	; (8007e20 <xTaskIncrementTick+0x154>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ce8:	4a4d      	ldr	r2, [pc, #308]	; (8007e20 <xTaskIncrementTick+0x154>)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d120      	bne.n	8007d36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cf4:	4b4b      	ldr	r3, [pc, #300]	; (8007e24 <xTaskIncrementTick+0x158>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <xTaskIncrementTick+0x48>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	603b      	str	r3, [r7, #0]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xTaskIncrementTick+0x46>
 8007d14:	4b43      	ldr	r3, [pc, #268]	; (8007e24 <xTaskIncrementTick+0x158>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	60fb      	str	r3, [r7, #12]
 8007d1a:	4b43      	ldr	r3, [pc, #268]	; (8007e28 <xTaskIncrementTick+0x15c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a41      	ldr	r2, [pc, #260]	; (8007e24 <xTaskIncrementTick+0x158>)
 8007d20:	6013      	str	r3, [r2, #0]
 8007d22:	4a41      	ldr	r2, [pc, #260]	; (8007e28 <xTaskIncrementTick+0x15c>)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	4b40      	ldr	r3, [pc, #256]	; (8007e2c <xTaskIncrementTick+0x160>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	4a3f      	ldr	r2, [pc, #252]	; (8007e2c <xTaskIncrementTick+0x160>)
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	f000 fb8b 	bl	800844c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d36:	4b3e      	ldr	r3, [pc, #248]	; (8007e30 <xTaskIncrementTick+0x164>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d34d      	bcc.n	8007ddc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d40:	4b38      	ldr	r3, [pc, #224]	; (8007e24 <xTaskIncrementTick+0x158>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d104      	bne.n	8007d54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d4a:	4b39      	ldr	r3, [pc, #228]	; (8007e30 <xTaskIncrementTick+0x164>)
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d50:	601a      	str	r2, [r3, #0]
					break;
 8007d52:	e043      	b.n	8007ddc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d54:	4b33      	ldr	r3, [pc, #204]	; (8007e24 <xTaskIncrementTick+0x158>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d203      	bcs.n	8007d74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d6c:	4a30      	ldr	r2, [pc, #192]	; (8007e30 <xTaskIncrementTick+0x164>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d72:	e033      	b.n	8007ddc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fa8f 	bl	800629c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	3318      	adds	r3, #24
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fa86 	bl	800629c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f003 f80e 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9c:	4b25      	ldr	r3, [pc, #148]	; (8007e34 <xTaskIncrementTick+0x168>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d903      	bls.n	8007dac <xTaskIncrementTick+0xe0>
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	4a22      	ldr	r2, [pc, #136]	; (8007e34 <xTaskIncrementTick+0x168>)
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db0:	4613      	mov	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4a1f      	ldr	r2, [pc, #124]	; (8007e38 <xTaskIncrementTick+0x16c>)
 8007dba:	441a      	add	r2, r3
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	4610      	mov	r0, r2
 8007dc4:	f7fe fa0d 	bl	80061e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dcc:	4b1b      	ldr	r3, [pc, #108]	; (8007e3c <xTaskIncrementTick+0x170>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d3b4      	bcc.n	8007d40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dda:	e7b1      	b.n	8007d40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ddc:	4b17      	ldr	r3, [pc, #92]	; (8007e3c <xTaskIncrementTick+0x170>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	4915      	ldr	r1, [pc, #84]	; (8007e38 <xTaskIncrementTick+0x16c>)
 8007de4:	4613      	mov	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d901      	bls.n	8007df8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007df4:	2301      	movs	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <xTaskIncrementTick+0x174>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d007      	beq.n	8007e10 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	e004      	b.n	8007e10 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <xTaskIncrementTick+0x178>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	4a0d      	ldr	r2, [pc, #52]	; (8007e44 <xTaskIncrementTick+0x178>)
 8007e0e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e10:	697b      	ldr	r3, [r7, #20]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	20026828 	.word	0x20026828
 8007e20:	20026804 	.word	0x20026804
 8007e24:	200267b8 	.word	0x200267b8
 8007e28:	200267bc 	.word	0x200267bc
 8007e2c:	20026818 	.word	0x20026818
 8007e30:	20026820 	.word	0x20026820
 8007e34:	20026808 	.word	0x20026808
 8007e38:	20026330 	.word	0x20026330
 8007e3c:	2002632c 	.word	0x2002632c
 8007e40:	20026814 	.word	0x20026814
 8007e44:	20026810 	.word	0x20026810

08007e48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e4e:	4b30      	ldr	r3, [pc, #192]	; (8007f10 <vTaskSwitchContext+0xc8>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d003      	beq.n	8007e5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e56:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <vTaskSwitchContext+0xcc>)
 8007e58:	2201      	movs	r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e5c:	e054      	b.n	8007f08 <vTaskSwitchContext+0xc0>
		xYieldPending = pdFALSE;
 8007e5e:	4b2d      	ldr	r3, [pc, #180]	; (8007f14 <vTaskSwitchContext+0xcc>)
 8007e60:	2200      	movs	r2, #0
 8007e62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e64:	4b2c      	ldr	r3, [pc, #176]	; (8007f18 <vTaskSwitchContext+0xd0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e010      	b.n	8007e8e <vTaskSwitchContext+0x46>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10a      	bne.n	8007e88 <vTaskSwitchContext+0x40>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	607b      	str	r3, [r7, #4]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <vTaskSwitchContext+0x3e>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4923      	ldr	r1, [pc, #140]	; (8007f1c <vTaskSwitchContext+0xd4>)
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	4613      	mov	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4413      	add	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	440b      	add	r3, r1
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0e4      	beq.n	8007e6c <vTaskSwitchContext+0x24>
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	4413      	add	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4a1b      	ldr	r2, [pc, #108]	; (8007f1c <vTaskSwitchContext+0xd4>)
 8007eae:	4413      	add	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	605a      	str	r2, [r3, #4]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d104      	bne.n	8007ed2 <vTaskSwitchContext+0x8a>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	4a11      	ldr	r2, [pc, #68]	; (8007f20 <vTaskSwitchContext+0xd8>)
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	4a0e      	ldr	r2, [pc, #56]	; (8007f18 <vTaskSwitchContext+0xd0>)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <vTaskSwitchContext+0xd8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3334      	adds	r3, #52	; 0x34
 8007ee8:	2205      	movs	r2, #5
 8007eea:	490e      	ldr	r1, [pc, #56]	; (8007f24 <vTaskSwitchContext+0xdc>)
 8007eec:	4618      	mov	r0, r3
 8007eee:	f003 fc2e 	bl	800b74e <memcmp>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d005      	beq.n	8007f04 <vTaskSwitchContext+0xbc>
 8007ef8:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <vTaskSwitchContext+0xd8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f002 ff17 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8007f02:	e001      	b.n	8007f08 <vTaskSwitchContext+0xc0>
		traceTASK_SWITCHED_IN();
 8007f04:	f002 feb6 	bl	800ac74 <SEGGER_SYSVIEW_OnIdle>
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20026828 	.word	0x20026828
 8007f14:	20026814 	.word	0x20026814
 8007f18:	20026808 	.word	0x20026808
 8007f1c:	20026330 	.word	0x20026330
 8007f20:	2002632c 	.word	0x2002632c
 8007f24:	0800c64c 	.word	0x0800c64c

08007f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <vTaskPlaceOnEventList+0x44>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3318      	adds	r3, #24
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7fe f967 	bl	800622a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	6838      	ldr	r0, [r7, #0]
 8007f60:	f000 fc48 	bl	80087f4 <prvAddCurrentTaskToDelayedList>
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	2002632c 	.word	0x2002632c

08007f70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	617b      	str	r3, [r7, #20]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f98:	4b0b      	ldr	r3, [pc, #44]	; (8007fc8 <vTaskPlaceOnEventListRestricted+0x58>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3318      	adds	r3, #24
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7fe f91e 	bl	80061e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007fac:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8007fb2:	2024      	movs	r0, #36	; 0x24
 8007fb4:	f002 f920 	bl	800a1f8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f000 fc1a 	bl	80087f4 <prvAddCurrentTaskToDelayedList>
	}
 8007fc0:	bf00      	nop
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	2002632c 	.word	0x2002632c

08007fcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	60fb      	str	r3, [r7, #12]
}
 8007ff4:	bf00      	nop
 8007ff6:	e7fe      	b.n	8007ff6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	3318      	adds	r3, #24
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fe f94d 	bl	800629c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008002:	4b20      	ldr	r3, [pc, #128]	; (8008084 <xTaskRemoveFromEventList+0xb8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d121      	bne.n	800804e <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	3304      	adds	r3, #4
 800800e:	4618      	mov	r0, r3
 8008010:	f7fe f944 	bl	800629c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	4618      	mov	r0, r3
 8008018:	f002 fecc 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	4b19      	ldr	r3, [pc, #100]	; (8008088 <xTaskRemoveFromEventList+0xbc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d903      	bls.n	8008030 <xTaskRemoveFromEventList+0x64>
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802c:	4a16      	ldr	r2, [pc, #88]	; (8008088 <xTaskRemoveFromEventList+0xbc>)
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4a13      	ldr	r2, [pc, #76]	; (800808c <xTaskRemoveFromEventList+0xc0>)
 800803e:	441a      	add	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7fe f8cb 	bl	80061e2 <vListInsertEnd>
 800804c:	e005      	b.n	800805a <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	3318      	adds	r3, #24
 8008052:	4619      	mov	r1, r3
 8008054:	480e      	ldr	r0, [pc, #56]	; (8008090 <xTaskRemoveFromEventList+0xc4>)
 8008056:	f7fe f8c4 	bl	80061e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805e:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <xTaskRemoveFromEventList+0xc8>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	429a      	cmp	r2, r3
 8008066:	d905      	bls.n	8008074 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800806c:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <xTaskRemoveFromEventList+0xcc>)
 800806e:	2201      	movs	r2, #1
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e001      	b.n	8008078 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8008074:	2300      	movs	r3, #0
 8008076:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008078:	697b      	ldr	r3, [r7, #20]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20026828 	.word	0x20026828
 8008088:	20026808 	.word	0x20026808
 800808c:	20026330 	.word	0x20026330
 8008090:	200267c0 	.word	0x200267c0
 8008094:	2002632c 	.word	0x2002632c
 8008098:	20026814 	.word	0x20026814

0800809c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80080a6:	4b2b      	ldr	r3, [pc, #172]	; (8008154 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	613b      	str	r3, [r7, #16]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	60fb      	str	r3, [r7, #12]
}
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7fe f8d3 	bl	800629c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe f8ce 	bl	800629c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	4618      	mov	r0, r3
 8008104:	f002 fe56 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	4b12      	ldr	r3, [pc, #72]	; (8008158 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d903      	bls.n	800811c <vTaskRemoveFromUnorderedEventList+0x80>
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008118:	4a0f      	ldr	r2, [pc, #60]	; (8008158 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4a0c      	ldr	r2, [pc, #48]	; (800815c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800812a:	441a      	add	r2, r3
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	3304      	adds	r3, #4
 8008130:	4619      	mov	r1, r3
 8008132:	4610      	mov	r0, r2
 8008134:	f7fe f855 	bl	80061e2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	4b08      	ldr	r3, [pc, #32]	; (8008160 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	429a      	cmp	r2, r3
 8008144:	d902      	bls.n	800814c <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008146:	4b07      	ldr	r3, [pc, #28]	; (8008164 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]
	}
}
 800814c:	bf00      	nop
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20026828 	.word	0x20026828
 8008158:	20026808 	.word	0x20026808
 800815c:	20026330 	.word	0x20026330
 8008160:	2002632c 	.word	0x2002632c
 8008164:	20026814 	.word	0x20026814

08008168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008170:	4b06      	ldr	r3, [pc, #24]	; (800818c <vTaskInternalSetTimeOutState+0x24>)
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008178:	4b05      	ldr	r3, [pc, #20]	; (8008190 <vTaskInternalSetTimeOutState+0x28>)
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	605a      	str	r2, [r3, #4]
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	20026818 	.word	0x20026818
 8008190:	20026804 	.word	0x20026804

08008194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10a      	bne.n	80081ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80081a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a8:	f383 8811 	msr	BASEPRI, r3
 80081ac:	f3bf 8f6f 	isb	sy
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	613b      	str	r3, [r7, #16]
}
 80081b6:	bf00      	nop
 80081b8:	e7fe      	b.n	80081b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	60fb      	str	r3, [r7, #12]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80081d6:	f001 f8dd 	bl	8009394 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081da:	4b1d      	ldr	r3, [pc, #116]	; (8008250 <xTaskCheckForTimeOut+0xbc>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f2:	d102      	bne.n	80081fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081f4:	2300      	movs	r3, #0
 80081f6:	61fb      	str	r3, [r7, #28]
 80081f8:	e023      	b.n	8008242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4b15      	ldr	r3, [pc, #84]	; (8008254 <xTaskCheckForTimeOut+0xc0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d007      	beq.n	8008216 <xTaskCheckForTimeOut+0x82>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	69ba      	ldr	r2, [r7, #24]
 800820c:	429a      	cmp	r2, r3
 800820e:	d302      	bcc.n	8008216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008210:	2301      	movs	r3, #1
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	e015      	b.n	8008242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	429a      	cmp	r2, r3
 800821e:	d20b      	bcs.n	8008238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	1ad2      	subs	r2, r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff ff9b 	bl	8008168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	e004      	b.n	8008242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800823e:	2301      	movs	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008242:	f001 f8d7 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 8008246:	69fb      	ldr	r3, [r7, #28]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20026804 	.word	0x20026804
 8008254:	20026818 	.word	0x20026818

08008258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008258:	b480      	push	{r7}
 800825a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800825c:	4b03      	ldr	r3, [pc, #12]	; (800826c <vTaskMissedYield+0x14>)
 800825e:	2201      	movs	r2, #1
 8008260:	601a      	str	r2, [r3, #0]
}
 8008262:	bf00      	nop
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	20026814 	.word	0x20026814

08008270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008278:	f000 f852 	bl	8008320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800827c:	4b06      	ldr	r3, [pc, #24]	; (8008298 <prvIdleTask+0x28>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d9f9      	bls.n	8008278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008284:	4b05      	ldr	r3, [pc, #20]	; (800829c <prvIdleTask+0x2c>)
 8008286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800828a:	601a      	str	r2, [r3, #0]
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008294:	e7f0      	b.n	8008278 <prvIdleTask+0x8>
 8008296:	bf00      	nop
 8008298:	20026330 	.word	0x20026330
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082a6:	2300      	movs	r3, #0
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	e00c      	b.n	80082c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4a12      	ldr	r2, [pc, #72]	; (8008300 <prvInitialiseTaskLists+0x60>)
 80082b8:	4413      	add	r3, r2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fd ff64 	bl	8006188 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3301      	adds	r3, #1
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b37      	cmp	r3, #55	; 0x37
 80082ca:	d9ef      	bls.n	80082ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082cc:	480d      	ldr	r0, [pc, #52]	; (8008304 <prvInitialiseTaskLists+0x64>)
 80082ce:	f7fd ff5b 	bl	8006188 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082d2:	480d      	ldr	r0, [pc, #52]	; (8008308 <prvInitialiseTaskLists+0x68>)
 80082d4:	f7fd ff58 	bl	8006188 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082d8:	480c      	ldr	r0, [pc, #48]	; (800830c <prvInitialiseTaskLists+0x6c>)
 80082da:	f7fd ff55 	bl	8006188 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082de:	480c      	ldr	r0, [pc, #48]	; (8008310 <prvInitialiseTaskLists+0x70>)
 80082e0:	f7fd ff52 	bl	8006188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082e4:	480b      	ldr	r0, [pc, #44]	; (8008314 <prvInitialiseTaskLists+0x74>)
 80082e6:	f7fd ff4f 	bl	8006188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082ea:	4b0b      	ldr	r3, [pc, #44]	; (8008318 <prvInitialiseTaskLists+0x78>)
 80082ec:	4a05      	ldr	r2, [pc, #20]	; (8008304 <prvInitialiseTaskLists+0x64>)
 80082ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082f0:	4b0a      	ldr	r3, [pc, #40]	; (800831c <prvInitialiseTaskLists+0x7c>)
 80082f2:	4a05      	ldr	r2, [pc, #20]	; (8008308 <prvInitialiseTaskLists+0x68>)
 80082f4:	601a      	str	r2, [r3, #0]
}
 80082f6:	bf00      	nop
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20026330 	.word	0x20026330
 8008304:	20026790 	.word	0x20026790
 8008308:	200267a4 	.word	0x200267a4
 800830c:	200267c0 	.word	0x200267c0
 8008310:	200267d4 	.word	0x200267d4
 8008314:	200267ec 	.word	0x200267ec
 8008318:	200267b8 	.word	0x200267b8
 800831c:	200267bc 	.word	0x200267bc

08008320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008326:	e019      	b.n	800835c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008328:	f001 f834 	bl	8009394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800832c:	4b10      	ldr	r3, [pc, #64]	; (8008370 <prvCheckTasksWaitingTermination+0x50>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3304      	adds	r3, #4
 8008338:	4618      	mov	r0, r3
 800833a:	f7fd ffaf 	bl	800629c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800833e:	4b0d      	ldr	r3, [pc, #52]	; (8008374 <prvCheckTasksWaitingTermination+0x54>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3b01      	subs	r3, #1
 8008344:	4a0b      	ldr	r2, [pc, #44]	; (8008374 <prvCheckTasksWaitingTermination+0x54>)
 8008346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008348:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <prvCheckTasksWaitingTermination+0x58>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3b01      	subs	r3, #1
 800834e:	4a0a      	ldr	r2, [pc, #40]	; (8008378 <prvCheckTasksWaitingTermination+0x58>)
 8008350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008352:	f001 f84f 	bl	80093f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f848 	bl	80083ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <prvCheckTasksWaitingTermination+0x58>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e1      	bne.n	8008328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200267d4 	.word	0x200267d4
 8008374:	20026800 	.word	0x20026800
 8008378:	200267e8 	.word	0x200267e8

0800837c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008388:	e005      	b.n	8008396 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	3301      	adds	r3, #1
 800838e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3301      	adds	r3, #1
 8008394:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2ba5      	cmp	r3, #165	; 0xa5
 800839c:	d0f5      	beq.n	800838a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	089b      	lsrs	r3, r3, #2
 80083a2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	b29b      	uxth	r3, r3
	}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d102      	bne.n	80083c8 <uxTaskGetStackHighWaterMark+0x14>
 80083c2:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <uxTaskGetStackHighWaterMark+0x34>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	e000      	b.n	80083ca <uxTaskGetStackHighWaterMark+0x16>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80083d2:	6938      	ldr	r0, [r7, #16]
 80083d4:	f7ff ffd2 	bl	800837c <prvTaskCheckFreeStackSpace>
 80083d8:	4603      	mov	r3, r0
 80083da:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80083dc:	68fb      	ldr	r3, [r7, #12]
	}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	2002632c 	.word	0x2002632c

080083ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d108      	bne.n	8008410 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	4618      	mov	r0, r3
 8008404:	f001 f9b4 	bl	8009770 <vPortFree>
				vPortFree( pxTCB );
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 f9b1 	bl	8009770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800840e:	e018      	b.n	8008442 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008416:	2b01      	cmp	r3, #1
 8008418:	d103      	bne.n	8008422 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 f9a8 	bl	8009770 <vPortFree>
	}
 8008420:	e00f      	b.n	8008442 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008428:	2b02      	cmp	r3, #2
 800842a:	d00a      	beq.n	8008442 <prvDeleteTCB+0x56>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	60fb      	str	r3, [r7, #12]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <prvDeleteTCB+0x54>
	}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008452:	4b0c      	ldr	r3, [pc, #48]	; (8008484 <prvResetNextTaskUnblockTime+0x38>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d104      	bne.n	8008466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800845c:	4b0a      	ldr	r3, [pc, #40]	; (8008488 <prvResetNextTaskUnblockTime+0x3c>)
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008464:	e008      	b.n	8008478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008466:	4b07      	ldr	r3, [pc, #28]	; (8008484 <prvResetNextTaskUnblockTime+0x38>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4a04      	ldr	r2, [pc, #16]	; (8008488 <prvResetNextTaskUnblockTime+0x3c>)
 8008476:	6013      	str	r3, [r2, #0]
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	200267b8 	.word	0x200267b8
 8008488:	20026820 	.word	0x20026820

0800848c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008492:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <xTaskGetCurrentTaskHandle+0x1c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008498:	687b      	ldr	r3, [r7, #4]
	}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	2002632c 	.word	0x2002632c

080084ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <xTaskGetSchedulerState+0x34>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d102      	bne.n	80084c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084ba:	2301      	movs	r3, #1
 80084bc:	607b      	str	r3, [r7, #4]
 80084be:	e008      	b.n	80084d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084c0:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <xTaskGetSchedulerState+0x38>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084c8:	2302      	movs	r3, #2
 80084ca:	607b      	str	r3, [r7, #4]
 80084cc:	e001      	b.n	80084d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084ce:	2300      	movs	r3, #0
 80084d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084d2:	687b      	ldr	r3, [r7, #4]
	}
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr
 80084e0:	2002680c 	.word	0x2002680c
 80084e4:	20026828 	.word	0x20026828

080084e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d05a      	beq.n	80085b4 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008502:	4b2f      	ldr	r3, [pc, #188]	; (80085c0 <xTaskPriorityInherit+0xd8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	429a      	cmp	r2, r3
 800850a:	d24a      	bcs.n	80085a2 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	2b00      	cmp	r3, #0
 8008512:	db06      	blt.n	8008522 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008514:	4b2a      	ldr	r3, [pc, #168]	; (80085c0 <xTaskPriorityInherit+0xd8>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	6959      	ldr	r1, [r3, #20]
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800852a:	4613      	mov	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4a24      	ldr	r2, [pc, #144]	; (80085c4 <xTaskPriorityInherit+0xdc>)
 8008534:	4413      	add	r3, r2
 8008536:	4299      	cmp	r1, r3
 8008538:	d126      	bne.n	8008588 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	3304      	adds	r3, #4
 800853e:	4618      	mov	r0, r3
 8008540:	f7fd feac 	bl	800629c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008544:	4b1e      	ldr	r3, [pc, #120]	; (80085c0 <xTaskPriorityInherit+0xd8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4618      	mov	r0, r3
 8008552:	f002 fc2f 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855a:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <xTaskPriorityInherit+0xe0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d903      	bls.n	800856a <xTaskPriorityInherit+0x82>
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <xTaskPriorityInherit+0xe0>)
 8008568:	6013      	str	r3, [r2, #0]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <xTaskPriorityInherit+0xdc>)
 8008578:	441a      	add	r2, r3
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	3304      	adds	r3, #4
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f7fd fe2e 	bl	80061e2 <vListInsertEnd>
 8008586:	e004      	b.n	8008592 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008588:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <xTaskPriorityInherit+0xd8>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4619      	mov	r1, r3
 8008596:	2049      	movs	r0, #73	; 0x49
 8008598:	f001 fe4c 	bl	800a234 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e008      	b.n	80085b4 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <xTaskPriorityInherit+0xd8>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d201      	bcs.n	80085b4 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085b0:	2301      	movs	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085b4:	68fb      	ldr	r3, [r7, #12]
	}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	2002632c 	.word	0x2002632c
 80085c4:	20026330 	.word	0x20026330
 80085c8:	20026808 	.word	0x20026808

080085cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d05f      	beq.n	80086a2 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80085e2:	4b32      	ldr	r3, [pc, #200]	; (80086ac <xTaskPriorityDisinherit+0xe0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d00a      	beq.n	8008602 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80085ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	60fb      	str	r3, [r7, #12]
}
 80085fe:	bf00      	nop
 8008600:	e7fe      	b.n	8008600 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10a      	bne.n	8008620 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	60bb      	str	r3, [r7, #8]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008624:	1e5a      	subs	r2, r3, #1
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008632:	429a      	cmp	r2, r3
 8008634:	d035      	beq.n	80086a2 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800863a:	2b00      	cmp	r3, #0
 800863c:	d131      	bne.n	80086a2 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	3304      	adds	r3, #4
 8008642:	4618      	mov	r0, r3
 8008644:	f7fd fe2a 	bl	800629c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4619      	mov	r1, r3
 800864c:	204a      	movs	r0, #74	; 0x4a
 800864e:	f001 fdf1 	bl	800a234 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	4618      	mov	r0, r3
 800866a:	f002 fba3 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008672:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <xTaskPriorityDisinherit+0xe4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d903      	bls.n	8008682 <xTaskPriorityDisinherit+0xb6>
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867e:	4a0c      	ldr	r2, [pc, #48]	; (80086b0 <xTaskPriorityDisinherit+0xe4>)
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4a09      	ldr	r2, [pc, #36]	; (80086b4 <xTaskPriorityDisinherit+0xe8>)
 8008690:	441a      	add	r2, r3
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	3304      	adds	r3, #4
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f7fd fda2 	bl	80061e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800869e:	2301      	movs	r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086a2:	697b      	ldr	r3, [r7, #20]
	}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3718      	adds	r7, #24
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	2002632c 	.word	0x2002632c
 80086b0:	20026808 	.word	0x20026808
 80086b4:	20026330 	.word	0x20026330

080086b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80086c6:	2301      	movs	r3, #1
 80086c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d073      	beq.n	80087b8 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	60fb      	str	r3, [r7, #12]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d902      	bls.n	80086fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	61fb      	str	r3, [r7, #28]
 80086fc:	e002      	b.n	8008704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008702:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	429a      	cmp	r2, r3
 800870c:	d054      	beq.n	80087b8 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	429a      	cmp	r2, r3
 8008716:	d14f      	bne.n	80087b8 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008718:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	429a      	cmp	r2, r3
 8008720:	d10a      	bne.n	8008738 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	60bb      	str	r3, [r7, #8]
}
 8008734:	bf00      	nop
 8008736:	e7fe      	b.n	8008736 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4619      	mov	r1, r3
 800873c:	204a      	movs	r0, #74	; 0x4a
 800873e:	f001 fd79 	bl	800a234 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	69fa      	ldr	r2, [r7, #28]
 800874c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	2b00      	cmp	r3, #0
 8008754:	db04      	blt.n	8008760 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	6959      	ldr	r1, [r3, #20]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4a15      	ldr	r2, [pc, #84]	; (80087c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008770:	4413      	add	r3, r2
 8008772:	4299      	cmp	r1, r3
 8008774:	d120      	bne.n	80087b8 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	3304      	adds	r3, #4
 800877a:	4618      	mov	r0, r3
 800877c:	f7fd fd8e 	bl	800629c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	4618      	mov	r0, r3
 8008784:	f002 fb16 	bl	800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878c:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d903      	bls.n	800879c <vTaskPriorityDisinheritAfterTimeout+0xe4>
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008798:	4a0b      	ldr	r2, [pc, #44]	; (80087c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4a06      	ldr	r2, [pc, #24]	; (80087c4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80087aa:	441a      	add	r2, r3
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	3304      	adds	r3, #4
 80087b0:	4619      	mov	r1, r3
 80087b2:	4610      	mov	r0, r2
 80087b4:	f7fd fd15 	bl	80061e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087b8:	bf00      	nop
 80087ba:	3720      	adds	r7, #32
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	2002632c 	.word	0x2002632c
 80087c4:	20026330 	.word	0x20026330
 80087c8:	20026808 	.word	0x20026808

080087cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80087de:	3201      	adds	r2, #1
 80087e0:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 80087e2:	4b03      	ldr	r3, [pc, #12]	; (80087f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80087e4:	681b      	ldr	r3, [r3, #0]
	}
 80087e6:	4618      	mov	r0, r3
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	2002632c 	.word	0x2002632c

080087f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80087fe:	4b21      	ldr	r3, [pc, #132]	; (8008884 <prvAddCurrentTaskToDelayedList+0x90>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008804:	4b20      	ldr	r3, [pc, #128]	; (8008888 <prvAddCurrentTaskToDelayedList+0x94>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3304      	adds	r3, #4
 800880a:	4618      	mov	r0, r3
 800880c:	f7fd fd46 	bl	800629c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008816:	d10a      	bne.n	800882e <prvAddCurrentTaskToDelayedList+0x3a>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800881e:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <prvAddCurrentTaskToDelayedList+0x94>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3304      	adds	r3, #4
 8008824:	4619      	mov	r1, r3
 8008826:	4819      	ldr	r0, [pc, #100]	; (800888c <prvAddCurrentTaskToDelayedList+0x98>)
 8008828:	f7fd fcdb 	bl	80061e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800882c:	e026      	b.n	800887c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4413      	add	r3, r2
 8008834:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008836:	4b14      	ldr	r3, [pc, #80]	; (8008888 <prvAddCurrentTaskToDelayedList+0x94>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	429a      	cmp	r2, r3
 8008844:	d209      	bcs.n	800885a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008846:	4b12      	ldr	r3, [pc, #72]	; (8008890 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b0f      	ldr	r3, [pc, #60]	; (8008888 <prvAddCurrentTaskToDelayedList+0x94>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3304      	adds	r3, #4
 8008850:	4619      	mov	r1, r3
 8008852:	4610      	mov	r0, r2
 8008854:	f7fd fce9 	bl	800622a <vListInsert>
}
 8008858:	e010      	b.n	800887c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800885a:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <prvAddCurrentTaskToDelayedList+0xa0>)
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <prvAddCurrentTaskToDelayedList+0x94>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f7fd fcdf 	bl	800622a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <prvAddCurrentTaskToDelayedList+0xa4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	429a      	cmp	r2, r3
 8008874:	d202      	bcs.n	800887c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008876:	4a08      	ldr	r2, [pc, #32]	; (8008898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6013      	str	r3, [r2, #0]
}
 800887c:	bf00      	nop
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20026804 	.word	0x20026804
 8008888:	2002632c 	.word	0x2002632c
 800888c:	200267ec 	.word	0x200267ec
 8008890:	200267bc 	.word	0x200267bc
 8008894:	200267b8 	.word	0x200267b8
 8008898:	20026820 	.word	0x20026820

0800889c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088a6:	f000 fba1 	bl	8008fec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088aa:	4b1c      	ldr	r3, [pc, #112]	; (800891c <xTimerCreateTimerTask+0x80>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d021      	beq.n	80088f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088ba:	1d3a      	adds	r2, r7, #4
 80088bc:	f107 0108 	add.w	r1, r7, #8
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fd fb47 	bl	8005f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	9202      	str	r2, [sp, #8]
 80088d2:	9301      	str	r3, [sp, #4]
 80088d4:	2302      	movs	r3, #2
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	2300      	movs	r3, #0
 80088da:	460a      	mov	r2, r1
 80088dc:	4910      	ldr	r1, [pc, #64]	; (8008920 <xTimerCreateTimerTask+0x84>)
 80088de:	4811      	ldr	r0, [pc, #68]	; (8008924 <xTimerCreateTimerTask+0x88>)
 80088e0:	f7fe feae 	bl	8007640 <xTaskCreateStatic>
 80088e4:	4603      	mov	r3, r0
 80088e6:	4a10      	ldr	r2, [pc, #64]	; (8008928 <xTimerCreateTimerTask+0x8c>)
 80088e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80088ea:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <xTimerCreateTimerTask+0x8c>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80088f2:	2301      	movs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10a      	bne.n	8008912 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	613b      	str	r3, [r7, #16]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008912:	697b      	ldr	r3, [r7, #20]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	2002685c 	.word	0x2002685c
 8008920:	0800c654 	.word	0x0800c654
 8008924:	08008b95 	.word	0x08008b95
 8008928:	20026860 	.word	0x20026860

0800892c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af02      	add	r7, sp, #8
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
 8008938:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800893a:	202c      	movs	r0, #44	; 0x2c
 800893c:	f000 fe4c 	bl	80095d8 <pvPortMalloc>
 8008940:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00d      	beq.n	8008964 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f843 	bl	80089ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008964:	697b      	ldr	r3, [r7, #20]
	}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800896e:	b580      	push	{r7, lr}
 8008970:	b08a      	sub	sp, #40	; 0x28
 8008972:	af02      	add	r7, sp, #8
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
 800897a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800897c:	232c      	movs	r3, #44	; 0x2c
 800897e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2b2c      	cmp	r3, #44	; 0x2c
 8008984:	d00a      	beq.n	800899c <xTimerCreateStatic+0x2e>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	61bb      	str	r3, [r7, #24]
}
 8008998:	bf00      	nop
 800899a:	e7fe      	b.n	800899a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800899c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xTimerCreateStatic+0x4c>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	617b      	str	r3, [r7, #20]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00d      	beq.n	80089e0 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2202      	movs	r2, #2
 80089c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	68b9      	ldr	r1, [r7, #8]
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f000 f805 	bl	80089ea <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80089e0:	69fb      	ldr	r3, [r7, #28]
	}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3720      	adds	r7, #32
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
 80089f6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	617b      	str	r3, [r7, #20]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01e      	beq.n	8008a58 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008a1a:	f000 fae7 	bl	8008fec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	6a3a      	ldr	r2, [r7, #32]
 8008a34:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fd fbc4 	bl	80061c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d008      	beq.n	8008a58 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a4c:	f043 0304 	orr.w	r3, r3, #4
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008a58:	bf00      	nop
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b08a      	sub	sp, #40	; 0x28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	623b      	str	r3, [r7, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a8e:	4b1a      	ldr	r3, [pc, #104]	; (8008af8 <xTimerGenericCommand+0x98>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d02a      	beq.n	8008aec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2b05      	cmp	r3, #5
 8008aa6:	dc18      	bgt.n	8008ada <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008aa8:	f7ff fd00 	bl	80084ac <xTaskGetSchedulerState>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d109      	bne.n	8008ac6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ab2:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <xTimerGenericCommand+0x98>)
 8008ab4:	6818      	ldr	r0, [r3, #0]
 8008ab6:	f107 0110 	add.w	r1, r7, #16
 8008aba:	2300      	movs	r3, #0
 8008abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008abe:	f7fd fe7b 	bl	80067b8 <xQueueGenericSend>
 8008ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ac4:	e012      	b.n	8008aec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <xTimerGenericCommand+0x98>)
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f107 0110 	add.w	r1, r7, #16
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f7fd fe71 	bl	80067b8 <xQueueGenericSend>
 8008ad6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ad8:	e008      	b.n	8008aec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ada:	4b07      	ldr	r3, [pc, #28]	; (8008af8 <xTimerGenericCommand+0x98>)
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	f107 0110 	add.w	r1, r7, #16
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	f7fd ff8d 	bl	8006a04 <xQueueGenericSendFromISR>
 8008aea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3728      	adds	r7, #40	; 0x28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	2002685c 	.word	0x2002685c

08008afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b088      	sub	sp, #32
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b06:	4b22      	ldr	r3, [pc, #136]	; (8008b90 <prvProcessExpiredTimer+0x94>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fd fbc1 	bl	800629c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d022      	beq.n	8008b6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	18d1      	adds	r1, r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	6978      	ldr	r0, [r7, #20]
 8008b36:	f000 f8d1 	bl	8008cdc <prvInsertTimerInActiveList>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01f      	beq.n	8008b80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b40:	2300      	movs	r3, #0
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2300      	movs	r3, #0
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	2100      	movs	r1, #0
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7ff ff88 	bl	8008a60 <xTimerGenericCommand>
 8008b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d113      	bne.n	8008b80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60fb      	str	r3, [r7, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b74:	f023 0301 	bic.w	r3, r3, #1
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	6a1b      	ldr	r3, [r3, #32]
 8008b84:	6978      	ldr	r0, [r7, #20]
 8008b86:	4798      	blx	r3
}
 8008b88:	bf00      	nop
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	20026854 	.word	0x20026854

08008b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b9c:	f107 0308 	add.w	r3, r7, #8
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 f857 	bl	8008c54 <prvGetNextExpireTime>
 8008ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4619      	mov	r1, r3
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f000 f803 	bl	8008bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008bb2:	f000 f8d5 	bl	8008d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008bb6:	e7f1      	b.n	8008b9c <prvTimerTask+0x8>

08008bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008bc2:	f7fe ffb1 	bl	8007b28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008bc6:	f107 0308 	add.w	r3, r7, #8
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 f866 	bl	8008c9c <prvSampleTimeNow>
 8008bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d130      	bne.n	8008c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10a      	bne.n	8008bf4 <prvProcessTimerOrBlockTask+0x3c>
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d806      	bhi.n	8008bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008be6:	f7fe ffad 	bl	8007b44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff ff85 	bl	8008afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bf2:	e024      	b.n	8008c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d008      	beq.n	8008c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bfa:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <prvProcessTimerOrBlockTask+0x90>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <prvProcessTimerOrBlockTask+0x50>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <prvProcessTimerOrBlockTask+0x52>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <prvProcessTimerOrBlockTask+0x94>)
 8008c0e:	6818      	ldr	r0, [r3, #0]
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	4619      	mov	r1, r3
 8008c1a:	f7fe fcdd 	bl	80075d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c1e:	f7fe ff91 	bl	8007b44 <xTaskResumeAll>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008c28:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <prvProcessTimerOrBlockTask+0x98>)
 8008c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	f3bf 8f6f 	isb	sy
}
 8008c38:	e001      	b.n	8008c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c3a:	f7fe ff83 	bl	8007b44 <xTaskResumeAll>
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20026858 	.word	0x20026858
 8008c4c:	2002685c 	.word	0x2002685c
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c5c:	4b0e      	ldr	r3, [pc, #56]	; (8008c98 <prvGetNextExpireTime+0x44>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <prvGetNextExpireTime+0x16>
 8008c66:	2201      	movs	r2, #1
 8008c68:	e000      	b.n	8008c6c <prvGetNextExpireTime+0x18>
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d105      	bne.n	8008c84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c78:	4b07      	ldr	r3, [pc, #28]	; (8008c98 <prvGetNextExpireTime+0x44>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	e001      	b.n	8008c88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c84:	2300      	movs	r3, #0
 8008c86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c88:	68fb      	ldr	r3, [r7, #12]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	20026854 	.word	0x20026854

08008c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ca4:	f7fe fff0 	bl	8007c88 <xTaskGetTickCount>
 8008ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008caa:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <prvSampleTimeNow+0x3c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d205      	bcs.n	8008cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008cb4:	f000 f936 	bl	8008f24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e002      	b.n	8008cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008cc6:	4a04      	ldr	r2, [pc, #16]	; (8008cd8 <prvSampleTimeNow+0x3c>)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	20026864 	.word	0x20026864

08008cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d812      	bhi.n	8008d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	1ad2      	subs	r2, r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d302      	bcc.n	8008d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008d10:	2301      	movs	r3, #1
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	e01b      	b.n	8008d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d16:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <prvInsertTimerInActiveList+0x7c>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7fd fa82 	bl	800622a <vListInsert>
 8008d26:	e012      	b.n	8008d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d206      	bcs.n	8008d3e <prvInsertTimerInActiveList+0x62>
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d302      	bcc.n	8008d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	e007      	b.n	8008d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d3e:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <prvInsertTimerInActiveList+0x80>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3304      	adds	r3, #4
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f7fd fa6e 	bl	800622a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d4e:	697b      	ldr	r3, [r7, #20]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20026858 	.word	0x20026858
 8008d5c:	20026854 	.word	0x20026854

08008d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08e      	sub	sp, #56	; 0x38
 8008d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d66:	e0ca      	b.n	8008efe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	da18      	bge.n	8008da0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	3304      	adds	r3, #4
 8008d72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	61fb      	str	r3, [r7, #28]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d96:	6850      	ldr	r0, [r2, #4]
 8008d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d9a:	6892      	ldr	r2, [r2, #8]
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f2c0 80ab 	blt.w	8008efe <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	3304      	adds	r3, #4
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fd fa6f 	bl	800629c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dbe:	463b      	mov	r3, r7
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7ff ff6b 	bl	8008c9c <prvSampleTimeNow>
 8008dc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2b09      	cmp	r3, #9
 8008dcc:	f200 8096 	bhi.w	8008efc <prvProcessReceivedCommands+0x19c>
 8008dd0:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <prvProcessReceivedCommands+0x78>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e01 	.word	0x08008e01
 8008de0:	08008e01 	.word	0x08008e01
 8008de4:	08008e75 	.word	0x08008e75
 8008de8:	08008e89 	.word	0x08008e89
 8008dec:	08008ed3 	.word	0x08008ed3
 8008df0:	08008e01 	.word	0x08008e01
 8008df4:	08008e01 	.word	0x08008e01
 8008df8:	08008e75 	.word	0x08008e75
 8008dfc:	08008e89 	.word	0x08008e89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e06:	f043 0301 	orr.w	r3, r3, #1
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	18d1      	adds	r1, r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e20:	f7ff ff5c 	bl	8008cdc <prvInsertTimerInActiveList>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d069      	beq.n	8008efe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e38:	f003 0304 	and.w	r3, r3, #4
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d05e      	beq.n	8008efe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	441a      	add	r2, r3
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2100      	movs	r1, #0
 8008e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e52:	f7ff fe05 	bl	8008a60 <xTimerGenericCommand>
 8008e56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d14f      	bne.n	8008efe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	61bb      	str	r3, [r7, #24]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e7a:	f023 0301 	bic.w	r3, r3, #1
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008e86:	e03a      	b.n	8008efe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e8e:	f043 0301 	orr.w	r3, r3, #1
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	617b      	str	r3, [r7, #20]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	18d1      	adds	r1, r2, r3
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ecc:	f7ff ff06 	bl	8008cdc <prvInsertTimerInActiveList>
					break;
 8008ed0:	e015      	b.n	8008efe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed8:	f003 0302 	and.w	r3, r3, #2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d103      	bne.n	8008ee8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ee2:	f000 fc45 	bl	8009770 <vPortFree>
 8008ee6:	e00a      	b.n	8008efe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eee:	f023 0301 	bic.w	r3, r3, #1
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008efa:	e000      	b.n	8008efe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008efc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008efe:	4b08      	ldr	r3, [pc, #32]	; (8008f20 <prvProcessReceivedCommands+0x1c0>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	1d39      	adds	r1, r7, #4
 8008f04:	2200      	movs	r2, #0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fd fecc 	bl	8006ca4 <xQueueReceive>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f47f af2a 	bne.w	8008d68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	3730      	adds	r7, #48	; 0x30
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	2002685c 	.word	0x2002685c

08008f24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f2a:	e048      	b.n	8008fbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f2c:	4b2d      	ldr	r3, [pc, #180]	; (8008fe4 <prvSwitchTimerLists+0xc0>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f36:	4b2b      	ldr	r3, [pc, #172]	; (8008fe4 <prvSwitchTimerLists+0xc0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd f9a9 	bl	800629c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f58:	f003 0304 	and.w	r3, r3, #4
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d02e      	beq.n	8008fbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	699b      	ldr	r3, [r3, #24]
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	4413      	add	r3, r2
 8008f68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d90e      	bls.n	8008f90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f7e:	4b19      	ldr	r3, [pc, #100]	; (8008fe4 <prvSwitchTimerLists+0xc0>)
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3304      	adds	r3, #4
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f7fd f94e 	bl	800622a <vListInsert>
 8008f8e:	e016      	b.n	8008fbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f90:	2300      	movs	r3, #0
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	2300      	movs	r3, #0
 8008f96:	693a      	ldr	r2, [r7, #16]
 8008f98:	2100      	movs	r1, #0
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f7ff fd60 	bl	8008a60 <xTimerGenericCommand>
 8008fa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	603b      	str	r3, [r7, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008fbe:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <prvSwitchTimerLists+0xc0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1b1      	bne.n	8008f2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <prvSwitchTimerLists+0xc0>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a04      	ldr	r2, [pc, #16]	; (8008fe4 <prvSwitchTimerLists+0xc0>)
 8008fd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fd6:	4a04      	ldr	r2, [pc, #16]	; (8008fe8 <prvSwitchTimerLists+0xc4>)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	6013      	str	r3, [r2, #0]
}
 8008fdc:	bf00      	nop
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20026854 	.word	0x20026854
 8008fe8:	20026858 	.word	0x20026858

08008fec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ff2:	f000 f9cf 	bl	8009394 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ff6:	4b15      	ldr	r3, [pc, #84]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d120      	bne.n	8009040 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ffe:	4814      	ldr	r0, [pc, #80]	; (8009050 <prvCheckForValidListAndQueue+0x64>)
 8009000:	f7fd f8c2 	bl	8006188 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009004:	4813      	ldr	r0, [pc, #76]	; (8009054 <prvCheckForValidListAndQueue+0x68>)
 8009006:	f7fd f8bf 	bl	8006188 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800900a:	4b13      	ldr	r3, [pc, #76]	; (8009058 <prvCheckForValidListAndQueue+0x6c>)
 800900c:	4a10      	ldr	r2, [pc, #64]	; (8009050 <prvCheckForValidListAndQueue+0x64>)
 800900e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009010:	4b12      	ldr	r3, [pc, #72]	; (800905c <prvCheckForValidListAndQueue+0x70>)
 8009012:	4a10      	ldr	r2, [pc, #64]	; (8009054 <prvCheckForValidListAndQueue+0x68>)
 8009014:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009016:	2300      	movs	r3, #0
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	4b11      	ldr	r3, [pc, #68]	; (8009060 <prvCheckForValidListAndQueue+0x74>)
 800901c:	4a11      	ldr	r2, [pc, #68]	; (8009064 <prvCheckForValidListAndQueue+0x78>)
 800901e:	2110      	movs	r1, #16
 8009020:	200a      	movs	r0, #10
 8009022:	f7fd f9cd 	bl	80063c0 <xQueueGenericCreateStatic>
 8009026:	4603      	mov	r3, r0
 8009028:	4a08      	ldr	r2, [pc, #32]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 800902a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800902c:	4b07      	ldr	r3, [pc, #28]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d005      	beq.n	8009040 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009034:	4b05      	ldr	r3, [pc, #20]	; (800904c <prvCheckForValidListAndQueue+0x60>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	490b      	ldr	r1, [pc, #44]	; (8009068 <prvCheckForValidListAndQueue+0x7c>)
 800903a:	4618      	mov	r0, r3
 800903c:	f7fe fa70 	bl	8007520 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009040:	f000 f9d8 	bl	80093f4 <vPortExitCritical>
}
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	2002685c 	.word	0x2002685c
 8009050:	2002682c 	.word	0x2002682c
 8009054:	20026840 	.word	0x20026840
 8009058:	20026854 	.word	0x20026854
 800905c:	20026858 	.word	0x20026858
 8009060:	20026908 	.word	0x20026908
 8009064:	20026868 	.word	0x20026868
 8009068:	0800c65c 	.word	0x0800c65c

0800906c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10a      	bne.n	8009094 <xTimerIsTimerActive+0x28>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	f383 8811 	msr	BASEPRI, r3
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	f3bf 8f4f 	dsb	sy
 800908e:	60fb      	str	r3, [r7, #12]
}
 8009090:	bf00      	nop
 8009092:	e7fe      	b.n	8009092 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8009094:	f000 f97e 	bl	8009394 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	e001      	b.n	80090b0 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 80090ac:	2301      	movs	r3, #1
 80090ae:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80090b0:	f000 f9a0 	bl	80093f4 <vPortExitCritical>

	return xReturn;
 80090b4:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b086      	sub	sp, #24
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <pvTimerGetTimerID+0x28>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	60fb      	str	r3, [r7, #12]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80090e6:	f000 f955 	bl	8009394 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	69db      	ldr	r3, [r3, #28]
 80090ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80090f0:	f000 f980 	bl	80093f4 <vPortExitCritical>

	return pvReturn;
 80090f4:	693b      	ldr	r3, [r7, #16]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08a      	sub	sp, #40	; 0x28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800910e:	f06f 0301 	mvn.w	r3, #1
 8009112:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <xTimerPendFunctionCallFromISR+0x3c>)
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	f107 0114 	add.w	r1, r7, #20
 8009128:	2300      	movs	r3, #0
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	f7fd fc6a 	bl	8006a04 <xQueueGenericSendFromISR>
 8009130:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009134:	4618      	mov	r0, r3
 8009136:	3728      	adds	r7, #40	; 0x28
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	2002685c 	.word	0x2002685c

08009140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3b04      	subs	r3, #4
 8009150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	3b04      	subs	r3, #4
 800915e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f023 0201 	bic.w	r2, r3, #1
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3b04      	subs	r3, #4
 800916e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009170:	4a0c      	ldr	r2, [pc, #48]	; (80091a4 <pxPortInitialiseStack+0x64>)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3b14      	subs	r3, #20
 800917a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3b04      	subs	r3, #4
 8009186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f06f 0202 	mvn.w	r2, #2
 800918e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	3b20      	subs	r3, #32
 8009194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009196:	68fb      	ldr	r3, [r7, #12]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	080091a9 	.word	0x080091a9

080091a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091b2:	4b12      	ldr	r3, [pc, #72]	; (80091fc <prvTaskExitError+0x54>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ba:	d00a      	beq.n	80091d2 <prvTaskExitError+0x2a>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	60fb      	str	r3, [r7, #12]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <prvTaskExitError+0x28>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	60bb      	str	r3, [r7, #8]
}
 80091e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091e6:	bf00      	nop
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0fc      	beq.n	80091e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr
 80091fc:	2000001c 	.word	0x2000001c

08009200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <pxCurrentTCBConst2>)
 8009202:	6819      	ldr	r1, [r3, #0]
 8009204:	6808      	ldr	r0, [r1, #0]
 8009206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800920a:	f380 8809 	msr	PSP, r0
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f04f 0000 	mov.w	r0, #0
 8009216:	f380 8811 	msr	BASEPRI, r0
 800921a:	4770      	bx	lr
 800921c:	f3af 8000 	nop.w

08009220 <pxCurrentTCBConst2>:
 8009220:	2002632c 	.word	0x2002632c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop

08009228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009228:	4808      	ldr	r0, [pc, #32]	; (800924c <prvPortStartFirstTask+0x24>)
 800922a:	6800      	ldr	r0, [r0, #0]
 800922c:	6800      	ldr	r0, [r0, #0]
 800922e:	f380 8808 	msr	MSP, r0
 8009232:	f04f 0000 	mov.w	r0, #0
 8009236:	f380 8814 	msr	CONTROL, r0
 800923a:	b662      	cpsie	i
 800923c:	b661      	cpsie	f
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	df00      	svc	0
 8009248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800924a:	bf00      	nop
 800924c:	e000ed08 	.word	0xe000ed08

08009250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009256:	4b46      	ldr	r3, [pc, #280]	; (8009370 <xPortStartScheduler+0x120>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a46      	ldr	r2, [pc, #280]	; (8009374 <xPortStartScheduler+0x124>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10a      	bne.n	8009276 <xPortStartScheduler+0x26>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	613b      	str	r3, [r7, #16]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009276:	4b3e      	ldr	r3, [pc, #248]	; (8009370 <xPortStartScheduler+0x120>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a3f      	ldr	r2, [pc, #252]	; (8009378 <xPortStartScheduler+0x128>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d10a      	bne.n	8009296 <xPortStartScheduler+0x46>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	60fb      	str	r3, [r7, #12]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009296:	4b39      	ldr	r3, [pc, #228]	; (800937c <xPortStartScheduler+0x12c>)
 8009298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	22ff      	movs	r2, #255	; 0xff
 80092a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	4b31      	ldr	r3, [pc, #196]	; (8009380 <xPortStartScheduler+0x130>)
 80092bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092be:	4b31      	ldr	r3, [pc, #196]	; (8009384 <xPortStartScheduler+0x134>)
 80092c0:	2207      	movs	r2, #7
 80092c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092c4:	e009      	b.n	80092da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092c6:	4b2f      	ldr	r3, [pc, #188]	; (8009384 <xPortStartScheduler+0x134>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	4a2d      	ldr	r2, [pc, #180]	; (8009384 <xPortStartScheduler+0x134>)
 80092ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b80      	cmp	r3, #128	; 0x80
 80092e4:	d0ef      	beq.n	80092c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092e6:	4b27      	ldr	r3, [pc, #156]	; (8009384 <xPortStartScheduler+0x134>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f1c3 0307 	rsb	r3, r3, #7
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d00a      	beq.n	8009308 <xPortStartScheduler+0xb8>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	60bb      	str	r3, [r7, #8]
}
 8009304:	bf00      	nop
 8009306:	e7fe      	b.n	8009306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009308:	4b1e      	ldr	r3, [pc, #120]	; (8009384 <xPortStartScheduler+0x134>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <xPortStartScheduler+0x134>)
 8009310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009312:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <xPortStartScheduler+0x134>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800931a:	4a1a      	ldr	r2, [pc, #104]	; (8009384 <xPortStartScheduler+0x134>)
 800931c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009326:	4b18      	ldr	r3, [pc, #96]	; (8009388 <xPortStartScheduler+0x138>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a17      	ldr	r2, [pc, #92]	; (8009388 <xPortStartScheduler+0x138>)
 800932c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009332:	4b15      	ldr	r3, [pc, #84]	; (8009388 <xPortStartScheduler+0x138>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <xPortStartScheduler+0x138>)
 8009338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800933c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800933e:	f000 f8dd 	bl	80094fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009342:	4b12      	ldr	r3, [pc, #72]	; (800938c <xPortStartScheduler+0x13c>)
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009348:	f000 f8fc 	bl	8009544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800934c:	4b10      	ldr	r3, [pc, #64]	; (8009390 <xPortStartScheduler+0x140>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a0f      	ldr	r2, [pc, #60]	; (8009390 <xPortStartScheduler+0x140>)
 8009352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009358:	f7ff ff66 	bl	8009228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800935c:	f7fe fd74 	bl	8007e48 <vTaskSwitchContext>
	prvTaskExitError();
 8009360:	f7ff ff22 	bl	80091a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	e000ed00 	.word	0xe000ed00
 8009374:	410fc271 	.word	0x410fc271
 8009378:	410fc270 	.word	0x410fc270
 800937c:	e000e400 	.word	0xe000e400
 8009380:	20026958 	.word	0x20026958
 8009384:	2002695c 	.word	0x2002695c
 8009388:	e000ed20 	.word	0xe000ed20
 800938c:	2000001c 	.word	0x2000001c
 8009390:	e000ef34 	.word	0xe000ef34

08009394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	607b      	str	r3, [r7, #4]
}
 80093ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093ae:	4b0f      	ldr	r3, [pc, #60]	; (80093ec <vPortEnterCritical+0x58>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3301      	adds	r3, #1
 80093b4:	4a0d      	ldr	r2, [pc, #52]	; (80093ec <vPortEnterCritical+0x58>)
 80093b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093b8:	4b0c      	ldr	r3, [pc, #48]	; (80093ec <vPortEnterCritical+0x58>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d10f      	bne.n	80093e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093c0:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <vPortEnterCritical+0x5c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	603b      	str	r3, [r7, #0]
}
 80093dc:	bf00      	nop
 80093de:	e7fe      	b.n	80093de <vPortEnterCritical+0x4a>
	}
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	2000001c 	.word	0x2000001c
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80093fa:	4b12      	ldr	r3, [pc, #72]	; (8009444 <vPortExitCritical+0x50>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10a      	bne.n	8009418 <vPortExitCritical+0x24>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	607b      	str	r3, [r7, #4]
}
 8009414:	bf00      	nop
 8009416:	e7fe      	b.n	8009416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009418:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <vPortExitCritical+0x50>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3b01      	subs	r3, #1
 800941e:	4a09      	ldr	r2, [pc, #36]	; (8009444 <vPortExitCritical+0x50>)
 8009420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009422:	4b08      	ldr	r3, [pc, #32]	; (8009444 <vPortExitCritical+0x50>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d105      	bne.n	8009436 <vPortExitCritical+0x42>
 800942a:	2300      	movs	r3, #0
 800942c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f383 8811 	msr	BASEPRI, r3
}
 8009434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	2000001c 	.word	0x2000001c
	...

08009450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009450:	f3ef 8009 	mrs	r0, PSP
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <pxCurrentTCBConst>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	f01e 0f10 	tst.w	lr, #16
 8009460:	bf08      	it	eq
 8009462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800946a:	6010      	str	r0, [r2, #0]
 800946c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009474:	f380 8811 	msr	BASEPRI, r0
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f7fe fce2 	bl	8007e48 <vTaskSwitchContext>
 8009484:	f04f 0000 	mov.w	r0, #0
 8009488:	f380 8811 	msr	BASEPRI, r0
 800948c:	bc09      	pop	{r0, r3}
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	6808      	ldr	r0, [r1, #0]
 8009492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009496:	f01e 0f10 	tst.w	lr, #16
 800949a:	bf08      	it	eq
 800949c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094a0:	f380 8809 	msr	PSP, r0
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	f3af 8000 	nop.w

080094b0 <pxCurrentTCBConst>:
 80094b0:	2002632c 	.word	0x2002632c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop

080094b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	607b      	str	r3, [r7, #4]
}
 80094d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094d2:	f7fe fbfb 	bl	8007ccc <xTaskIncrementTick>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d003      	beq.n	80094e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094dc:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <xPortSysTickHandler+0x40>)
 80094de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	2300      	movs	r3, #0
 80094e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	f383 8811 	msr	BASEPRI, r3
}
 80094ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <vPortSetupTimerInterrupt+0x34>)
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009506:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <vPortSetupTimerInterrupt+0x38>)
 8009508:	2200      	movs	r2, #0
 800950a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800950c:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <vPortSetupTimerInterrupt+0x3c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0a      	ldr	r2, [pc, #40]	; (800953c <vPortSetupTimerInterrupt+0x40>)
 8009512:	fba2 2303 	umull	r2, r3, r2, r3
 8009516:	099b      	lsrs	r3, r3, #6
 8009518:	4a09      	ldr	r2, [pc, #36]	; (8009540 <vPortSetupTimerInterrupt+0x44>)
 800951a:	3b01      	subs	r3, #1
 800951c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800951e:	4b04      	ldr	r3, [pc, #16]	; (8009530 <vPortSetupTimerInterrupt+0x34>)
 8009520:	2207      	movs	r2, #7
 8009522:	601a      	str	r2, [r3, #0]
}
 8009524:	bf00      	nop
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	e000e010 	.word	0xe000e010
 8009534:	e000e018 	.word	0xe000e018
 8009538:	20000010 	.word	0x20000010
 800953c:	10624dd3 	.word	0x10624dd3
 8009540:	e000e014 	.word	0xe000e014

08009544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009554 <vPortEnableVFP+0x10>
 8009548:	6801      	ldr	r1, [r0, #0]
 800954a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800954e:	6001      	str	r1, [r0, #0]
 8009550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009552:	bf00      	nop
 8009554:	e000ed88 	.word	0xe000ed88

08009558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800955e:	f3ef 8305 	mrs	r3, IPSR
 8009562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d914      	bls.n	8009594 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800956a:	4a17      	ldr	r2, [pc, #92]	; (80095c8 <vPortValidateInterruptPriority+0x70>)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4413      	add	r3, r2
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009574:	4b15      	ldr	r3, [pc, #84]	; (80095cc <vPortValidateInterruptPriority+0x74>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	7afa      	ldrb	r2, [r7, #11]
 800957a:	429a      	cmp	r2, r3
 800957c:	d20a      	bcs.n	8009594 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	f383 8811 	msr	BASEPRI, r3
 8009586:	f3bf 8f6f 	isb	sy
 800958a:	f3bf 8f4f 	dsb	sy
 800958e:	607b      	str	r3, [r7, #4]
}
 8009590:	bf00      	nop
 8009592:	e7fe      	b.n	8009592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009594:	4b0e      	ldr	r3, [pc, #56]	; (80095d0 <vPortValidateInterruptPriority+0x78>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <vPortValidateInterruptPriority+0x7c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d90a      	bls.n	80095ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	603b      	str	r3, [r7, #0]
}
 80095b6:	bf00      	nop
 80095b8:	e7fe      	b.n	80095b8 <vPortValidateInterruptPriority+0x60>
	}
 80095ba:	bf00      	nop
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	e000e3f0 	.word	0xe000e3f0
 80095cc:	20026958 	.word	0x20026958
 80095d0:	e000ed0c 	.word	0xe000ed0c
 80095d4:	2002695c 	.word	0x2002695c

080095d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08a      	sub	sp, #40	; 0x28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80095e4:	f7fe faa0 	bl	8007b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80095e8:	4b5b      	ldr	r3, [pc, #364]	; (8009758 <pvPortMalloc+0x180>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80095f0:	f000 f920 	bl	8009834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80095f4:	4b59      	ldr	r3, [pc, #356]	; (800975c <pvPortMalloc+0x184>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4013      	ands	r3, r2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 8093 	bne.w	8009728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d01d      	beq.n	8009644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009608:	2208      	movs	r2, #8
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4413      	add	r3, r2
 800960e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b00      	cmp	r3, #0
 8009618:	d014      	beq.n	8009644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f023 0307 	bic.w	r3, r3, #7
 8009620:	3308      	adds	r3, #8
 8009622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00a      	beq.n	8009644 <pvPortMalloc+0x6c>
	__asm volatile
 800962e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	617b      	str	r3, [r7, #20]
}
 8009640:	bf00      	nop
 8009642:	e7fe      	b.n	8009642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d06e      	beq.n	8009728 <pvPortMalloc+0x150>
 800964a:	4b45      	ldr	r3, [pc, #276]	; (8009760 <pvPortMalloc+0x188>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d869      	bhi.n	8009728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009654:	4b43      	ldr	r3, [pc, #268]	; (8009764 <pvPortMalloc+0x18c>)
 8009656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009658:	4b42      	ldr	r3, [pc, #264]	; (8009764 <pvPortMalloc+0x18c>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800965e:	e004      	b.n	800966a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d903      	bls.n	800967c <pvPortMalloc+0xa4>
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1f1      	bne.n	8009660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800967c:	4b36      	ldr	r3, [pc, #216]	; (8009758 <pvPortMalloc+0x180>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009682:	429a      	cmp	r2, r3
 8009684:	d050      	beq.n	8009728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2208      	movs	r2, #8
 800968c:	4413      	add	r3, r2
 800968e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	1ad2      	subs	r2, r2, r3
 80096a0:	2308      	movs	r3, #8
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d91f      	bls.n	80096e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80096a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4413      	add	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00a      	beq.n	80096d0 <pvPortMalloc+0xf8>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	613b      	str	r3, [r7, #16]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	1ad2      	subs	r2, r2, r3
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80096e2:	69b8      	ldr	r0, [r7, #24]
 80096e4:	f000 f908 	bl	80098f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80096e8:	4b1d      	ldr	r3, [pc, #116]	; (8009760 <pvPortMalloc+0x188>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	4a1b      	ldr	r2, [pc, #108]	; (8009760 <pvPortMalloc+0x188>)
 80096f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80096f6:	4b1a      	ldr	r3, [pc, #104]	; (8009760 <pvPortMalloc+0x188>)
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <pvPortMalloc+0x190>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d203      	bcs.n	800970a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009702:	4b17      	ldr	r3, [pc, #92]	; (8009760 <pvPortMalloc+0x188>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a18      	ldr	r2, [pc, #96]	; (8009768 <pvPortMalloc+0x190>)
 8009708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	685a      	ldr	r2, [r3, #4]
 800970e:	4b13      	ldr	r3, [pc, #76]	; (800975c <pvPortMalloc+0x184>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	431a      	orrs	r2, r3
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	2200      	movs	r2, #0
 800971c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <pvPortMalloc+0x194>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	4a11      	ldr	r2, [pc, #68]	; (800976c <pvPortMalloc+0x194>)
 8009726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009728:	f7fe fa0c 	bl	8007b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f003 0307 	and.w	r3, r3, #7
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <pvPortMalloc+0x174>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	60fb      	str	r3, [r7, #12]
}
 8009748:	bf00      	nop
 800974a:	e7fe      	b.n	800974a <pvPortMalloc+0x172>
	return pvReturn;
 800974c:	69fb      	ldr	r3, [r7, #28]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3728      	adds	r7, #40	; 0x28
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	2002a568 	.word	0x2002a568
 800975c:	2002a57c 	.word	0x2002a57c
 8009760:	2002a56c 	.word	0x2002a56c
 8009764:	2002a560 	.word	0x2002a560
 8009768:	2002a570 	.word	0x2002a570
 800976c:	2002a574 	.word	0x2002a574

08009770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d04d      	beq.n	800981e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009782:	2308      	movs	r3, #8
 8009784:	425b      	negs	r3, r3
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	685a      	ldr	r2, [r3, #4]
 8009794:	4b24      	ldr	r3, [pc, #144]	; (8009828 <vPortFree+0xb8>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4013      	ands	r3, r2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d10a      	bne.n	80097b4 <vPortFree+0x44>
	__asm volatile
 800979e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a2:	f383 8811 	msr	BASEPRI, r3
 80097a6:	f3bf 8f6f 	isb	sy
 80097aa:	f3bf 8f4f 	dsb	sy
 80097ae:	60fb      	str	r3, [r7, #12]
}
 80097b0:	bf00      	nop
 80097b2:	e7fe      	b.n	80097b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <vPortFree+0x62>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	60bb      	str	r3, [r7, #8]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	4b14      	ldr	r3, [pc, #80]	; (8009828 <vPortFree+0xb8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4013      	ands	r3, r2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01e      	beq.n	800981e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11a      	bne.n	800981e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <vPortFree+0xb8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	43db      	mvns	r3, r3
 80097f2:	401a      	ands	r2, r3
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80097f8:	f7fe f996 	bl	8007b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	685a      	ldr	r2, [r3, #4]
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <vPortFree+0xbc>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4413      	add	r3, r2
 8009806:	4a09      	ldr	r2, [pc, #36]	; (800982c <vPortFree+0xbc>)
 8009808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f000 f874 	bl	80098f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009810:	4b07      	ldr	r3, [pc, #28]	; (8009830 <vPortFree+0xc0>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	4a06      	ldr	r2, [pc, #24]	; (8009830 <vPortFree+0xc0>)
 8009818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800981a:	f7fe f993 	bl	8007b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800981e:	bf00      	nop
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	2002a57c 	.word	0x2002a57c
 800982c:	2002a56c 	.word	0x2002a56c
 8009830:	2002a578 	.word	0x2002a578

08009834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800983a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800983e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009840:	4b27      	ldr	r3, [pc, #156]	; (80098e0 <prvHeapInit+0xac>)
 8009842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f003 0307 	and.w	r3, r3, #7
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00c      	beq.n	8009868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3307      	adds	r3, #7
 8009852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f023 0307 	bic.w	r3, r3, #7
 800985a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	4a1f      	ldr	r2, [pc, #124]	; (80098e0 <prvHeapInit+0xac>)
 8009864:	4413      	add	r3, r2
 8009866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800986c:	4a1d      	ldr	r2, [pc, #116]	; (80098e4 <prvHeapInit+0xb0>)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009872:	4b1c      	ldr	r3, [pc, #112]	; (80098e4 <prvHeapInit+0xb0>)
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	4413      	add	r3, r2
 800987e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009880:	2208      	movs	r2, #8
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 0307 	bic.w	r3, r3, #7
 800988e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a15      	ldr	r2, [pc, #84]	; (80098e8 <prvHeapInit+0xb4>)
 8009894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009896:	4b14      	ldr	r3, [pc, #80]	; (80098e8 <prvHeapInit+0xb4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2200      	movs	r2, #0
 800989c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800989e:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <prvHeapInit+0xb4>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	1ad2      	subs	r2, r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80098b4:	4b0c      	ldr	r3, [pc, #48]	; (80098e8 <prvHeapInit+0xb4>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	4a0a      	ldr	r2, [pc, #40]	; (80098ec <prvHeapInit+0xb8>)
 80098c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	4a09      	ldr	r2, [pc, #36]	; (80098f0 <prvHeapInit+0xbc>)
 80098ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80098cc:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <prvHeapInit+0xc0>)
 80098ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80098d2:	601a      	str	r2, [r3, #0]
}
 80098d4:	bf00      	nop
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr
 80098e0:	20026960 	.word	0x20026960
 80098e4:	2002a560 	.word	0x2002a560
 80098e8:	2002a568 	.word	0x2002a568
 80098ec:	2002a570 	.word	0x2002a570
 80098f0:	2002a56c 	.word	0x2002a56c
 80098f4:	2002a57c 	.word	0x2002a57c

080098f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009900:	4b28      	ldr	r3, [pc, #160]	; (80099a4 <prvInsertBlockIntoFreeList+0xac>)
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	e002      	b.n	800990c <prvInsertBlockIntoFreeList+0x14>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	429a      	cmp	r2, r3
 8009914:	d8f7      	bhi.n	8009906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	4413      	add	r3, r2
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	429a      	cmp	r2, r3
 8009926:	d108      	bne.n	800993a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	441a      	add	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	441a      	add	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d118      	bne.n	8009980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	4b15      	ldr	r3, [pc, #84]	; (80099a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	429a      	cmp	r2, r3
 8009958:	d00d      	beq.n	8009976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	441a      	add	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	e008      	b.n	8009988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009976:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	e003      	b.n	8009988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	429a      	cmp	r2, r3
 800998e:	d002      	beq.n	8009996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	2002a560 	.word	0x2002a560
 80099a8:	2002a568 	.word	0x2002a568

080099ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80099b2:	4b24      	ldr	r3, [pc, #144]	; (8009a44 <_DoInit+0x98>)
 80099b4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2203      	movs	r2, #3
 80099ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2203      	movs	r2, #3
 80099c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a20      	ldr	r2, [pc, #128]	; (8009a48 <_DoInit+0x9c>)
 80099c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a20      	ldr	r2, [pc, #128]	; (8009a4c <_DoInit+0xa0>)
 80099cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a17      	ldr	r2, [pc, #92]	; (8009a48 <_DoInit+0x9c>)
 80099ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <_DoInit+0xa4>)
 80099f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2210      	movs	r2, #16
 80099f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3307      	adds	r3, #7
 8009a10:	4a10      	ldr	r2, [pc, #64]	; (8009a54 <_DoInit+0xa8>)
 8009a12:	6810      	ldr	r0, [r2, #0]
 8009a14:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8009a16:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a0e      	ldr	r2, [pc, #56]	; (8009a58 <_DoInit+0xac>)
 8009a1e:	6810      	ldr	r0, [r2, #0]
 8009a20:	6018      	str	r0, [r3, #0]
 8009a22:	8891      	ldrh	r1, [r2, #4]
 8009a24:	7992      	ldrb	r2, [r2, #6]
 8009a26:	8099      	strh	r1, [r3, #4]
 8009a28:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8009a2a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8009a34:	f3bf 8f5f 	dmb	sy
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2002a580 	.word	0x2002a580
 8009a48:	0800c664 	.word	0x0800c664
 8009a4c:	2002a628 	.word	0x2002a628
 8009a50:	2002aa28 	.word	0x2002aa28
 8009a54:	0800c670 	.word	0x0800c670
 8009a58:	0800c674 	.word	0x0800c674

08009a5c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08c      	sub	sp, #48	; 0x30
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8009a68:	4b3e      	ldr	r3, [pc, #248]	; (8009b64 <SEGGER_RTT_ReadNoLock+0x108>)
 8009a6a:	623b      	str	r3, [r7, #32]
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <SEGGER_RTT_ReadNoLock+0x1e>
 8009a76:	f7ff ff99 	bl	80099ac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	4413      	add	r3, r2
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	3360      	adds	r3, #96	; 0x60
 8009a86:	4a37      	ldr	r2, [pc, #220]	; (8009b64 <SEGGER_RTT_ReadNoLock+0x108>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	691b      	ldr	r3, [r3, #16]
 8009a94:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8009aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d92b      	bls.n	8009b00 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009ab2:	697a      	ldr	r2, [r7, #20]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bf28      	it	cs
 8009aba:	4613      	movcs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	685a      	ldr	r2, [r3, #4]
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	4413      	add	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	6939      	ldr	r1, [r7, #16]
 8009acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ace:	f001 feca 	bl	800b866 <memcpy>
    NumBytesRead += NumBytesRem;
 8009ad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8009ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	4413      	add	r3, r2
 8009ae0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	4413      	add	r3, r2
 8009af0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d101      	bne.n	8009b00 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8009afc:	2300      	movs	r3, #0
 8009afe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	bf28      	it	cs
 8009b10:	4613      	movcs	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d019      	beq.n	8009b4e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	4413      	add	r3, r2
 8009b22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	6939      	ldr	r1, [r7, #16]
 8009b28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b2a:	f001 fe9c 	bl	800b866 <memcpy>
    NumBytesRead += NumBytesRem;
 8009b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	4413      	add	r3, r2
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8009b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d002      	beq.n	8009b5a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b58:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3730      	adds	r7, #48	; 0x30
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	2002a580 	.word	0x2002a580

08009b68 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b088      	sub	sp, #32
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8009b76:	4b3d      	ldr	r3, [pc, #244]	; (8009c6c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009b78:	61bb      	str	r3, [r7, #24]
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <SEGGER_RTT_AllocUpBuffer+0x20>
 8009b84:	f7ff ff12 	bl	80099ac <_DoInit>
  SEGGER_RTT_LOCK();
 8009b88:	f3ef 8311 	mrs	r3, BASEPRI
 8009b8c:	f04f 0120 	mov.w	r1, #32
 8009b90:	f381 8811 	msr	BASEPRI, r1
 8009b94:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009b96:	4b35      	ldr	r3, [pc, #212]	; (8009c6c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009b98:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8009b9e:	6939      	ldr	r1, [r7, #16]
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	4413      	add	r3, r2
 8009baa:	00db      	lsls	r3, r3, #3
 8009bac:	440b      	add	r3, r1
 8009bae:	3304      	adds	r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d008      	beq.n	8009bc8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	69fa      	ldr	r2, [r7, #28]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	dbeb      	blt.n	8009b9e <SEGGER_RTT_AllocUpBuffer+0x36>
 8009bc6:	e000      	b.n	8009bca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8009bc8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	69fa      	ldr	r2, [r7, #28]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	da3f      	bge.n	8009c54 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8009bd4:	6939      	ldr	r1, [r7, #16]
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	4613      	mov	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	4413      	add	r3, r2
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	440b      	add	r3, r1
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009be8:	6939      	ldr	r1, [r7, #16]
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	1c5a      	adds	r2, r3, #1
 8009bee:	4613      	mov	r3, r2
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	4413      	add	r3, r2
 8009bf4:	00db      	lsls	r3, r3, #3
 8009bf6:	440b      	add	r3, r1
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8009bfe:	6939      	ldr	r1, [r7, #16]
 8009c00:	69fa      	ldr	r2, [r7, #28]
 8009c02:	4613      	mov	r3, r2
 8009c04:	005b      	lsls	r3, r3, #1
 8009c06:	4413      	add	r3, r2
 8009c08:	00db      	lsls	r3, r3, #3
 8009c0a:	440b      	add	r3, r1
 8009c0c:	3320      	adds	r3, #32
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8009c12:	6939      	ldr	r1, [r7, #16]
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	4613      	mov	r3, r2
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	4413      	add	r3, r2
 8009c1c:	00db      	lsls	r3, r3, #3
 8009c1e:	440b      	add	r3, r1
 8009c20:	3328      	adds	r3, #40	; 0x28
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009c26:	6939      	ldr	r1, [r7, #16]
 8009c28:	69fa      	ldr	r2, [r7, #28]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	4413      	add	r3, r2
 8009c30:	00db      	lsls	r3, r3, #3
 8009c32:	440b      	add	r3, r1
 8009c34:	3324      	adds	r3, #36	; 0x24
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009c3a:	6939      	ldr	r1, [r7, #16]
 8009c3c:	69fa      	ldr	r2, [r7, #28]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	005b      	lsls	r3, r3, #1
 8009c42:	4413      	add	r3, r2
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	440b      	add	r3, r1
 8009c48:	332c      	adds	r3, #44	; 0x2c
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009c4e:	f3bf 8f5f 	dmb	sy
 8009c52:	e002      	b.n	8009c5a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8009c54:	f04f 33ff 	mov.w	r3, #4294967295
 8009c58:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009c60:	69fb      	ldr	r3, [r7, #28]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2002a580 	.word	0x2002a580

08009c70 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	607a      	str	r2, [r7, #4]
 8009c7c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8009c7e:	4b21      	ldr	r3, [pc, #132]	; (8009d04 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009c80:	623b      	str	r3, [r7, #32]
 8009c82:	6a3b      	ldr	r3, [r7, #32]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8009c8c:	f7ff fe8e 	bl	80099ac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009c90:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009c92:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d82c      	bhi.n	8009cf4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8009c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009c9e:	f04f 0120 	mov.w	r1, #32
 8009ca2:	f381 8811 	msr	BASEPRI, r1
 8009ca6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4613      	mov	r3, r2
 8009cac:	005b      	lsls	r3, r3, #1
 8009cae:	4413      	add	r3, r2
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	3360      	adds	r3, #96	; 0x60
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00e      	beq.n	8009cde <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ce2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009ce4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf2:	e002      	b.n	8009cfa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8009cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3728      	adds	r7, #40	; 0x28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	2002a580 	.word	0x2002a580

08009d08 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009d08:	b480      	push	{r7}
 8009d0a:	b087      	sub	sp, #28
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00f      	beq.n	8009d3e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8009d1e:	e002      	b.n	8009d26 <_EncodeStr+0x1e>
      Len++;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	3301      	adds	r3, #1
 8009d24:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d1f6      	bne.n	8009d20 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d901      	bls.n	8009d3e <_EncodeStr+0x36>
      Len = Limit;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	2bfe      	cmp	r3, #254	; 0xfe
 8009d42:	d806      	bhi.n	8009d52 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	60fa      	str	r2, [r7, #12]
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	701a      	strb	r2, [r3, #0]
 8009d50:	e011      	b.n	8009d76 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	1c5a      	adds	r2, r3, #1
 8009d56:	60fa      	str	r2, [r7, #12]
 8009d58:	22ff      	movs	r2, #255	; 0xff
 8009d5a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	60fa      	str	r2, [r7, #12]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	0a19      	lsrs	r1, r3, #8
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	60fa      	str	r2, [r7, #12]
 8009d72:	b2ca      	uxtb	r2, r1
 8009d74:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8009d7a:	e00a      	b.n	8009d92 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	1c53      	adds	r3, r2, #1
 8009d80:	60bb      	str	r3, [r7, #8]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	1c59      	adds	r1, r3, #1
 8009d86:	60f9      	str	r1, [r7, #12]
 8009d88:	7812      	ldrb	r2, [r2, #0]
 8009d8a:	701a      	strb	r2, [r3, #0]
    n++;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d3f0      	bcc.n	8009d7c <_EncodeStr+0x74>
  }
  return pPayload;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	371c      	adds	r7, #28
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	3304      	adds	r3, #4
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009dc6:	4b35      	ldr	r3, [pc, #212]	; (8009e9c <_HandleIncomingPacket+0xdc>)
 8009dc8:	7e1b      	ldrb	r3, [r3, #24]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	1cfb      	adds	r3, r7, #3
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f7ff fe43 	bl	8009a5c <SEGGER_RTT_ReadNoLock>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dd59      	ble.n	8009e94 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	2b80      	cmp	r3, #128	; 0x80
 8009de4:	d032      	beq.n	8009e4c <_HandleIncomingPacket+0x8c>
 8009de6:	2b80      	cmp	r3, #128	; 0x80
 8009de8:	dc42      	bgt.n	8009e70 <_HandleIncomingPacket+0xb0>
 8009dea:	2b07      	cmp	r3, #7
 8009dec:	dc16      	bgt.n	8009e1c <_HandleIncomingPacket+0x5c>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	dd3e      	ble.n	8009e70 <_HandleIncomingPacket+0xb0>
 8009df2:	3b01      	subs	r3, #1
 8009df4:	2b06      	cmp	r3, #6
 8009df6:	d83b      	bhi.n	8009e70 <_HandleIncomingPacket+0xb0>
 8009df8:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <_HandleIncomingPacket+0x40>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e23 	.word	0x08009e23
 8009e04:	08009e29 	.word	0x08009e29
 8009e08:	08009e2f 	.word	0x08009e2f
 8009e0c:	08009e35 	.word	0x08009e35
 8009e10:	08009e3b 	.word	0x08009e3b
 8009e14:	08009e41 	.word	0x08009e41
 8009e18:	08009e47 	.word	0x08009e47
 8009e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8009e1e:	d034      	beq.n	8009e8a <_HandleIncomingPacket+0xca>
 8009e20:	e026      	b.n	8009e70 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009e22:	f000 fba5 	bl	800a570 <SEGGER_SYSVIEW_Start>
      break;
 8009e26:	e035      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009e28:	f000 fc5c 	bl	800a6e4 <SEGGER_SYSVIEW_Stop>
      break;
 8009e2c:	e032      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009e2e:	f000 fe35 	bl	800aa9c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009e32:	e02f      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009e34:	f000 fdfa 	bl	800aa2c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009e38:	e02c      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009e3a:	f000 fc79 	bl	800a730 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009e3e:	e029      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009e40:	f001 f8a8 	bl	800af94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009e44:	e026      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009e46:	f001 f887 	bl	800af58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009e4a:	e023      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009e4c:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <_HandleIncomingPacket+0xdc>)
 8009e4e:	7e1b      	ldrb	r3, [r3, #24]
 8009e50:	4618      	mov	r0, r3
 8009e52:	1cfb      	adds	r3, r7, #3
 8009e54:	2201      	movs	r2, #1
 8009e56:	4619      	mov	r1, r3
 8009e58:	f7ff fe00 	bl	8009a5c <SEGGER_RTT_ReadNoLock>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dd13      	ble.n	8009e8e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 fff5 	bl	800ae58 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009e6e:	e00e      	b.n	8009e8e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	b25b      	sxtb	r3, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	da0c      	bge.n	8009e92 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009e78:	4b08      	ldr	r3, [pc, #32]	; (8009e9c <_HandleIncomingPacket+0xdc>)
 8009e7a:	7e1b      	ldrb	r3, [r3, #24]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	1cfb      	adds	r3, r7, #3
 8009e80:	2201      	movs	r2, #1
 8009e82:	4619      	mov	r1, r3
 8009e84:	f7ff fdea 	bl	8009a5c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8009e88:	e003      	b.n	8009e92 <_HandleIncomingPacket+0xd2>
      break;
 8009e8a:	bf00      	nop
 8009e8c:	e002      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
      break;
 8009e8e:	bf00      	nop
 8009e90:	e000      	b.n	8009e94 <_HandleIncomingPacket+0xd4>
      break;
 8009e92:	bf00      	nop
    }
  }
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	2002ae44 	.word	0x2002ae44

08009ea0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	; 0x30
 8009ea4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009eaa:	1d3b      	adds	r3, r7, #4
 8009eac:	3301      	adds	r3, #1
 8009eae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eb4:	4b31      	ldr	r3, [pc, #196]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eba:	e00b      	b.n	8009ed4 <_TrySendOverflowPacket+0x34>
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	1c59      	adds	r1, r3, #1
 8009ec4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009ec6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009eca:	b2d2      	uxtb	r2, r2
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed0:	09db      	lsrs	r3, r3, #7
 8009ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8009ed8:	d8f0      	bhi.n	8009ebc <_TrySendOverflowPacket+0x1c>
 8009eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009edc:	1c5a      	adds	r2, r3, #1
 8009ede:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ee2:	b2d2      	uxtb	r2, r2
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009eea:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <_TrySendOverflowPacket+0xe0>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009ef0:	4b22      	ldr	r3, [pc, #136]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	69ba      	ldr	r2, [r7, #24]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	623b      	str	r3, [r7, #32]
 8009f02:	e00b      	b.n	8009f1c <_TrySendOverflowPacket+0x7c>
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	6279      	str	r1, [r7, #36]	; 0x24
 8009f0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	09db      	lsrs	r3, r3, #7
 8009f1a:	623b      	str	r3, [r7, #32]
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8009f20:	d8f0      	bhi.n	8009f04 <_TrySendOverflowPacket+0x64>
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	1c5a      	adds	r2, r3, #1
 8009f26:	627a      	str	r2, [r7, #36]	; 0x24
 8009f28:	6a3a      	ldr	r2, [r7, #32]
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	701a      	strb	r2, [r3, #0]
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8009f32:	4b12      	ldr	r3, [pc, #72]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009f34:	785b      	ldrb	r3, [r3, #1]
 8009f36:	4618      	mov	r0, r3
 8009f38:	1d3b      	adds	r3, r7, #4
 8009f3a:	69fa      	ldr	r2, [r7, #28]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	1d3b      	adds	r3, r7, #4
 8009f42:	4619      	mov	r1, r3
 8009f44:	f7f6 f954 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d009      	beq.n	8009f66 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009f52:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009f58:	4b08      	ldr	r3, [pc, #32]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e004      	b.n	8009f70 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009f68:	695b      	ldr	r3, [r3, #20]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	4a03      	ldr	r2, [pc, #12]	; (8009f7c <_TrySendOverflowPacket+0xdc>)
 8009f6e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009f70:	693b      	ldr	r3, [r7, #16]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3730      	adds	r7, #48	; 0x30
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	2002ae44 	.word	0x2002ae44
 8009f80:	e0001004 	.word	0xe0001004

08009f84 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b08a      	sub	sp, #40	; 0x28
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8009f90:	4b6c      	ldr	r3, [pc, #432]	; (800a144 <_SendPacket+0x1c0>)
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d010      	beq.n	8009fba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009f98:	4b6a      	ldr	r3, [pc, #424]	; (800a144 <_SendPacket+0x1c0>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 80a3 	beq.w	800a0e8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8009fa2:	4b68      	ldr	r3, [pc, #416]	; (800a144 <_SendPacket+0x1c0>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d109      	bne.n	8009fbe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8009faa:	f7ff ff79 	bl	8009ea0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8009fae:	4b65      	ldr	r3, [pc, #404]	; (800a144 <_SendPacket+0x1c0>)
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	f040 809a 	bne.w	800a0ec <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8009fb8:	e001      	b.n	8009fbe <_SendPacket+0x3a>
    goto Send;
 8009fba:	bf00      	nop
 8009fbc:	e000      	b.n	8009fc0 <_SendPacket+0x3c>
Send:
 8009fbe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b1f      	cmp	r3, #31
 8009fc4:	d809      	bhi.n	8009fda <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8009fc6:	4b5f      	ldr	r3, [pc, #380]	; (800a144 <_SendPacket+0x1c0>)
 8009fc8:	69da      	ldr	r2, [r3, #28]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f040 808b 	bne.w	800a0f0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2b17      	cmp	r3, #23
 8009fde:	d807      	bhi.n	8009ff0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	e03d      	b.n	800a06c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8009ffc:	d912      	bls.n	800a024 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	09da      	lsrs	r2, r3, #7
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3b01      	subs	r3, #1
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	b2d2      	uxtb	r2, r2
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	3a01      	subs	r2, #1
 800a016:	60fa      	str	r2, [r7, #12]
 800a018:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	e006      	b.n	800a032 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3b01      	subs	r3, #1
 800a028:	60fb      	str	r3, [r7, #12]
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b7f      	cmp	r3, #127	; 0x7f
 800a036:	d912      	bls.n	800a05e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	09da      	lsrs	r2, r3, #7
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3b01      	subs	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
 800a042:	b2d2      	uxtb	r2, r2
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	3a01      	subs	r2, #1
 800a050:	60fa      	str	r2, [r7, #12]
 800a052:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a056:	b2da      	uxtb	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	701a      	strb	r2, [r3, #0]
 800a05c:	e006      	b.n	800a06c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3b01      	subs	r3, #1
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	b2da      	uxtb	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a06c:	4b36      	ldr	r3, [pc, #216]	; (800a148 <_SendPacket+0x1c4>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a072:	4b34      	ldr	r3, [pc, #208]	; (800a144 <_SendPacket+0x1c0>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	69ba      	ldr	r2, [r7, #24]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	623b      	str	r3, [r7, #32]
 800a084:	e00b      	b.n	800a09e <_SendPacket+0x11a>
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	1c59      	adds	r1, r3, #1
 800a08e:	6279      	str	r1, [r7, #36]	; 0x24
 800a090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a094:	b2d2      	uxtb	r2, r2
 800a096:	701a      	strb	r2, [r3, #0]
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	09db      	lsrs	r3, r3, #7
 800a09c:	623b      	str	r3, [r7, #32]
 800a09e:	6a3b      	ldr	r3, [r7, #32]
 800a0a0:	2b7f      	cmp	r3, #127	; 0x7f
 800a0a2:	d8f0      	bhi.n	800a086 <_SendPacket+0x102>
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	627a      	str	r2, [r7, #36]	; 0x24
 800a0aa:	6a3a      	ldr	r2, [r7, #32]
 800a0ac:	b2d2      	uxtb	r2, r2
 800a0ae:	701a      	strb	r2, [r3, #0]
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800a0b4:	4b23      	ldr	r3, [pc, #140]	; (800a144 <_SendPacket+0x1c0>)
 800a0b6:	785b      	ldrb	r3, [r3, #1]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	f7f6 f894 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a0d2:	4a1c      	ldr	r2, [pc, #112]	; (800a144 <_SendPacket+0x1c0>)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	60d3      	str	r3, [r2, #12]
 800a0d8:	e00b      	b.n	800a0f2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800a0da:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <_SendPacket+0x1c0>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	4b18      	ldr	r3, [pc, #96]	; (800a144 <_SendPacket+0x1c0>)
 800a0e4:	701a      	strb	r2, [r3, #0]
 800a0e6:	e004      	b.n	800a0f2 <_SendPacket+0x16e>
    goto SendDone;
 800a0e8:	bf00      	nop
 800a0ea:	e002      	b.n	800a0f2 <_SendPacket+0x16e>
      goto SendDone;
 800a0ec:	bf00      	nop
 800a0ee:	e000      	b.n	800a0f2 <_SendPacket+0x16e>
      goto SendDone;
 800a0f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a0f2:	4b14      	ldr	r3, [pc, #80]	; (800a144 <_SendPacket+0x1c0>)
 800a0f4:	7e1b      	ldrb	r3, [r3, #24]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4a14      	ldr	r2, [pc, #80]	; (800a14c <_SendPacket+0x1c8>)
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	440b      	add	r3, r1
 800a100:	00db      	lsls	r3, r3, #3
 800a102:	4413      	add	r3, r2
 800a104:	336c      	adds	r3, #108	; 0x6c
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <_SendPacket+0x1c0>)
 800a10a:	7e1b      	ldrb	r3, [r3, #24]
 800a10c:	4618      	mov	r0, r3
 800a10e:	490f      	ldr	r1, [pc, #60]	; (800a14c <_SendPacket+0x1c8>)
 800a110:	4603      	mov	r3, r0
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	4403      	add	r3, r0
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	440b      	add	r3, r1
 800a11a:	3370      	adds	r3, #112	; 0x70
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d00b      	beq.n	800a13a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a122:	4b08      	ldr	r3, [pc, #32]	; (800a144 <_SendPacket+0x1c0>)
 800a124:	789b      	ldrb	r3, [r3, #2]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d107      	bne.n	800a13a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <_SendPacket+0x1c0>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a130:	f7ff fe46 	bl	8009dc0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a134:	4b03      	ldr	r3, [pc, #12]	; (800a144 <_SendPacket+0x1c0>)
 800a136:	2200      	movs	r2, #0
 800a138:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800a13a:	bf00      	nop
 800a13c:	3728      	adds	r7, #40	; 0x28
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	2002ae44 	.word	0x2002ae44
 800a148:	e0001004 	.word	0xe0001004
 800a14c:	2002a580 	.word	0x2002a580

0800a150 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af02      	add	r7, sp, #8
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a15e:	2300      	movs	r3, #0
 800a160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a164:	4917      	ldr	r1, [pc, #92]	; (800a1c4 <SEGGER_SYSVIEW_Init+0x74>)
 800a166:	4818      	ldr	r0, [pc, #96]	; (800a1c8 <SEGGER_SYSVIEW_Init+0x78>)
 800a168:	f7ff fcfe 	bl	8009b68 <SEGGER_RTT_AllocUpBuffer>
 800a16c:	4603      	mov	r3, r0
 800a16e:	b2da      	uxtb	r2, r3
 800a170:	4b16      	ldr	r3, [pc, #88]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a172:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800a174:	4b15      	ldr	r3, [pc, #84]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a176:	785a      	ldrb	r2, [r3, #1]
 800a178:	4b14      	ldr	r3, [pc, #80]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a17a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a17c:	4b13      	ldr	r3, [pc, #76]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a17e:	7e1b      	ldrb	r3, [r3, #24]
 800a180:	4618      	mov	r0, r3
 800a182:	2300      	movs	r3, #0
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	2308      	movs	r3, #8
 800a188:	4a11      	ldr	r2, [pc, #68]	; (800a1d0 <SEGGER_SYSVIEW_Init+0x80>)
 800a18a:	490f      	ldr	r1, [pc, #60]	; (800a1c8 <SEGGER_SYSVIEW_Init+0x78>)
 800a18c:	f7ff fd70 	bl	8009c70 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800a190:	4b0e      	ldr	r3, [pc, #56]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a192:	2200      	movs	r2, #0
 800a194:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a196:	4b0f      	ldr	r3, [pc, #60]	; (800a1d4 <SEGGER_SYSVIEW_Init+0x84>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a0c      	ldr	r2, [pc, #48]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a19c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800a19e:	4a0b      	ldr	r2, [pc, #44]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800a1a4:	4a09      	ldr	r2, [pc, #36]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800a1aa:	4a08      	ldr	r2, [pc, #32]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800a1b0:	4a06      	ldr	r2, [pc, #24]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800a1b6:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800a1bc:	bf00      	nop
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	2002aa3c 	.word	0x2002aa3c
 800a1c8:	0800c67c 	.word	0x0800c67c
 800a1cc:	2002ae44 	.word	0x2002ae44
 800a1d0:	2002ae3c 	.word	0x2002ae3c
 800a1d4:	e0001004 	.word	0xe0001004

0800a1d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800a1e0:	4a04      	ldr	r2, [pc, #16]	; (800a1f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6113      	str	r3, [r2, #16]
}
 800a1e6:	bf00      	nop
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr
 800a1f2:	bf00      	nop
 800a1f4:	2002ae44 	.word	0x2002ae44

0800a1f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a200:	f3ef 8311 	mrs	r3, BASEPRI
 800a204:	f04f 0120 	mov.w	r1, #32
 800a208:	f381 8811 	msr	BASEPRI, r1
 800a20c:	60fb      	str	r3, [r7, #12]
 800a20e:	4808      	ldr	r0, [pc, #32]	; (800a230 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800a210:	f7ff fdca 	bl	8009da8 <_PreparePacket>
 800a214:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	68b9      	ldr	r1, [r7, #8]
 800a21a:	68b8      	ldr	r0, [r7, #8]
 800a21c:	f7ff feb2 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f383 8811 	msr	BASEPRI, r3
}
 800a226:	bf00      	nop
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	2002ae74 	.word	0x2002ae74

0800a234 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a23e:	f3ef 8311 	mrs	r3, BASEPRI
 800a242:	f04f 0120 	mov.w	r1, #32
 800a246:	f381 8811 	msr	BASEPRI, r1
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	4816      	ldr	r0, [pc, #88]	; (800a2a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800a24e:	f7ff fdab 	bl	8009da8 <_PreparePacket>
 800a252:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	61fb      	str	r3, [r7, #28]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	61bb      	str	r3, [r7, #24]
 800a260:	e00b      	b.n	800a27a <SEGGER_SYSVIEW_RecordU32+0x46>
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	b2da      	uxtb	r2, r3
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	1c59      	adds	r1, r3, #1
 800a26a:	61f9      	str	r1, [r7, #28]
 800a26c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	09db      	lsrs	r3, r3, #7
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	2b7f      	cmp	r3, #127	; 0x7f
 800a27e:	d8f0      	bhi.n	800a262 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	61fa      	str	r2, [r7, #28]
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	b2d2      	uxtb	r2, r2
 800a28a:	701a      	strb	r2, [r3, #0]
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	68f9      	ldr	r1, [r7, #12]
 800a294:	6938      	ldr	r0, [r7, #16]
 800a296:	f7ff fe75 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f383 8811 	msr	BASEPRI, r3
}
 800a2a0:	bf00      	nop
 800a2a2:	3720      	adds	r7, #32
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	2002ae74 	.word	0x2002ae74

0800a2ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08c      	sub	sp, #48	; 0x30
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a2b8:	f3ef 8311 	mrs	r3, BASEPRI
 800a2bc:	f04f 0120 	mov.w	r1, #32
 800a2c0:	f381 8811 	msr	BASEPRI, r1
 800a2c4:	61fb      	str	r3, [r7, #28]
 800a2c6:	4825      	ldr	r0, [pc, #148]	; (800a35c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800a2c8:	f7ff fd6e 	bl	8009da8 <_PreparePacket>
 800a2cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2da:	e00b      	b.n	800a2f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e2:	1c59      	adds	r1, r3, #1
 800a2e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a2e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a2ea:	b2d2      	uxtb	r2, r2
 800a2ec:	701a      	strb	r2, [r3, #0]
 800a2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f0:	09db      	lsrs	r3, r3, #7
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a2f8:	d8f0      	bhi.n	800a2dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a302:	b2d2      	uxtb	r2, r2
 800a304:	701a      	strb	r2, [r3, #0]
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	627b      	str	r3, [r7, #36]	; 0x24
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	623b      	str	r3, [r7, #32]
 800a312:	e00b      	b.n	800a32c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	b2da      	uxtb	r2, r3
 800a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	6279      	str	r1, [r7, #36]	; 0x24
 800a31e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	701a      	strb	r2, [r3, #0]
 800a326:	6a3b      	ldr	r3, [r7, #32]
 800a328:	09db      	lsrs	r3, r3, #7
 800a32a:	623b      	str	r3, [r7, #32]
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	2b7f      	cmp	r3, #127	; 0x7f
 800a330:	d8f0      	bhi.n	800a314 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	1c5a      	adds	r2, r3, #1
 800a336:	627a      	str	r2, [r7, #36]	; 0x24
 800a338:	6a3a      	ldr	r2, [r7, #32]
 800a33a:	b2d2      	uxtb	r2, r2
 800a33c:	701a      	strb	r2, [r3, #0]
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	6979      	ldr	r1, [r7, #20]
 800a346:	69b8      	ldr	r0, [r7, #24]
 800a348:	f7ff fe1c 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	f383 8811 	msr	BASEPRI, r3
}
 800a352:	bf00      	nop
 800a354:	3730      	adds	r7, #48	; 0x30
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	2002ae74 	.word	0x2002ae74

0800a360 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800a360:	b580      	push	{r7, lr}
 800a362:	b08e      	sub	sp, #56	; 0x38
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800a36e:	f3ef 8311 	mrs	r3, BASEPRI
 800a372:	f04f 0120 	mov.w	r1, #32
 800a376:	f381 8811 	msr	BASEPRI, r1
 800a37a:	61fb      	str	r3, [r7, #28]
 800a37c:	4832      	ldr	r0, [pc, #200]	; (800a448 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800a37e:	f7ff fd13 	bl	8009da8 <_PreparePacket>
 800a382:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	637b      	str	r3, [r7, #52]	; 0x34
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	633b      	str	r3, [r7, #48]	; 0x30
 800a390:	e00b      	b.n	800a3aa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800a392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a394:	b2da      	uxtb	r2, r3
 800a396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a398:	1c59      	adds	r1, r3, #1
 800a39a:	6379      	str	r1, [r7, #52]	; 0x34
 800a39c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3a0:	b2d2      	uxtb	r2, r2
 800a3a2:	701a      	strb	r2, [r3, #0]
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a6:	09db      	lsrs	r3, r3, #7
 800a3a8:	633b      	str	r3, [r7, #48]	; 0x30
 800a3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ac:	2b7f      	cmp	r3, #127	; 0x7f
 800a3ae:	d8f0      	bhi.n	800a392 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	637a      	str	r2, [r7, #52]	; 0x34
 800a3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3b8:	b2d2      	uxtb	r2, r2
 800a3ba:	701a      	strb	r2, [r3, #0]
 800a3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3c8:	e00b      	b.n	800a3e2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	b2da      	uxtb	r2, r3
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	1c59      	adds	r1, r3, #1
 800a3d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a3d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a3d8:	b2d2      	uxtb	r2, r2
 800a3da:	701a      	strb	r2, [r3, #0]
 800a3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3de:	09db      	lsrs	r3, r3, #7
 800a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	2b7f      	cmp	r3, #127	; 0x7f
 800a3e6:	d8f0      	bhi.n	800a3ca <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	1c5a      	adds	r2, r3, #1
 800a3ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f0:	b2d2      	uxtb	r2, r2
 800a3f2:	701a      	strb	r2, [r3, #0]
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	623b      	str	r3, [r7, #32]
 800a400:	e00b      	b.n	800a41a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	b2da      	uxtb	r2, r3
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	1c59      	adds	r1, r3, #1
 800a40a:	6279      	str	r1, [r7, #36]	; 0x24
 800a40c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	09db      	lsrs	r3, r3, #7
 800a418:	623b      	str	r3, [r7, #32]
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	2b7f      	cmp	r3, #127	; 0x7f
 800a41e:	d8f0      	bhi.n	800a402 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	627a      	str	r2, [r7, #36]	; 0x24
 800a426:	6a3a      	ldr	r2, [r7, #32]
 800a428:	b2d2      	uxtb	r2, r2
 800a42a:	701a      	strb	r2, [r3, #0]
 800a42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	6979      	ldr	r1, [r7, #20]
 800a434:	69b8      	ldr	r0, [r7, #24]
 800a436:	f7ff fda5 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	f383 8811 	msr	BASEPRI, r3
}
 800a440:	bf00      	nop
 800a442:	3738      	adds	r7, #56	; 0x38
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	2002ae74 	.word	0x2002ae74

0800a44c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b090      	sub	sp, #64	; 0x40
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a45a:	f3ef 8311 	mrs	r3, BASEPRI
 800a45e:	f04f 0120 	mov.w	r1, #32
 800a462:	f381 8811 	msr	BASEPRI, r1
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	4840      	ldr	r0, [pc, #256]	; (800a56c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800a46a:	f7ff fc9d 	bl	8009da8 <_PreparePacket>
 800a46e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a47c:	e00b      	b.n	800a496 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	b2da      	uxtb	r2, r3
 800a482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a484:	1c59      	adds	r1, r3, #1
 800a486:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a48c:	b2d2      	uxtb	r2, r2
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a492:	09db      	lsrs	r3, r3, #7
 800a494:	63bb      	str	r3, [r7, #56]	; 0x38
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	2b7f      	cmp	r3, #127	; 0x7f
 800a49a:	d8f0      	bhi.n	800a47e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800a49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4a4:	b2d2      	uxtb	r2, r2
 800a4a6:	701a      	strb	r2, [r3, #0]
 800a4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a4b4:	e00b      	b.n	800a4ce <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4bc:	1c59      	adds	r1, r3, #1
 800a4be:	6379      	str	r1, [r7, #52]	; 0x34
 800a4c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a4c4:	b2d2      	uxtb	r2, r2
 800a4c6:	701a      	strb	r2, [r3, #0]
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	09db      	lsrs	r3, r3, #7
 800a4cc:	633b      	str	r3, [r7, #48]	; 0x30
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d0:	2b7f      	cmp	r3, #127	; 0x7f
 800a4d2:	d8f0      	bhi.n	800a4b6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800a4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	637a      	str	r2, [r7, #52]	; 0x34
 800a4da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4dc:	b2d2      	uxtb	r2, r2
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4ec:	e00b      	b.n	800a506 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	1c59      	adds	r1, r3, #1
 800a4f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a4f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a4fc:	b2d2      	uxtb	r2, r2
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	09db      	lsrs	r3, r3, #7
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
 800a506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a508:	2b7f      	cmp	r3, #127	; 0x7f
 800a50a:	d8f0      	bhi.n	800a4ee <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	1c5a      	adds	r2, r3, #1
 800a510:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a514:	b2d2      	uxtb	r2, r2
 800a516:	701a      	strb	r2, [r3, #0]
 800a518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
 800a520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a522:	623b      	str	r3, [r7, #32]
 800a524:	e00b      	b.n	800a53e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52c:	1c59      	adds	r1, r3, #1
 800a52e:	6279      	str	r1, [r7, #36]	; 0x24
 800a530:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a534:	b2d2      	uxtb	r2, r2
 800a536:	701a      	strb	r2, [r3, #0]
 800a538:	6a3b      	ldr	r3, [r7, #32]
 800a53a:	09db      	lsrs	r3, r3, #7
 800a53c:	623b      	str	r3, [r7, #32]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	2b7f      	cmp	r3, #127	; 0x7f
 800a542:	d8f0      	bhi.n	800a526 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	627a      	str	r2, [r7, #36]	; 0x24
 800a54a:	6a3a      	ldr	r2, [r7, #32]
 800a54c:	b2d2      	uxtb	r2, r2
 800a54e:	701a      	strb	r2, [r3, #0]
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	6979      	ldr	r1, [r7, #20]
 800a558:	69b8      	ldr	r0, [r7, #24]
 800a55a:	f7ff fd13 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	f383 8811 	msr	BASEPRI, r3
}
 800a564:	bf00      	nop
 800a566:	3740      	adds	r7, #64	; 0x40
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	2002ae74 	.word	0x2002ae74

0800a570 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b08c      	sub	sp, #48	; 0x30
 800a574:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800a576:	4b58      	ldr	r3, [pc, #352]	; (800a6d8 <SEGGER_SYSVIEW_Start+0x168>)
 800a578:	2201      	movs	r2, #1
 800a57a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800a57c:	f3ef 8311 	mrs	r3, BASEPRI
 800a580:	f04f 0120 	mov.w	r1, #32
 800a584:	f381 8811 	msr	BASEPRI, r1
 800a588:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800a58a:	4b53      	ldr	r3, [pc, #332]	; (800a6d8 <SEGGER_SYSVIEW_Start+0x168>)
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	220a      	movs	r2, #10
 800a590:	4952      	ldr	r1, [pc, #328]	; (800a6dc <SEGGER_SYSVIEW_Start+0x16c>)
 800a592:	4618      	mov	r0, r3
 800a594:	f7f5 fe2c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800a59e:	200a      	movs	r0, #10
 800a5a0:	f7ff fe2a 	bl	800a1f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a5a4:	f3ef 8311 	mrs	r3, BASEPRI
 800a5a8:	f04f 0120 	mov.w	r1, #32
 800a5ac:	f381 8811 	msr	BASEPRI, r1
 800a5b0:	60bb      	str	r3, [r7, #8]
 800a5b2:	484b      	ldr	r0, [pc, #300]	; (800a6e0 <SEGGER_SYSVIEW_Start+0x170>)
 800a5b4:	f7ff fbf8 	bl	8009da8 <_PreparePacket>
 800a5b8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5c2:	4b45      	ldr	r3, [pc, #276]	; (800a6d8 <SEGGER_SYSVIEW_Start+0x168>)
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5c8:	e00b      	b.n	800a5e2 <SEGGER_SYSVIEW_Start+0x72>
 800a5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	1c59      	adds	r1, r3, #1
 800a5d2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a5d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a5d8:	b2d2      	uxtb	r2, r2
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	09db      	lsrs	r3, r3, #7
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2b7f      	cmp	r3, #127	; 0x7f
 800a5e6:	d8f0      	bhi.n	800a5ca <SEGGER_SYSVIEW_Start+0x5a>
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f0:	b2d2      	uxtb	r2, r2
 800a5f2:	701a      	strb	r2, [r3, #0]
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a5fc:	4b36      	ldr	r3, [pc, #216]	; (800a6d8 <SEGGER_SYSVIEW_Start+0x168>)
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	623b      	str	r3, [r7, #32]
 800a602:	e00b      	b.n	800a61c <SEGGER_SYSVIEW_Start+0xac>
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	b2da      	uxtb	r2, r3
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	1c59      	adds	r1, r3, #1
 800a60c:	6279      	str	r1, [r7, #36]	; 0x24
 800a60e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a612:	b2d2      	uxtb	r2, r2
 800a614:	701a      	strb	r2, [r3, #0]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	09db      	lsrs	r3, r3, #7
 800a61a:	623b      	str	r3, [r7, #32]
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	2b7f      	cmp	r3, #127	; 0x7f
 800a620:	d8f0      	bhi.n	800a604 <SEGGER_SYSVIEW_Start+0x94>
 800a622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	627a      	str	r2, [r7, #36]	; 0x24
 800a628:	6a3a      	ldr	r2, [r7, #32]
 800a62a:	b2d2      	uxtb	r2, r2
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a630:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	4b28      	ldr	r3, [pc, #160]	; (800a6d8 <SEGGER_SYSVIEW_Start+0x168>)
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	61bb      	str	r3, [r7, #24]
 800a63c:	e00b      	b.n	800a656 <SEGGER_SYSVIEW_Start+0xe6>
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	b2da      	uxtb	r2, r3
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	1c59      	adds	r1, r3, #1
 800a646:	61f9      	str	r1, [r7, #28]
 800a648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a64c:	b2d2      	uxtb	r2, r2
 800a64e:	701a      	strb	r2, [r3, #0]
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	09db      	lsrs	r3, r3, #7
 800a654:	61bb      	str	r3, [r7, #24]
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	2b7f      	cmp	r3, #127	; 0x7f
 800a65a:	d8f0      	bhi.n	800a63e <SEGGER_SYSVIEW_Start+0xce>
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	61fa      	str	r2, [r7, #28]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	b2d2      	uxtb	r2, r2
 800a666:	701a      	strb	r2, [r3, #0]
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	2300      	movs	r3, #0
 800a672:	613b      	str	r3, [r7, #16]
 800a674:	e00b      	b.n	800a68e <SEGGER_SYSVIEW_Start+0x11e>
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	b2da      	uxtb	r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	6179      	str	r1, [r7, #20]
 800a680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a684:	b2d2      	uxtb	r2, r2
 800a686:	701a      	strb	r2, [r3, #0]
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	09db      	lsrs	r3, r3, #7
 800a68c:	613b      	str	r3, [r7, #16]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	2b7f      	cmp	r3, #127	; 0x7f
 800a692:	d8f0      	bhi.n	800a676 <SEGGER_SYSVIEW_Start+0x106>
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	617a      	str	r2, [r7, #20]
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	b2d2      	uxtb	r2, r2
 800a69e:	701a      	strb	r2, [r3, #0]
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a6a4:	2218      	movs	r2, #24
 800a6a6:	6839      	ldr	r1, [r7, #0]
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff fc6b 	bl	8009f84 <_SendPacket>
      RECORD_END();
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a6b4:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <SEGGER_SYSVIEW_Start+0x168>)
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <SEGGER_SYSVIEW_Start+0x168>)
 800a6be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800a6c2:	f000 f9eb 	bl	800aa9c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800a6c6:	f000 f9b1 	bl	800aa2c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800a6ca:	f000 fc63 	bl	800af94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800a6ce:	bf00      	nop
 800a6d0:	3730      	adds	r7, #48	; 0x30
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	2002ae44 	.word	0x2002ae44
 800a6dc:	0800da04 	.word	0x0800da04
 800a6e0:	2002ae74 	.word	0x2002ae74

0800a6e4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a6ea:	f3ef 8311 	mrs	r3, BASEPRI
 800a6ee:	f04f 0120 	mov.w	r1, #32
 800a6f2:	f381 8811 	msr	BASEPRI, r1
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	480b      	ldr	r0, [pc, #44]	; (800a728 <SEGGER_SYSVIEW_Stop+0x44>)
 800a6fa:	f7ff fb55 	bl	8009da8 <_PreparePacket>
 800a6fe:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800a700:	4b0a      	ldr	r3, [pc, #40]	; (800a72c <SEGGER_SYSVIEW_Stop+0x48>)
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d007      	beq.n	800a718 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800a708:	220b      	movs	r2, #11
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6838      	ldr	r0, [r7, #0]
 800a70e:	f7ff fc39 	bl	8009f84 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800a712:	4b06      	ldr	r3, [pc, #24]	; (800a72c <SEGGER_SYSVIEW_Stop+0x48>)
 800a714:	2200      	movs	r2, #0
 800a716:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f383 8811 	msr	BASEPRI, r3
}
 800a71e:	bf00      	nop
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	2002ae74 	.word	0x2002ae74
 800a72c:	2002ae44 	.word	0x2002ae44

0800a730 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800a730:	b580      	push	{r7, lr}
 800a732:	b08c      	sub	sp, #48	; 0x30
 800a734:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a736:	f3ef 8311 	mrs	r3, BASEPRI
 800a73a:	f04f 0120 	mov.w	r1, #32
 800a73e:	f381 8811 	msr	BASEPRI, r1
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	4845      	ldr	r0, [pc, #276]	; (800a85c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800a746:	f7ff fb2f 	bl	8009da8 <_PreparePacket>
 800a74a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a754:	4b42      	ldr	r3, [pc, #264]	; (800a860 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	62bb      	str	r3, [r7, #40]	; 0x28
 800a75a:	e00b      	b.n	800a774 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a762:	1c59      	adds	r1, r3, #1
 800a764:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a76a:	b2d2      	uxtb	r2, r2
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	09db      	lsrs	r3, r3, #7
 800a772:	62bb      	str	r3, [r7, #40]	; 0x28
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	2b7f      	cmp	r3, #127	; 0x7f
 800a778:	d8f0      	bhi.n	800a75c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	701a      	strb	r2, [r3, #0]
 800a786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a788:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
 800a78e:	4b34      	ldr	r3, [pc, #208]	; (800a860 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	623b      	str	r3, [r7, #32]
 800a794:	e00b      	b.n	800a7ae <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	1c59      	adds	r1, r3, #1
 800a79e:	6279      	str	r1, [r7, #36]	; 0x24
 800a7a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a7a4:	b2d2      	uxtb	r2, r2
 800a7a6:	701a      	strb	r2, [r3, #0]
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	09db      	lsrs	r3, r3, #7
 800a7ac:	623b      	str	r3, [r7, #32]
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	2b7f      	cmp	r3, #127	; 0x7f
 800a7b2:	d8f0      	bhi.n	800a796 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b6:	1c5a      	adds	r2, r3, #1
 800a7b8:	627a      	str	r2, [r7, #36]	; 0x24
 800a7ba:	6a3a      	ldr	r2, [r7, #32]
 800a7bc:	b2d2      	uxtb	r2, r2
 800a7be:	701a      	strb	r2, [r3, #0]
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	61fb      	str	r3, [r7, #28]
 800a7c8:	4b25      	ldr	r3, [pc, #148]	; (800a860 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	61bb      	str	r3, [r7, #24]
 800a7ce:	e00b      	b.n	800a7e8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	1c59      	adds	r1, r3, #1
 800a7d8:	61f9      	str	r1, [r7, #28]
 800a7da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a7de:	b2d2      	uxtb	r2, r2
 800a7e0:	701a      	strb	r2, [r3, #0]
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	09db      	lsrs	r3, r3, #7
 800a7e6:	61bb      	str	r3, [r7, #24]
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b7f      	cmp	r3, #127	; 0x7f
 800a7ec:	d8f0      	bhi.n	800a7d0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	61fa      	str	r2, [r7, #28]
 800a7f4:	69ba      	ldr	r2, [r7, #24]
 800a7f6:	b2d2      	uxtb	r2, r2
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	617b      	str	r3, [r7, #20]
 800a802:	2300      	movs	r3, #0
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	e00b      	b.n	800a820 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	6179      	str	r1, [r7, #20]
 800a812:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a816:	b2d2      	uxtb	r2, r2
 800a818:	701a      	strb	r2, [r3, #0]
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	09db      	lsrs	r3, r3, #7
 800a81e:	613b      	str	r3, [r7, #16]
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2b7f      	cmp	r3, #127	; 0x7f
 800a824:	d8f0      	bhi.n	800a808 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	1c5a      	adds	r2, r3, #1
 800a82a:	617a      	str	r2, [r7, #20]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	b2d2      	uxtb	r2, r2
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a836:	2218      	movs	r2, #24
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	68b8      	ldr	r0, [r7, #8]
 800a83c:	f7ff fba2 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a846:	4b06      	ldr	r3, [pc, #24]	; (800a860 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d002      	beq.n	800a854 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a84e:	4b04      	ldr	r3, [pc, #16]	; (800a860 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	4798      	blx	r3
  }
}
 800a854:	bf00      	nop
 800a856:	3730      	adds	r7, #48	; 0x30
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	2002ae74 	.word	0x2002ae74
 800a860:	2002ae44 	.word	0x2002ae44

0800a864 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a864:	b580      	push	{r7, lr}
 800a866:	b092      	sub	sp, #72	; 0x48
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a86c:	f3ef 8311 	mrs	r3, BASEPRI
 800a870:	f04f 0120 	mov.w	r1, #32
 800a874:	f381 8811 	msr	BASEPRI, r1
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	486a      	ldr	r0, [pc, #424]	; (800aa24 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a87c:	f7ff fa94 	bl	8009da8 <_PreparePacket>
 800a880:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	647b      	str	r3, [r7, #68]	; 0x44
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	4b66      	ldr	r3, [pc, #408]	; (800aa28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	643b      	str	r3, [r7, #64]	; 0x40
 800a896:	e00b      	b.n	800a8b0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a89e:	1c59      	adds	r1, r3, #1
 800a8a0:	6479      	str	r1, [r7, #68]	; 0x44
 800a8a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8a6:	b2d2      	uxtb	r2, r2
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ac:	09db      	lsrs	r3, r3, #7
 800a8ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8b2:	2b7f      	cmp	r3, #127	; 0x7f
 800a8b4:	d8f0      	bhi.n	800a898 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b8:	1c5a      	adds	r2, r3, #1
 800a8ba:	647a      	str	r2, [r7, #68]	; 0x44
 800a8bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	701a      	strb	r2, [r3, #0]
 800a8c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8d0:	e00b      	b.n	800a8ea <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8d8:	1c59      	adds	r1, r3, #1
 800a8da:	63f9      	str	r1, [r7, #60]	; 0x3c
 800a8dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a8e0:	b2d2      	uxtb	r2, r2
 800a8e2:	701a      	strb	r2, [r3, #0]
 800a8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e6:	09db      	lsrs	r3, r3, #7
 800a8e8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	2b7f      	cmp	r3, #127	; 0x7f
 800a8ee:	d8f0      	bhi.n	800a8d2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a8f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fe:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	2220      	movs	r2, #32
 800a906:	4619      	mov	r1, r3
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff f9fd 	bl	8009d08 <_EncodeStr>
 800a90e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800a910:	2209      	movs	r2, #9
 800a912:	68f9      	ldr	r1, [r7, #12]
 800a914:	6938      	ldr	r0, [r7, #16]
 800a916:	f7ff fb35 	bl	8009f84 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	637b      	str	r3, [r7, #52]	; 0x34
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	4b40      	ldr	r3, [pc, #256]	; (800aa28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	633b      	str	r3, [r7, #48]	; 0x30
 800a92e:	e00b      	b.n	800a948 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a932:	b2da      	uxtb	r2, r3
 800a934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a936:	1c59      	adds	r1, r3, #1
 800a938:	6379      	str	r1, [r7, #52]	; 0x34
 800a93a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a93e:	b2d2      	uxtb	r2, r2
 800a940:	701a      	strb	r2, [r3, #0]
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	09db      	lsrs	r3, r3, #7
 800a946:	633b      	str	r3, [r7, #48]	; 0x30
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	2b7f      	cmp	r3, #127	; 0x7f
 800a94c:	d8f0      	bhi.n	800a930 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800a94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a950:	1c5a      	adds	r2, r3, #1
 800a952:	637a      	str	r2, [r7, #52]	; 0x34
 800a954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a956:	b2d2      	uxtb	r2, r2
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a95c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	62bb      	str	r3, [r7, #40]	; 0x28
 800a968:	e00b      	b.n	800a982 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	b2da      	uxtb	r2, r3
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	1c59      	adds	r1, r3, #1
 800a972:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a978:	b2d2      	uxtb	r2, r2
 800a97a:	701a      	strb	r2, [r3, #0]
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	09db      	lsrs	r3, r3, #7
 800a980:	62bb      	str	r3, [r7, #40]	; 0x28
 800a982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a984:	2b7f      	cmp	r3, #127	; 0x7f
 800a986:	d8f0      	bhi.n	800a96a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a98e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a990:	b2d2      	uxtb	r2, r2
 800a992:	701a      	strb	r2, [r3, #0]
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	623b      	str	r3, [r7, #32]
 800a9a2:	e00b      	b.n	800a9bc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800a9a4:	6a3b      	ldr	r3, [r7, #32]
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	1c59      	adds	r1, r3, #1
 800a9ac:	6279      	str	r1, [r7, #36]	; 0x24
 800a9ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a9b2:	b2d2      	uxtb	r2, r2
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	09db      	lsrs	r3, r3, #7
 800a9ba:	623b      	str	r3, [r7, #32]
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	2b7f      	cmp	r3, #127	; 0x7f
 800a9c0:	d8f0      	bhi.n	800a9a4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	1c5a      	adds	r2, r3, #1
 800a9c6:	627a      	str	r2, [r7, #36]	; 0x24
 800a9c8:	6a3a      	ldr	r2, [r7, #32]
 800a9ca:	b2d2      	uxtb	r2, r2
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	61fb      	str	r3, [r7, #28]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	61bb      	str	r3, [r7, #24]
 800a9da:	e00b      	b.n	800a9f4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	b2da      	uxtb	r2, r3
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	1c59      	adds	r1, r3, #1
 800a9e4:	61f9      	str	r1, [r7, #28]
 800a9e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	701a      	strb	r2, [r3, #0]
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	09db      	lsrs	r3, r3, #7
 800a9f2:	61bb      	str	r3, [r7, #24]
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a9f8:	d8f0      	bhi.n	800a9dc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	61fa      	str	r2, [r7, #28]
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	b2d2      	uxtb	r2, r2
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800aa0a:	2215      	movs	r2, #21
 800aa0c:	68f9      	ldr	r1, [r7, #12]
 800aa0e:	6938      	ldr	r0, [r7, #16]
 800aa10:	f7ff fab8 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f383 8811 	msr	BASEPRI, r3
}
 800aa1a:	bf00      	nop
 800aa1c:	3748      	adds	r7, #72	; 0x48
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	2002ae74 	.word	0x2002ae74
 800aa28:	2002ae44 	.word	0x2002ae44

0800aa2c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800aa30:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800aa32:	6a1b      	ldr	r3, [r3, #32]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d008      	beq.n	800aa4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800aa42:	4b03      	ldr	r3, [pc, #12]	; (800aa50 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	4798      	blx	r3
  }
}
 800aa4a:	bf00      	nop
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	2002ae44 	.word	0x2002ae44

0800aa54 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800aa5c:	f3ef 8311 	mrs	r3, BASEPRI
 800aa60:	f04f 0120 	mov.w	r1, #32
 800aa64:	f381 8811 	msr	BASEPRI, r1
 800aa68:	617b      	str	r3, [r7, #20]
 800aa6a:	480b      	ldr	r0, [pc, #44]	; (800aa98 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800aa6c:	f7ff f99c 	bl	8009da8 <_PreparePacket>
 800aa70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800aa72:	2280      	movs	r2, #128	; 0x80
 800aa74:	6879      	ldr	r1, [r7, #4]
 800aa76:	6938      	ldr	r0, [r7, #16]
 800aa78:	f7ff f946 	bl	8009d08 <_EncodeStr>
 800aa7c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800aa7e:	220e      	movs	r2, #14
 800aa80:	68f9      	ldr	r1, [r7, #12]
 800aa82:	6938      	ldr	r0, [r7, #16]
 800aa84:	f7ff fa7e 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f383 8811 	msr	BASEPRI, r3
}
 800aa8e:	bf00      	nop
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	2002ae74 	.word	0x2002ae74

0800aa9c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800aa9c:	b590      	push	{r4, r7, lr}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800aaa2:	4b15      	ldr	r3, [pc, #84]	; (800aaf8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d01a      	beq.n	800aae0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800aaaa:	4b13      	ldr	r3, [pc, #76]	; (800aaf8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d015      	beq.n	800aae0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800aab4:	4b10      	ldr	r3, [pc, #64]	; (800aaf8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4798      	blx	r3
 800aabc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800aac0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800aac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aac6:	f04f 0200 	mov.w	r2, #0
 800aaca:	f04f 0300 	mov.w	r3, #0
 800aace:	000a      	movs	r2, r1
 800aad0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800aad2:	4613      	mov	r3, r2
 800aad4:	461a      	mov	r2, r3
 800aad6:	4621      	mov	r1, r4
 800aad8:	200d      	movs	r0, #13
 800aada:	f7ff fbe7 	bl	800a2ac <SEGGER_SYSVIEW_RecordU32x2>
 800aade:	e006      	b.n	800aaee <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800aae0:	4b06      	ldr	r3, [pc, #24]	; (800aafc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4619      	mov	r1, r3
 800aae6:	200c      	movs	r0, #12
 800aae8:	f7ff fba4 	bl	800a234 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd90      	pop	{r4, r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	2002ae44 	.word	0x2002ae44
 800aafc:	e0001004 	.word	0xe0001004

0800ab00 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ab06:	f3ef 8311 	mrs	r3, BASEPRI
 800ab0a:	f04f 0120 	mov.w	r1, #32
 800ab0e:	f381 8811 	msr	BASEPRI, r1
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	4819      	ldr	r0, [pc, #100]	; (800ab7c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800ab16:	f7ff f947 	bl	8009da8 <_PreparePacket>
 800ab1a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800ab20:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab28:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	613b      	str	r3, [r7, #16]
 800ab32:	e00b      	b.n	800ab4c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	1c59      	adds	r1, r3, #1
 800ab3c:	6179      	str	r1, [r7, #20]
 800ab3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ab42:	b2d2      	uxtb	r2, r2
 800ab44:	701a      	strb	r2, [r3, #0]
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	09db      	lsrs	r3, r3, #7
 800ab4a:	613b      	str	r3, [r7, #16]
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	2b7f      	cmp	r3, #127	; 0x7f
 800ab50:	d8f0      	bhi.n	800ab34 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	617a      	str	r2, [r7, #20]
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	701a      	strb	r2, [r3, #0]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800ab62:	2202      	movs	r2, #2
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f7ff fa0c 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f383 8811 	msr	BASEPRI, r3
}
 800ab72:	bf00      	nop
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	2002ae74 	.word	0x2002ae74
 800ab80:	e000ed04 	.word	0xe000ed04

0800ab84 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ab8a:	f3ef 8311 	mrs	r3, BASEPRI
 800ab8e:	f04f 0120 	mov.w	r1, #32
 800ab92:	f381 8811 	msr	BASEPRI, r1
 800ab96:	607b      	str	r3, [r7, #4]
 800ab98:	4807      	ldr	r0, [pc, #28]	; (800abb8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800ab9a:	f7ff f905 	bl	8009da8 <_PreparePacket>
 800ab9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800aba0:	2203      	movs	r2, #3
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6838      	ldr	r0, [r7, #0]
 800aba6:	f7ff f9ed 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f383 8811 	msr	BASEPRI, r3
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	2002ae74 	.word	0x2002ae74

0800abbc <SEGGER_SYSVIEW_RecordEnterTimer>:
*    Format and send a Timer entry event.
*  
*  Parameters
*    TimerId - Id of the timer which starts.
*/
void SEGGER_SYSVIEW_RecordEnterTimer(U32 TimerId) {
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800abc4:	f3ef 8311 	mrs	r3, BASEPRI
 800abc8:	f04f 0120 	mov.w	r1, #32
 800abcc:	f381 8811 	msr	BASEPRI, r1
 800abd0:	617b      	str	r3, [r7, #20]
 800abd2:	4818      	ldr	r0, [pc, #96]	; (800ac34 <SEGGER_SYSVIEW_RecordEnterTimer+0x78>)
 800abd4:	f7ff f8e8 	bl	8009da8 <_PreparePacket>
 800abd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(TimerId));
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	61fb      	str	r3, [r7, #28]
 800abe2:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <SEGGER_SYSVIEW_RecordEnterTimer+0x7c>)
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	e00b      	b.n	800ac06 <SEGGER_SYSVIEW_RecordEnterTimer+0x4a>
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	1c59      	adds	r1, r3, #1
 800abf6:	61f9      	str	r1, [r7, #28]
 800abf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800abfc:	b2d2      	uxtb	r2, r2
 800abfe:	701a      	strb	r2, [r3, #0]
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	09db      	lsrs	r3, r3, #7
 800ac04:	61bb      	str	r3, [r7, #24]
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	2b7f      	cmp	r3, #127	; 0x7f
 800ac0a:	d8f0      	bhi.n	800abee <SEGGER_SYSVIEW_RecordEnterTimer+0x32>
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	1c5a      	adds	r2, r3, #1
 800ac10:	61fa      	str	r2, [r7, #28]
 800ac12:	69ba      	ldr	r2, [r7, #24]
 800ac14:	b2d2      	uxtb	r2, r2
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TIMER_ENTER);
 800ac1c:	2213      	movs	r2, #19
 800ac1e:	68f9      	ldr	r1, [r7, #12]
 800ac20:	6938      	ldr	r0, [r7, #16]
 800ac22:	f7ff f9af 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f383 8811 	msr	BASEPRI, r3
}
 800ac2c:	bf00      	nop
 800ac2e:	3720      	adds	r7, #32
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	2002ae74 	.word	0x2002ae74
 800ac38:	2002ae44 	.word	0x2002ae44

0800ac3c <SEGGER_SYSVIEW_RecordExitTimer>:
*       SEGGER_SYSVIEW_RecordExitTimer()
*
*  Function description
*    Format and send a Timer exit event.
*/
void SEGGER_SYSVIEW_RecordExitTimer(void) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ac42:	f3ef 8311 	mrs	r3, BASEPRI
 800ac46:	f04f 0120 	mov.w	r1, #32
 800ac4a:	f381 8811 	msr	BASEPRI, r1
 800ac4e:	607b      	str	r3, [r7, #4]
 800ac50:	4807      	ldr	r0, [pc, #28]	; (800ac70 <SEGGER_SYSVIEW_RecordExitTimer+0x34>)
 800ac52:	f7ff f8a9 	bl	8009da8 <_PreparePacket>
 800ac56:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TIMER_EXIT);
 800ac58:	2214      	movs	r2, #20
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6838      	ldr	r0, [r7, #0]
 800ac5e:	f7ff f991 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f383 8811 	msr	BASEPRI, r3
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	2002ae74 	.word	0x2002ae74

0800ac74 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ac7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ac7e:	f04f 0120 	mov.w	r1, #32
 800ac82:	f381 8811 	msr	BASEPRI, r1
 800ac86:	607b      	str	r3, [r7, #4]
 800ac88:	4807      	ldr	r0, [pc, #28]	; (800aca8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800ac8a:	f7ff f88d 	bl	8009da8 <_PreparePacket>
 800ac8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800ac90:	2211      	movs	r2, #17
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6838      	ldr	r0, [r7, #0]
 800ac96:	f7ff f975 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f383 8811 	msr	BASEPRI, r3
}
 800aca0:	bf00      	nop
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	2002ae74 	.word	0x2002ae74

0800acac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800acb4:	f3ef 8311 	mrs	r3, BASEPRI
 800acb8:	f04f 0120 	mov.w	r1, #32
 800acbc:	f381 8811 	msr	BASEPRI, r1
 800acc0:	617b      	str	r3, [r7, #20]
 800acc2:	4819      	ldr	r0, [pc, #100]	; (800ad28 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800acc4:	f7ff f870 	bl	8009da8 <_PreparePacket>
 800acc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800acce:	4b17      	ldr	r3, [pc, #92]	; (800ad2c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	61fb      	str	r3, [r7, #28]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	61bb      	str	r3, [r7, #24]
 800ace0:	e00b      	b.n	800acfa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	1c59      	adds	r1, r3, #1
 800acea:	61f9      	str	r1, [r7, #28]
 800acec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800acf0:	b2d2      	uxtb	r2, r2
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	09db      	lsrs	r3, r3, #7
 800acf8:	61bb      	str	r3, [r7, #24]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b7f      	cmp	r3, #127	; 0x7f
 800acfe:	d8f0      	bhi.n	800ace2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	61fa      	str	r2, [r7, #28]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800ad10:	2208      	movs	r2, #8
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f7ff f935 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f383 8811 	msr	BASEPRI, r3
}
 800ad20:	bf00      	nop
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	2002ae74 	.word	0x2002ae74
 800ad2c:	2002ae44 	.word	0x2002ae44

0800ad30 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ad38:	f3ef 8311 	mrs	r3, BASEPRI
 800ad3c:	f04f 0120 	mov.w	r1, #32
 800ad40:	f381 8811 	msr	BASEPRI, r1
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	4819      	ldr	r0, [pc, #100]	; (800adac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800ad48:	f7ff f82e 	bl	8009da8 <_PreparePacket>
 800ad4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ad52:	4b17      	ldr	r3, [pc, #92]	; (800adb0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	61fb      	str	r3, [r7, #28]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	e00b      	b.n	800ad7e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	1c59      	adds	r1, r3, #1
 800ad6e:	61f9      	str	r1, [r7, #28]
 800ad70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ad74:	b2d2      	uxtb	r2, r2
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	09db      	lsrs	r3, r3, #7
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b7f      	cmp	r3, #127	; 0x7f
 800ad82:	d8f0      	bhi.n	800ad66 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	61fa      	str	r2, [r7, #28]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	701a      	strb	r2, [r3, #0]
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800ad94:	2204      	movs	r2, #4
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	6938      	ldr	r0, [r7, #16]
 800ad9a:	f7ff f8f3 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f383 8811 	msr	BASEPRI, r3
}
 800ada4:	bf00      	nop
 800ada6:	3720      	adds	r7, #32
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	2002ae74 	.word	0x2002ae74
 800adb0:	2002ae44 	.word	0x2002ae44

0800adb4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b088      	sub	sp, #32
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800adbc:	f3ef 8311 	mrs	r3, BASEPRI
 800adc0:	f04f 0120 	mov.w	r1, #32
 800adc4:	f381 8811 	msr	BASEPRI, r1
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	4819      	ldr	r0, [pc, #100]	; (800ae30 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800adcc:	f7fe ffec 	bl	8009da8 <_PreparePacket>
 800add0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800add6:	4b17      	ldr	r3, [pc, #92]	; (800ae34 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	61fb      	str	r3, [r7, #28]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	61bb      	str	r3, [r7, #24]
 800ade8:	e00b      	b.n	800ae02 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	b2da      	uxtb	r2, r3
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	1c59      	adds	r1, r3, #1
 800adf2:	61f9      	str	r1, [r7, #28]
 800adf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	701a      	strb	r2, [r3, #0]
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	09db      	lsrs	r3, r3, #7
 800ae00:	61bb      	str	r3, [r7, #24]
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	2b7f      	cmp	r3, #127	; 0x7f
 800ae06:	d8f0      	bhi.n	800adea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	1c5a      	adds	r2, r3, #1
 800ae0c:	61fa      	str	r2, [r7, #28]
 800ae0e:	69ba      	ldr	r2, [r7, #24]
 800ae10:	b2d2      	uxtb	r2, r2
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800ae18:	2206      	movs	r2, #6
 800ae1a:	68f9      	ldr	r1, [r7, #12]
 800ae1c:	6938      	ldr	r0, [r7, #16]
 800ae1e:	f7ff f8b1 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f383 8811 	msr	BASEPRI, r3
}
 800ae28:	bf00      	nop
 800ae2a:	3720      	adds	r7, #32
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	2002ae74 	.word	0x2002ae74
 800ae34:	2002ae44 	.word	0x2002ae44

0800ae38 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800ae40:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	1ad3      	subs	r3, r2, r3
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr
 800ae54:	2002ae44 	.word	0x2002ae44

0800ae58 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08c      	sub	sp, #48	; 0x30
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	4603      	mov	r3, r0
 800ae60:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800ae62:	4b3b      	ldr	r3, [pc, #236]	; (800af50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d06d      	beq.n	800af46 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800ae6a:	4b39      	ldr	r3, [pc, #228]	; (800af50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800ae70:	2300      	movs	r3, #0
 800ae72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae74:	e008      	b.n	800ae88 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d007      	beq.n	800ae92 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae84:	3301      	adds	r3, #1
 800ae86:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae88:	79fb      	ldrb	r3, [r7, #7]
 800ae8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d3f2      	bcc.n	800ae76 <SEGGER_SYSVIEW_SendModule+0x1e>
 800ae90:	e000      	b.n	800ae94 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800ae92:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d055      	beq.n	800af46 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ae9a:	f3ef 8311 	mrs	r3, BASEPRI
 800ae9e:	f04f 0120 	mov.w	r1, #32
 800aea2:	f381 8811 	msr	BASEPRI, r1
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	482a      	ldr	r0, [pc, #168]	; (800af54 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800aeaa:	f7fe ff7d 	bl	8009da8 <_PreparePacket>
 800aeae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb8:	79fb      	ldrb	r3, [r7, #7]
 800aeba:	623b      	str	r3, [r7, #32]
 800aebc:	e00b      	b.n	800aed6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	b2da      	uxtb	r2, r3
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	1c59      	adds	r1, r3, #1
 800aec6:	6279      	str	r1, [r7, #36]	; 0x24
 800aec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800aecc:	b2d2      	uxtb	r2, r2
 800aece:	701a      	strb	r2, [r3, #0]
 800aed0:	6a3b      	ldr	r3, [r7, #32]
 800aed2:	09db      	lsrs	r3, r3, #7
 800aed4:	623b      	str	r3, [r7, #32]
 800aed6:	6a3b      	ldr	r3, [r7, #32]
 800aed8:	2b7f      	cmp	r3, #127	; 0x7f
 800aeda:	d8f0      	bhi.n	800aebe <SEGGER_SYSVIEW_SendModule+0x66>
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	627a      	str	r2, [r7, #36]	; 0x24
 800aee2:	6a3a      	ldr	r2, [r7, #32]
 800aee4:	b2d2      	uxtb	r2, r2
 800aee6:	701a      	strb	r2, [r3, #0]
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	61fb      	str	r3, [r7, #28]
 800aef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	e00b      	b.n	800af10 <SEGGER_SYSVIEW_SendModule+0xb8>
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	1c59      	adds	r1, r3, #1
 800af00:	61f9      	str	r1, [r7, #28]
 800af02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af06:	b2d2      	uxtb	r2, r2
 800af08:	701a      	strb	r2, [r3, #0]
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	09db      	lsrs	r3, r3, #7
 800af0e:	61bb      	str	r3, [r7, #24]
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	2b7f      	cmp	r3, #127	; 0x7f
 800af14:	d8f0      	bhi.n	800aef8 <SEGGER_SYSVIEW_SendModule+0xa0>
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	61fa      	str	r2, [r7, #28]
 800af1c:	69ba      	ldr	r2, [r7, #24]
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	701a      	strb	r2, [r3, #0]
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800af26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2280      	movs	r2, #128	; 0x80
 800af2c:	4619      	mov	r1, r3
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7fe feea 	bl	8009d08 <_EncodeStr>
 800af34:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800af36:	2216      	movs	r2, #22
 800af38:	68f9      	ldr	r1, [r7, #12]
 800af3a:	6938      	ldr	r0, [r7, #16]
 800af3c:	f7ff f822 	bl	8009f84 <_SendPacket>
      RECORD_END();
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800af46:	bf00      	nop
 800af48:	3730      	adds	r7, #48	; 0x30
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	2002ae6c 	.word	0x2002ae6c
 800af54:	2002ae74 	.word	0x2002ae74

0800af58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800af5e:	4b0c      	ldr	r3, [pc, #48]	; (800af90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00f      	beq.n	800af86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800af66:	4b0a      	ldr	r3, [pc, #40]	; (800af90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1f2      	bne.n	800af6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800af86:	bf00      	nop
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	2002ae6c 	.word	0x2002ae6c

0800af94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800af9a:	f3ef 8311 	mrs	r3, BASEPRI
 800af9e:	f04f 0120 	mov.w	r1, #32
 800afa2:	f381 8811 	msr	BASEPRI, r1
 800afa6:	60fb      	str	r3, [r7, #12]
 800afa8:	4817      	ldr	r0, [pc, #92]	; (800b008 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800afaa:	f7fe fefd 	bl	8009da8 <_PreparePacket>
 800afae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	617b      	str	r3, [r7, #20]
 800afb8:	4b14      	ldr	r3, [pc, #80]	; (800b00c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	613b      	str	r3, [r7, #16]
 800afbe:	e00b      	b.n	800afd8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	1c59      	adds	r1, r3, #1
 800afc8:	6179      	str	r1, [r7, #20]
 800afca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800afce:	b2d2      	uxtb	r2, r2
 800afd0:	701a      	strb	r2, [r3, #0]
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	09db      	lsrs	r3, r3, #7
 800afd6:	613b      	str	r3, [r7, #16]
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	2b7f      	cmp	r3, #127	; 0x7f
 800afdc:	d8f0      	bhi.n	800afc0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	617a      	str	r2, [r7, #20]
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	b2d2      	uxtb	r2, r2
 800afe8:	701a      	strb	r2, [r3, #0]
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800afee:	221b      	movs	r2, #27
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	68b8      	ldr	r0, [r7, #8]
 800aff4:	f7fe ffc6 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f383 8811 	msr	BASEPRI, r3
}
 800affe:	bf00      	nop
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	2002ae74 	.word	0x2002ae74
 800b00c:	2002ae70 	.word	0x2002ae70

0800b010 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800b010:	b580      	push	{r7, lr}
 800b012:	b08a      	sub	sp, #40	; 0x28
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b018:	f3ef 8311 	mrs	r3, BASEPRI
 800b01c:	f04f 0120 	mov.w	r1, #32
 800b020:	f381 8811 	msr	BASEPRI, r1
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	4827      	ldr	r0, [pc, #156]	; (800b0c4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800b028:	f7fe febe 	bl	8009da8 <_PreparePacket>
 800b02c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b02e:	2280      	movs	r2, #128	; 0x80
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	6938      	ldr	r0, [r7, #16]
 800b034:	f7fe fe68 	bl	8009d08 <_EncodeStr>
 800b038:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	627b      	str	r3, [r7, #36]	; 0x24
 800b03e:	2301      	movs	r3, #1
 800b040:	623b      	str	r3, [r7, #32]
 800b042:	e00b      	b.n	800b05c <SEGGER_SYSVIEW_Warn+0x4c>
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	b2da      	uxtb	r2, r3
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	1c59      	adds	r1, r3, #1
 800b04c:	6279      	str	r1, [r7, #36]	; 0x24
 800b04e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b052:	b2d2      	uxtb	r2, r2
 800b054:	701a      	strb	r2, [r3, #0]
 800b056:	6a3b      	ldr	r3, [r7, #32]
 800b058:	09db      	lsrs	r3, r3, #7
 800b05a:	623b      	str	r3, [r7, #32]
 800b05c:	6a3b      	ldr	r3, [r7, #32]
 800b05e:	2b7f      	cmp	r3, #127	; 0x7f
 800b060:	d8f0      	bhi.n	800b044 <SEGGER_SYSVIEW_Warn+0x34>
 800b062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b064:	1c5a      	adds	r2, r3, #1
 800b066:	627a      	str	r2, [r7, #36]	; 0x24
 800b068:	6a3a      	ldr	r2, [r7, #32]
 800b06a:	b2d2      	uxtb	r2, r2
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	2300      	movs	r3, #0
 800b078:	61bb      	str	r3, [r7, #24]
 800b07a:	e00b      	b.n	800b094 <SEGGER_SYSVIEW_Warn+0x84>
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	1c59      	adds	r1, r3, #1
 800b084:	61f9      	str	r1, [r7, #28]
 800b086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b08a:	b2d2      	uxtb	r2, r2
 800b08c:	701a      	strb	r2, [r3, #0]
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	09db      	lsrs	r3, r3, #7
 800b092:	61bb      	str	r3, [r7, #24]
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	2b7f      	cmp	r3, #127	; 0x7f
 800b098:	d8f0      	bhi.n	800b07c <SEGGER_SYSVIEW_Warn+0x6c>
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	61fa      	str	r2, [r7, #28]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	b2d2      	uxtb	r2, r2
 800b0a4:	701a      	strb	r2, [r3, #0]
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b0aa:	221a      	movs	r2, #26
 800b0ac:	68f9      	ldr	r1, [r7, #12]
 800b0ae:	6938      	ldr	r0, [r7, #16]
 800b0b0:	f7fe ff68 	bl	8009f84 <_SendPacket>
  RECORD_END();
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f383 8811 	msr	BASEPRI, r3
}
 800b0ba:	bf00      	nop
 800b0bc:	3728      	adds	r7, #40	; 0x28
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	2002ae74 	.word	0x2002ae74

0800b0c8 <__NVIC_EnableIRQ>:
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	db0b      	blt.n	800b0f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	f003 021f 	and.w	r2, r3, #31
 800b0e0:	4907      	ldr	r1, [pc, #28]	; (800b100 <__NVIC_EnableIRQ+0x38>)
 800b0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0e6:	095b      	lsrs	r3, r3, #5
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	fa00 f202 	lsl.w	r2, r0, r2
 800b0ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0f2:	bf00      	nop
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	e000e100 	.word	0xe000e100

0800b104 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800b10c:	4b08      	ldr	r3, [pc, #32]	; (800b130 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b10e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b110:	4907      	ldr	r1, [pc, #28]	; (800b130 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4313      	orrs	r3, r2
 800b116:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <LL_APB1_GRP1_EnableClock+0x2c>)
 800b11a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4013      	ands	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b122:	68fb      	ldr	r3, [r7, #12]
}
 800b124:	bf00      	nop
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	40023800 	.word	0x40023800

0800b134 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f043 0201 	orr.w	r2, r3, #1
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	601a      	str	r2, [r3, #0]
}
 800b148:	bf00      	nop
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f06f 0201 	mvn.w	r2, #1
 800b17e:	611a      	str	r2, [r3, #16]
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e000      	b.n	800b1a6 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	f043 0201 	orr.w	r2, r3, #1
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	60da      	str	r2, [r3, #12]
}
 800b1c6:	bf00      	nop
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr
	...

0800b1d4 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800b1d8:	4802      	ldr	r0, [pc, #8]	; (800b1e4 <_cbSendSystemDesc+0x10>)
 800b1da:	f7ff fc3b 	bl	800aa54 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	0800c684 	.word	0x0800c684

0800b1e8 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800b1ec:	4807      	ldr	r0, [pc, #28]	; (800b20c <TIM7_IRQHandler+0x24>)
 800b1ee:	f7ff ffcd 	bl	800b18c <LL_TIM_IsActiveFlag_UPDATE>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d007      	beq.n	800b208 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800b1f8:	4804      	ldr	r0, [pc, #16]	; (800b20c <TIM7_IRQHandler+0x24>)
 800b1fa:	f7ff ffb9 	bl	800b170 <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800b1fe:	4b04      	ldr	r3, [pc, #16]	; (800b210 <TIM7_IRQHandler+0x28>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3301      	adds	r3, #1
 800b204:	4a02      	ldr	r2, [pc, #8]	; (800b210 <TIM7_IRQHandler+0x28>)
 800b206:	6013      	str	r3, [r2, #0]
	}
}
 800b208:	bf00      	nop
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	40001400 	.word	0x40001400
 800b210:	2002aa38 	.word	0x2002aa38

0800b214 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800b218:	2020      	movs	r0, #32
 800b21a:	f7ff ff73 	bl	800b104 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800b21e:	4b0d      	ldr	r3, [pc, #52]	; (800b254 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	085a      	lsrs	r2, r3, #1
 800b224:	4b0b      	ldr	r3, [pc, #44]	; (800b254 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	441a      	add	r2, r3
 800b22a:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b232:	3b01      	subs	r3, #1
 800b234:	4619      	mov	r1, r3
 800b236:	4808      	ldr	r0, [pc, #32]	; (800b258 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800b238:	f7ff ff8c 	bl	800b154 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800b23c:	2037      	movs	r0, #55	; 0x37
 800b23e:	f7ff ff43 	bl	800b0c8 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800b242:	4805      	ldr	r0, [pc, #20]	; (800b258 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800b244:	f7ff ffb5 	bl	800b1b2 <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800b248:	4803      	ldr	r0, [pc, #12]	; (800b258 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800b24a:	f7ff ff73 	bl	800b134 <LL_TIM_EnableCounter>
}
 800b24e:	bf00      	nop
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000010 	.word	0x20000010
 800b258:	40001400 	.word	0x40001400

0800b25c <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800b25c:	b580      	push	{r7, lr}
 800b25e:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800b260:	f7ff ffd8 	bl	800b214 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800b264:	4b06      	ldr	r3, [pc, #24]	; (800b280 <SEGGER_SYSVIEW_Conf+0x24>)
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	4b05      	ldr	r3, [pc, #20]	; (800b280 <SEGGER_SYSVIEW_Conf+0x24>)
 800b26a:	6819      	ldr	r1, [r3, #0]
 800b26c:	4b05      	ldr	r3, [pc, #20]	; (800b284 <SEGGER_SYSVIEW_Conf+0x28>)
 800b26e:	4a06      	ldr	r2, [pc, #24]	; (800b288 <SEGGER_SYSVIEW_Conf+0x2c>)
 800b270:	f7fe ff6e 	bl	800a150 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800b274:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b278:	f7fe ffae 	bl	800a1d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800b27c:	bf00      	nop
 800b27e:	bd80      	pop	{r7, pc}
 800b280:	20000010 	.word	0x20000010
 800b284:	0800b1d5 	.word	0x0800b1d5
 800b288:	0800da10 	.word	0x0800da10

0800b28c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800b28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b28e:	b085      	sub	sp, #20
 800b290:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800b292:	2300      	movs	r3, #0
 800b294:	607b      	str	r3, [r7, #4]
 800b296:	e048      	b.n	800b32a <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800b298:	4929      	ldr	r1, [pc, #164]	; (800b340 <_cbSendTaskList+0xb4>)
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	4613      	mov	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	440b      	add	r3, r1
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7fd f883 	bl	80083b4 <uxTaskGetStackHighWaterMark>
 800b2ae:	4601      	mov	r1, r0
 800b2b0:	4823      	ldr	r0, [pc, #140]	; (800b340 <_cbSendTaskList+0xb4>)
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4403      	add	r3, r0
 800b2be:	3310      	adds	r3, #16
 800b2c0:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800b2c2:	491f      	ldr	r1, [pc, #124]	; (800b340 <_cbSendTaskList+0xb4>)
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	491b      	ldr	r1, [pc, #108]	; (800b340 <_cbSendTaskList+0xb4>)
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	440b      	add	r3, r1
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	6819      	ldr	r1, [r3, #0]
 800b2e4:	4c16      	ldr	r4, [pc, #88]	; (800b340 <_cbSendTaskList+0xb4>)
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4423      	add	r3, r4
 800b2f2:	3308      	adds	r3, #8
 800b2f4:	681c      	ldr	r4, [r3, #0]
 800b2f6:	4d12      	ldr	r5, [pc, #72]	; (800b340 <_cbSendTaskList+0xb4>)
 800b2f8:	687a      	ldr	r2, [r7, #4]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	442b      	add	r3, r5
 800b304:	330c      	adds	r3, #12
 800b306:	681d      	ldr	r5, [r3, #0]
 800b308:	4e0d      	ldr	r6, [pc, #52]	; (800b340 <_cbSendTaskList+0xb4>)
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	4613      	mov	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	4413      	add	r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4433      	add	r3, r6
 800b316:	3310      	adds	r3, #16
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	462b      	mov	r3, r5
 800b31e:	4622      	mov	r2, r4
 800b320:	f000 f8be 	bl	800b4a0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3301      	adds	r3, #1
 800b328:	607b      	str	r3, [r7, #4]
 800b32a:	4b06      	ldr	r3, [pc, #24]	; (800b344 <_cbSendTaskList+0xb8>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d3b1      	bcc.n	800b298 <_cbSendTaskList+0xc>
  }
}
 800b334:	bf00      	nop
 800b336:	bf00      	nop
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b33e:	bf00      	nop
 800b340:	2002af58 	.word	0x2002af58
 800b344:	2002b0e8 	.word	0x2002b0e8

0800b348 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800b348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b34c:	b082      	sub	sp, #8
 800b34e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800b350:	f7fc fcaa 	bl	8007ca8 <xTaskGetTickCountFromISR>
 800b354:	4603      	mov	r3, r0
 800b356:	2200      	movs	r2, #0
 800b358:	469a      	mov	sl, r3
 800b35a:	4693      	mov	fp, r2
 800b35c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800b360:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	f04f 0a00 	mov.w	sl, #0
 800b36c:	f04f 0b00 	mov.w	fp, #0
 800b370:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800b374:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800b378:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800b37c:	4652      	mov	r2, sl
 800b37e:	465b      	mov	r3, fp
 800b380:	1a14      	subs	r4, r2, r0
 800b382:	eb63 0501 	sbc.w	r5, r3, r1
 800b386:	f04f 0200 	mov.w	r2, #0
 800b38a:	f04f 0300 	mov.w	r3, #0
 800b38e:	00ab      	lsls	r3, r5, #2
 800b390:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b394:	00a2      	lsls	r2, r4, #2
 800b396:	4614      	mov	r4, r2
 800b398:	461d      	mov	r5, r3
 800b39a:	eb14 0800 	adds.w	r8, r4, r0
 800b39e:	eb45 0901 	adc.w	r9, r5, r1
 800b3a2:	f04f 0200 	mov.w	r2, #0
 800b3a6:	f04f 0300 	mov.w	r3, #0
 800b3aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3b6:	4690      	mov	r8, r2
 800b3b8:	4699      	mov	r9, r3
 800b3ba:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800b3be:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800b3d0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af02      	add	r7, sp, #8
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
 800b3dc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b3de:	2205      	movs	r2, #5
 800b3e0:	492b      	ldr	r1, [pc, #172]	; (800b490 <SYSVIEW_AddTask+0xc0>)
 800b3e2:	68b8      	ldr	r0, [r7, #8]
 800b3e4:	f000 f9b3 	bl	800b74e <memcmp>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d04b      	beq.n	800b486 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b3ee:	4b29      	ldr	r3, [pc, #164]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2b13      	cmp	r3, #19
 800b3f4:	d903      	bls.n	800b3fe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b3f6:	4828      	ldr	r0, [pc, #160]	; (800b498 <SYSVIEW_AddTask+0xc8>)
 800b3f8:	f7ff fe0a 	bl	800b010 <SEGGER_SYSVIEW_Warn>
    return;
 800b3fc:	e044      	b.n	800b488 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b3fe:	4b25      	ldr	r3, [pc, #148]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	4926      	ldr	r1, [pc, #152]	; (800b49c <SYSVIEW_AddTask+0xcc>)
 800b404:	4613      	mov	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	440b      	add	r3, r1
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b412:	4b20      	ldr	r3, [pc, #128]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	4921      	ldr	r1, [pc, #132]	; (800b49c <SYSVIEW_AddTask+0xcc>)
 800b418:	4613      	mov	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	440b      	add	r3, r1
 800b422:	3304      	adds	r3, #4
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b428:	4b1a      	ldr	r3, [pc, #104]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	491b      	ldr	r1, [pc, #108]	; (800b49c <SYSVIEW_AddTask+0xcc>)
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	440b      	add	r3, r1
 800b438:	3308      	adds	r3, #8
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b43e:	4b15      	ldr	r3, [pc, #84]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	4916      	ldr	r1, [pc, #88]	; (800b49c <SYSVIEW_AddTask+0xcc>)
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	440b      	add	r3, r1
 800b44e:	330c      	adds	r3, #12
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b454:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	4910      	ldr	r1, [pc, #64]	; (800b49c <SYSVIEW_AddTask+0xcc>)
 800b45a:	4613      	mov	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	3310      	adds	r3, #16
 800b466:	69ba      	ldr	r2, [r7, #24]
 800b468:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b46a:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3301      	adds	r3, #1
 800b470:	4a08      	ldr	r2, [pc, #32]	; (800b494 <SYSVIEW_AddTask+0xc4>)
 800b472:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	68b9      	ldr	r1, [r7, #8]
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 f80e 	bl	800b4a0 <SYSVIEW_SendTaskInfo>
 800b484:	e000      	b.n	800b488 <SYSVIEW_AddTask+0xb8>
    return;
 800b486:	bf00      	nop

}
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	0800c6b8 	.word	0x0800c6b8
 800b494:	2002b0e8 	.word	0x2002b0e8
 800b498:	0800c6c0 	.word	0x0800c6c0
 800b49c:	2002af58 	.word	0x2002af58

0800b4a0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b4ae:	f107 0314 	add.w	r3, r7, #20
 800b4b2:	2214      	movs	r2, #20
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f000 f959 	bl	800b76e <memset>
  TaskInfo.TaskID     = TaskID;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b4d0:	f107 0314 	add.w	r3, r7, #20
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f7ff f9c5 	bl	800a864 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b4da:	bf00      	nop
 800b4dc:	3728      	adds	r7, #40	; 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
	...

0800b4e4 <__assert_func>:
 800b4e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4e6:	4614      	mov	r4, r2
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	4b09      	ldr	r3, [pc, #36]	; (800b510 <__assert_func+0x2c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	68d8      	ldr	r0, [r3, #12]
 800b4f2:	b14c      	cbz	r4, 800b508 <__assert_func+0x24>
 800b4f4:	4b07      	ldr	r3, [pc, #28]	; (800b514 <__assert_func+0x30>)
 800b4f6:	9100      	str	r1, [sp, #0]
 800b4f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4fc:	4906      	ldr	r1, [pc, #24]	; (800b518 <__assert_func+0x34>)
 800b4fe:	462b      	mov	r3, r5
 800b500:	f000 f8b2 	bl	800b668 <fiprintf>
 800b504:	f000 f9bd 	bl	800b882 <abort>
 800b508:	4b04      	ldr	r3, [pc, #16]	; (800b51c <__assert_func+0x38>)
 800b50a:	461c      	mov	r4, r3
 800b50c:	e7f3      	b.n	800b4f6 <__assert_func+0x12>
 800b50e:	bf00      	nop
 800b510:	20000078 	.word	0x20000078
 800b514:	0800da18 	.word	0x0800da18
 800b518:	0800da25 	.word	0x0800da25
 800b51c:	0800da53 	.word	0x0800da53

0800b520 <std>:
 800b520:	2300      	movs	r3, #0
 800b522:	b510      	push	{r4, lr}
 800b524:	4604      	mov	r4, r0
 800b526:	e9c0 3300 	strd	r3, r3, [r0]
 800b52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b52e:	6083      	str	r3, [r0, #8]
 800b530:	8181      	strh	r1, [r0, #12]
 800b532:	6643      	str	r3, [r0, #100]	; 0x64
 800b534:	81c2      	strh	r2, [r0, #14]
 800b536:	6183      	str	r3, [r0, #24]
 800b538:	4619      	mov	r1, r3
 800b53a:	2208      	movs	r2, #8
 800b53c:	305c      	adds	r0, #92	; 0x5c
 800b53e:	f000 f916 	bl	800b76e <memset>
 800b542:	4b0d      	ldr	r3, [pc, #52]	; (800b578 <std+0x58>)
 800b544:	6263      	str	r3, [r4, #36]	; 0x24
 800b546:	4b0d      	ldr	r3, [pc, #52]	; (800b57c <std+0x5c>)
 800b548:	62a3      	str	r3, [r4, #40]	; 0x28
 800b54a:	4b0d      	ldr	r3, [pc, #52]	; (800b580 <std+0x60>)
 800b54c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b54e:	4b0d      	ldr	r3, [pc, #52]	; (800b584 <std+0x64>)
 800b550:	6323      	str	r3, [r4, #48]	; 0x30
 800b552:	4b0d      	ldr	r3, [pc, #52]	; (800b588 <std+0x68>)
 800b554:	6224      	str	r4, [r4, #32]
 800b556:	429c      	cmp	r4, r3
 800b558:	d006      	beq.n	800b568 <std+0x48>
 800b55a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b55e:	4294      	cmp	r4, r2
 800b560:	d002      	beq.n	800b568 <std+0x48>
 800b562:	33d0      	adds	r3, #208	; 0xd0
 800b564:	429c      	cmp	r4, r3
 800b566:	d105      	bne.n	800b574 <std+0x54>
 800b568:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b570:	f000 b976 	b.w	800b860 <__retarget_lock_init_recursive>
 800b574:	bd10      	pop	{r4, pc}
 800b576:	bf00      	nop
 800b578:	0800b6c9 	.word	0x0800b6c9
 800b57c:	0800b6eb 	.word	0x0800b6eb
 800b580:	0800b723 	.word	0x0800b723
 800b584:	0800b747 	.word	0x0800b747
 800b588:	2002b0ec 	.word	0x2002b0ec

0800b58c <stdio_exit_handler>:
 800b58c:	4a02      	ldr	r2, [pc, #8]	; (800b598 <stdio_exit_handler+0xc>)
 800b58e:	4903      	ldr	r1, [pc, #12]	; (800b59c <stdio_exit_handler+0x10>)
 800b590:	4803      	ldr	r0, [pc, #12]	; (800b5a0 <stdio_exit_handler+0x14>)
 800b592:	f000 b87b 	b.w	800b68c <_fwalk_sglue>
 800b596:	bf00      	nop
 800b598:	20000020 	.word	0x20000020
 800b59c:	0800c135 	.word	0x0800c135
 800b5a0:	2000002c 	.word	0x2000002c

0800b5a4 <cleanup_stdio>:
 800b5a4:	6841      	ldr	r1, [r0, #4]
 800b5a6:	4b0c      	ldr	r3, [pc, #48]	; (800b5d8 <cleanup_stdio+0x34>)
 800b5a8:	4299      	cmp	r1, r3
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	d001      	beq.n	800b5b4 <cleanup_stdio+0x10>
 800b5b0:	f000 fdc0 	bl	800c134 <_fflush_r>
 800b5b4:	68a1      	ldr	r1, [r4, #8]
 800b5b6:	4b09      	ldr	r3, [pc, #36]	; (800b5dc <cleanup_stdio+0x38>)
 800b5b8:	4299      	cmp	r1, r3
 800b5ba:	d002      	beq.n	800b5c2 <cleanup_stdio+0x1e>
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fdb9 	bl	800c134 <_fflush_r>
 800b5c2:	68e1      	ldr	r1, [r4, #12]
 800b5c4:	4b06      	ldr	r3, [pc, #24]	; (800b5e0 <cleanup_stdio+0x3c>)
 800b5c6:	4299      	cmp	r1, r3
 800b5c8:	d004      	beq.n	800b5d4 <cleanup_stdio+0x30>
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d0:	f000 bdb0 	b.w	800c134 <_fflush_r>
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	bf00      	nop
 800b5d8:	2002b0ec 	.word	0x2002b0ec
 800b5dc:	2002b154 	.word	0x2002b154
 800b5e0:	2002b1bc 	.word	0x2002b1bc

0800b5e4 <global_stdio_init.part.0>:
 800b5e4:	b510      	push	{r4, lr}
 800b5e6:	4b0b      	ldr	r3, [pc, #44]	; (800b614 <global_stdio_init.part.0+0x30>)
 800b5e8:	4c0b      	ldr	r4, [pc, #44]	; (800b618 <global_stdio_init.part.0+0x34>)
 800b5ea:	4a0c      	ldr	r2, [pc, #48]	; (800b61c <global_stdio_init.part.0+0x38>)
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2104      	movs	r1, #4
 800b5f4:	f7ff ff94 	bl	800b520 <std>
 800b5f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	2109      	movs	r1, #9
 800b600:	f7ff ff8e 	bl	800b520 <std>
 800b604:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b608:	2202      	movs	r2, #2
 800b60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b60e:	2112      	movs	r1, #18
 800b610:	f7ff bf86 	b.w	800b520 <std>
 800b614:	2002b224 	.word	0x2002b224
 800b618:	2002b0ec 	.word	0x2002b0ec
 800b61c:	0800b58d 	.word	0x0800b58d

0800b620 <__sfp_lock_acquire>:
 800b620:	4801      	ldr	r0, [pc, #4]	; (800b628 <__sfp_lock_acquire+0x8>)
 800b622:	f000 b91e 	b.w	800b862 <__retarget_lock_acquire_recursive>
 800b626:	bf00      	nop
 800b628:	2002b22d 	.word	0x2002b22d

0800b62c <__sfp_lock_release>:
 800b62c:	4801      	ldr	r0, [pc, #4]	; (800b634 <__sfp_lock_release+0x8>)
 800b62e:	f000 b919 	b.w	800b864 <__retarget_lock_release_recursive>
 800b632:	bf00      	nop
 800b634:	2002b22d 	.word	0x2002b22d

0800b638 <__sinit>:
 800b638:	b510      	push	{r4, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	f7ff fff0 	bl	800b620 <__sfp_lock_acquire>
 800b640:	6a23      	ldr	r3, [r4, #32]
 800b642:	b11b      	cbz	r3, 800b64c <__sinit+0x14>
 800b644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b648:	f7ff bff0 	b.w	800b62c <__sfp_lock_release>
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <__sinit+0x28>)
 800b64e:	6223      	str	r3, [r4, #32]
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <__sinit+0x2c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1f5      	bne.n	800b644 <__sinit+0xc>
 800b658:	f7ff ffc4 	bl	800b5e4 <global_stdio_init.part.0>
 800b65c:	e7f2      	b.n	800b644 <__sinit+0xc>
 800b65e:	bf00      	nop
 800b660:	0800b5a5 	.word	0x0800b5a5
 800b664:	2002b224 	.word	0x2002b224

0800b668 <fiprintf>:
 800b668:	b40e      	push	{r1, r2, r3}
 800b66a:	b503      	push	{r0, r1, lr}
 800b66c:	4601      	mov	r1, r0
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	4805      	ldr	r0, [pc, #20]	; (800b688 <fiprintf+0x20>)
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	6800      	ldr	r0, [r0, #0]
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f000 fa2b 	bl	800bad4 <_vfiprintf_r>
 800b67e:	b002      	add	sp, #8
 800b680:	f85d eb04 	ldr.w	lr, [sp], #4
 800b684:	b003      	add	sp, #12
 800b686:	4770      	bx	lr
 800b688:	20000078 	.word	0x20000078

0800b68c <_fwalk_sglue>:
 800b68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b690:	4607      	mov	r7, r0
 800b692:	4688      	mov	r8, r1
 800b694:	4614      	mov	r4, r2
 800b696:	2600      	movs	r6, #0
 800b698:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b69c:	f1b9 0901 	subs.w	r9, r9, #1
 800b6a0:	d505      	bpl.n	800b6ae <_fwalk_sglue+0x22>
 800b6a2:	6824      	ldr	r4, [r4, #0]
 800b6a4:	2c00      	cmp	r4, #0
 800b6a6:	d1f7      	bne.n	800b698 <_fwalk_sglue+0xc>
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ae:	89ab      	ldrh	r3, [r5, #12]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d907      	bls.n	800b6c4 <_fwalk_sglue+0x38>
 800b6b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6b8:	3301      	adds	r3, #1
 800b6ba:	d003      	beq.n	800b6c4 <_fwalk_sglue+0x38>
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4638      	mov	r0, r7
 800b6c0:	47c0      	blx	r8
 800b6c2:	4306      	orrs	r6, r0
 800b6c4:	3568      	adds	r5, #104	; 0x68
 800b6c6:	e7e9      	b.n	800b69c <_fwalk_sglue+0x10>

0800b6c8 <__sread>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d0:	f000 f878 	bl	800b7c4 <_read_r>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	bfab      	itete	ge
 800b6d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6da:	89a3      	ldrhlt	r3, [r4, #12]
 800b6dc:	181b      	addge	r3, r3, r0
 800b6de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6e2:	bfac      	ite	ge
 800b6e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6e6:	81a3      	strhlt	r3, [r4, #12]
 800b6e8:	bd10      	pop	{r4, pc}

0800b6ea <__swrite>:
 800b6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	461f      	mov	r7, r3
 800b6f0:	898b      	ldrh	r3, [r1, #12]
 800b6f2:	05db      	lsls	r3, r3, #23
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	4616      	mov	r6, r2
 800b6fa:	d505      	bpl.n	800b708 <__swrite+0x1e>
 800b6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b700:	2302      	movs	r3, #2
 800b702:	2200      	movs	r2, #0
 800b704:	f000 f84c 	bl	800b7a0 <_lseek_r>
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b70e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b712:	81a3      	strh	r3, [r4, #12]
 800b714:	4632      	mov	r2, r6
 800b716:	463b      	mov	r3, r7
 800b718:	4628      	mov	r0, r5
 800b71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b71e:	f000 b863 	b.w	800b7e8 <_write_r>

0800b722 <__sseek>:
 800b722:	b510      	push	{r4, lr}
 800b724:	460c      	mov	r4, r1
 800b726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b72a:	f000 f839 	bl	800b7a0 <_lseek_r>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	bf15      	itete	ne
 800b734:	6560      	strne	r0, [r4, #84]	; 0x54
 800b736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b73a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b73e:	81a3      	strheq	r3, [r4, #12]
 800b740:	bf18      	it	ne
 800b742:	81a3      	strhne	r3, [r4, #12]
 800b744:	bd10      	pop	{r4, pc}

0800b746 <__sclose>:
 800b746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b74a:	f000 b819 	b.w	800b780 <_close_r>

0800b74e <memcmp>:
 800b74e:	b510      	push	{r4, lr}
 800b750:	3901      	subs	r1, #1
 800b752:	4402      	add	r2, r0
 800b754:	4290      	cmp	r0, r2
 800b756:	d101      	bne.n	800b75c <memcmp+0xe>
 800b758:	2000      	movs	r0, #0
 800b75a:	e005      	b.n	800b768 <memcmp+0x1a>
 800b75c:	7803      	ldrb	r3, [r0, #0]
 800b75e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b762:	42a3      	cmp	r3, r4
 800b764:	d001      	beq.n	800b76a <memcmp+0x1c>
 800b766:	1b18      	subs	r0, r3, r4
 800b768:	bd10      	pop	{r4, pc}
 800b76a:	3001      	adds	r0, #1
 800b76c:	e7f2      	b.n	800b754 <memcmp+0x6>

0800b76e <memset>:
 800b76e:	4402      	add	r2, r0
 800b770:	4603      	mov	r3, r0
 800b772:	4293      	cmp	r3, r2
 800b774:	d100      	bne.n	800b778 <memset+0xa>
 800b776:	4770      	bx	lr
 800b778:	f803 1b01 	strb.w	r1, [r3], #1
 800b77c:	e7f9      	b.n	800b772 <memset+0x4>
	...

0800b780 <_close_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d06      	ldr	r5, [pc, #24]	; (800b79c <_close_r+0x1c>)
 800b784:	2300      	movs	r3, #0
 800b786:	4604      	mov	r4, r0
 800b788:	4608      	mov	r0, r1
 800b78a:	602b      	str	r3, [r5, #0]
 800b78c:	f7f6 fe4a 	bl	8002424 <_close>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d102      	bne.n	800b79a <_close_r+0x1a>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b103      	cbz	r3, 800b79a <_close_r+0x1a>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	2002b228 	.word	0x2002b228

0800b7a0 <_lseek_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d07      	ldr	r5, [pc, #28]	; (800b7c0 <_lseek_r+0x20>)
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	602a      	str	r2, [r5, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f7f6 fe5f 	bl	8002472 <_lseek>
 800b7b4:	1c43      	adds	r3, r0, #1
 800b7b6:	d102      	bne.n	800b7be <_lseek_r+0x1e>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	b103      	cbz	r3, 800b7be <_lseek_r+0x1e>
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	bd38      	pop	{r3, r4, r5, pc}
 800b7c0:	2002b228 	.word	0x2002b228

0800b7c4 <_read_r>:
 800b7c4:	b538      	push	{r3, r4, r5, lr}
 800b7c6:	4d07      	ldr	r5, [pc, #28]	; (800b7e4 <_read_r+0x20>)
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	4608      	mov	r0, r1
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	f7f6 fded 	bl	80023b2 <_read>
 800b7d8:	1c43      	adds	r3, r0, #1
 800b7da:	d102      	bne.n	800b7e2 <_read_r+0x1e>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	b103      	cbz	r3, 800b7e2 <_read_r+0x1e>
 800b7e0:	6023      	str	r3, [r4, #0]
 800b7e2:	bd38      	pop	{r3, r4, r5, pc}
 800b7e4:	2002b228 	.word	0x2002b228

0800b7e8 <_write_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4d07      	ldr	r5, [pc, #28]	; (800b808 <_write_r+0x20>)
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	602a      	str	r2, [r5, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f7f6 fdf8 	bl	80023ec <_write>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d102      	bne.n	800b806 <_write_r+0x1e>
 800b800:	682b      	ldr	r3, [r5, #0]
 800b802:	b103      	cbz	r3, 800b806 <_write_r+0x1e>
 800b804:	6023      	str	r3, [r4, #0]
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	2002b228 	.word	0x2002b228

0800b80c <__errno>:
 800b80c:	4b01      	ldr	r3, [pc, #4]	; (800b814 <__errno+0x8>)
 800b80e:	6818      	ldr	r0, [r3, #0]
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	20000078 	.word	0x20000078

0800b818 <__libc_init_array>:
 800b818:	b570      	push	{r4, r5, r6, lr}
 800b81a:	4d0d      	ldr	r5, [pc, #52]	; (800b850 <__libc_init_array+0x38>)
 800b81c:	4c0d      	ldr	r4, [pc, #52]	; (800b854 <__libc_init_array+0x3c>)
 800b81e:	1b64      	subs	r4, r4, r5
 800b820:	10a4      	asrs	r4, r4, #2
 800b822:	2600      	movs	r6, #0
 800b824:	42a6      	cmp	r6, r4
 800b826:	d109      	bne.n	800b83c <__libc_init_array+0x24>
 800b828:	4d0b      	ldr	r5, [pc, #44]	; (800b858 <__libc_init_array+0x40>)
 800b82a:	4c0c      	ldr	r4, [pc, #48]	; (800b85c <__libc_init_array+0x44>)
 800b82c:	f000 fe18 	bl	800c460 <_init>
 800b830:	1b64      	subs	r4, r4, r5
 800b832:	10a4      	asrs	r4, r4, #2
 800b834:	2600      	movs	r6, #0
 800b836:	42a6      	cmp	r6, r4
 800b838:	d105      	bne.n	800b846 <__libc_init_array+0x2e>
 800b83a:	bd70      	pop	{r4, r5, r6, pc}
 800b83c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b840:	4798      	blx	r3
 800b842:	3601      	adds	r6, #1
 800b844:	e7ee      	b.n	800b824 <__libc_init_array+0xc>
 800b846:	f855 3b04 	ldr.w	r3, [r5], #4
 800b84a:	4798      	blx	r3
 800b84c:	3601      	adds	r6, #1
 800b84e:	e7f2      	b.n	800b836 <__libc_init_array+0x1e>
 800b850:	0800da90 	.word	0x0800da90
 800b854:	0800da90 	.word	0x0800da90
 800b858:	0800da90 	.word	0x0800da90
 800b85c:	0800da94 	.word	0x0800da94

0800b860 <__retarget_lock_init_recursive>:
 800b860:	4770      	bx	lr

0800b862 <__retarget_lock_acquire_recursive>:
 800b862:	4770      	bx	lr

0800b864 <__retarget_lock_release_recursive>:
 800b864:	4770      	bx	lr

0800b866 <memcpy>:
 800b866:	440a      	add	r2, r1
 800b868:	4291      	cmp	r1, r2
 800b86a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b86e:	d100      	bne.n	800b872 <memcpy+0xc>
 800b870:	4770      	bx	lr
 800b872:	b510      	push	{r4, lr}
 800b874:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b87c:	4291      	cmp	r1, r2
 800b87e:	d1f9      	bne.n	800b874 <memcpy+0xe>
 800b880:	bd10      	pop	{r4, pc}

0800b882 <abort>:
 800b882:	b508      	push	{r3, lr}
 800b884:	2006      	movs	r0, #6
 800b886:	f000 fd3b 	bl	800c300 <raise>
 800b88a:	2001      	movs	r0, #1
 800b88c:	f7f6 fd87 	bl	800239e <_exit>

0800b890 <_free_r>:
 800b890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b892:	2900      	cmp	r1, #0
 800b894:	d044      	beq.n	800b920 <_free_r+0x90>
 800b896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b89a:	9001      	str	r0, [sp, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f1a1 0404 	sub.w	r4, r1, #4
 800b8a2:	bfb8      	it	lt
 800b8a4:	18e4      	addlt	r4, r4, r3
 800b8a6:	f000 f8df 	bl	800ba68 <__malloc_lock>
 800b8aa:	4a1e      	ldr	r2, [pc, #120]	; (800b924 <_free_r+0x94>)
 800b8ac:	9801      	ldr	r0, [sp, #4]
 800b8ae:	6813      	ldr	r3, [r2, #0]
 800b8b0:	b933      	cbnz	r3, 800b8c0 <_free_r+0x30>
 800b8b2:	6063      	str	r3, [r4, #4]
 800b8b4:	6014      	str	r4, [r2, #0]
 800b8b6:	b003      	add	sp, #12
 800b8b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8bc:	f000 b8da 	b.w	800ba74 <__malloc_unlock>
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	d908      	bls.n	800b8d6 <_free_r+0x46>
 800b8c4:	6825      	ldr	r5, [r4, #0]
 800b8c6:	1961      	adds	r1, r4, r5
 800b8c8:	428b      	cmp	r3, r1
 800b8ca:	bf01      	itttt	eq
 800b8cc:	6819      	ldreq	r1, [r3, #0]
 800b8ce:	685b      	ldreq	r3, [r3, #4]
 800b8d0:	1949      	addeq	r1, r1, r5
 800b8d2:	6021      	streq	r1, [r4, #0]
 800b8d4:	e7ed      	b.n	800b8b2 <_free_r+0x22>
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	b10b      	cbz	r3, 800b8e0 <_free_r+0x50>
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	d9fa      	bls.n	800b8d6 <_free_r+0x46>
 800b8e0:	6811      	ldr	r1, [r2, #0]
 800b8e2:	1855      	adds	r5, r2, r1
 800b8e4:	42a5      	cmp	r5, r4
 800b8e6:	d10b      	bne.n	800b900 <_free_r+0x70>
 800b8e8:	6824      	ldr	r4, [r4, #0]
 800b8ea:	4421      	add	r1, r4
 800b8ec:	1854      	adds	r4, r2, r1
 800b8ee:	42a3      	cmp	r3, r4
 800b8f0:	6011      	str	r1, [r2, #0]
 800b8f2:	d1e0      	bne.n	800b8b6 <_free_r+0x26>
 800b8f4:	681c      	ldr	r4, [r3, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	6053      	str	r3, [r2, #4]
 800b8fa:	440c      	add	r4, r1
 800b8fc:	6014      	str	r4, [r2, #0]
 800b8fe:	e7da      	b.n	800b8b6 <_free_r+0x26>
 800b900:	d902      	bls.n	800b908 <_free_r+0x78>
 800b902:	230c      	movs	r3, #12
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	e7d6      	b.n	800b8b6 <_free_r+0x26>
 800b908:	6825      	ldr	r5, [r4, #0]
 800b90a:	1961      	adds	r1, r4, r5
 800b90c:	428b      	cmp	r3, r1
 800b90e:	bf04      	itt	eq
 800b910:	6819      	ldreq	r1, [r3, #0]
 800b912:	685b      	ldreq	r3, [r3, #4]
 800b914:	6063      	str	r3, [r4, #4]
 800b916:	bf04      	itt	eq
 800b918:	1949      	addeq	r1, r1, r5
 800b91a:	6021      	streq	r1, [r4, #0]
 800b91c:	6054      	str	r4, [r2, #4]
 800b91e:	e7ca      	b.n	800b8b6 <_free_r+0x26>
 800b920:	b003      	add	sp, #12
 800b922:	bd30      	pop	{r4, r5, pc}
 800b924:	2002b230 	.word	0x2002b230

0800b928 <sbrk_aligned>:
 800b928:	b570      	push	{r4, r5, r6, lr}
 800b92a:	4e0e      	ldr	r6, [pc, #56]	; (800b964 <sbrk_aligned+0x3c>)
 800b92c:	460c      	mov	r4, r1
 800b92e:	6831      	ldr	r1, [r6, #0]
 800b930:	4605      	mov	r5, r0
 800b932:	b911      	cbnz	r1, 800b93a <sbrk_aligned+0x12>
 800b934:	f000 fd00 	bl	800c338 <_sbrk_r>
 800b938:	6030      	str	r0, [r6, #0]
 800b93a:	4621      	mov	r1, r4
 800b93c:	4628      	mov	r0, r5
 800b93e:	f000 fcfb 	bl	800c338 <_sbrk_r>
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	d00a      	beq.n	800b95c <sbrk_aligned+0x34>
 800b946:	1cc4      	adds	r4, r0, #3
 800b948:	f024 0403 	bic.w	r4, r4, #3
 800b94c:	42a0      	cmp	r0, r4
 800b94e:	d007      	beq.n	800b960 <sbrk_aligned+0x38>
 800b950:	1a21      	subs	r1, r4, r0
 800b952:	4628      	mov	r0, r5
 800b954:	f000 fcf0 	bl	800c338 <_sbrk_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	d101      	bne.n	800b960 <sbrk_aligned+0x38>
 800b95c:	f04f 34ff 	mov.w	r4, #4294967295
 800b960:	4620      	mov	r0, r4
 800b962:	bd70      	pop	{r4, r5, r6, pc}
 800b964:	2002b234 	.word	0x2002b234

0800b968 <_malloc_r>:
 800b968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b96c:	1ccd      	adds	r5, r1, #3
 800b96e:	f025 0503 	bic.w	r5, r5, #3
 800b972:	3508      	adds	r5, #8
 800b974:	2d0c      	cmp	r5, #12
 800b976:	bf38      	it	cc
 800b978:	250c      	movcc	r5, #12
 800b97a:	2d00      	cmp	r5, #0
 800b97c:	4607      	mov	r7, r0
 800b97e:	db01      	blt.n	800b984 <_malloc_r+0x1c>
 800b980:	42a9      	cmp	r1, r5
 800b982:	d905      	bls.n	800b990 <_malloc_r+0x28>
 800b984:	230c      	movs	r3, #12
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	2600      	movs	r6, #0
 800b98a:	4630      	mov	r0, r6
 800b98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b990:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba64 <_malloc_r+0xfc>
 800b994:	f000 f868 	bl	800ba68 <__malloc_lock>
 800b998:	f8d8 3000 	ldr.w	r3, [r8]
 800b99c:	461c      	mov	r4, r3
 800b99e:	bb5c      	cbnz	r4, 800b9f8 <_malloc_r+0x90>
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	f7ff ffc0 	bl	800b928 <sbrk_aligned>
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	d155      	bne.n	800ba5a <_malloc_r+0xf2>
 800b9ae:	f8d8 4000 	ldr.w	r4, [r8]
 800b9b2:	4626      	mov	r6, r4
 800b9b4:	2e00      	cmp	r6, #0
 800b9b6:	d145      	bne.n	800ba44 <_malloc_r+0xdc>
 800b9b8:	2c00      	cmp	r4, #0
 800b9ba:	d048      	beq.n	800ba4e <_malloc_r+0xe6>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	eb04 0903 	add.w	r9, r4, r3
 800b9c6:	f000 fcb7 	bl	800c338 <_sbrk_r>
 800b9ca:	4581      	cmp	r9, r0
 800b9cc:	d13f      	bne.n	800ba4e <_malloc_r+0xe6>
 800b9ce:	6821      	ldr	r1, [r4, #0]
 800b9d0:	1a6d      	subs	r5, r5, r1
 800b9d2:	4629      	mov	r1, r5
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f7ff ffa7 	bl	800b928 <sbrk_aligned>
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d037      	beq.n	800ba4e <_malloc_r+0xe6>
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	442b      	add	r3, r5
 800b9e2:	6023      	str	r3, [r4, #0]
 800b9e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d038      	beq.n	800ba5e <_malloc_r+0xf6>
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	42a2      	cmp	r2, r4
 800b9f0:	d12b      	bne.n	800ba4a <_malloc_r+0xe2>
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	605a      	str	r2, [r3, #4]
 800b9f6:	e00f      	b.n	800ba18 <_malloc_r+0xb0>
 800b9f8:	6822      	ldr	r2, [r4, #0]
 800b9fa:	1b52      	subs	r2, r2, r5
 800b9fc:	d41f      	bmi.n	800ba3e <_malloc_r+0xd6>
 800b9fe:	2a0b      	cmp	r2, #11
 800ba00:	d917      	bls.n	800ba32 <_malloc_r+0xca>
 800ba02:	1961      	adds	r1, r4, r5
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	6025      	str	r5, [r4, #0]
 800ba08:	bf18      	it	ne
 800ba0a:	6059      	strne	r1, [r3, #4]
 800ba0c:	6863      	ldr	r3, [r4, #4]
 800ba0e:	bf08      	it	eq
 800ba10:	f8c8 1000 	streq.w	r1, [r8]
 800ba14:	5162      	str	r2, [r4, r5]
 800ba16:	604b      	str	r3, [r1, #4]
 800ba18:	4638      	mov	r0, r7
 800ba1a:	f104 060b 	add.w	r6, r4, #11
 800ba1e:	f000 f829 	bl	800ba74 <__malloc_unlock>
 800ba22:	f026 0607 	bic.w	r6, r6, #7
 800ba26:	1d23      	adds	r3, r4, #4
 800ba28:	1af2      	subs	r2, r6, r3
 800ba2a:	d0ae      	beq.n	800b98a <_malloc_r+0x22>
 800ba2c:	1b9b      	subs	r3, r3, r6
 800ba2e:	50a3      	str	r3, [r4, r2]
 800ba30:	e7ab      	b.n	800b98a <_malloc_r+0x22>
 800ba32:	42a3      	cmp	r3, r4
 800ba34:	6862      	ldr	r2, [r4, #4]
 800ba36:	d1dd      	bne.n	800b9f4 <_malloc_r+0x8c>
 800ba38:	f8c8 2000 	str.w	r2, [r8]
 800ba3c:	e7ec      	b.n	800ba18 <_malloc_r+0xb0>
 800ba3e:	4623      	mov	r3, r4
 800ba40:	6864      	ldr	r4, [r4, #4]
 800ba42:	e7ac      	b.n	800b99e <_malloc_r+0x36>
 800ba44:	4634      	mov	r4, r6
 800ba46:	6876      	ldr	r6, [r6, #4]
 800ba48:	e7b4      	b.n	800b9b4 <_malloc_r+0x4c>
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	e7cc      	b.n	800b9e8 <_malloc_r+0x80>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	603b      	str	r3, [r7, #0]
 800ba52:	4638      	mov	r0, r7
 800ba54:	f000 f80e 	bl	800ba74 <__malloc_unlock>
 800ba58:	e797      	b.n	800b98a <_malloc_r+0x22>
 800ba5a:	6025      	str	r5, [r4, #0]
 800ba5c:	e7dc      	b.n	800ba18 <_malloc_r+0xb0>
 800ba5e:	605b      	str	r3, [r3, #4]
 800ba60:	deff      	udf	#255	; 0xff
 800ba62:	bf00      	nop
 800ba64:	2002b230 	.word	0x2002b230

0800ba68 <__malloc_lock>:
 800ba68:	4801      	ldr	r0, [pc, #4]	; (800ba70 <__malloc_lock+0x8>)
 800ba6a:	f7ff befa 	b.w	800b862 <__retarget_lock_acquire_recursive>
 800ba6e:	bf00      	nop
 800ba70:	2002b22c 	.word	0x2002b22c

0800ba74 <__malloc_unlock>:
 800ba74:	4801      	ldr	r0, [pc, #4]	; (800ba7c <__malloc_unlock+0x8>)
 800ba76:	f7ff bef5 	b.w	800b864 <__retarget_lock_release_recursive>
 800ba7a:	bf00      	nop
 800ba7c:	2002b22c 	.word	0x2002b22c

0800ba80 <__sfputc_r>:
 800ba80:	6893      	ldr	r3, [r2, #8]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	b410      	push	{r4}
 800ba88:	6093      	str	r3, [r2, #8]
 800ba8a:	da08      	bge.n	800ba9e <__sfputc_r+0x1e>
 800ba8c:	6994      	ldr	r4, [r2, #24]
 800ba8e:	42a3      	cmp	r3, r4
 800ba90:	db01      	blt.n	800ba96 <__sfputc_r+0x16>
 800ba92:	290a      	cmp	r1, #10
 800ba94:	d103      	bne.n	800ba9e <__sfputc_r+0x1e>
 800ba96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba9a:	f000 bb73 	b.w	800c184 <__swbuf_r>
 800ba9e:	6813      	ldr	r3, [r2, #0]
 800baa0:	1c58      	adds	r0, r3, #1
 800baa2:	6010      	str	r0, [r2, #0]
 800baa4:	7019      	strb	r1, [r3, #0]
 800baa6:	4608      	mov	r0, r1
 800baa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baac:	4770      	bx	lr

0800baae <__sfputs_r>:
 800baae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab0:	4606      	mov	r6, r0
 800bab2:	460f      	mov	r7, r1
 800bab4:	4614      	mov	r4, r2
 800bab6:	18d5      	adds	r5, r2, r3
 800bab8:	42ac      	cmp	r4, r5
 800baba:	d101      	bne.n	800bac0 <__sfputs_r+0x12>
 800babc:	2000      	movs	r0, #0
 800babe:	e007      	b.n	800bad0 <__sfputs_r+0x22>
 800bac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac4:	463a      	mov	r2, r7
 800bac6:	4630      	mov	r0, r6
 800bac8:	f7ff ffda 	bl	800ba80 <__sfputc_r>
 800bacc:	1c43      	adds	r3, r0, #1
 800bace:	d1f3      	bne.n	800bab8 <__sfputs_r+0xa>
 800bad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bad4 <_vfiprintf_r>:
 800bad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad8:	460d      	mov	r5, r1
 800bada:	b09d      	sub	sp, #116	; 0x74
 800badc:	4614      	mov	r4, r2
 800bade:	4698      	mov	r8, r3
 800bae0:	4606      	mov	r6, r0
 800bae2:	b118      	cbz	r0, 800baec <_vfiprintf_r+0x18>
 800bae4:	6a03      	ldr	r3, [r0, #32]
 800bae6:	b90b      	cbnz	r3, 800baec <_vfiprintf_r+0x18>
 800bae8:	f7ff fda6 	bl	800b638 <__sinit>
 800baec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baee:	07d9      	lsls	r1, r3, #31
 800baf0:	d405      	bmi.n	800bafe <_vfiprintf_r+0x2a>
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	059a      	lsls	r2, r3, #22
 800baf6:	d402      	bmi.n	800bafe <_vfiprintf_r+0x2a>
 800baf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bafa:	f7ff feb2 	bl	800b862 <__retarget_lock_acquire_recursive>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	071b      	lsls	r3, r3, #28
 800bb02:	d501      	bpl.n	800bb08 <_vfiprintf_r+0x34>
 800bb04:	692b      	ldr	r3, [r5, #16]
 800bb06:	b99b      	cbnz	r3, 800bb30 <_vfiprintf_r+0x5c>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f000 fb78 	bl	800c200 <__swsetup_r>
 800bb10:	b170      	cbz	r0, 800bb30 <_vfiprintf_r+0x5c>
 800bb12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb14:	07dc      	lsls	r4, r3, #31
 800bb16:	d504      	bpl.n	800bb22 <_vfiprintf_r+0x4e>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	b01d      	add	sp, #116	; 0x74
 800bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	0598      	lsls	r0, r3, #22
 800bb26:	d4f7      	bmi.n	800bb18 <_vfiprintf_r+0x44>
 800bb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb2a:	f7ff fe9b 	bl	800b864 <__retarget_lock_release_recursive>
 800bb2e:	e7f3      	b.n	800bb18 <_vfiprintf_r+0x44>
 800bb30:	2300      	movs	r3, #0
 800bb32:	9309      	str	r3, [sp, #36]	; 0x24
 800bb34:	2320      	movs	r3, #32
 800bb36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb3e:	2330      	movs	r3, #48	; 0x30
 800bb40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bcf4 <_vfiprintf_r+0x220>
 800bb44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb48:	f04f 0901 	mov.w	r9, #1
 800bb4c:	4623      	mov	r3, r4
 800bb4e:	469a      	mov	sl, r3
 800bb50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb54:	b10a      	cbz	r2, 800bb5a <_vfiprintf_r+0x86>
 800bb56:	2a25      	cmp	r2, #37	; 0x25
 800bb58:	d1f9      	bne.n	800bb4e <_vfiprintf_r+0x7a>
 800bb5a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb5e:	d00b      	beq.n	800bb78 <_vfiprintf_r+0xa4>
 800bb60:	465b      	mov	r3, fp
 800bb62:	4622      	mov	r2, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7ff ffa1 	bl	800baae <__sfputs_r>
 800bb6c:	3001      	adds	r0, #1
 800bb6e:	f000 80a9 	beq.w	800bcc4 <_vfiprintf_r+0x1f0>
 800bb72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb74:	445a      	add	r2, fp
 800bb76:	9209      	str	r2, [sp, #36]	; 0x24
 800bb78:	f89a 3000 	ldrb.w	r3, [sl]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 80a1 	beq.w	800bcc4 <_vfiprintf_r+0x1f0>
 800bb82:	2300      	movs	r3, #0
 800bb84:	f04f 32ff 	mov.w	r2, #4294967295
 800bb88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb8c:	f10a 0a01 	add.w	sl, sl, #1
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	9307      	str	r3, [sp, #28]
 800bb94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb98:	931a      	str	r3, [sp, #104]	; 0x68
 800bb9a:	4654      	mov	r4, sl
 800bb9c:	2205      	movs	r2, #5
 800bb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba2:	4854      	ldr	r0, [pc, #336]	; (800bcf4 <_vfiprintf_r+0x220>)
 800bba4:	f7f4 fb74 	bl	8000290 <memchr>
 800bba8:	9a04      	ldr	r2, [sp, #16]
 800bbaa:	b9d8      	cbnz	r0, 800bbe4 <_vfiprintf_r+0x110>
 800bbac:	06d1      	lsls	r1, r2, #27
 800bbae:	bf44      	itt	mi
 800bbb0:	2320      	movmi	r3, #32
 800bbb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbb6:	0713      	lsls	r3, r2, #28
 800bbb8:	bf44      	itt	mi
 800bbba:	232b      	movmi	r3, #43	; 0x2b
 800bbbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbc0:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc4:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc6:	d015      	beq.n	800bbf4 <_vfiprintf_r+0x120>
 800bbc8:	9a07      	ldr	r2, [sp, #28]
 800bbca:	4654      	mov	r4, sl
 800bbcc:	2000      	movs	r0, #0
 800bbce:	f04f 0c0a 	mov.w	ip, #10
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbd8:	3b30      	subs	r3, #48	; 0x30
 800bbda:	2b09      	cmp	r3, #9
 800bbdc:	d94d      	bls.n	800bc7a <_vfiprintf_r+0x1a6>
 800bbde:	b1b0      	cbz	r0, 800bc0e <_vfiprintf_r+0x13a>
 800bbe0:	9207      	str	r2, [sp, #28]
 800bbe2:	e014      	b.n	800bc0e <_vfiprintf_r+0x13a>
 800bbe4:	eba0 0308 	sub.w	r3, r0, r8
 800bbe8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbec:	4313      	orrs	r3, r2
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	46a2      	mov	sl, r4
 800bbf2:	e7d2      	b.n	800bb9a <_vfiprintf_r+0xc6>
 800bbf4:	9b03      	ldr	r3, [sp, #12]
 800bbf6:	1d19      	adds	r1, r3, #4
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	9103      	str	r1, [sp, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	bfbb      	ittet	lt
 800bc00:	425b      	neglt	r3, r3
 800bc02:	f042 0202 	orrlt.w	r2, r2, #2
 800bc06:	9307      	strge	r3, [sp, #28]
 800bc08:	9307      	strlt	r3, [sp, #28]
 800bc0a:	bfb8      	it	lt
 800bc0c:	9204      	strlt	r2, [sp, #16]
 800bc0e:	7823      	ldrb	r3, [r4, #0]
 800bc10:	2b2e      	cmp	r3, #46	; 0x2e
 800bc12:	d10c      	bne.n	800bc2e <_vfiprintf_r+0x15a>
 800bc14:	7863      	ldrb	r3, [r4, #1]
 800bc16:	2b2a      	cmp	r3, #42	; 0x2a
 800bc18:	d134      	bne.n	800bc84 <_vfiprintf_r+0x1b0>
 800bc1a:	9b03      	ldr	r3, [sp, #12]
 800bc1c:	1d1a      	adds	r2, r3, #4
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	9203      	str	r2, [sp, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	bfb8      	it	lt
 800bc26:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc2a:	3402      	adds	r4, #2
 800bc2c:	9305      	str	r3, [sp, #20]
 800bc2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bd04 <_vfiprintf_r+0x230>
 800bc32:	7821      	ldrb	r1, [r4, #0]
 800bc34:	2203      	movs	r2, #3
 800bc36:	4650      	mov	r0, sl
 800bc38:	f7f4 fb2a 	bl	8000290 <memchr>
 800bc3c:	b138      	cbz	r0, 800bc4e <_vfiprintf_r+0x17a>
 800bc3e:	9b04      	ldr	r3, [sp, #16]
 800bc40:	eba0 000a 	sub.w	r0, r0, sl
 800bc44:	2240      	movs	r2, #64	; 0x40
 800bc46:	4082      	lsls	r2, r0
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	3401      	adds	r4, #1
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc52:	4829      	ldr	r0, [pc, #164]	; (800bcf8 <_vfiprintf_r+0x224>)
 800bc54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc58:	2206      	movs	r2, #6
 800bc5a:	f7f4 fb19 	bl	8000290 <memchr>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	d03f      	beq.n	800bce2 <_vfiprintf_r+0x20e>
 800bc62:	4b26      	ldr	r3, [pc, #152]	; (800bcfc <_vfiprintf_r+0x228>)
 800bc64:	bb1b      	cbnz	r3, 800bcae <_vfiprintf_r+0x1da>
 800bc66:	9b03      	ldr	r3, [sp, #12]
 800bc68:	3307      	adds	r3, #7
 800bc6a:	f023 0307 	bic.w	r3, r3, #7
 800bc6e:	3308      	adds	r3, #8
 800bc70:	9303      	str	r3, [sp, #12]
 800bc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc74:	443b      	add	r3, r7
 800bc76:	9309      	str	r3, [sp, #36]	; 0x24
 800bc78:	e768      	b.n	800bb4c <_vfiprintf_r+0x78>
 800bc7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc7e:	460c      	mov	r4, r1
 800bc80:	2001      	movs	r0, #1
 800bc82:	e7a6      	b.n	800bbd2 <_vfiprintf_r+0xfe>
 800bc84:	2300      	movs	r3, #0
 800bc86:	3401      	adds	r4, #1
 800bc88:	9305      	str	r3, [sp, #20]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	f04f 0c0a 	mov.w	ip, #10
 800bc90:	4620      	mov	r0, r4
 800bc92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc96:	3a30      	subs	r2, #48	; 0x30
 800bc98:	2a09      	cmp	r2, #9
 800bc9a:	d903      	bls.n	800bca4 <_vfiprintf_r+0x1d0>
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d0c6      	beq.n	800bc2e <_vfiprintf_r+0x15a>
 800bca0:	9105      	str	r1, [sp, #20]
 800bca2:	e7c4      	b.n	800bc2e <_vfiprintf_r+0x15a>
 800bca4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bca8:	4604      	mov	r4, r0
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e7f0      	b.n	800bc90 <_vfiprintf_r+0x1bc>
 800bcae:	ab03      	add	r3, sp, #12
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	462a      	mov	r2, r5
 800bcb4:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <_vfiprintf_r+0x22c>)
 800bcb6:	a904      	add	r1, sp, #16
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f3af 8000 	nop.w
 800bcbe:	4607      	mov	r7, r0
 800bcc0:	1c78      	adds	r0, r7, #1
 800bcc2:	d1d6      	bne.n	800bc72 <_vfiprintf_r+0x19e>
 800bcc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc6:	07d9      	lsls	r1, r3, #31
 800bcc8:	d405      	bmi.n	800bcd6 <_vfiprintf_r+0x202>
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	059a      	lsls	r2, r3, #22
 800bcce:	d402      	bmi.n	800bcd6 <_vfiprintf_r+0x202>
 800bcd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcd2:	f7ff fdc7 	bl	800b864 <__retarget_lock_release_recursive>
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	065b      	lsls	r3, r3, #25
 800bcda:	f53f af1d 	bmi.w	800bb18 <_vfiprintf_r+0x44>
 800bcde:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bce0:	e71c      	b.n	800bb1c <_vfiprintf_r+0x48>
 800bce2:	ab03      	add	r3, sp, #12
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	462a      	mov	r2, r5
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <_vfiprintf_r+0x22c>)
 800bcea:	a904      	add	r1, sp, #16
 800bcec:	4630      	mov	r0, r6
 800bcee:	f000 f879 	bl	800bde4 <_printf_i>
 800bcf2:	e7e4      	b.n	800bcbe <_vfiprintf_r+0x1ea>
 800bcf4:	0800da54 	.word	0x0800da54
 800bcf8:	0800da5e 	.word	0x0800da5e
 800bcfc:	00000000 	.word	0x00000000
 800bd00:	0800baaf 	.word	0x0800baaf
 800bd04:	0800da5a 	.word	0x0800da5a

0800bd08 <_printf_common>:
 800bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd0c:	4616      	mov	r6, r2
 800bd0e:	4699      	mov	r9, r3
 800bd10:	688a      	ldr	r2, [r1, #8]
 800bd12:	690b      	ldr	r3, [r1, #16]
 800bd14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	bfb8      	it	lt
 800bd1c:	4613      	movlt	r3, r2
 800bd1e:	6033      	str	r3, [r6, #0]
 800bd20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd24:	4607      	mov	r7, r0
 800bd26:	460c      	mov	r4, r1
 800bd28:	b10a      	cbz	r2, 800bd2e <_printf_common+0x26>
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	6033      	str	r3, [r6, #0]
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	0699      	lsls	r1, r3, #26
 800bd32:	bf42      	ittt	mi
 800bd34:	6833      	ldrmi	r3, [r6, #0]
 800bd36:	3302      	addmi	r3, #2
 800bd38:	6033      	strmi	r3, [r6, #0]
 800bd3a:	6825      	ldr	r5, [r4, #0]
 800bd3c:	f015 0506 	ands.w	r5, r5, #6
 800bd40:	d106      	bne.n	800bd50 <_printf_common+0x48>
 800bd42:	f104 0a19 	add.w	sl, r4, #25
 800bd46:	68e3      	ldr	r3, [r4, #12]
 800bd48:	6832      	ldr	r2, [r6, #0]
 800bd4a:	1a9b      	subs	r3, r3, r2
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dc26      	bgt.n	800bd9e <_printf_common+0x96>
 800bd50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd54:	1e13      	subs	r3, r2, #0
 800bd56:	6822      	ldr	r2, [r4, #0]
 800bd58:	bf18      	it	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	0692      	lsls	r2, r2, #26
 800bd5e:	d42b      	bmi.n	800bdb8 <_printf_common+0xb0>
 800bd60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd64:	4649      	mov	r1, r9
 800bd66:	4638      	mov	r0, r7
 800bd68:	47c0      	blx	r8
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	d01e      	beq.n	800bdac <_printf_common+0xa4>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	6922      	ldr	r2, [r4, #16]
 800bd72:	f003 0306 	and.w	r3, r3, #6
 800bd76:	2b04      	cmp	r3, #4
 800bd78:	bf02      	ittt	eq
 800bd7a:	68e5      	ldreq	r5, [r4, #12]
 800bd7c:	6833      	ldreq	r3, [r6, #0]
 800bd7e:	1aed      	subeq	r5, r5, r3
 800bd80:	68a3      	ldr	r3, [r4, #8]
 800bd82:	bf0c      	ite	eq
 800bd84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd88:	2500      	movne	r5, #0
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	bfc4      	itt	gt
 800bd8e:	1a9b      	subgt	r3, r3, r2
 800bd90:	18ed      	addgt	r5, r5, r3
 800bd92:	2600      	movs	r6, #0
 800bd94:	341a      	adds	r4, #26
 800bd96:	42b5      	cmp	r5, r6
 800bd98:	d11a      	bne.n	800bdd0 <_printf_common+0xc8>
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	e008      	b.n	800bdb0 <_printf_common+0xa8>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4652      	mov	r2, sl
 800bda2:	4649      	mov	r1, r9
 800bda4:	4638      	mov	r0, r7
 800bda6:	47c0      	blx	r8
 800bda8:	3001      	adds	r0, #1
 800bdaa:	d103      	bne.n	800bdb4 <_printf_common+0xac>
 800bdac:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb4:	3501      	adds	r5, #1
 800bdb6:	e7c6      	b.n	800bd46 <_printf_common+0x3e>
 800bdb8:	18e1      	adds	r1, r4, r3
 800bdba:	1c5a      	adds	r2, r3, #1
 800bdbc:	2030      	movs	r0, #48	; 0x30
 800bdbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdc2:	4422      	add	r2, r4
 800bdc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdcc:	3302      	adds	r3, #2
 800bdce:	e7c7      	b.n	800bd60 <_printf_common+0x58>
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	4638      	mov	r0, r7
 800bdd8:	47c0      	blx	r8
 800bdda:	3001      	adds	r0, #1
 800bddc:	d0e6      	beq.n	800bdac <_printf_common+0xa4>
 800bdde:	3601      	adds	r6, #1
 800bde0:	e7d9      	b.n	800bd96 <_printf_common+0x8e>
	...

0800bde4 <_printf_i>:
 800bde4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	7e0f      	ldrb	r7, [r1, #24]
 800bdea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bdec:	2f78      	cmp	r7, #120	; 0x78
 800bdee:	4691      	mov	r9, r2
 800bdf0:	4680      	mov	r8, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	469a      	mov	sl, r3
 800bdf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdfa:	d807      	bhi.n	800be0c <_printf_i+0x28>
 800bdfc:	2f62      	cmp	r7, #98	; 0x62
 800bdfe:	d80a      	bhi.n	800be16 <_printf_i+0x32>
 800be00:	2f00      	cmp	r7, #0
 800be02:	f000 80d4 	beq.w	800bfae <_printf_i+0x1ca>
 800be06:	2f58      	cmp	r7, #88	; 0x58
 800be08:	f000 80c0 	beq.w	800bf8c <_printf_i+0x1a8>
 800be0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be14:	e03a      	b.n	800be8c <_printf_i+0xa8>
 800be16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be1a:	2b15      	cmp	r3, #21
 800be1c:	d8f6      	bhi.n	800be0c <_printf_i+0x28>
 800be1e:	a101      	add	r1, pc, #4	; (adr r1, 800be24 <_printf_i+0x40>)
 800be20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be91 	.word	0x0800be91
 800be2c:	0800be0d 	.word	0x0800be0d
 800be30:	0800be0d 	.word	0x0800be0d
 800be34:	0800be0d 	.word	0x0800be0d
 800be38:	0800be0d 	.word	0x0800be0d
 800be3c:	0800be91 	.word	0x0800be91
 800be40:	0800be0d 	.word	0x0800be0d
 800be44:	0800be0d 	.word	0x0800be0d
 800be48:	0800be0d 	.word	0x0800be0d
 800be4c:	0800be0d 	.word	0x0800be0d
 800be50:	0800bf95 	.word	0x0800bf95
 800be54:	0800bebd 	.word	0x0800bebd
 800be58:	0800bf4f 	.word	0x0800bf4f
 800be5c:	0800be0d 	.word	0x0800be0d
 800be60:	0800be0d 	.word	0x0800be0d
 800be64:	0800bfb7 	.word	0x0800bfb7
 800be68:	0800be0d 	.word	0x0800be0d
 800be6c:	0800bebd 	.word	0x0800bebd
 800be70:	0800be0d 	.word	0x0800be0d
 800be74:	0800be0d 	.word	0x0800be0d
 800be78:	0800bf57 	.word	0x0800bf57
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	602a      	str	r2, [r5, #0]
 800be84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be8c:	2301      	movs	r3, #1
 800be8e:	e09f      	b.n	800bfd0 <_printf_i+0x1ec>
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	682b      	ldr	r3, [r5, #0]
 800be94:	0607      	lsls	r7, r0, #24
 800be96:	f103 0104 	add.w	r1, r3, #4
 800be9a:	6029      	str	r1, [r5, #0]
 800be9c:	d501      	bpl.n	800bea2 <_printf_i+0xbe>
 800be9e:	681e      	ldr	r6, [r3, #0]
 800bea0:	e003      	b.n	800beaa <_printf_i+0xc6>
 800bea2:	0646      	lsls	r6, r0, #25
 800bea4:	d5fb      	bpl.n	800be9e <_printf_i+0xba>
 800bea6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800beaa:	2e00      	cmp	r6, #0
 800beac:	da03      	bge.n	800beb6 <_printf_i+0xd2>
 800beae:	232d      	movs	r3, #45	; 0x2d
 800beb0:	4276      	negs	r6, r6
 800beb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800beb6:	485a      	ldr	r0, [pc, #360]	; (800c020 <_printf_i+0x23c>)
 800beb8:	230a      	movs	r3, #10
 800beba:	e012      	b.n	800bee2 <_printf_i+0xfe>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	6820      	ldr	r0, [r4, #0]
 800bec0:	1d19      	adds	r1, r3, #4
 800bec2:	6029      	str	r1, [r5, #0]
 800bec4:	0605      	lsls	r5, r0, #24
 800bec6:	d501      	bpl.n	800becc <_printf_i+0xe8>
 800bec8:	681e      	ldr	r6, [r3, #0]
 800beca:	e002      	b.n	800bed2 <_printf_i+0xee>
 800becc:	0641      	lsls	r1, r0, #25
 800bece:	d5fb      	bpl.n	800bec8 <_printf_i+0xe4>
 800bed0:	881e      	ldrh	r6, [r3, #0]
 800bed2:	4853      	ldr	r0, [pc, #332]	; (800c020 <_printf_i+0x23c>)
 800bed4:	2f6f      	cmp	r7, #111	; 0x6f
 800bed6:	bf0c      	ite	eq
 800bed8:	2308      	moveq	r3, #8
 800beda:	230a      	movne	r3, #10
 800bedc:	2100      	movs	r1, #0
 800bede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bee2:	6865      	ldr	r5, [r4, #4]
 800bee4:	60a5      	str	r5, [r4, #8]
 800bee6:	2d00      	cmp	r5, #0
 800bee8:	bfa2      	ittt	ge
 800beea:	6821      	ldrge	r1, [r4, #0]
 800beec:	f021 0104 	bicge.w	r1, r1, #4
 800bef0:	6021      	strge	r1, [r4, #0]
 800bef2:	b90e      	cbnz	r6, 800bef8 <_printf_i+0x114>
 800bef4:	2d00      	cmp	r5, #0
 800bef6:	d04b      	beq.n	800bf90 <_printf_i+0x1ac>
 800bef8:	4615      	mov	r5, r2
 800befa:	fbb6 f1f3 	udiv	r1, r6, r3
 800befe:	fb03 6711 	mls	r7, r3, r1, r6
 800bf02:	5dc7      	ldrb	r7, [r0, r7]
 800bf04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf08:	4637      	mov	r7, r6
 800bf0a:	42bb      	cmp	r3, r7
 800bf0c:	460e      	mov	r6, r1
 800bf0e:	d9f4      	bls.n	800befa <_printf_i+0x116>
 800bf10:	2b08      	cmp	r3, #8
 800bf12:	d10b      	bne.n	800bf2c <_printf_i+0x148>
 800bf14:	6823      	ldr	r3, [r4, #0]
 800bf16:	07de      	lsls	r6, r3, #31
 800bf18:	d508      	bpl.n	800bf2c <_printf_i+0x148>
 800bf1a:	6923      	ldr	r3, [r4, #16]
 800bf1c:	6861      	ldr	r1, [r4, #4]
 800bf1e:	4299      	cmp	r1, r3
 800bf20:	bfde      	ittt	le
 800bf22:	2330      	movle	r3, #48	; 0x30
 800bf24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf28:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf2c:	1b52      	subs	r2, r2, r5
 800bf2e:	6122      	str	r2, [r4, #16]
 800bf30:	f8cd a000 	str.w	sl, [sp]
 800bf34:	464b      	mov	r3, r9
 800bf36:	aa03      	add	r2, sp, #12
 800bf38:	4621      	mov	r1, r4
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	f7ff fee4 	bl	800bd08 <_printf_common>
 800bf40:	3001      	adds	r0, #1
 800bf42:	d14a      	bne.n	800bfda <_printf_i+0x1f6>
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	b004      	add	sp, #16
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	f043 0320 	orr.w	r3, r3, #32
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	4833      	ldr	r0, [pc, #204]	; (800c024 <_printf_i+0x240>)
 800bf58:	2778      	movs	r7, #120	; 0x78
 800bf5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf5e:	6823      	ldr	r3, [r4, #0]
 800bf60:	6829      	ldr	r1, [r5, #0]
 800bf62:	061f      	lsls	r7, r3, #24
 800bf64:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf68:	d402      	bmi.n	800bf70 <_printf_i+0x18c>
 800bf6a:	065f      	lsls	r7, r3, #25
 800bf6c:	bf48      	it	mi
 800bf6e:	b2b6      	uxthmi	r6, r6
 800bf70:	07df      	lsls	r7, r3, #31
 800bf72:	bf48      	it	mi
 800bf74:	f043 0320 	orrmi.w	r3, r3, #32
 800bf78:	6029      	str	r1, [r5, #0]
 800bf7a:	bf48      	it	mi
 800bf7c:	6023      	strmi	r3, [r4, #0]
 800bf7e:	b91e      	cbnz	r6, 800bf88 <_printf_i+0x1a4>
 800bf80:	6823      	ldr	r3, [r4, #0]
 800bf82:	f023 0320 	bic.w	r3, r3, #32
 800bf86:	6023      	str	r3, [r4, #0]
 800bf88:	2310      	movs	r3, #16
 800bf8a:	e7a7      	b.n	800bedc <_printf_i+0xf8>
 800bf8c:	4824      	ldr	r0, [pc, #144]	; (800c020 <_printf_i+0x23c>)
 800bf8e:	e7e4      	b.n	800bf5a <_printf_i+0x176>
 800bf90:	4615      	mov	r5, r2
 800bf92:	e7bd      	b.n	800bf10 <_printf_i+0x12c>
 800bf94:	682b      	ldr	r3, [r5, #0]
 800bf96:	6826      	ldr	r6, [r4, #0]
 800bf98:	6961      	ldr	r1, [r4, #20]
 800bf9a:	1d18      	adds	r0, r3, #4
 800bf9c:	6028      	str	r0, [r5, #0]
 800bf9e:	0635      	lsls	r5, r6, #24
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	d501      	bpl.n	800bfa8 <_printf_i+0x1c4>
 800bfa4:	6019      	str	r1, [r3, #0]
 800bfa6:	e002      	b.n	800bfae <_printf_i+0x1ca>
 800bfa8:	0670      	lsls	r0, r6, #25
 800bfaa:	d5fb      	bpl.n	800bfa4 <_printf_i+0x1c0>
 800bfac:	8019      	strh	r1, [r3, #0]
 800bfae:	2300      	movs	r3, #0
 800bfb0:	6123      	str	r3, [r4, #16]
 800bfb2:	4615      	mov	r5, r2
 800bfb4:	e7bc      	b.n	800bf30 <_printf_i+0x14c>
 800bfb6:	682b      	ldr	r3, [r5, #0]
 800bfb8:	1d1a      	adds	r2, r3, #4
 800bfba:	602a      	str	r2, [r5, #0]
 800bfbc:	681d      	ldr	r5, [r3, #0]
 800bfbe:	6862      	ldr	r2, [r4, #4]
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f7f4 f964 	bl	8000290 <memchr>
 800bfc8:	b108      	cbz	r0, 800bfce <_printf_i+0x1ea>
 800bfca:	1b40      	subs	r0, r0, r5
 800bfcc:	6060      	str	r0, [r4, #4]
 800bfce:	6863      	ldr	r3, [r4, #4]
 800bfd0:	6123      	str	r3, [r4, #16]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfd8:	e7aa      	b.n	800bf30 <_printf_i+0x14c>
 800bfda:	6923      	ldr	r3, [r4, #16]
 800bfdc:	462a      	mov	r2, r5
 800bfde:	4649      	mov	r1, r9
 800bfe0:	4640      	mov	r0, r8
 800bfe2:	47d0      	blx	sl
 800bfe4:	3001      	adds	r0, #1
 800bfe6:	d0ad      	beq.n	800bf44 <_printf_i+0x160>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	079b      	lsls	r3, r3, #30
 800bfec:	d413      	bmi.n	800c016 <_printf_i+0x232>
 800bfee:	68e0      	ldr	r0, [r4, #12]
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	4298      	cmp	r0, r3
 800bff4:	bfb8      	it	lt
 800bff6:	4618      	movlt	r0, r3
 800bff8:	e7a6      	b.n	800bf48 <_printf_i+0x164>
 800bffa:	2301      	movs	r3, #1
 800bffc:	4632      	mov	r2, r6
 800bffe:	4649      	mov	r1, r9
 800c000:	4640      	mov	r0, r8
 800c002:	47d0      	blx	sl
 800c004:	3001      	adds	r0, #1
 800c006:	d09d      	beq.n	800bf44 <_printf_i+0x160>
 800c008:	3501      	adds	r5, #1
 800c00a:	68e3      	ldr	r3, [r4, #12]
 800c00c:	9903      	ldr	r1, [sp, #12]
 800c00e:	1a5b      	subs	r3, r3, r1
 800c010:	42ab      	cmp	r3, r5
 800c012:	dcf2      	bgt.n	800bffa <_printf_i+0x216>
 800c014:	e7eb      	b.n	800bfee <_printf_i+0x20a>
 800c016:	2500      	movs	r5, #0
 800c018:	f104 0619 	add.w	r6, r4, #25
 800c01c:	e7f5      	b.n	800c00a <_printf_i+0x226>
 800c01e:	bf00      	nop
 800c020:	0800da65 	.word	0x0800da65
 800c024:	0800da76 	.word	0x0800da76

0800c028 <__sflush_r>:
 800c028:	898a      	ldrh	r2, [r1, #12]
 800c02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c02e:	4605      	mov	r5, r0
 800c030:	0710      	lsls	r0, r2, #28
 800c032:	460c      	mov	r4, r1
 800c034:	d458      	bmi.n	800c0e8 <__sflush_r+0xc0>
 800c036:	684b      	ldr	r3, [r1, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	dc05      	bgt.n	800c048 <__sflush_r+0x20>
 800c03c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c03e:	2b00      	cmp	r3, #0
 800c040:	dc02      	bgt.n	800c048 <__sflush_r+0x20>
 800c042:	2000      	movs	r0, #0
 800c044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c04a:	2e00      	cmp	r6, #0
 800c04c:	d0f9      	beq.n	800c042 <__sflush_r+0x1a>
 800c04e:	2300      	movs	r3, #0
 800c050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c054:	682f      	ldr	r7, [r5, #0]
 800c056:	6a21      	ldr	r1, [r4, #32]
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	d032      	beq.n	800c0c2 <__sflush_r+0x9a>
 800c05c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	075a      	lsls	r2, r3, #29
 800c062:	d505      	bpl.n	800c070 <__sflush_r+0x48>
 800c064:	6863      	ldr	r3, [r4, #4]
 800c066:	1ac0      	subs	r0, r0, r3
 800c068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c06a:	b10b      	cbz	r3, 800c070 <__sflush_r+0x48>
 800c06c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c06e:	1ac0      	subs	r0, r0, r3
 800c070:	2300      	movs	r3, #0
 800c072:	4602      	mov	r2, r0
 800c074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c076:	6a21      	ldr	r1, [r4, #32]
 800c078:	4628      	mov	r0, r5
 800c07a:	47b0      	blx	r6
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	d106      	bne.n	800c090 <__sflush_r+0x68>
 800c082:	6829      	ldr	r1, [r5, #0]
 800c084:	291d      	cmp	r1, #29
 800c086:	d82b      	bhi.n	800c0e0 <__sflush_r+0xb8>
 800c088:	4a29      	ldr	r2, [pc, #164]	; (800c130 <__sflush_r+0x108>)
 800c08a:	410a      	asrs	r2, r1
 800c08c:	07d6      	lsls	r6, r2, #31
 800c08e:	d427      	bmi.n	800c0e0 <__sflush_r+0xb8>
 800c090:	2200      	movs	r2, #0
 800c092:	6062      	str	r2, [r4, #4]
 800c094:	04d9      	lsls	r1, r3, #19
 800c096:	6922      	ldr	r2, [r4, #16]
 800c098:	6022      	str	r2, [r4, #0]
 800c09a:	d504      	bpl.n	800c0a6 <__sflush_r+0x7e>
 800c09c:	1c42      	adds	r2, r0, #1
 800c09e:	d101      	bne.n	800c0a4 <__sflush_r+0x7c>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b903      	cbnz	r3, 800c0a6 <__sflush_r+0x7e>
 800c0a4:	6560      	str	r0, [r4, #84]	; 0x54
 800c0a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0a8:	602f      	str	r7, [r5, #0]
 800c0aa:	2900      	cmp	r1, #0
 800c0ac:	d0c9      	beq.n	800c042 <__sflush_r+0x1a>
 800c0ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0b2:	4299      	cmp	r1, r3
 800c0b4:	d002      	beq.n	800c0bc <__sflush_r+0x94>
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f7ff fbea 	bl	800b890 <_free_r>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	6360      	str	r0, [r4, #52]	; 0x34
 800c0c0:	e7c0      	b.n	800c044 <__sflush_r+0x1c>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	47b0      	blx	r6
 800c0c8:	1c41      	adds	r1, r0, #1
 800c0ca:	d1c8      	bne.n	800c05e <__sflush_r+0x36>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d0c5      	beq.n	800c05e <__sflush_r+0x36>
 800c0d2:	2b1d      	cmp	r3, #29
 800c0d4:	d001      	beq.n	800c0da <__sflush_r+0xb2>
 800c0d6:	2b16      	cmp	r3, #22
 800c0d8:	d101      	bne.n	800c0de <__sflush_r+0xb6>
 800c0da:	602f      	str	r7, [r5, #0]
 800c0dc:	e7b1      	b.n	800c042 <__sflush_r+0x1a>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e4:	81a3      	strh	r3, [r4, #12]
 800c0e6:	e7ad      	b.n	800c044 <__sflush_r+0x1c>
 800c0e8:	690f      	ldr	r7, [r1, #16]
 800c0ea:	2f00      	cmp	r7, #0
 800c0ec:	d0a9      	beq.n	800c042 <__sflush_r+0x1a>
 800c0ee:	0793      	lsls	r3, r2, #30
 800c0f0:	680e      	ldr	r6, [r1, #0]
 800c0f2:	bf08      	it	eq
 800c0f4:	694b      	ldreq	r3, [r1, #20]
 800c0f6:	600f      	str	r7, [r1, #0]
 800c0f8:	bf18      	it	ne
 800c0fa:	2300      	movne	r3, #0
 800c0fc:	eba6 0807 	sub.w	r8, r6, r7
 800c100:	608b      	str	r3, [r1, #8]
 800c102:	f1b8 0f00 	cmp.w	r8, #0
 800c106:	dd9c      	ble.n	800c042 <__sflush_r+0x1a>
 800c108:	6a21      	ldr	r1, [r4, #32]
 800c10a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c10c:	4643      	mov	r3, r8
 800c10e:	463a      	mov	r2, r7
 800c110:	4628      	mov	r0, r5
 800c112:	47b0      	blx	r6
 800c114:	2800      	cmp	r0, #0
 800c116:	dc06      	bgt.n	800c126 <__sflush_r+0xfe>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	e78e      	b.n	800c044 <__sflush_r+0x1c>
 800c126:	4407      	add	r7, r0
 800c128:	eba8 0800 	sub.w	r8, r8, r0
 800c12c:	e7e9      	b.n	800c102 <__sflush_r+0xda>
 800c12e:	bf00      	nop
 800c130:	dfbffffe 	.word	0xdfbffffe

0800c134 <_fflush_r>:
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	690b      	ldr	r3, [r1, #16]
 800c138:	4605      	mov	r5, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	b913      	cbnz	r3, 800c144 <_fflush_r+0x10>
 800c13e:	2500      	movs	r5, #0
 800c140:	4628      	mov	r0, r5
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	b118      	cbz	r0, 800c14e <_fflush_r+0x1a>
 800c146:	6a03      	ldr	r3, [r0, #32]
 800c148:	b90b      	cbnz	r3, 800c14e <_fflush_r+0x1a>
 800c14a:	f7ff fa75 	bl	800b638 <__sinit>
 800c14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d0f3      	beq.n	800c13e <_fflush_r+0xa>
 800c156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c158:	07d0      	lsls	r0, r2, #31
 800c15a:	d404      	bmi.n	800c166 <_fflush_r+0x32>
 800c15c:	0599      	lsls	r1, r3, #22
 800c15e:	d402      	bmi.n	800c166 <_fflush_r+0x32>
 800c160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c162:	f7ff fb7e 	bl	800b862 <__retarget_lock_acquire_recursive>
 800c166:	4628      	mov	r0, r5
 800c168:	4621      	mov	r1, r4
 800c16a:	f7ff ff5d 	bl	800c028 <__sflush_r>
 800c16e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c170:	07da      	lsls	r2, r3, #31
 800c172:	4605      	mov	r5, r0
 800c174:	d4e4      	bmi.n	800c140 <_fflush_r+0xc>
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	059b      	lsls	r3, r3, #22
 800c17a:	d4e1      	bmi.n	800c140 <_fflush_r+0xc>
 800c17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c17e:	f7ff fb71 	bl	800b864 <__retarget_lock_release_recursive>
 800c182:	e7dd      	b.n	800c140 <_fflush_r+0xc>

0800c184 <__swbuf_r>:
 800c184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c186:	460e      	mov	r6, r1
 800c188:	4614      	mov	r4, r2
 800c18a:	4605      	mov	r5, r0
 800c18c:	b118      	cbz	r0, 800c196 <__swbuf_r+0x12>
 800c18e:	6a03      	ldr	r3, [r0, #32]
 800c190:	b90b      	cbnz	r3, 800c196 <__swbuf_r+0x12>
 800c192:	f7ff fa51 	bl	800b638 <__sinit>
 800c196:	69a3      	ldr	r3, [r4, #24]
 800c198:	60a3      	str	r3, [r4, #8]
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	071a      	lsls	r2, r3, #28
 800c19e:	d525      	bpl.n	800c1ec <__swbuf_r+0x68>
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	b31b      	cbz	r3, 800c1ec <__swbuf_r+0x68>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	6922      	ldr	r2, [r4, #16]
 800c1a8:	1a98      	subs	r0, r3, r2
 800c1aa:	6963      	ldr	r3, [r4, #20]
 800c1ac:	b2f6      	uxtb	r6, r6
 800c1ae:	4283      	cmp	r3, r0
 800c1b0:	4637      	mov	r7, r6
 800c1b2:	dc04      	bgt.n	800c1be <__swbuf_r+0x3a>
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f7ff ffbc 	bl	800c134 <_fflush_r>
 800c1bc:	b9e0      	cbnz	r0, 800c1f8 <__swbuf_r+0x74>
 800c1be:	68a3      	ldr	r3, [r4, #8]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	60a3      	str	r3, [r4, #8]
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	6022      	str	r2, [r4, #0]
 800c1ca:	701e      	strb	r6, [r3, #0]
 800c1cc:	6962      	ldr	r2, [r4, #20]
 800c1ce:	1c43      	adds	r3, r0, #1
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d004      	beq.n	800c1de <__swbuf_r+0x5a>
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	07db      	lsls	r3, r3, #31
 800c1d8:	d506      	bpl.n	800c1e8 <__swbuf_r+0x64>
 800c1da:	2e0a      	cmp	r6, #10
 800c1dc:	d104      	bne.n	800c1e8 <__swbuf_r+0x64>
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f7ff ffa7 	bl	800c134 <_fflush_r>
 800c1e6:	b938      	cbnz	r0, 800c1f8 <__swbuf_r+0x74>
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f000 f806 	bl	800c200 <__swsetup_r>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d0d5      	beq.n	800c1a4 <__swbuf_r+0x20>
 800c1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800c1fc:	e7f4      	b.n	800c1e8 <__swbuf_r+0x64>
	...

0800c200 <__swsetup_r>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	4b2a      	ldr	r3, [pc, #168]	; (800c2ac <__swsetup_r+0xac>)
 800c204:	4605      	mov	r5, r0
 800c206:	6818      	ldr	r0, [r3, #0]
 800c208:	460c      	mov	r4, r1
 800c20a:	b118      	cbz	r0, 800c214 <__swsetup_r+0x14>
 800c20c:	6a03      	ldr	r3, [r0, #32]
 800c20e:	b90b      	cbnz	r3, 800c214 <__swsetup_r+0x14>
 800c210:	f7ff fa12 	bl	800b638 <__sinit>
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c21a:	0718      	lsls	r0, r3, #28
 800c21c:	d422      	bmi.n	800c264 <__swsetup_r+0x64>
 800c21e:	06d9      	lsls	r1, r3, #27
 800c220:	d407      	bmi.n	800c232 <__swsetup_r+0x32>
 800c222:	2309      	movs	r3, #9
 800c224:	602b      	str	r3, [r5, #0]
 800c226:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	e034      	b.n	800c29c <__swsetup_r+0x9c>
 800c232:	0758      	lsls	r0, r3, #29
 800c234:	d512      	bpl.n	800c25c <__swsetup_r+0x5c>
 800c236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c238:	b141      	cbz	r1, 800c24c <__swsetup_r+0x4c>
 800c23a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c23e:	4299      	cmp	r1, r3
 800c240:	d002      	beq.n	800c248 <__swsetup_r+0x48>
 800c242:	4628      	mov	r0, r5
 800c244:	f7ff fb24 	bl	800b890 <_free_r>
 800c248:	2300      	movs	r3, #0
 800c24a:	6363      	str	r3, [r4, #52]	; 0x34
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	2300      	movs	r3, #0
 800c256:	6063      	str	r3, [r4, #4]
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	6023      	str	r3, [r4, #0]
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	f043 0308 	orr.w	r3, r3, #8
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	6923      	ldr	r3, [r4, #16]
 800c266:	b94b      	cbnz	r3, 800c27c <__swsetup_r+0x7c>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c26e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c272:	d003      	beq.n	800c27c <__swsetup_r+0x7c>
 800c274:	4621      	mov	r1, r4
 800c276:	4628      	mov	r0, r5
 800c278:	f000 f894 	bl	800c3a4 <__smakebuf_r>
 800c27c:	89a0      	ldrh	r0, [r4, #12]
 800c27e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c282:	f010 0301 	ands.w	r3, r0, #1
 800c286:	d00a      	beq.n	800c29e <__swsetup_r+0x9e>
 800c288:	2300      	movs	r3, #0
 800c28a:	60a3      	str	r3, [r4, #8]
 800c28c:	6963      	ldr	r3, [r4, #20]
 800c28e:	425b      	negs	r3, r3
 800c290:	61a3      	str	r3, [r4, #24]
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	b943      	cbnz	r3, 800c2a8 <__swsetup_r+0xa8>
 800c296:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c29a:	d1c4      	bne.n	800c226 <__swsetup_r+0x26>
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	0781      	lsls	r1, r0, #30
 800c2a0:	bf58      	it	pl
 800c2a2:	6963      	ldrpl	r3, [r4, #20]
 800c2a4:	60a3      	str	r3, [r4, #8]
 800c2a6:	e7f4      	b.n	800c292 <__swsetup_r+0x92>
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	e7f7      	b.n	800c29c <__swsetup_r+0x9c>
 800c2ac:	20000078 	.word	0x20000078

0800c2b0 <_raise_r>:
 800c2b0:	291f      	cmp	r1, #31
 800c2b2:	b538      	push	{r3, r4, r5, lr}
 800c2b4:	4604      	mov	r4, r0
 800c2b6:	460d      	mov	r5, r1
 800c2b8:	d904      	bls.n	800c2c4 <_raise_r+0x14>
 800c2ba:	2316      	movs	r3, #22
 800c2bc:	6003      	str	r3, [r0, #0]
 800c2be:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c2c6:	b112      	cbz	r2, 800c2ce <_raise_r+0x1e>
 800c2c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2cc:	b94b      	cbnz	r3, 800c2e2 <_raise_r+0x32>
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	f000 f830 	bl	800c334 <_getpid_r>
 800c2d4:	462a      	mov	r2, r5
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	4620      	mov	r0, r4
 800c2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2de:	f000 b817 	b.w	800c310 <_kill_r>
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	d00a      	beq.n	800c2fc <_raise_r+0x4c>
 800c2e6:	1c59      	adds	r1, r3, #1
 800c2e8:	d103      	bne.n	800c2f2 <_raise_r+0x42>
 800c2ea:	2316      	movs	r3, #22
 800c2ec:	6003      	str	r3, [r0, #0]
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	e7e7      	b.n	800c2c2 <_raise_r+0x12>
 800c2f2:	2400      	movs	r4, #0
 800c2f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	4798      	blx	r3
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e7e0      	b.n	800c2c2 <_raise_r+0x12>

0800c300 <raise>:
 800c300:	4b02      	ldr	r3, [pc, #8]	; (800c30c <raise+0xc>)
 800c302:	4601      	mov	r1, r0
 800c304:	6818      	ldr	r0, [r3, #0]
 800c306:	f7ff bfd3 	b.w	800c2b0 <_raise_r>
 800c30a:	bf00      	nop
 800c30c:	20000078 	.word	0x20000078

0800c310 <_kill_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	; (800c330 <_kill_r+0x20>)
 800c314:	2300      	movs	r3, #0
 800c316:	4604      	mov	r4, r0
 800c318:	4608      	mov	r0, r1
 800c31a:	4611      	mov	r1, r2
 800c31c:	602b      	str	r3, [r5, #0]
 800c31e:	f7f6 f82e 	bl	800237e <_kill>
 800c322:	1c43      	adds	r3, r0, #1
 800c324:	d102      	bne.n	800c32c <_kill_r+0x1c>
 800c326:	682b      	ldr	r3, [r5, #0]
 800c328:	b103      	cbz	r3, 800c32c <_kill_r+0x1c>
 800c32a:	6023      	str	r3, [r4, #0]
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	bf00      	nop
 800c330:	2002b228 	.word	0x2002b228

0800c334 <_getpid_r>:
 800c334:	f7f6 b81b 	b.w	800236e <_getpid>

0800c338 <_sbrk_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d06      	ldr	r5, [pc, #24]	; (800c354 <_sbrk_r+0x1c>)
 800c33c:	2300      	movs	r3, #0
 800c33e:	4604      	mov	r4, r0
 800c340:	4608      	mov	r0, r1
 800c342:	602b      	str	r3, [r5, #0]
 800c344:	f7f6 f8a2 	bl	800248c <_sbrk>
 800c348:	1c43      	adds	r3, r0, #1
 800c34a:	d102      	bne.n	800c352 <_sbrk_r+0x1a>
 800c34c:	682b      	ldr	r3, [r5, #0]
 800c34e:	b103      	cbz	r3, 800c352 <_sbrk_r+0x1a>
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	bd38      	pop	{r3, r4, r5, pc}
 800c354:	2002b228 	.word	0x2002b228

0800c358 <__swhatbuf_r>:
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	460c      	mov	r4, r1
 800c35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c360:	2900      	cmp	r1, #0
 800c362:	b096      	sub	sp, #88	; 0x58
 800c364:	4615      	mov	r5, r2
 800c366:	461e      	mov	r6, r3
 800c368:	da0d      	bge.n	800c386 <__swhatbuf_r+0x2e>
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c370:	f04f 0100 	mov.w	r1, #0
 800c374:	bf0c      	ite	eq
 800c376:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c37a:	2340      	movne	r3, #64	; 0x40
 800c37c:	2000      	movs	r0, #0
 800c37e:	6031      	str	r1, [r6, #0]
 800c380:	602b      	str	r3, [r5, #0]
 800c382:	b016      	add	sp, #88	; 0x58
 800c384:	bd70      	pop	{r4, r5, r6, pc}
 800c386:	466a      	mov	r2, sp
 800c388:	f000 f848 	bl	800c41c <_fstat_r>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	dbec      	blt.n	800c36a <__swhatbuf_r+0x12>
 800c390:	9901      	ldr	r1, [sp, #4]
 800c392:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c396:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c39a:	4259      	negs	r1, r3
 800c39c:	4159      	adcs	r1, r3
 800c39e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3a2:	e7eb      	b.n	800c37c <__swhatbuf_r+0x24>

0800c3a4 <__smakebuf_r>:
 800c3a4:	898b      	ldrh	r3, [r1, #12]
 800c3a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3a8:	079d      	lsls	r5, r3, #30
 800c3aa:	4606      	mov	r6, r0
 800c3ac:	460c      	mov	r4, r1
 800c3ae:	d507      	bpl.n	800c3c0 <__smakebuf_r+0x1c>
 800c3b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	6123      	str	r3, [r4, #16]
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	6163      	str	r3, [r4, #20]
 800c3bc:	b002      	add	sp, #8
 800c3be:	bd70      	pop	{r4, r5, r6, pc}
 800c3c0:	ab01      	add	r3, sp, #4
 800c3c2:	466a      	mov	r2, sp
 800c3c4:	f7ff ffc8 	bl	800c358 <__swhatbuf_r>
 800c3c8:	9900      	ldr	r1, [sp, #0]
 800c3ca:	4605      	mov	r5, r0
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7ff facb 	bl	800b968 <_malloc_r>
 800c3d2:	b948      	cbnz	r0, 800c3e8 <__smakebuf_r+0x44>
 800c3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3d8:	059a      	lsls	r2, r3, #22
 800c3da:	d4ef      	bmi.n	800c3bc <__smakebuf_r+0x18>
 800c3dc:	f023 0303 	bic.w	r3, r3, #3
 800c3e0:	f043 0302 	orr.w	r3, r3, #2
 800c3e4:	81a3      	strh	r3, [r4, #12]
 800c3e6:	e7e3      	b.n	800c3b0 <__smakebuf_r+0xc>
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	6020      	str	r0, [r4, #0]
 800c3ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3f0:	81a3      	strh	r3, [r4, #12]
 800c3f2:	9b00      	ldr	r3, [sp, #0]
 800c3f4:	6163      	str	r3, [r4, #20]
 800c3f6:	9b01      	ldr	r3, [sp, #4]
 800c3f8:	6120      	str	r0, [r4, #16]
 800c3fa:	b15b      	cbz	r3, 800c414 <__smakebuf_r+0x70>
 800c3fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c400:	4630      	mov	r0, r6
 800c402:	f000 f81d 	bl	800c440 <_isatty_r>
 800c406:	b128      	cbz	r0, 800c414 <__smakebuf_r+0x70>
 800c408:	89a3      	ldrh	r3, [r4, #12]
 800c40a:	f023 0303 	bic.w	r3, r3, #3
 800c40e:	f043 0301 	orr.w	r3, r3, #1
 800c412:	81a3      	strh	r3, [r4, #12]
 800c414:	89a3      	ldrh	r3, [r4, #12]
 800c416:	431d      	orrs	r5, r3
 800c418:	81a5      	strh	r5, [r4, #12]
 800c41a:	e7cf      	b.n	800c3bc <__smakebuf_r+0x18>

0800c41c <_fstat_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d07      	ldr	r5, [pc, #28]	; (800c43c <_fstat_r+0x20>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	4611      	mov	r1, r2
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	f7f6 f807 	bl	800243c <_fstat>
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	d102      	bne.n	800c438 <_fstat_r+0x1c>
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	b103      	cbz	r3, 800c438 <_fstat_r+0x1c>
 800c436:	6023      	str	r3, [r4, #0]
 800c438:	bd38      	pop	{r3, r4, r5, pc}
 800c43a:	bf00      	nop
 800c43c:	2002b228 	.word	0x2002b228

0800c440 <_isatty_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d06      	ldr	r5, [pc, #24]	; (800c45c <_isatty_r+0x1c>)
 800c444:	2300      	movs	r3, #0
 800c446:	4604      	mov	r4, r0
 800c448:	4608      	mov	r0, r1
 800c44a:	602b      	str	r3, [r5, #0]
 800c44c:	f7f6 f806 	bl	800245c <_isatty>
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d102      	bne.n	800c45a <_isatty_r+0x1a>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	b103      	cbz	r3, 800c45a <_isatty_r+0x1a>
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	2002b228 	.word	0x2002b228

0800c460 <_init>:
 800c460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c462:	bf00      	nop
 800c464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c466:	bc08      	pop	{r3}
 800c468:	469e      	mov	lr, r3
 800c46a:	4770      	bx	lr

0800c46c <_fini>:
 800c46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c46e:	bf00      	nop
 800c470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c472:	bc08      	pop	{r3}
 800c474:	469e      	mov	lr, r3
 800c476:	4770      	bx	lr
