
McDermott_Frank_RTOS_Lab7_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d4  0800d2a0  0800d2a0  0001d2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec74  0800ec74  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec74  0800ec74  0001ec74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec7c  0800ec7c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec7c  0800ec7c  0001ec7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec80  0800ec80  0001ec80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800ec84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0002b36c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2002b3e8  2002b3e8  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000278bf  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005388  00000000  00000000  000479ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002208  00000000  00000000  0004cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a2e  00000000  00000000  0004ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007b69  00000000  00000000  0005096e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002708b  00000000  00000000  000584d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fc250  00000000  00000000  0007f562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000995c  00000000  00000000  0017b7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ee  00000000  00000000  00185110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d288 	.word	0x0800d288

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800d288 	.word	0x0800d288

080001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001f2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001f6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000280 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001fa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001fe:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000202:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000204:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000206:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000208:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800020a:	d332      	bcc.n	8000272 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800020c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800020e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000210:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000212:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000214:	d314      	bcc.n	8000240 <_CheckCase2>

08000216 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000216:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000218:	19d0      	adds	r0, r2, r7
 800021a:	bf00      	nop

0800021c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000220:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000224:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000226:	d005      	beq.n	8000234 <_CSDone>
        LDRB     R3,[R1], #+1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800022c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000230:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000232:	d1f3      	bne.n	800021c <_LoopCopyStraight>

08000234 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000234:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000238:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800023a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800023c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800023e:	4770      	bx	lr

08000240 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000240:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000242:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000244:	d319      	bcc.n	800027a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000246:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000248:	1b12      	subs	r2, r2, r4

0800024a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800024e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000252:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000256:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000258:	d005      	beq.n	8000266 <_No2ChunkNeeded>

0800025a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000262:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyAfterWrapAround>

08000266 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000266:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800026a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800026c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000270:	4770      	bx	lr

08000272 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000272:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000274:	3801      	subs	r0, #1
        CMP      R0,R2
 8000276:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000278:	d2cd      	bcs.n	8000216 <_Case4>

0800027a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800027a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800027c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800027e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000280:	2002a820 	.word	0x2002a820
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b970 	b.w	8000628 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	460d      	mov	r5, r1
 8000368:	4604      	mov	r4, r0
 800036a:	460f      	mov	r7, r1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d14a      	bne.n	8000406 <__udivmoddi4+0xa6>
 8000370:	428a      	cmp	r2, r1
 8000372:	4694      	mov	ip, r2
 8000374:	d965      	bls.n	8000442 <__udivmoddi4+0xe2>
 8000376:	fab2 f382 	clz	r3, r2
 800037a:	b143      	cbz	r3, 800038e <__udivmoddi4+0x2e>
 800037c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000380:	f1c3 0220 	rsb	r2, r3, #32
 8000384:	409f      	lsls	r7, r3
 8000386:	fa20 f202 	lsr.w	r2, r0, r2
 800038a:	4317      	orrs	r7, r2
 800038c:	409c      	lsls	r4, r3
 800038e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000392:	fa1f f58c 	uxth.w	r5, ip
 8000396:	fbb7 f1fe 	udiv	r1, r7, lr
 800039a:	0c22      	lsrs	r2, r4, #16
 800039c:	fb0e 7711 	mls	r7, lr, r1, r7
 80003a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003a4:	fb01 f005 	mul.w	r0, r1, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x62>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003b4:	f080 811c 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003b8:	4290      	cmp	r0, r2
 80003ba:	f240 8119 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003be:	3902      	subs	r1, #2
 80003c0:	4462      	add	r2, ip
 80003c2:	1a12      	subs	r2, r2, r0
 80003c4:	b2a4      	uxth	r4, r4
 80003c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d2:	fb00 f505 	mul.w	r5, r0, r5
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	d90a      	bls.n	80003f0 <__udivmoddi4+0x90>
 80003da:	eb1c 0404 	adds.w	r4, ip, r4
 80003de:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e2:	f080 8107 	bcs.w	80005f4 <__udivmoddi4+0x294>
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	f240 8104 	bls.w	80005f4 <__udivmoddi4+0x294>
 80003ec:	4464      	add	r4, ip
 80003ee:	3802      	subs	r0, #2
 80003f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	2100      	movs	r1, #0
 80003f8:	b11e      	cbz	r6, 8000402 <__udivmoddi4+0xa2>
 80003fa:	40dc      	lsrs	r4, r3
 80003fc:	2300      	movs	r3, #0
 80003fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0xbc>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80ed 	beq.w	80005ea <__udivmoddi4+0x28a>
 8000410:	2100      	movs	r1, #0
 8000412:	e9c6 0500 	strd	r0, r5, [r6]
 8000416:	4608      	mov	r0, r1
 8000418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041c:	fab3 f183 	clz	r1, r3
 8000420:	2900      	cmp	r1, #0
 8000422:	d149      	bne.n	80004b8 <__udivmoddi4+0x158>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d302      	bcc.n	800042e <__udivmoddi4+0xce>
 8000428:	4282      	cmp	r2, r0
 800042a:	f200 80f8 	bhi.w	800061e <__udivmoddi4+0x2be>
 800042e:	1a84      	subs	r4, r0, r2
 8000430:	eb65 0203 	sbc.w	r2, r5, r3
 8000434:	2001      	movs	r0, #1
 8000436:	4617      	mov	r7, r2
 8000438:	2e00      	cmp	r6, #0
 800043a:	d0e2      	beq.n	8000402 <__udivmoddi4+0xa2>
 800043c:	e9c6 4700 	strd	r4, r7, [r6]
 8000440:	e7df      	b.n	8000402 <__udivmoddi4+0xa2>
 8000442:	b902      	cbnz	r2, 8000446 <__udivmoddi4+0xe6>
 8000444:	deff      	udf	#255	; 0xff
 8000446:	fab2 f382 	clz	r3, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	f040 8090 	bne.w	8000570 <__udivmoddi4+0x210>
 8000450:	1a8a      	subs	r2, r1, r2
 8000452:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000456:	fa1f fe8c 	uxth.w	lr, ip
 800045a:	2101      	movs	r1, #1
 800045c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000460:	fb07 2015 	mls	r0, r7, r5, r2
 8000464:	0c22      	lsrs	r2, r4, #16
 8000466:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800046a:	fb0e f005 	mul.w	r0, lr, r5
 800046e:	4290      	cmp	r0, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x124>
 8000472:	eb1c 0202 	adds.w	r2, ip, r2
 8000476:	f105 38ff 	add.w	r8, r5, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4290      	cmp	r0, r2
 800047e:	f200 80cb 	bhi.w	8000618 <__udivmoddi4+0x2b8>
 8000482:	4645      	mov	r5, r8
 8000484:	1a12      	subs	r2, r2, r0
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb2 f0f7 	udiv	r0, r2, r7
 800048c:	fb07 2210 	mls	r2, r7, r0, r2
 8000490:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000494:	fb0e fe00 	mul.w	lr, lr, r0
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x14e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x14c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f200 80bb 	bhi.w	8000622 <__udivmoddi4+0x2c2>
 80004ac:	4610      	mov	r0, r2
 80004ae:	eba4 040e 	sub.w	r4, r4, lr
 80004b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004b6:	e79f      	b.n	80003f8 <__udivmoddi4+0x98>
 80004b8:	f1c1 0720 	rsb	r7, r1, #32
 80004bc:	408b      	lsls	r3, r1
 80004be:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ca:	fa20 f307 	lsr.w	r3, r0, r7
 80004ce:	40fd      	lsrs	r5, r7
 80004d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004d4:	4323      	orrs	r3, r4
 80004d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004da:	fa1f fe8c 	uxth.w	lr, ip
 80004de:	fb09 5518 	mls	r5, r9, r8, r5
 80004e2:	0c1c      	lsrs	r4, r3, #16
 80004e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004e8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ec:	42a5      	cmp	r5, r4
 80004ee:	fa02 f201 	lsl.w	r2, r2, r1
 80004f2:	fa00 f001 	lsl.w	r0, r0, r1
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1c 0404 	adds.w	r4, ip, r4
 80004fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000500:	f080 8088 	bcs.w	8000614 <__udivmoddi4+0x2b4>
 8000504:	42a5      	cmp	r5, r4
 8000506:	f240 8085 	bls.w	8000614 <__udivmoddi4+0x2b4>
 800050a:	f1a8 0802 	sub.w	r8, r8, #2
 800050e:	4464      	add	r4, ip
 8000510:	1b64      	subs	r4, r4, r5
 8000512:	b29d      	uxth	r5, r3
 8000514:	fbb4 f3f9 	udiv	r3, r4, r9
 8000518:	fb09 4413 	mls	r4, r9, r3, r4
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	fb03 fe0e 	mul.w	lr, r3, lr
 8000524:	45a6      	cmp	lr, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1c 0404 	adds.w	r4, ip, r4
 800052c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000530:	d26c      	bcs.n	800060c <__udivmoddi4+0x2ac>
 8000532:	45a6      	cmp	lr, r4
 8000534:	d96a      	bls.n	800060c <__udivmoddi4+0x2ac>
 8000536:	3b02      	subs	r3, #2
 8000538:	4464      	add	r4, ip
 800053a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800053e:	fba3 9502 	umull	r9, r5, r3, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	42ac      	cmp	r4, r5
 8000548:	46c8      	mov	r8, r9
 800054a:	46ae      	mov	lr, r5
 800054c:	d356      	bcc.n	80005fc <__udivmoddi4+0x29c>
 800054e:	d053      	beq.n	80005f8 <__udivmoddi4+0x298>
 8000550:	b156      	cbz	r6, 8000568 <__udivmoddi4+0x208>
 8000552:	ebb0 0208 	subs.w	r2, r0, r8
 8000556:	eb64 040e 	sbc.w	r4, r4, lr
 800055a:	fa04 f707 	lsl.w	r7, r4, r7
 800055e:	40ca      	lsrs	r2, r1
 8000560:	40cc      	lsrs	r4, r1
 8000562:	4317      	orrs	r7, r2
 8000564:	e9c6 7400 	strd	r7, r4, [r6]
 8000568:	4618      	mov	r0, r3
 800056a:	2100      	movs	r1, #0
 800056c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000570:	f1c3 0120 	rsb	r1, r3, #32
 8000574:	fa02 fc03 	lsl.w	ip, r2, r3
 8000578:	fa20 f201 	lsr.w	r2, r0, r1
 800057c:	fa25 f101 	lsr.w	r1, r5, r1
 8000580:	409d      	lsls	r5, r3
 8000582:	432a      	orrs	r2, r5
 8000584:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000588:	fa1f fe8c 	uxth.w	lr, ip
 800058c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000590:	fb07 1510 	mls	r5, r7, r0, r1
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800059a:	fb00 f50e 	mul.w	r5, r0, lr
 800059e:	428d      	cmp	r5, r1
 80005a0:	fa04 f403 	lsl.w	r4, r4, r3
 80005a4:	d908      	bls.n	80005b8 <__udivmoddi4+0x258>
 80005a6:	eb1c 0101 	adds.w	r1, ip, r1
 80005aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ae:	d22f      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005b0:	428d      	cmp	r5, r1
 80005b2:	d92d      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005b4:	3802      	subs	r0, #2
 80005b6:	4461      	add	r1, ip
 80005b8:	1b49      	subs	r1, r1, r5
 80005ba:	b292      	uxth	r2, r2
 80005bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005c0:	fb07 1115 	mls	r1, r7, r5, r1
 80005c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005c8:	fb05 f10e 	mul.w	r1, r5, lr
 80005cc:	4291      	cmp	r1, r2
 80005ce:	d908      	bls.n	80005e2 <__udivmoddi4+0x282>
 80005d0:	eb1c 0202 	adds.w	r2, ip, r2
 80005d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005d8:	d216      	bcs.n	8000608 <__udivmoddi4+0x2a8>
 80005da:	4291      	cmp	r1, r2
 80005dc:	d914      	bls.n	8000608 <__udivmoddi4+0x2a8>
 80005de:	3d02      	subs	r5, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a52      	subs	r2, r2, r1
 80005e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005e8:	e738      	b.n	800045c <__udivmoddi4+0xfc>
 80005ea:	4631      	mov	r1, r6
 80005ec:	4630      	mov	r0, r6
 80005ee:	e708      	b.n	8000402 <__udivmoddi4+0xa2>
 80005f0:	4639      	mov	r1, r7
 80005f2:	e6e6      	b.n	80003c2 <__udivmoddi4+0x62>
 80005f4:	4610      	mov	r0, r2
 80005f6:	e6fb      	b.n	80003f0 <__udivmoddi4+0x90>
 80005f8:	4548      	cmp	r0, r9
 80005fa:	d2a9      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000600:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000604:	3b01      	subs	r3, #1
 8000606:	e7a3      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000608:	4645      	mov	r5, r8
 800060a:	e7ea      	b.n	80005e2 <__udivmoddi4+0x282>
 800060c:	462b      	mov	r3, r5
 800060e:	e794      	b.n	800053a <__udivmoddi4+0x1da>
 8000610:	4640      	mov	r0, r8
 8000612:	e7d1      	b.n	80005b8 <__udivmoddi4+0x258>
 8000614:	46d0      	mov	r8, sl
 8000616:	e77b      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000618:	3d02      	subs	r5, #2
 800061a:	4462      	add	r2, ip
 800061c:	e732      	b.n	8000484 <__udivmoddi4+0x124>
 800061e:	4608      	mov	r0, r1
 8000620:	e70a      	b.n	8000438 <__udivmoddi4+0xd8>
 8000622:	4464      	add	r4, ip
 8000624:	3802      	subs	r0, #2
 8000626:	e742      	b.n	80004ae <__udivmoddi4+0x14e>

08000628 <__aeabi_idiv0>:
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop

0800062c <Gyro_Init>:

/**
  * @brief Initialise the gyro for Lab2
  * @retval None
  */
void Gyro_Init(){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	Gyro_Power_On();
 8000630:	f000 f80a 	bl	8000648 <Gyro_Power_On>
	osDelay(100);
 8000634:	2064      	movs	r0, #100	; 0x64
 8000636:	f005 fe39 	bl	80062ac <osDelay>
	Gyro_Config_Regs();
 800063a:	f000 f8b7 	bl	80007ac <Gyro_Config_Regs>
	Gyro_Reboot();
 800063e:	f000 f847 	bl	80006d0 <Gyro_Reboot>


}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Gyro_Power_On>:
/**
  * @brief Power on the Gyro
  * @retval None
  */

void Gyro_Power_On(){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	//get data from register
	uint8_t cmd = (GYRO_READ | CTRL_REG1);
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 8000656:	f000 f921 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800065a:	bf00      	nop
 800065c:	2102      	movs	r1, #2
 800065e:	481a      	ldr	r0, [pc, #104]	; (80006c8 <Gyro_Power_On+0x80>)
 8000660:	f003 fa70 	bl	8003b44 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f8      	bne.n	800065c <Gyro_Power_On+0x14>
	Gyro_Transmit_Data(&cmd);
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f947 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 8000672:	1dbb      	adds	r3, r7, #6
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f929 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800067a:	f000 f91b 	bl	80008b4 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG1);
 800067e:	2320      	movs	r3, #32
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 3));
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	b2db      	uxtb	r3, r3
 800068a:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 800068c:	f000 f906 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000690:	bf00      	nop
 8000692:	2102      	movs	r1, #2
 8000694:	480c      	ldr	r0, [pc, #48]	; (80006c8 <Gyro_Power_On+0x80>)
 8000696:	f003 fa55 	bl	8003b44 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1f8      	bne.n	8000692 <Gyro_Power_On+0x4a>
	Gyro_Transmit_Data(&cmd);
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f92c 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 80006a8:	1d7b      	adds	r3, r7, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f928 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80006b0:	f000 f900 	bl	80008b4 <Gyro_Slave_Disable>


	if(HAL_Status != HAL_OK)
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <Gyro_Power_On+0x84>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d000      	beq.n	80006be <Gyro_Power_On+0x76>
	{
		while(1);
 80006bc:	e7fe      	b.n	80006bc <Gyro_Power_On+0x74>
	}
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40020800 	.word	0x40020800
 80006cc:	20000098 	.word	0x20000098

080006d0 <Gyro_Reboot>:
/**
  * @brief Perform a Reboot on the Gyro
  * @retval None
  */

void Gyro_Reboot(){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t cmd = (GYRO_READ | CTRL_REG5);
 80006d6:	23a4      	movs	r3, #164	; 0xa4
 80006d8:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_buff = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80006de:	f000 f8dd 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80006e2:	bf00      	nop
 80006e4:	2102      	movs	r1, #2
 80006e6:	4817      	ldr	r0, [pc, #92]	; (8000744 <Gyro_Reboot+0x74>)
 80006e8:	f003 fa2c 	bl	8003b44 <HAL_GPIO_ReadPin>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1f8      	bne.n	80006e4 <Gyro_Reboot+0x14>
	Gyro_Transmit_Data(&cmd);
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f903 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rx_buff);
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f8e5 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 8000702:	f000 f8d7 	bl	80008b4 <Gyro_Slave_Disable>
	cmd = (GYRO_WRITE | CTRL_REG5);
 8000706:	2324      	movs	r3, #36	; 0x24
 8000708:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff = (rx_buff | (1 << 7));
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000710:	b2db      	uxtb	r3, r3
 8000712:	717b      	strb	r3, [r7, #5]
	Gyro_Slave_Enable();
 8000714:	f000 f8c2 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000718:	bf00      	nop
 800071a:	2102      	movs	r1, #2
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <Gyro_Reboot+0x74>)
 800071e:	f003 fa11 	bl	8003b44 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f8      	bne.n	800071a <Gyro_Reboot+0x4a>
	Gyro_Transmit_Data(&cmd);
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f8e8 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&tx_buff);
 8000730:	1d7b      	adds	r3, r7, #5
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f8e4 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 8000738:	f000 f8bc 	bl	80008b4 <Gyro_Slave_Disable>

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40020800 	.word	0x40020800

08000748 <Gyro_Get_Velocity>:
/**
  * @brief Sample the Velocity Rate of the Gyro and return
  * @retval 16 bit integer representing the velocity of the gyro
  */

int16_t Gyro_Get_Velocity(){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	int16_t yval = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	80fb      	strh	r3, [r7, #6]

	uint8_t cmd = (GYRO_READ| MS_BIT | OUT_Y_L);
 8000752:	23ea      	movs	r3, #234	; 0xea
 8000754:	717b      	strb	r3, [r7, #5]
	uint8_t rxbuff_yl = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	713b      	strb	r3, [r7, #4]
	uint8_t rxbuff_yh = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	70fb      	strb	r3, [r7, #3]

	Gyro_Slave_Enable();
 800075e:	f000 f89d 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 8000762:	bf00      	nop
 8000764:	2102      	movs	r1, #2
 8000766:	4810      	ldr	r0, [pc, #64]	; (80007a8 <Gyro_Get_Velocity+0x60>)
 8000768:	f003 f9ec 	bl	8003b44 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1f8      	bne.n	8000764 <Gyro_Get_Velocity+0x1c>
	Gyro_Transmit_Data(&cmd);
 8000772:	1d7b      	adds	r3, r7, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f8c3 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Receive_Data(&rxbuff_yl);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4618      	mov	r0, r3
 800077e:	f000 f8a5 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Receive_Data(&rxbuff_yh);
 8000782:	1cfb      	adds	r3, r7, #3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f8a1 	bl	80008cc <Gyro_Receive_Data>
	Gyro_Slave_Disable();
 800078a:	f000 f893 	bl	80008b4 <Gyro_Slave_Disable>


	yval = (int16_t) ((rxbuff_yh << 8) | rxbuff_yl);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	793b      	ldrb	r3, [r7, #4]
 8000796:	b21b      	sxth	r3, r3
 8000798:	4313      	orrs	r3, r2
 800079a:	80fb      	strh	r3, [r7, #6]

	return yval;
 800079c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]



}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40020800 	.word	0x40020800

080007ac <Gyro_Config_Regs>:

/**
  * @brief Configure the registers for the gyro
  * @retval None
  */
void Gyro_Config_Regs(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

	//CR1
	uint8_t addr_cmd = (GYRO_WRITE | CTRL_REG1);
 80007b2:	2320      	movs	r3, #32
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_cmd = 0x1A; // 0001 1010 - Gyro Data rate is 100hz, gyro enabled on y-axis only
 80007b6:	231a      	movs	r3, #26
 80007b8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007ba:	f000 f86f 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007be:	bf00      	nop
 80007c0:	2102      	movs	r1, #2
 80007c2:	482e      	ldr	r0, [pc, #184]	; (800087c <Gyro_Config_Regs+0xd0>)
 80007c4:	f003 f9be 	bl	8003b44 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d1f8      	bne.n	80007c0 <Gyro_Config_Regs+0x14>
	Gyro_Transmit_Data(&addr_cmd);
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f895 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 80007d6:	1dbb      	adds	r3, r7, #6
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f891 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 80007de:	f000 f869 	bl	80008b4 <Gyro_Slave_Disable>




	//CR4
	addr_cmd = (GYRO_WRITE | CTRL_REG4);
 80007e2:	2323      	movs	r3, #35	; 0x23
 80007e4:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x10; //0001 0000 - Full scale rate of 500dps
 80007e6:	2310      	movs	r3, #16
 80007e8:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 80007ea:	f000 f857 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 80007ee:	bf00      	nop
 80007f0:	2102      	movs	r1, #2
 80007f2:	4822      	ldr	r0, [pc, #136]	; (800087c <Gyro_Config_Regs+0xd0>)
 80007f4:	f003 f9a6 	bl	8003b44 <HAL_GPIO_ReadPin>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f8      	bne.n	80007f0 <Gyro_Config_Regs+0x44>
	Gyro_Transmit_Data(&addr_cmd);
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f87d 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000806:	1dbb      	adds	r3, r7, #6
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f879 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800080e:	f000 f851 	bl	80008b4 <Gyro_Slave_Disable>


	//CR5
	addr_cmd = (GYRO_WRITE | CTRL_REG5);
 8000812:	2324      	movs	r3, #36	; 0x24
 8000814:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0xC0; //1100 0000 - Reboot initially and enable FIFO
 8000816:	23c0      	movs	r3, #192	; 0xc0
 8000818:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800081a:	f000 f83f 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800081e:	bf00      	nop
 8000820:	2102      	movs	r1, #2
 8000822:	4816      	ldr	r0, [pc, #88]	; (800087c <Gyro_Config_Regs+0xd0>)
 8000824:	f003 f98e 	bl	8003b44 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1f8      	bne.n	8000820 <Gyro_Config_Regs+0x74>
	Gyro_Transmit_Data(&addr_cmd);
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	4618      	mov	r0, r3
 8000832:	f000 f865 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f861 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800083e:	f000 f839 	bl	80008b4 <Gyro_Slave_Disable>


	//FIFO_CTRL
	addr_cmd = (GYRO_WRITE | FIFO_CTRL_REG);
 8000842:	232e      	movs	r3, #46	; 0x2e
 8000844:	71fb      	strb	r3, [r7, #7]
	reg_cmd = 0x00; //0100 0000 FIFO in stream mode
 8000846:	2300      	movs	r3, #0
 8000848:	71bb      	strb	r3, [r7, #6]
	Gyro_Slave_Enable();
 800084a:	f000 f827 	bl	800089c <Gyro_Slave_Enable>
	while(HAL_GPIO_ReadPin(CS_PORT, CS_PIN) != GPIO_PIN_RESET);
 800084e:	bf00      	nop
 8000850:	2102      	movs	r1, #2
 8000852:	480a      	ldr	r0, [pc, #40]	; (800087c <Gyro_Config_Regs+0xd0>)
 8000854:	f003 f976 	bl	8003b44 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1f8      	bne.n	8000850 <Gyro_Config_Regs+0xa4>
	Gyro_Transmit_Data(&addr_cmd);
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f84d 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Transmit_Data(&reg_cmd);
 8000866:	1dbb      	adds	r3, r7, #6
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f849 	bl	8000900 <Gyro_Transmit_Data>
	Gyro_Slave_Disable();
 800086e:	f000 f821 	bl	80008b4 <Gyro_Slave_Disable>




}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40020800 	.word	0x40020800

08000880 <Gyro_HAL_Check>:

/**
  * @brief Check the status of the HAL
  * @retval None
  */
void Gyro_HAL_Check(){
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	if(HAL_Status != HAL_OK){
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <Gyro_HAL_Check+0x18>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d000      	beq.n	800088e <Gyro_HAL_Check+0xe>
		while(1);
 800088c:	e7fe      	b.n	800088c <Gyro_HAL_Check+0xc>
	}
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	20000098 	.word	0x20000098

0800089c <Gyro_Slave_Enable>:

/**
  * @brief Enable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Enable(){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2102      	movs	r1, #2
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <Gyro_Slave_Enable+0x14>)
 80008a6:	f003 f965 	bl	8003b74 <HAL_GPIO_WritePin>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40020800 	.word	0x40020800

080008b4 <Gyro_Slave_Disable>:

/**
  * @brief Disable the Chip Select pin
  * @retval None
  */
void Gyro_Slave_Disable(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT,CS_PIN,GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2102      	movs	r1, #2
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <Gyro_Slave_Disable+0x14>)
 80008be:	f003 f959 	bl	8003b74 <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40020800 	.word	0x40020800

080008cc <Gyro_Receive_Data>:
/**
  * @brief Recieve one bit of data from the Gyro
  * @param rx_buff- pointer to a data buffer, recieved data will appear here
  * @retval None
  */
void Gyro_Receive_Data(uint8_t *rx_buff){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Receive(&hspi5, rx_buff, 1, TIMEOUT);
 80008d4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80008d8:	2201      	movs	r2, #1
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <Gyro_Receive_Data+0x2c>)
 80008de:	f004 fe2e 	bl	800553e <HAL_SPI_Receive>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <Gyro_Receive_Data+0x30>)
 80008e8:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 80008ea:	f7ff ffc9 	bl	8000880 <Gyro_HAL_Check>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20025d54 	.word	0x20025d54
 80008fc:	20000098 	.word	0x20000098

08000900 <Gyro_Transmit_Data>:
/**
  * @brief Send one bit of data to the Gyro
  * @param tx_buff- pointer to a data buffer.
  * @retval None
  */
void Gyro_Transmit_Data(uint8_t *tx_buff){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	HAL_Status = HAL_SPI_Transmit(&hspi5,tx_buff, 1, TIMEOUT);
 8000908:	f644 6320 	movw	r3, #20000	; 0x4e20
 800090c:	2201      	movs	r2, #1
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <Gyro_Transmit_Data+0x2c>)
 8000912:	f004 fcd8 	bl	80052c6 <HAL_SPI_Transmit>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <Gyro_Transmit_Data+0x30>)
 800091c:	701a      	strb	r2, [r3, #0]
	Gyro_HAL_Check();
 800091e:	f7ff ffaf 	bl	8000880 <Gyro_HAL_Check>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20025d54 	.word	0x20025d54
 8000930:	20000098 	.word	0x20000098

08000934 <LCD_GPIO_Init>:
static void SPI_Error(void);

/* Provided Functions and API  - MOTIFY ONLY WITH EXTREME CAUTION!!! */

void LCD_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	4b5a      	ldr	r3, [pc, #360]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a59      	ldr	r2, [pc, #356]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000944:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	4b53      	ldr	r3, [pc, #332]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b50      	ldr	r3, [pc, #320]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a4b      	ldr	r2, [pc, #300]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b49      	ldr	r3, [pc, #292]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a44      	ldr	r2, [pc, #272]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b3e      	ldr	r3, [pc, #248]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a3d      	ldr	r2, [pc, #244]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b3b      	ldr	r3, [pc, #236]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <LCD_GPIO_Init+0x174>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80009fe:	f641 0358 	movw	r3, #6232	; 0x1858
 8000a02:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000a10:	230e      	movs	r3, #14
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4824      	ldr	r0, [pc, #144]	; (8000aac <LCD_GPIO_Init+0x178>)
 8000a1c:	f002 fdda 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000a20:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a24:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <LCD_GPIO_Init+0x17c>)
 8000a2e:	f002 fdd1 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000a32:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481d      	ldr	r0, [pc, #116]	; (8000ab4 <LCD_GPIO_Init+0x180>)
 8000a40:	f002 fdc8 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000a44:	2348      	movs	r3, #72	; 0x48
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <LCD_GPIO_Init+0x184>)
 8000a50:	f002 fdc0 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <LCD_GPIO_Init+0x188>)
 8000a62:	f002 fdb7 	bl	80035d4 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000a66:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000a6a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <LCD_GPIO_Init+0x18c>)
 8000a74:	f002 fdae 	bl	80035d4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000a7c:	2309      	movs	r3, #9
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <LCD_GPIO_Init+0x17c>)
 8000a88:	f002 fda4 	bl	80035d4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000a8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <LCD_GPIO_Init+0x18c>)
 8000a9a:	f002 fd9b 	bl	80035d4 <HAL_GPIO_Init>
}
 8000a9e:	bf00      	nop
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40021400 	.word	0x40021400
 8000ac0:	40021800 	.word	0x40021800

08000ac4 <LTCD__Init>:


void LTCD__Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  	hltdc.Instance = LTDC;
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <LTCD__Init+0xb0>)
 8000aca:	4a2b      	ldr	r2, [pc, #172]	; (8000b78 <LTCD__Init+0xb4>)
 8000acc:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <LTCD__Init+0xb0>)
 8000ad0:	2209      	movs	r2, #9
 8000ad2:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <LTCD__Init+0xb0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <LTCD__Init+0xb0>)
 8000adc:	221d      	movs	r2, #29
 8000ade:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <LTCD__Init+0xb0>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <LTCD__Init+0xb0>)
 8000ae8:	f240 120d 	movw	r2, #269	; 0x10d
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000aee:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <LTCD__Init+0xb0>)
 8000af0:	f240 1243 	movw	r2, #323	; 0x143
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <LTCD__Init+0xb0>)
 8000af8:	f240 1217 	movw	r2, #279	; 0x117
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <LTCD__Init+0xb0>)
 8000b00:	f240 1247 	movw	r2, #327	; 0x147
 8000b04:	631a      	str	r2, [r3, #48]	; 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <LTCD__Init+0xb0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <LTCD__Init+0xb0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <LTCD__Init+0xb0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <LTCD__Init+0xb8>)
 8000b20:	2208      	movs	r2, #8
 8000b22:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <LTCD__Init+0xb8>)
 8000b26:	22c0      	movs	r2, #192	; 0xc0
 8000b28:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <LTCD__Init+0xb8>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <LTCD__Init+0xb8>)
 8000b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b38:	4810      	ldr	r0, [pc, #64]	; (8000b7c <LTCD__Init+0xb8>)
 8000b3a:	f004 f91f 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <LTCD__Init+0xb0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <LTCD__Init+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <LTCD__Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <LTCD__Init+0xb0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000b56:	f7ff feed 	bl	8000934 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <LTCD__Init+0xb0>)
 8000b5c:	f003 f9e4 	bl	8003f28 <HAL_LTDC_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000b66:	f000 f9f7 	bl	8000f58 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000b6a:	f000 f9f8 	bl	8000f5e <ili9341_Init>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000009c 	.word	0x2000009c
 8000b78:	40016800 	.word	0x40016800
 8000b7c:	20000144 	.word	0x20000144

08000b80 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b090      	sub	sp, #64	; 0x40
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000b8e:	23f0      	movs	r3, #240	; 0xf0
 8000b90:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000b96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b9a:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000ba0:	23ff      	movs	r3, #255	; 0xff
 8000ba2:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bae:	2305      	movs	r3, #5
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (LayerIndex == 0){
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <LTCD_Layer_Init+0x78>)
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000bbc:	23f0      	movs	r3, #240	; 0xf0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000bc0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000bd8:	79fa      	ldrb	r2, [r7, #7]
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <LTCD_Layer_Init+0x7c>)
 8000be2:	f003 fa71 	bl	80040c8 <HAL_LTDC_ConfigLayer>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000bec:	f000 f9b4 	bl	8000f58 <LCD_Error_Handler>
	}

}
 8000bf0:	bf00      	nop
 8000bf2:	3740      	adds	r7, #64	; 0x40
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200001d0 	.word	0x200001d0
 8000bfc:	2000009c 	.word	0x2000009c

08000c00 <LCD_Draw_Pixel>:

// Draws a single pixel, should be useds only within this fileset and should not be seen by external clients. 
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	80fb      	strh	r3, [r7, #6]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	80bb      	strh	r3, [r7, #4]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000c12:	88ba      	ldrh	r2, [r7, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	011b      	lsls	r3, r3, #4
 8000c18:	1a9b      	subs	r3, r3, r2
 8000c1a:	011b      	lsls	r3, r3, #4
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	4413      	add	r3, r2
 8000c22:	4905      	ldr	r1, [pc, #20]	; (8000c38 <LCD_Draw_Pixel+0x38>)
 8000c24:	887a      	ldrh	r2, [r7, #2]
 8000c26:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200001d0 	.word	0x200001d0

08000c3c <LCD_DrawChar>:


void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	603a      	str	r2, [r7, #0]
 8000c46:	80fb      	strh	r3, [r7, #6]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e04c      	b.n	8000cf4 <LCD_DrawChar+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	e03f      	b.n	8000ce0 <LCD_DrawChar+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	683a      	ldr	r2, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	881b      	ldrh	r3, [r3, #0]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	889b      	ldrh	r3, [r3, #4]
 8000c72:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <LCD_DrawChar+0xd4>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	08db      	lsrs	r3, r3, #3
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	409a      	lsls	r2, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	fa42 f303 	asr.w	r3, r2, r3
 8000c88:	400b      	ands	r3, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d104      	bne.n	8000c98 <LCD_DrawChar+0x5c>
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	889b      	ldrh	r3, [r3, #4]
 8000c94:	2b0c      	cmp	r3, #12
 8000c96:	d920      	bls.n	8000cda <LCD_DrawChar+0x9e>
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	fa42 f303 	asr.w	r3, r2, r3
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d104      	bne.n	8000cbc <LCD_DrawChar+0x80>
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	889b      	ldrh	r3, [r3, #4]
 8000cb8:	2b0c      	cmp	r3, #12
 8000cba:	d80e      	bhi.n	8000cda <LCD_DrawChar+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b298      	uxth	r0, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	88bb      	ldrh	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <LCD_DrawChar+0xd8>)
 8000cd2:	8812      	ldrh	r2, [r2, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f7ff ff93 	bl	8000c00 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	889b      	ldrh	r3, [r3, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d3b8      	bcc.n	8000c60 <LCD_DrawChar+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LCD_DrawChar+0xd0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	88db      	ldrh	r3, [r3, #6]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d3ab      	bcc.n	8000c5a <LCD_DrawChar+0x1e>
      }
    }
  }
}
 8000d02:	bf00      	nop
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000174 	.word	0x20000174
 8000d10:	aaaaaaab 	.word	0xaaaaaaab
 8000d14:	20000000 	.word	0x20000000

08000d18 <LCD_DisplayChar>:

// Displays Char
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
 8000d22:	460b      	mov	r3, r1
 8000d24:	80bb      	strh	r3, [r7, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	3b20      	subs	r3, #32
 8000d2e:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <LCD_DisplayChar+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	4907      	ldr	r1, [pc, #28]	; (8000d58 <LCD_DisplayChar+0x40>)
 8000d3a:	6809      	ldr	r1, [r1, #0]
 8000d3c:	88c9      	ldrh	r1, [r1, #6]
 8000d3e:	fb01 f303 	mul.w	r3, r1, r3
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	441a      	add	r2, r3
 8000d46:	88b9      	ldrh	r1, [r7, #4]
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff76 	bl	8000c3c <LCD_DrawChar>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000174 	.word	0x20000174

08000d5c <LCD_DisplayString>:

void LCD_DisplayString(uint16_t Xpos, uint16_t Ypos, char *string){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	603a      	str	r2, [r7, #0]
 8000d66:	80fb      	strh	r3, [r7, #6]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	80bb      	strh	r3, [r7, #4]
	if(string == NULL) return;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d017      	beq.n	8000da2 <LCD_DisplayString+0x46>
	uint16_t offset = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 8000d76:	e00f      	b.n	8000d98 <LCD_DisplayString+0x3c>
		LCD_DisplayChar(Xpos+offset, Ypos, *string);
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	89fb      	ldrh	r3, [r7, #14]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b298      	uxth	r0, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	781a      	ldrb	r2, [r3, #0]
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	4619      	mov	r1, r3
 8000d88:	f7ff ffc6 	bl	8000d18 <LCD_DisplayChar>
		string++;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	603b      	str	r3, [r7, #0]
		offset+=15;
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	330f      	adds	r3, #15
 8000d96:	81fb      	strh	r3, [r7, #14]
	while(*string != '\0'){
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1eb      	bne.n	8000d78 <LCD_DisplayString+0x1c>
 8000da0:	e000      	b.n	8000da4 <LCD_DisplayString+0x48>
	if(string == NULL) return;
 8000da2:	bf00      	nop
	}
}
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <LCD_DisplayNumber>:

//Displays Number, size is the number of digits in the number you want to Display
void LCD_DisplayNumber(uint16_t Xpos, uint16_t Ypos, uint16_t Number){
 8000dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000db0:	b089      	sub	sp, #36	; 0x24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	80fb      	strh	r3, [r7, #6]
 8000db8:	460b      	mov	r3, r1
 8000dba:	80bb      	strh	r3, [r7, #4]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	807b      	strh	r3, [r7, #2]
 8000dc0:	466b      	mov	r3, sp
 8000dc2:	461e      	mov	r6, r3

	uint8_t numDigits = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	77fb      	strb	r3, [r7, #31]
	if(Number == 0){
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d107      	bne.n	8000dde <LCD_DisplayNumber+0x32>
		LCD_DisplayChar(Xpos,Ypos,'0');
 8000dce:	88b9      	ldrh	r1, [r7, #4]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	2230      	movs	r2, #48	; 0x30
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff9f 	bl	8000d18 <LCD_DisplayChar>
		return;
 8000dda:	46b5      	mov	sp, r6
 8000ddc:	e074      	b.n	8000ec8 <LCD_DisplayNumber+0x11c>
	}
	else{
		uint16_t temp = Number;
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	83bb      	strh	r3, [r7, #28]
		while (temp > 0) {
 8000de2:	e008      	b.n	8000df6 <LCD_DisplayNumber+0x4a>
			temp /= 10;
 8000de4:	8bbb      	ldrh	r3, [r7, #28]
 8000de6:	4a3a      	ldr	r2, [pc, #232]	; (8000ed0 <LCD_DisplayNumber+0x124>)
 8000de8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	83bb      	strh	r3, [r7, #28]
			numDigits++;
 8000df0:	7ffb      	ldrb	r3, [r7, #31]
 8000df2:	3301      	adds	r3, #1
 8000df4:	77fb      	strb	r3, [r7, #31]
		while (temp > 0) {
 8000df6:	8bbb      	ldrh	r3, [r7, #28]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f3      	bne.n	8000de4 <LCD_DisplayNumber+0x38>
		}
	}



	uint8_t num_ascii[numDigits];
 8000dfc:	7ff9      	ldrb	r1, [r7, #31]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	3b01      	subs	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	b2cb      	uxtb	r3, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	4698      	mov	r8, r3
 8000e0a:	4691      	mov	r9, r2
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e20:	b2cb      	uxtb	r3, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	461c      	mov	r4, r3
 8000e26:	4615      	mov	r5, r2
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	f04f 0300 	mov.w	r3, #0
 8000e30:	00eb      	lsls	r3, r5, #3
 8000e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e36:	00e2      	lsls	r2, r4, #3
 8000e38:	460b      	mov	r3, r1
 8000e3a:	3307      	adds	r3, #7
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	ebad 0d03 	sub.w	sp, sp, r3
 8000e44:	466b      	mov	r3, sp
 8000e46:	3300      	adds	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
	// Convert each digit to a character and print it with standard spacing.
	for (int i = numDigits - 1; i >= 0; i--) {
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	e01b      	b.n	8000e8a <LCD_DisplayNumber+0xde>
		num_ascii[i] = '0' + (Number % 10);
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <LCD_DisplayNumber+0x124>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	08d9      	lsrs	r1, r3, #3
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	3330      	adds	r3, #48	; 0x30
 8000e6c:	b2d9      	uxtb	r1, r3
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	4413      	add	r3, r2
 8000e74:	460a      	mov	r2, r1
 8000e76:	701a      	strb	r2, [r3, #0]

		Number /= 10;
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	4a15      	ldr	r2, [pc, #84]	; (8000ed0 <LCD_DisplayNumber+0x124>)
 8000e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	807b      	strh	r3, [r7, #2]
	for (int i = numDigits - 1; i >= 0; i--) {
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	61bb      	str	r3, [r7, #24]
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	dae0      	bge.n	8000e52 <LCD_DisplayNumber+0xa6>
	}

	//print numbers with offset on x-axis
	uint16_t offset = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e011      	b.n	8000ebe <LCD_DisplayNumber+0x112>
		LCD_DisplayChar(Xpos+offset,Ypos,num_ascii[i]);
 8000e9a:	88fa      	ldrh	r2, [r7, #6]
 8000e9c:	8afb      	ldrh	r3, [r7, #22]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b298      	uxth	r0, r3
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff ff33 	bl	8000d18 <LCD_DisplayChar>
		offset+=12;
 8000eb2:	8afb      	ldrh	r3, [r7, #22]
 8000eb4:	330c      	adds	r3, #12
 8000eb6:	82fb      	strh	r3, [r7, #22]
	for(int i =0; i<numDigits; i++){
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	7ffb      	ldrb	r3, [r7, #31]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	dbe9      	blt.n	8000e9a <LCD_DisplayNumber+0xee>
 8000ec6:	46b5      	mov	sp, r6
	}

}
 8000ec8:	3724      	adds	r7, #36	; 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ed0:	cccccccd 	.word	0xcccccccd

08000ed4 <LCD_SetTextColor>:

void LCD_SetTextColor(uint16_t Color)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ede:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <LCD_SetTextColor+0x1c>)
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	8013      	strh	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	20000000 	.word	0x20000000

08000ef4 <LCD_SetFont>:

void LCD_SetFont(FONT_t *fonts)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <LCD_SetFont+0x1c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000174 	.word	0x20000174

08000f14 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	460a      	mov	r2, r1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	4613      	mov	r3, r2
 8000f22:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0){
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d10e      	bne.n	8000f48 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	e007      	b.n	8000f40 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <LCD_Clear+0x40>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	88ba      	ldrh	r2, [r7, #4]
 8000f36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000f46:	d3f3      	bcc.n	8000f30 <LCD_Clear+0x1c>
		}
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	200001d0 	.word	0x200001d0

08000f58 <LCD_Error_Handler>:

void LCD_Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  for(;;); // Something went wrong
 8000f5c:	e7fe      	b.n	8000f5c <LCD_Error_Handler+0x4>

08000f5e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000f62:	f000 f9ff 	bl	8001364 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8000f66:	20ca      	movs	r0, #202	; 0xca
 8000f68:	f000 f943 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8000f6c:	20c3      	movs	r0, #195	; 0xc3
 8000f6e:	f000 f94d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8000f72:	2008      	movs	r0, #8
 8000f74:	f000 f94a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8000f78:	2050      	movs	r0, #80	; 0x50
 8000f7a:	f000 f947 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8000f7e:	20cf      	movs	r0, #207	; 0xcf
 8000f80:	f000 f937 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f941 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8000f8a:	20c1      	movs	r0, #193	; 0xc1
 8000f8c:	f000 f93e 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8000f90:	2030      	movs	r0, #48	; 0x30
 8000f92:	f000 f93b 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8000f96:	20ed      	movs	r0, #237	; 0xed
 8000f98:	f000 f92b 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f000 f935 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f000 f932 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8000fa8:	2012      	movs	r0, #18
 8000faa:	f000 f92f 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8000fae:	2081      	movs	r0, #129	; 0x81
 8000fb0:	f000 f92c 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8000fb4:	20e8      	movs	r0, #232	; 0xe8
 8000fb6:	f000 f91c 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8000fba:	2085      	movs	r0, #133	; 0x85
 8000fbc:	f000 f926 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f923 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8000fc6:	2078      	movs	r0, #120	; 0x78
 8000fc8:	f000 f920 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8000fcc:	20cb      	movs	r0, #203	; 0xcb
 8000fce:	f000 f910 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8000fd2:	2039      	movs	r0, #57	; 0x39
 8000fd4:	f000 f91a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8000fd8:	202c      	movs	r0, #44	; 0x2c
 8000fda:	f000 f917 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f914 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8000fe4:	2034      	movs	r0, #52	; 0x34
 8000fe6:	f000 f911 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8000fea:	2002      	movs	r0, #2
 8000fec:	f000 f90e 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8000ff0:	20f7      	movs	r0, #247	; 0xf7
 8000ff2:	f000 f8fe 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	f000 f908 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8000ffc:	20ea      	movs	r0, #234	; 0xea
 8000ffe:	f000 f8f8 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f902 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f8ff 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800100e:	20b1      	movs	r0, #177	; 0xb1
 8001010:	f000 f8ef 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001014:	2000      	movs	r0, #0
 8001016:	f000 f8f9 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800101a:	201b      	movs	r0, #27
 800101c:	f000 f8f6 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001020:	20b6      	movs	r0, #182	; 0xb6
 8001022:	f000 f8e6 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001026:	200a      	movs	r0, #10
 8001028:	f000 f8f0 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800102c:	20a2      	movs	r0, #162	; 0xa2
 800102e:	f000 f8ed 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001032:	20c0      	movs	r0, #192	; 0xc0
 8001034:	f000 f8dd 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001038:	2010      	movs	r0, #16
 800103a:	f000 f8e7 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800103e:	20c1      	movs	r0, #193	; 0xc1
 8001040:	f000 f8d7 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001044:	2010      	movs	r0, #16
 8001046:	f000 f8e1 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800104a:	20c5      	movs	r0, #197	; 0xc5
 800104c:	f000 f8d1 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001050:	2045      	movs	r0, #69	; 0x45
 8001052:	f000 f8db 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001056:	2015      	movs	r0, #21
 8001058:	f000 f8d8 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800105c:	20c7      	movs	r0, #199	; 0xc7
 800105e:	f000 f8c8 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001062:	2090      	movs	r0, #144	; 0x90
 8001064:	f000 f8d2 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001068:	2036      	movs	r0, #54	; 0x36
 800106a:	f000 f8c2 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f000 f8cc 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001074:	20f2      	movs	r0, #242	; 0xf2
 8001076:	f000 f8bc 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f8c6 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001080:	20b0      	movs	r0, #176	; 0xb0
 8001082:	f000 f8b6 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001086:	20c2      	movs	r0, #194	; 0xc2
 8001088:	f000 f8c0 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800108c:	20b6      	movs	r0, #182	; 0xb6
 800108e:	f000 f8b0 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001092:	200a      	movs	r0, #10
 8001094:	f000 f8ba 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001098:	20a7      	movs	r0, #167	; 0xa7
 800109a:	f000 f8b7 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 800109e:	2027      	movs	r0, #39	; 0x27
 80010a0:	f000 f8b4 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80010a4:	2004      	movs	r0, #4
 80010a6:	f000 f8b1 	bl	800120c <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80010aa:	202a      	movs	r0, #42	; 0x2a
 80010ac:	f000 f8a1 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f8ab 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010b6:	2000      	movs	r0, #0
 80010b8:	f000 f8a8 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 f8a5 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80010c2:	20ef      	movs	r0, #239	; 0xef
 80010c4:	f000 f8a2 	bl	800120c <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80010c8:	202b      	movs	r0, #43	; 0x2b
 80010ca:	f000 f892 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f000 f89c 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f899 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80010da:	2001      	movs	r0, #1
 80010dc:	f000 f896 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80010e0:	203f      	movs	r0, #63	; 0x3f
 80010e2:	f000 f893 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80010e6:	20f6      	movs	r0, #246	; 0xf6
 80010e8:	f000 f883 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 f88d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 f88a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80010f8:	2006      	movs	r0, #6
 80010fa:	f000 f887 	bl	800120c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80010fe:	202c      	movs	r0, #44	; 0x2c
 8001100:	f000 f877 	bl	80011f2 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001104:	20c8      	movs	r0, #200	; 0xc8
 8001106:	f000 f9e9 	bl	80014dc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800110a:	2026      	movs	r0, #38	; 0x26
 800110c:	f000 f871 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001110:	2001      	movs	r0, #1
 8001112:	f000 f87b 	bl	800120c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001116:	20e0      	movs	r0, #224	; 0xe0
 8001118:	f000 f86b 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800111c:	200f      	movs	r0, #15
 800111e:	f000 f875 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001122:	2029      	movs	r0, #41	; 0x29
 8001124:	f000 f872 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001128:	2024      	movs	r0, #36	; 0x24
 800112a:	f000 f86f 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800112e:	200c      	movs	r0, #12
 8001130:	f000 f86c 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001134:	200e      	movs	r0, #14
 8001136:	f000 f869 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800113a:	2009      	movs	r0, #9
 800113c:	f000 f866 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001140:	204e      	movs	r0, #78	; 0x4e
 8001142:	f000 f863 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001146:	2078      	movs	r0, #120	; 0x78
 8001148:	f000 f860 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800114c:	203c      	movs	r0, #60	; 0x3c
 800114e:	f000 f85d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001152:	2009      	movs	r0, #9
 8001154:	f000 f85a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001158:	2013      	movs	r0, #19
 800115a:	f000 f857 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800115e:	2005      	movs	r0, #5
 8001160:	f000 f854 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001164:	2017      	movs	r0, #23
 8001166:	f000 f851 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800116a:	2011      	movs	r0, #17
 800116c:	f000 f84e 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f84b 	bl	800120c <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001176:	20e1      	movs	r0, #225	; 0xe1
 8001178:	f000 f83b 	bl	80011f2 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f845 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001182:	2016      	movs	r0, #22
 8001184:	f000 f842 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001188:	201b      	movs	r0, #27
 800118a:	f000 f83f 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800118e:	2004      	movs	r0, #4
 8001190:	f000 f83c 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001194:	2011      	movs	r0, #17
 8001196:	f000 f839 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800119a:	2007      	movs	r0, #7
 800119c:	f000 f836 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80011a0:	2031      	movs	r0, #49	; 0x31
 80011a2:	f000 f833 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80011a6:	2033      	movs	r0, #51	; 0x33
 80011a8:	f000 f830 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80011ac:	2042      	movs	r0, #66	; 0x42
 80011ae:	f000 f82d 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 f82a 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80011b8:	200c      	movs	r0, #12
 80011ba:	f000 f827 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 f824 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80011c4:	2028      	movs	r0, #40	; 0x28
 80011c6:	f000 f821 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80011ca:	202f      	movs	r0, #47	; 0x2f
 80011cc:	f000 f81e 	bl	800120c <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80011d0:	200f      	movs	r0, #15
 80011d2:	f000 f81b 	bl	800120c <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80011d6:	2011      	movs	r0, #17
 80011d8:	f000 f80b 	bl	80011f2 <ili9341_Write_Reg>
  LCD_Delay(200);
 80011dc:	20c8      	movs	r0, #200	; 0xc8
 80011de:	f000 f97d 	bl	80014dc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80011e2:	2029      	movs	r0, #41	; 0x29
 80011e4:	f000 f805 	bl	80011f2 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80011e8:	202c      	movs	r0, #44	; 0x2c
 80011ea:	f000 f802 	bl	80011f2 <ili9341_Write_Reg>
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f94a 	bl	8001498 <LCD_IO_WriteReg>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f91b 	bl	8001454 <LCD_IO_WriteData>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800122c:	4819      	ldr	r0, [pc, #100]	; (8001294 <SPI_Init+0x6c>)
 800122e:	f004 fc39 	bl	8005aa4 <HAL_SPI_GetState>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d12b      	bne.n	8001290 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001238:	4b16      	ldr	r3, [pc, #88]	; (8001294 <SPI_Init+0x6c>)
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <SPI_Init+0x70>)
 800123c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <SPI_Init+0x6c>)
 8001240:	2218      	movs	r2, #24
 8001242:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <SPI_Init+0x6c>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <SPI_Init+0x6c>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <SPI_Init+0x6c>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <SPI_Init+0x6c>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <SPI_Init+0x6c>)
 800125e:	2207      	movs	r2, #7
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <SPI_Init+0x6c>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <SPI_Init+0x6c>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <SPI_Init+0x6c>)
 8001270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001274:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <SPI_Init+0x6c>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SPI_Init+0x6c>)
 800127e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001282:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <SPI_Init+0x6c>)
 8001286:	f000 f833 	bl	80012f0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800128a:	4802      	ldr	r0, [pc, #8]	; (8001294 <SPI_Init+0x6c>)
 800128c:	f003 ff6a 	bl	8005164 <HAL_SPI_Init>
  }
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000178 	.word	0x20000178
 8001298:	40015000 	.word	0x40015000

0800129c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <SPI_Write+0x34>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1db9      	adds	r1, r7, #6
 80012b0:	2201      	movs	r2, #1
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <SPI_Write+0x38>)
 80012b4:	f004 f807 	bl	80052c6 <HAL_SPI_Transmit>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80012c2:	f000 f809 	bl	80012d8 <SPI_Error>
  }
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000004 	.word	0x20000004
 80012d4:	20000178 	.word	0x20000178

080012d8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80012dc:	4803      	ldr	r0, [pc, #12]	; (80012ec <SPI_Error+0x14>)
 80012de:	f003 ffca 	bl	8005276 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80012e2:	f7ff ffa1 	bl	8001228 <SPI_Init>
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000178 	.word	0x20000178

080012f0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <SPI_MspInit+0x6c>)
 80012fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001300:	4a16      	ldr	r2, [pc, #88]	; (800135c <SPI_MspInit+0x6c>)
 8001302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001306:	6453      	str	r3, [r2, #68]	; 0x44
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <SPI_MspInit+0x6c>)
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <SPI_MspInit+0x6c>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <SPI_MspInit+0x6c>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <SPI_MspInit+0x6c>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001330:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800133a:	2302      	movs	r3, #2
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800133e:	2301      	movs	r3, #1
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <SPI_MspInit+0x70>)
 800134e:	f002 f941 	bl	80035d4 <HAL_GPIO_Init>
}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	; 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40021400 	.word	0x40021400

08001364 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <LCD_IO_Init+0xe0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d164      	bne.n	800143c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <LCD_IO_Init+0xe0>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <LCD_IO_Init+0xe4>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	4a31      	ldr	r2, [pc, #196]	; (8001448 <LCD_IO_Init+0xe4>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6313      	str	r3, [r2, #48]	; 0x30
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <LCD_IO_Init+0xe4>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001398:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	4619      	mov	r1, r3
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <LCD_IO_Init+0xe8>)
 80013ae:	f002 f911 	bl	80035d4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <LCD_IO_Init+0xe4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <LCD_IO_Init+0xe4>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <LCD_IO_Init+0xe4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80013ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	4819      	ldr	r0, [pc, #100]	; (800144c <LCD_IO_Init+0xe8>)
 80013e8:	f002 f8f4 	bl	80035d4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <LCD_IO_Init+0xe4>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <LCD_IO_Init+0xe4>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <LCD_IO_Init+0xe4>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001408:	2304      	movs	r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001414:	2302      	movs	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	480c      	ldr	r0, [pc, #48]	; (8001450 <LCD_IO_Init+0xec>)
 8001420:	f002 f8d8 	bl	80035d4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001424:	2200      	movs	r2, #0
 8001426:	2104      	movs	r1, #4
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <LCD_IO_Init+0xec>)
 800142a:	f002 fba3 	bl	8003b74 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800142e:	2201      	movs	r2, #1
 8001430:	2104      	movs	r1, #4
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <LCD_IO_Init+0xec>)
 8001434:	f002 fb9e 	bl	8003b74 <HAL_GPIO_WritePin>

    SPI_Init();
 8001438:	f7ff fef6 	bl	8001228 <SPI_Init>
  }
}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200259d0 	.word	0x200259d0
 8001448:	40023800 	.word	0x40023800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020800 	.word	0x40020800

08001454 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001464:	480a      	ldr	r0, [pc, #40]	; (8001490 <LCD_IO_WriteData+0x3c>)
 8001466:	f002 fb85 	bl	8003b74 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800146a:	2200      	movs	r2, #0
 800146c:	2104      	movs	r1, #4
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <LCD_IO_WriteData+0x40>)
 8001470:	f002 fb80 	bl	8003b74 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff10 	bl	800129c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800147c:	2201      	movs	r2, #1
 800147e:	2104      	movs	r1, #4
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <LCD_IO_WriteData+0x40>)
 8001482:	f002 fb77 	bl	8003b74 <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40020800 	.word	0x40020800

08001498 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a8:	480a      	ldr	r0, [pc, #40]	; (80014d4 <LCD_IO_WriteReg+0x3c>)
 80014aa:	f002 fb63 	bl	8003b74 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80014ae:	2200      	movs	r2, #0
 80014b0:	2104      	movs	r1, #4
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <LCD_IO_WriteReg+0x40>)
 80014b4:	f002 fb5e 	bl	8003b74 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff feed 	bl	800129c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014c2:	2201      	movs	r2, #1
 80014c4:	2104      	movs	r1, #4
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <LCD_IO_WriteReg+0x40>)
 80014c8:	f002 fb54 	bl	8003b74 <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40020800 	.word	0x40020800

080014dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  osDelay(Delay);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f004 fee1 	bl	80062ac <osDelay>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <appInit>:

/*
 * @brief Initialize the application
 */
void appInit(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
	// Initialize Tasks, Timers, and ITC structures
	initTimers();
 80014f6:	f000 f89b 	bl	8001630 <initTimers>
	initSempahores();
 80014fa:	f000 f90d 	bl	8001718 <initSempahores>
	initMutexes();
 80014fe:	f000 f95b 	bl	80017b8 <initMutexes>
	initEventFlags();
 8001502:	f000 f98d 	bl	8001820 <initEventFlags>

	// Initialize the LTCD
	lcdInit();
 8001506:	f000 f9f7 	bl	80018f8 <lcdInit>

	// Initialize the Gyro
	Gyro_Init();
 800150a:	f7ff f88f 	bl	800062c <Gyro_Init>

	// Start timers
	initTasks();
 800150e:	f000 f805 	bl	800151c <initTasks>
	startTimers();
 8001512:	f000 f9bb 	bl	800188c <startTimers>
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <initTasks>:

/*
 * @brief Initialize all tasks
 */
void initTasks(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	// Create new task threads
	speedSetpointTaskID = osThreadNew(speedSetpointTask, NULL, &speedSetpointTaskAttr);
 8001520:	4a2d      	ldr	r2, [pc, #180]	; (80015d8 <initTasks+0xbc>)
 8001522:	2100      	movs	r1, #0
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <initTasks+0xc0>)
 8001526:	f004 fe2f 	bl	8006188 <osThreadNew>
 800152a:	4603      	mov	r3, r0
 800152c:	4a2c      	ldr	r2, [pc, #176]	; (80015e0 <initTasks+0xc4>)
 800152e:	6013      	str	r3, [r2, #0]
	vehicleDirectionTaskID = osThreadNew(vehicleDirectionTask, NULL, &vehicleDirectionTaskAttr);
 8001530:	4a2c      	ldr	r2, [pc, #176]	; (80015e4 <initTasks+0xc8>)
 8001532:	2100      	movs	r1, #0
 8001534:	482c      	ldr	r0, [pc, #176]	; (80015e8 <initTasks+0xcc>)
 8001536:	f004 fe27 	bl	8006188 <osThreadNew>
 800153a:	4603      	mov	r3, r0
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <initTasks+0xd0>)
 800153e:	6013      	str	r3, [r2, #0]
	vehicleMonitorTaskID = osThreadNew(vehicleMonitorTask, NULL, &vehicleMonitorTaskAttr);
 8001540:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <initTasks+0xd4>)
 8001542:	2100      	movs	r1, #0
 8001544:	482b      	ldr	r0, [pc, #172]	; (80015f4 <initTasks+0xd8>)
 8001546:	f004 fe1f 	bl	8006188 <osThreadNew>
 800154a:	4603      	mov	r3, r0
 800154c:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <initTasks+0xdc>)
 800154e:	6013      	str	r3, [r2, #0]
	lcdDisplayTaskID = osThreadNew(lcdDisplayTask, NULL, &lcdDisplayTaskAttr);
 8001550:	4a2a      	ldr	r2, [pc, #168]	; (80015fc <initTasks+0xe0>)
 8001552:	2100      	movs	r1, #0
 8001554:	482a      	ldr	r0, [pc, #168]	; (8001600 <initTasks+0xe4>)
 8001556:	f004 fe17 	bl	8006188 <osThreadNew>
 800155a:	4603      	mov	r3, r0
 800155c:	4a29      	ldr	r2, [pc, #164]	; (8001604 <initTasks+0xe8>)
 800155e:	6013      	str	r3, [r2, #0]
	ledOutputTaskID = osThreadNew(ledOutputTask, NULL, &ledOutputTaskAttr);
 8001560:	4a29      	ldr	r2, [pc, #164]	; (8001608 <initTasks+0xec>)
 8001562:	2100      	movs	r1, #0
 8001564:	4829      	ldr	r0, [pc, #164]	; (800160c <initTasks+0xf0>)
 8001566:	f004 fe0f 	bl	8006188 <osThreadNew>
 800156a:	4603      	mov	r3, r0
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <initTasks+0xf4>)
 800156e:	6013      	str	r3, [r2, #0]

	// Verify that all task threads were created successfully
	assert(speedSetpointTaskID != NULL);
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <initTasks+0xc4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <initTasks+0x68>
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <initTasks+0xf8>)
 800157a:	4a27      	ldr	r2, [pc, #156]	; (8001618 <initTasks+0xfc>)
 800157c:	21b7      	movs	r1, #183	; 0xb7
 800157e:	4827      	ldr	r0, [pc, #156]	; (800161c <initTasks+0x100>)
 8001580:	f00a fe6e 	bl	800c260 <__assert_func>
	assert(vehicleDirectionTaskID != NULL);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <initTasks+0xd0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <initTasks+0x7c>
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <initTasks+0x104>)
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <initTasks+0xfc>)
 8001590:	21b8      	movs	r1, #184	; 0xb8
 8001592:	4822      	ldr	r0, [pc, #136]	; (800161c <initTasks+0x100>)
 8001594:	f00a fe64 	bl	800c260 <__assert_func>
	assert(vehicleMonitorTaskID != NULL);
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <initTasks+0xdc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d105      	bne.n	80015ac <initTasks+0x90>
 80015a0:	4b20      	ldr	r3, [pc, #128]	; (8001624 <initTasks+0x108>)
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <initTasks+0xfc>)
 80015a4:	21b9      	movs	r1, #185	; 0xb9
 80015a6:	481d      	ldr	r0, [pc, #116]	; (800161c <initTasks+0x100>)
 80015a8:	f00a fe5a 	bl	800c260 <__assert_func>
	assert(lcdDisplayTaskID != NULL);
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <initTasks+0xe8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <initTasks+0xa4>
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <initTasks+0x10c>)
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <initTasks+0xfc>)
 80015b8:	21ba      	movs	r1, #186	; 0xba
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <initTasks+0x100>)
 80015bc:	f00a fe50 	bl	800c260 <__assert_func>
	assert(ledOutputTaskID != NULL);
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <initTasks+0xf4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d105      	bne.n	80015d4 <initTasks+0xb8>
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <initTasks+0x110>)
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <initTasks+0xfc>)
 80015cc:	21bb      	movs	r1, #187	; 0xbb
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <initTasks+0x100>)
 80015d0:	f00a fe46 	bl	800c260 <__assert_func>
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	0800d78c 	.word	0x0800d78c
 80015dc:	08001aa9 	.word	0x08001aa9
 80015e0:	200259dc 	.word	0x200259dc
 80015e4:	0800d7b0 	.word	0x0800d7b0
 80015e8:	08001bd9 	.word	0x08001bd9
 80015ec:	200259e0 	.word	0x200259e0
 80015f0:	0800d7d4 	.word	0x0800d7d4
 80015f4:	08001ced 	.word	0x08001ced
 80015f8:	200259e4 	.word	0x200259e4
 80015fc:	0800d81c 	.word	0x0800d81c
 8001600:	08001fb1 	.word	0x08001fb1
 8001604:	200259ec 	.word	0x200259ec
 8001608:	0800d7f8 	.word	0x0800d7f8
 800160c:	08001ed1 	.word	0x08001ed1
 8001610:	200259e8 	.word	0x200259e8
 8001614:	0800d3e0 	.word	0x0800d3e0
 8001618:	0800d8f0 	.word	0x0800d8f0
 800161c:	0800d3fc 	.word	0x0800d3fc
 8001620:	0800d410 	.word	0x0800d410
 8001624:	0800d430 	.word	0x0800d430
 8001628:	0800d450 	.word	0x0800d450
 800162c:	0800d46c 	.word	0x0800d46c

08001630 <initTimers>:

/*
 * @brief Initalize app timers
 */
void initTimers(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	// Create timers
	holdButtonTimerID = osTimerNew(holdButtonTimerCallback, osTimerOnce, NULL, &holdButtonTimerAttr);
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <initTimers+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	4826      	ldr	r0, [pc, #152]	; (80016d4 <initTimers+0xa4>)
 800163c:	f004 fe66 	bl	800630c <osTimerNew>
 8001640:	4603      	mov	r3, r0
 8001642:	4a25      	ldr	r2, [pc, #148]	; (80016d8 <initTimers+0xa8>)
 8001644:	6013      	str	r3, [r2, #0]
	vehicleDirWakeupTimerID = osTimerNew(vehicleDirWakeupTimerCallback, osTimerPeriodic, NULL, &vehicleDirWakeupTimerAttr);
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <initTimers+0xac>)
 8001648:	2200      	movs	r2, #0
 800164a:	2101      	movs	r1, #1
 800164c:	4824      	ldr	r0, [pc, #144]	; (80016e0 <initTimers+0xb0>)
 800164e:	f004 fe5d 	bl	800630c <osTimerNew>
 8001652:	4603      	mov	r3, r0
 8001654:	4a23      	ldr	r2, [pc, #140]	; (80016e4 <initTimers+0xb4>)
 8001656:	6013      	str	r3, [r2, #0]
	lcdDisplayWakeupTimerID = osTimerNew(lcdDisplayWakeupTimerCallback, osTimerPeriodic, NULL, &lcdDisplayWakeupTimerAttr);
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <initTimers+0xb8>)
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	4823      	ldr	r0, [pc, #140]	; (80016ec <initTimers+0xbc>)
 8001660:	f004 fe54 	bl	800630c <osTimerNew>
 8001664:	4603      	mov	r3, r0
 8001666:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <initTimers+0xc0>)
 8001668:	6013      	str	r3, [r2, #0]
	directionAlertTimerID = osTimerNew(directionAlertTimerCallback, osTimerOnce, NULL, &directionAlertTimerAttr);
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <initTimers+0xc4>)
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	4821      	ldr	r0, [pc, #132]	; (80016f8 <initTimers+0xc8>)
 8001672:	f004 fe4b 	bl	800630c <osTimerNew>
 8001676:	4603      	mov	r3, r0
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <initTimers+0xcc>)
 800167a:	6013      	str	r3, [r2, #0]

	// Verify each of the timers was setup properly
	assert(holdButtonTimerID != NULL);
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <initTimers+0xa8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <initTimers+0x60>
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <initTimers+0xd0>)
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <initTimers+0xd4>)
 8001688:	21cb      	movs	r1, #203	; 0xcb
 800168a:	481f      	ldr	r0, [pc, #124]	; (8001708 <initTimers+0xd8>)
 800168c:	f00a fde8 	bl	800c260 <__assert_func>
	assert(vehicleDirWakeupTimerID != NULL);
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <initTimers+0xb4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d105      	bne.n	80016a4 <initTimers+0x74>
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <initTimers+0xdc>)
 800169a:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <initTimers+0xd4>)
 800169c:	21cc      	movs	r1, #204	; 0xcc
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <initTimers+0xd8>)
 80016a0:	f00a fdde 	bl	800c260 <__assert_func>
	assert(lcdDisplayWakeupTimerID != NULL);
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <initTimers+0xc0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d105      	bne.n	80016b8 <initTimers+0x88>
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <initTimers+0xe0>)
 80016ae:	4a15      	ldr	r2, [pc, #84]	; (8001704 <initTimers+0xd4>)
 80016b0:	21cd      	movs	r1, #205	; 0xcd
 80016b2:	4815      	ldr	r0, [pc, #84]	; (8001708 <initTimers+0xd8>)
 80016b4:	f00a fdd4 	bl	800c260 <__assert_func>
	assert(directionAlertTimerID != NULL);
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <initTimers+0xcc>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <initTimers+0x9c>
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <initTimers+0xe4>)
 80016c2:	4a10      	ldr	r2, [pc, #64]	; (8001704 <initTimers+0xd4>)
 80016c4:	21ce      	movs	r1, #206	; 0xce
 80016c6:	4810      	ldr	r0, [pc, #64]	; (8001708 <initTimers+0xd8>)
 80016c8:	f00a fdca 	bl	800c260 <__assert_func>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	0800d840 	.word	0x0800d840
 80016d4:	080020a5 	.word	0x080020a5
 80016d8:	200259f0 	.word	0x200259f0
 80016dc:	0800d850 	.word	0x0800d850
 80016e0:	080020c5 	.word	0x080020c5
 80016e4:	200259f4 	.word	0x200259f4
 80016e8:	0800d860 	.word	0x0800d860
 80016ec:	08002105 	.word	0x08002105
 80016f0:	200259f8 	.word	0x200259f8
 80016f4:	0800d870 	.word	0x0800d870
 80016f8:	08002145 	.word	0x08002145
 80016fc:	200259fc 	.word	0x200259fc
 8001700:	0800d484 	.word	0x0800d484
 8001704:	0800d8fc 	.word	0x0800d8fc
 8001708:	0800d3fc 	.word	0x0800d3fc
 800170c:	0800d4a0 	.word	0x0800d4a0
 8001710:	0800d4c0 	.word	0x0800d4c0
 8001714:	0800d4e0 	.word	0x0800d4e0

08001718 <initSempahores>:

/*
 * @brief Initialize app semaphores
 */
void initSempahores(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	// Create new app semaphores
	buttonStateSemaphorID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 800171c:	4a1b      	ldr	r2, [pc, #108]	; (800178c <initSempahores+0x74>)
 800171e:	2100      	movs	r1, #0
 8001720:	2001      	movs	r0, #1
 8001722:	f005 f8e7 	bl	80068f4 <osSemaphoreNew>
 8001726:	4603      	mov	r3, r0
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <initSempahores+0x78>)
 800172a:	6013      	str	r3, [r2, #0]
										   &buttonStateSemaphorAttr);
	vehicleDirSemaphoreID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 800172c:	4a19      	ldr	r2, [pc, #100]	; (8001794 <initSempahores+0x7c>)
 800172e:	2100      	movs	r1, #0
 8001730:	2001      	movs	r0, #1
 8001732:	f005 f8df 	bl	80068f4 <osSemaphoreNew>
 8001736:	4603      	mov	r3, r0
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <initSempahores+0x80>)
 800173a:	6013      	str	r3, [r2, #0]
										   &vehicleDirSemaphoreAttr);
	lcdDisplaySemaphoreID = osSemaphoreNew(MAKE_BINARY_SEMAPHORE, SEMAPHORE_ZERO_INIT_TOKENS,
 800173c:	4a17      	ldr	r2, [pc, #92]	; (800179c <initSempahores+0x84>)
 800173e:	2100      	movs	r1, #0
 8001740:	2001      	movs	r0, #1
 8001742:	f005 f8d7 	bl	80068f4 <osSemaphoreNew>
 8001746:	4603      	mov	r3, r0
 8001748:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <initSempahores+0x88>)
 800174a:	6013      	str	r3, [r2, #0]
										   &lcdDisplaySemaphoreAttr);

	// Verify each semaphore was initialized sucessfully
	assert(buttonStateSemaphorID != NULL);
 800174c:	4b10      	ldr	r3, [pc, #64]	; (8001790 <initSempahores+0x78>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <initSempahores+0x48>
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <initSempahores+0x8c>)
 8001756:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <initSempahores+0x90>)
 8001758:	21e0      	movs	r1, #224	; 0xe0
 800175a:	4814      	ldr	r0, [pc, #80]	; (80017ac <initSempahores+0x94>)
 800175c:	f00a fd80 	bl	800c260 <__assert_func>
	assert(vehicleDirSemaphoreID != NULL);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <initSempahores+0x80>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d105      	bne.n	8001774 <initSempahores+0x5c>
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <initSempahores+0x98>)
 800176a:	4a0f      	ldr	r2, [pc, #60]	; (80017a8 <initSempahores+0x90>)
 800176c:	21e1      	movs	r1, #225	; 0xe1
 800176e:	480f      	ldr	r0, [pc, #60]	; (80017ac <initSempahores+0x94>)
 8001770:	f00a fd76 	bl	800c260 <__assert_func>
	assert(lcdDisplaySemaphoreID != NULL);
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <initSempahores+0x88>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d105      	bne.n	8001788 <initSempahores+0x70>
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <initSempahores+0x9c>)
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <initSempahores+0x90>)
 8001780:	21e2      	movs	r1, #226	; 0xe2
 8001782:	480a      	ldr	r0, [pc, #40]	; (80017ac <initSempahores+0x94>)
 8001784:	f00a fd6c 	bl	800c260 <__assert_func>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	0800d880 	.word	0x0800d880
 8001790:	20025aa8 	.word	0x20025aa8
 8001794:	0800d890 	.word	0x0800d890
 8001798:	20025b54 	.word	0x20025b54
 800179c:	0800d8a0 	.word	0x0800d8a0
 80017a0:	20025c00 	.word	0x20025c00
 80017a4:	0800d500 	.word	0x0800d500
 80017a8:	0800d908 	.word	0x0800d908
 80017ac:	0800d3fc 	.word	0x0800d3fc
 80017b0:	0800d520 	.word	0x0800d520
 80017b4:	0800d540 	.word	0x0800d540

080017b8 <initMutexes>:

/*
 * @brief Initialize app mutexes
 */
void initMutexes(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	// Create app mutexes
	speedDataMutexID = osMutexNew(&speedDataMutexAttr);
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <initMutexes+0x48>)
 80017be:	f004 ff8b 	bl	80066d8 <osMutexNew>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <initMutexes+0x4c>)
 80017c6:	6013      	str	r3, [r2, #0]
	vehicleDirDataMutexID = osMutexNew(&vehicleDirDataMutexAttr);
 80017c8:	480f      	ldr	r0, [pc, #60]	; (8001808 <initMutexes+0x50>)
 80017ca:	f004 ff85 	bl	80066d8 <osMutexNew>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <initMutexes+0x54>)
 80017d2:	6013      	str	r3, [r2, #0]

	// Verifiy that the mutexes were created successfully
	assert(speedDataMutexID != NULL);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <initMutexes+0x4c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <initMutexes+0x30>
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <initMutexes+0x58>)
 80017de:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <initMutexes+0x5c>)
 80017e0:	21f0      	movs	r1, #240	; 0xf0
 80017e2:	480d      	ldr	r0, [pc, #52]	; (8001818 <initMutexes+0x60>)
 80017e4:	f00a fd3c 	bl	800c260 <__assert_func>
	assert(vehicleDirDataMutexID != NULL);
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <initMutexes+0x54>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d105      	bne.n	80017fc <initMutexes+0x44>
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <initMutexes+0x64>)
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <initMutexes+0x5c>)
 80017f4:	21f1      	movs	r1, #241	; 0xf1
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <initMutexes+0x60>)
 80017f8:	f00a fd32 	bl	800c260 <__assert_func>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0800d8b0 	.word	0x0800d8b0
 8001804:	20025c04 	.word	0x20025c04
 8001808:	0800d8c0 	.word	0x0800d8c0
 800180c:	20025c08 	.word	0x20025c08
 8001810:	0800d560 	.word	0x0800d560
 8001814:	0800d918 	.word	0x0800d918
 8001818:	0800d3fc 	.word	0x0800d3fc
 800181c:	0800d57c 	.word	0x0800d57c

08001820 <initEventFlags>:

/*
 * @brief Initialize app event flags
 */
void initEventFlags(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	// Create app event flags
	vehicleMonitorEventFlagID = osEventFlagsNew(&vehicleMonitorEventFlagAttr);
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <initEventFlags+0x4c>)
 8001826:	f004 fe6e 	bl	8006506 <osEventFlagsNew>
 800182a:	4603      	mov	r3, r0
 800182c:	4a10      	ldr	r2, [pc, #64]	; (8001870 <initEventFlags+0x50>)
 800182e:	6013      	str	r3, [r2, #0]
	ledOutputEventFlagID = osEventFlagsNew(&ledOutputEventFlagAttr);
 8001830:	4810      	ldr	r0, [pc, #64]	; (8001874 <initEventFlags+0x54>)
 8001832:	f004 fe68 	bl	8006506 <osEventFlagsNew>
 8001836:	4603      	mov	r3, r0
 8001838:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <initEventFlags+0x58>)
 800183a:	6013      	str	r3, [r2, #0]

	// Verify that the event flags were created successfully
	assert(vehicleMonitorEventFlagID != NULL);
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <initEventFlags+0x50>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d105      	bne.n	8001850 <initEventFlags+0x30>
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <initEventFlags+0x5c>)
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <initEventFlags+0x60>)
 8001848:	21ff      	movs	r1, #255	; 0xff
 800184a:	480e      	ldr	r0, [pc, #56]	; (8001884 <initEventFlags+0x64>)
 800184c:	f00a fd08 	bl	800c260 <__assert_func>
	assert(ledOutputEventFlagID != NULL);
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <initEventFlags+0x58>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <initEventFlags+0x46>
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <initEventFlags+0x68>)
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <initEventFlags+0x60>)
 800185c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001860:	4808      	ldr	r0, [pc, #32]	; (8001884 <initEventFlags+0x64>)
 8001862:	f00a fcfd 	bl	800c260 <__assert_func>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	0800d8d0 	.word	0x0800d8d0
 8001870:	20025c0c 	.word	0x20025c0c
 8001874:	0800d8e0 	.word	0x0800d8e0
 8001878:	20025c10 	.word	0x20025c10
 800187c:	0800d59c 	.word	0x0800d59c
 8001880:	0800d924 	.word	0x0800d924
 8001884:	0800d3fc 	.word	0x0800d3fc
 8001888:	0800d5c0 	.word	0x0800d5c0

0800188c <startTimers>:

/*
 * @brief Starts the task wakeup timers
 */
void startTimers(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	// Start task wakeup timers
	osStatus_t dirWakeupTimerStatus = osTimerStart(vehicleDirWakeupTimerID, VEHICLE_DIR_WAKEUP_TIMER_TICKS);
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <startTimers+0x54>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2164      	movs	r1, #100	; 0x64
 8001898:	4618      	mov	r0, r3
 800189a:	f004 fdb3 	bl	8006404 <osTimerStart>
 800189e:	6078      	str	r0, [r7, #4]
	osStatus_t lcdWakeupTimerStatus = osTimerStart(lcdDisplayWakeupTimerID, LCD_DISPLAY_TIMER_TICKS);
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <startTimers+0x58>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	21c8      	movs	r1, #200	; 0xc8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 fdac 	bl	8006404 <osTimerStart>
 80018ac:	6038      	str	r0, [r7, #0]

	// Verify that the timers were started successfully
	assert(dirWakeupTimerStatus == osOK);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <startTimers+0x36>
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <startTimers+0x5c>)
 80018b6:	4a0d      	ldr	r2, [pc, #52]	; (80018ec <startTimers+0x60>)
 80018b8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <startTimers+0x64>)
 80018be:	f00a fccf 	bl	800c260 <__assert_func>
	assert(lcdWakeupTimerStatus == osOK);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <startTimers+0x4a>
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <startTimers+0x68>)
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <startTimers+0x60>)
 80018cc:	f240 110f 	movw	r1, #271	; 0x10f
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <startTimers+0x64>)
 80018d2:	f00a fcc5 	bl	800c260 <__assert_func>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200259f4 	.word	0x200259f4
 80018e4:	200259f8 	.word	0x200259f8
 80018e8:	0800d5e0 	.word	0x0800d5e0
 80018ec:	0800d934 	.word	0x0800d934
 80018f0:	0800d3fc 	.word	0x0800d3fc
 80018f4:	0800d600 	.word	0x0800d600

080018f8 <lcdInit>:

/*
 * @brief Initialize the LCD
 */
void lcdInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	LTCD__Init();
 80018fc:	f7ff f8e2 	bl	8000ac4 <LTCD__Init>
	LTCD_Layer_Init(0);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff f93d 	bl	8000b80 <LTCD_Layer_Init>

	LCD_Clear(0,LCD_COLOR_CYAN);
 8001906:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fb02 	bl	8000f14 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fadf 	bl	8000ed4 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8001916:	4802      	ldr	r0, [pc, #8]	; (8001920 <lcdInit+0x28>)
 8001918:	f7ff faec 	bl	8000ef4 <LCD_SetFont>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20000008 	.word	0x20000008

08001924 <getGyroRateOfRotation>:
 *  			the velocity as clockwise/counterclockwise and slow/fast.
 *
 *  @return Returns the categorized gyro velocity rate
 * */
gyroRotationRate getGyroRateOfRotation(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
	// Variable to store and return the gyro rotation rate
	gyroRotationRate gyroRate;

	// Get the gyro velocity
	int16_t rawVelocity = Gyro_Get_Velocity();
 800192a:	f7fe ff0d 	bl	8000748 <Gyro_Get_Velocity>
 800192e:	4603      	mov	r3, r0
 8001930:	80bb      	strh	r3, [r7, #4]
	// 		velocity <= -15000 			= counterClockwiseFast
	//		-15000 < velocity <= -2000 	= counterClockwiseSlow
	//		-2000 < velocity < 2000		= nearlyZero (treated as clockwise)
	//		150 <= velocity < 15000		= clockwiseSlow
	//		velocity >= 15000			= clockwiseFast
	if(rawVelocity <= counterClockwiseFast)
 8001932:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <getGyroRateOfRotation+0x68>)
 8001938:	4293      	cmp	r3, r2
 800193a:	da03      	bge.n	8001944 <getGyroRateOfRotation+0x20>
	{
		gyroRate = counterClockwiseFast;
 800193c:	f24c 5368 	movw	r3, #50536	; 0xc568
 8001940:	80fb      	strh	r3, [r7, #6]
 8001942:	e01d      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity <= counterClockwiseSlow)
 8001944:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001948:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800194c:	dc03      	bgt.n	8001956 <getGyroRateOfRotation+0x32>
	{
		gyroRate = counterClockwiseSlow;
 800194e:	f64f 0330 	movw	r3, #63536	; 0xf830
 8001952:	80fb      	strh	r3, [r7, #6]
 8001954:	e014      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseSlow)
 8001956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800195a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800195e:	da02      	bge.n	8001966 <getGyroRateOfRotation+0x42>
	{
		gyroRate = nearlyZero;
 8001960:	2300      	movs	r3, #0
 8001962:	80fb      	strh	r3, [r7, #6]
 8001964:	e00c      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else if(rawVelocity < clockwiseFast)
 8001966:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800196a:	f643 2297 	movw	r2, #14999	; 0x3a97
 800196e:	4293      	cmp	r3, r2
 8001970:	dc03      	bgt.n	800197a <getGyroRateOfRotation+0x56>
	{
		gyroRate = clockwiseSlow;
 8001972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001976:	80fb      	strh	r3, [r7, #6]
 8001978:	e002      	b.n	8001980 <getGyroRateOfRotation+0x5c>
	}
	else // rawVelocity > clockwiseFast
	{
		gyroRate = clockwiseFast;
 800197a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800197e:	80fb      	strh	r3, [r7, #6]
	}

	return gyroRate;
 8001980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	ffffc569 	.word	0xffffc569

08001990 <determineVehicleDirection>:
 * 				   turns or driving straight.
 *
 * @return Returns the direction that the vehicle is moving
 */
vehicleDirection determineVehicleDirection(gyroRotationRate gyro)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	vehicleDirection direction;

	// Convert gyro rotation data to vehicle direction data
	switch(gyro)
 800199a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199e:	f643 2298 	movw	r2, #15000	; 0x3a98
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <determineVehicleDirection+0x4a>
 80019a6:	f643 2298 	movw	r2, #15000	; 0x3a98
 80019aa:	4293      	cmp	r3, r2
 80019ac:	dc18      	bgt.n	80019e0 <determineVehicleDirection+0x50>
 80019ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019b2:	d00f      	beq.n	80019d4 <determineVehicleDirection+0x44>
 80019b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019b8:	dc12      	bgt.n	80019e0 <determineVehicleDirection+0x50>
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <determineVehicleDirection+0x64>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d003      	beq.n	80019c8 <determineVehicleDirection+0x38>
 80019c0:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80019c4:	d003      	beq.n	80019ce <determineVehicleDirection+0x3e>
 80019c6:	e00b      	b.n	80019e0 <determineVehicleDirection+0x50>
	{
		case counterClockwiseFast:
			direction = hardLeftTurn;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
			break;
 80019cc:	e00b      	b.n	80019e6 <determineVehicleDirection+0x56>
		case counterClockwiseSlow:
			direction = gradualLeftTurn;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
			break;
 80019d2:	e008      	b.n	80019e6 <determineVehicleDirection+0x56>
		case clockwiseSlow:
			direction = gradualRightTurn;
 80019d4:	2303      	movs	r3, #3
 80019d6:	73fb      	strb	r3, [r7, #15]
			break;
 80019d8:	e005      	b.n	80019e6 <determineVehicleDirection+0x56>
		case clockwiseFast:
			direction = hardRightTurn;
 80019da:	2304      	movs	r3, #4
 80019dc:	73fb      	strb	r3, [r7, #15]
			break;
 80019de:	e002      	b.n	80019e6 <determineVehicleDirection+0x56>
		default:
			direction = drivingStraight;
 80019e0:	2302      	movs	r3, #2
 80019e2:	73fb      	strb	r3, [r7, #15]
			break;
 80019e4:	bf00      	nop
	}

	return direction;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	ffffc568 	.word	0xffffc568

080019f8 <updateLCD>:
 *
 * @param[in] speed Speed data to diplay on the LCD
 * @param[in] direction Direction data to display on the LCD
 */
void updateLCD(uint8_t speed, vehicleDirection direction)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	char* speedText = "Speed: ";
 8001a08:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <updateLCD+0x90>)
 8001a0a:	60bb      	str	r3, [r7, #8]
	char* dirText;

	while(1)
	{
		switch(direction)
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d81b      	bhi.n	8001a4a <updateLCD+0x52>
 8001a12:	a201      	add	r2, pc, #4	; (adr r2, 8001a18 <updateLCD+0x20>)
 8001a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a18:	08001a3f 	.word	0x08001a3f
 8001a1c:	08001a33 	.word	0x08001a33
 8001a20:	08001a2d 	.word	0x08001a2d
 8001a24:	08001a39 	.word	0x08001a39
 8001a28:	08001a45 	.word	0x08001a45
		{
			case drivingStraight:
				dirText = "Dir: Straight";
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <updateLCD+0x94>)
 8001a2e:	60fb      	str	r3, [r7, #12]
				break;
 8001a30:	e00e      	b.n	8001a50 <updateLCD+0x58>
			case gradualLeftTurn:
				dirText = "Dir: Grad Left";
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <updateLCD+0x98>)
 8001a34:	60fb      	str	r3, [r7, #12]
				break;
 8001a36:	e00b      	b.n	8001a50 <updateLCD+0x58>
			case gradualRightTurn:
				dirText = "Dir: Grad Right";
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <updateLCD+0x9c>)
 8001a3a:	60fb      	str	r3, [r7, #12]
				break;
 8001a3c:	e008      	b.n	8001a50 <updateLCD+0x58>
			case hardLeftTurn:
				dirText = "Dir: Hard Left";
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <updateLCD+0xa0>)
 8001a40:	60fb      	str	r3, [r7, #12]
				break;
 8001a42:	e005      	b.n	8001a50 <updateLCD+0x58>
			case hardRightTurn:
				dirText = "Dir: Hard Right";
 8001a44:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <updateLCD+0xa4>)
 8001a46:	60fb      	str	r3, [r7, #12]
				break;
 8001a48:	e002      	b.n	8001a50 <updateLCD+0x58>
			default:
				dirText = "";
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <updateLCD+0xa8>)
 8001a4c:	60fb      	str	r3, [r7, #12]
				break;
 8001a4e:	bf00      	nop
		}

		LCD_Clear(0,LCD_COLOR_CYAN);
 8001a50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a54:	2000      	movs	r0, #0
 8001a56:	f7ff fa5d 	bl	8000f14 <LCD_Clear>
		LCD_DisplayString(10, 130, speedText);
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	2182      	movs	r1, #130	; 0x82
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f7ff f97c 	bl	8000d5c <LCD_DisplayString>
		LCD_DisplayNumber(100, 130, speed);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	2182      	movs	r1, #130	; 0x82
 8001a6c:	2064      	movs	r0, #100	; 0x64
 8001a6e:	f7ff f99d 	bl	8000dac <LCD_DisplayNumber>
		LCD_DisplayString(120, 130, "MPH");
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <updateLCD+0xac>)
 8001a74:	2182      	movs	r1, #130	; 0x82
 8001a76:	2078      	movs	r0, #120	; 0x78
 8001a78:	f7ff f970 	bl	8000d5c <LCD_DisplayString>
		LCD_DisplayString(10, 180, dirText);
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	21b4      	movs	r1, #180	; 0xb4
 8001a80:	200a      	movs	r0, #10
 8001a82:	f7ff f96b 	bl	8000d5c <LCD_DisplayString>
		switch(direction)
 8001a86:	e7c1      	b.n	8001a0c <updateLCD+0x14>
 8001a88:	0800d620 	.word	0x0800d620
 8001a8c:	0800d628 	.word	0x0800d628
 8001a90:	0800d638 	.word	0x0800d638
 8001a94:	0800d648 	.word	0x0800d648
 8001a98:	0800d658 	.word	0x0800d658
 8001a9c:	0800d668 	.word	0x0800d668
 8001aa0:	0800d678 	.word	0x0800d678
 8001aa4:	0800d67c 	.word	0x0800d67c

08001aa8 <speedSetpointTask>:
 * 			signal this change to the Vehicle Monitor Task.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void speedSetpointTask(void* arg)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Acquire the button state sempahore
		osStatus_t semaphoreStatus = osSemaphoreAcquire(buttonStateSemaphorID, osWaitForever);
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <speedSetpointTask+0x100>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 ffa5 	bl	8006a08 <osSemaphoreAcquire>
 8001abe:	6138      	str	r0, [r7, #16]
		assert(semaphoreStatus == osOK);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <speedSetpointTask+0x2c>
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <speedSetpointTask+0x104>)
 8001ac8:	4a39      	ldr	r2, [pc, #228]	; (8001bb0 <speedSetpointTask+0x108>)
 8001aca:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001ace:	4839      	ldr	r0, [pc, #228]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001ad0:	f00a fbc6 	bl	800c260 <__assert_func>

		// Start the oneshot hold button timer
		osStatus_t status = osTimerStart(holdButtonTimerID, HOLD_BTN_TIMER_TICKS_1S);
 8001ad4:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <speedSetpointTask+0x110>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fc91 	bl	8006404 <osTimerStart>
 8001ae2:	60f8      	str	r0, [r7, #12]
		assert(status == osOK);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <speedSetpointTask+0x50>
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <speedSetpointTask+0x114>)
 8001aec:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <speedSetpointTask+0x108>)
 8001aee:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001af2:	4830      	ldr	r0, [pc, #192]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001af4:	f00a fbb4 	bl	800c260 <__assert_func>

		// Wait until the button is released
		while(buttonPressed){}
 8001af8:	bf00      	nop
 8001afa:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <speedSetpointTask+0x118>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1fa      	bne.n	8001afa <speedSetpointTask+0x52>

		// Since the button was pressed, accelerate by 5
		int acceleration = 5;
 8001b04:	2305      	movs	r3, #5
 8001b06:	617b      	str	r3, [r7, #20]

		// If the button was held sufficiently long (1 second), flip the sign
		// of acceleration (from 5 to -5) so signal deceleration
		if(buttonHeld == true)
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <speedSetpointTask+0x11c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <speedSetpointTask+0x76>
		{
			buttonHeld = false;
 8001b12:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <speedSetpointTask+0x11c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
			acceleration *= -1;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	617b      	str	r3, [r7, #20]
		}

		// Acquire the speed data mutex to set the new speed data
		osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <speedSetpointTask+0x120>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f04f 31ff 	mov.w	r1, #4294967295
 8001b26:	4618      	mov	r0, r3
 8001b28:	f004 fe5c 	bl	80067e4 <osMutexAcquire>
 8001b2c:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <speedSetpointTask+0x9a>
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <speedSetpointTask+0x124>)
 8001b36:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <speedSetpointTask+0x108>)
 8001b38:	f240 11cd 	movw	r1, #461	; 0x1cd
 8001b3c:	481d      	ldr	r0, [pc, #116]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001b3e:	f00a fb8f 	bl	800c260 <__assert_func>

		// Update vehicle speed
		speedData.speed += acceleration;
 8001b42:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b50:	701a      	strb	r2, [r3, #0]

		// Speed should never be negative
		if(acceleration < 0)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	da09      	bge.n	8001b6c <speedSetpointTask+0xc4>
		{
			speedData.speed = 0;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
			speedData.speedDecrementCount++;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b60:	789b      	ldrb	r3, [r3, #2]
 8001b62:	3301      	adds	r3, #1
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b68:	709a      	strb	r2, [r3, #2]
 8001b6a:	e005      	b.n	8001b78 <speedSetpointTask+0xd0>
		}
		else
		{
			speedData.speedIncrementCount++;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <speedSetpointTask+0x128>)
 8001b76:	705a      	strb	r2, [r3, #1]
		}


		// speedData updated, release the mutex
		mutexStatus = osMutexRelease(speedDataMutexID);
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <speedSetpointTask+0x120>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 fe7c 	bl	800687a <osMutexRelease>
 8001b82:	60b8      	str	r0, [r7, #8]
		assert(mutexStatus == osOK);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <speedSetpointTask+0xf0>
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <speedSetpointTask+0x124>)
 8001b8c:	4a08      	ldr	r2, [pc, #32]	; (8001bb0 <speedSetpointTask+0x108>)
 8001b8e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001b92:	4808      	ldr	r0, [pc, #32]	; (8001bb4 <speedSetpointTask+0x10c>)
 8001b94:	f00a fb64 	bl	800c260 <__assert_func>

		// Raise the speed update event flag to signal to the Vehicle Monitor
		// Task that the speed has been updated
		osEventFlagsSet(vehicleMonitorEventFlagID, speedUpdateEventFlag);
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <speedSetpointTask+0x12c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f004 fcf0 	bl	8006584 <osEventFlagsSet>
	{
 8001ba4:	e784      	b.n	8001ab0 <speedSetpointTask+0x8>
 8001ba6:	bf00      	nop
 8001ba8:	20025aa8 	.word	0x20025aa8
 8001bac:	0800d680 	.word	0x0800d680
 8001bb0:	0800d940 	.word	0x0800d940
 8001bb4:	0800d3fc 	.word	0x0800d3fc
 8001bb8:	200259f0 	.word	0x200259f0
 8001bbc:	0800d698 	.word	0x0800d698
 8001bc0:	20025c14 	.word	0x20025c14
 8001bc4:	20025c15 	.word	0x20025c15
 8001bc8:	20025c04 	.word	0x20025c04
 8001bcc:	0800d6a8 	.word	0x0800d6a8
 8001bd0:	200259d4 	.word	0x200259d4
 8001bd4:	20025c0c 	.word	0x20025c0c

08001bd8 <vehicleDirectionTask>:
 * 			to the Vehicle Monitor Task.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void vehicleDirectionTask(void* arg)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Wakeup task when the semaphore is released by
		// the Vehicle Direction Timer Callback
		osStatus_t status = osSemaphoreAcquire(vehicleDirSemaphoreID, osWaitForever);
 8001be0:	4b3a      	ldr	r3, [pc, #232]	; (8001ccc <vehicleDirectionTask+0xf4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 ff0d 	bl	8006a08 <osSemaphoreAcquire>
 8001bee:	6178      	str	r0, [r7, #20]
		assert(status == osOK);
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <vehicleDirectionTask+0x2c>
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <vehicleDirectionTask+0xf8>)
 8001bf8:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <vehicleDirectionTask+0xfc>)
 8001bfa:	f240 11fd 	movw	r1, #509	; 0x1fd
 8001bfe:	4836      	ldr	r0, [pc, #216]	; (8001cd8 <vehicleDirectionTask+0x100>)
 8001c00:	f00a fb2e 	bl	800c260 <__assert_func>

		// Sample the gyro
		gyroRotationRate gyro = getGyroRateOfRotation();
 8001c04:	f7ff fe8e 	bl	8001924 <getGyroRateOfRotation>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	827b      	strh	r3, [r7, #18]

		// Determine which direction the vehicle is moving
		vehicleDirection newDirection = determineVehicleDirection(gyro);
 8001c0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff febd 	bl	8001990 <determineVehicleDirection>
 8001c16:	4603      	mov	r3, r0
 8001c18:	747b      	strb	r3, [r7, #17]

		// Acquire the vehicle direction data mutex
		osStatus_t mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <vehicleDirectionTask+0x104>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fdde 	bl	80067e4 <osMutexAcquire>
 8001c28:	60f8      	str	r0, [r7, #12]
		assert(mutexStatus == osOK);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <vehicleDirectionTask+0x66>
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <vehicleDirectionTask+0x108>)
 8001c32:	4a28      	ldr	r2, [pc, #160]	; (8001cd4 <vehicleDirectionTask+0xfc>)
 8001c34:	f240 2107 	movw	r1, #519	; 0x207
 8001c38:	4827      	ldr	r0, [pc, #156]	; (8001cd8 <vehicleDirectionTask+0x100>)
 8001c3a:	f00a fb11 	bl	800c260 <__assert_func>

		// Update the vehicle direction data
		directionData.direction = newDirection;
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c40:	7c7b      	ldrb	r3, [r7, #17]
 8001c42:	7013      	strb	r3, [r2, #0]

		// Update direction data turn counts
		switch(newDirection)
 8001c44:	7c7b      	ldrb	r3, [r7, #17]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d828      	bhi.n	8001c9c <vehicleDirectionTask+0xc4>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <vehicleDirectionTask+0x78>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c65 	.word	0x08001c65
 8001c54:	08001c73 	.word	0x08001c73
 8001c58:	08001c9d 	.word	0x08001c9d
 8001c5c:	08001c81 	.word	0x08001c81
 8001c60:	08001c8f 	.word	0x08001c8f
		{
			case hardLeftTurn:
				directionData.leftTurnCount += 2;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	3302      	adds	r3, #2
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c6e:	705a      	strb	r2, [r3, #1]
				break;
 8001c70:	e015      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			case gradualLeftTurn:
				directionData.leftTurnCount++;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c74:	785b      	ldrb	r3, [r3, #1]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c7c:	705a      	strb	r2, [r3, #1]
				break;
 8001c7e:	e00e      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			case gradualRightTurn:
				directionData.rightTurnCount++;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c82:	789b      	ldrb	r3, [r3, #2]
 8001c84:	3301      	adds	r3, #1
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c8a:	709a      	strb	r2, [r3, #2]
				break;
 8001c8c:	e007      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			case hardRightTurn:
				directionData.rightTurnCount += 2;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c90:	789b      	ldrb	r3, [r3, #2]
 8001c92:	3302      	adds	r3, #2
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <vehicleDirectionTask+0x10c>)
 8001c98:	709a      	strb	r2, [r3, #2]
				break;
 8001c9a:	e000      	b.n	8001c9e <vehicleDirectionTask+0xc6>
			default:
				break;
 8001c9c:	bf00      	nop
		}

		// Release the vehicle direction data mutex
		mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <vehicleDirectionTask+0x104>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fde9 	bl	800687a <osMutexRelease>
 8001ca8:	60f8      	str	r0, [r7, #12]
		assert(mutexStatus == osOK);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <vehicleDirectionTask+0xe6>
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <vehicleDirectionTask+0x108>)
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <vehicleDirectionTask+0xfc>)
 8001cb4:	f240 2121 	movw	r1, #545	; 0x221
 8001cb8:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <vehicleDirectionTask+0x100>)
 8001cba:	f00a fad1 	bl	800c260 <__assert_func>

		// Raise the Direction Update Flag to signal to the Vehicle
		// Monitor Task that new vehicle direction data is available
		osEventFlagsSet(vehicleMonitorEventFlagID, directionUpdateEventFlag);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <vehicleDirectionTask+0x110>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fc5d 	bl	8006584 <osEventFlagsSet>
	{
 8001cca:	e789      	b.n	8001be0 <vehicleDirectionTask+0x8>
 8001ccc:	20025b54 	.word	0x20025b54
 8001cd0:	0800d698 	.word	0x0800d698
 8001cd4:	0800d954 	.word	0x0800d954
 8001cd8:	0800d3fc 	.word	0x0800d3fc
 8001cdc:	20025c08 	.word	0x20025c08
 8001ce0:	0800d6a8 	.word	0x0800d6a8
 8001ce4:	200259d8 	.word	0x200259d8
 8001ce8:	20025c0c 	.word	0x20025c0c

08001cec <vehicleMonitorTask>:
 * 			violation has occured.
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void vehicleMonitorTask(void* arg)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	uint8_t currentSpeed = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	77fb      	strb	r3, [r7, #31]
	vehicleDirection currentDirection = drivingStraight;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	77bb      	strb	r3, [r7, #30]
	vehicleDirection previousDirection;

	while(1)
	{
		// Pend on the Vehicle Monitor Event Flag
		uint32_t eventStatus = osEventFlagsWait(vehicleMonitorEventFlagID, speedAndDirectionEventFlags,
 8001cfc:	4b69      	ldr	r3, [pc, #420]	; (8001ea4 <vehicleMonitorTask+0x1b8>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
 8001d04:	2200      	movs	r2, #0
 8001d06:	2103      	movs	r1, #3
 8001d08:	f004 fc80 	bl	800660c <osEventFlagsWait>
 8001d0c:	61b8      	str	r0, [r7, #24]
												osFlagsWaitAny, osWaitForever);

		osStatus_t status;

		// Check if the speed update event flag is set
		if(eventStatus & speedUpdateEventFlag)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d024      	beq.n	8001d62 <vehicleMonitorTask+0x76>
		{
			// Acquire the vehicle speed data mutex before trying to
			// read vehicle speed data
		    osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001d18:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <vehicleMonitorTask+0x1bc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fd5f 	bl	80067e4 <osMutexAcquire>
 8001d26:	6178      	str	r0, [r7, #20]
		    assert(mutexStatus == osOK);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <vehicleMonitorTask+0x50>
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001d30:	4a5f      	ldr	r2, [pc, #380]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001d32:	f240 2149 	movw	r1, #585	; 0x249
 8001d36:	485f      	ldr	r0, [pc, #380]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001d38:	f00a fa92 	bl	800c260 <__assert_func>

		    // Update speed data
		    currentSpeed = speedData.speed;
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <vehicleMonitorTask+0x1cc>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	77fb      	strb	r3, [r7, #31]

		    // Done reading vehicle speed data; release the vehicle
		    // speed data mutex
		    mutexStatus = osMutexRelease(speedDataMutexID);
 8001d42:	4b59      	ldr	r3, [pc, #356]	; (8001ea8 <vehicleMonitorTask+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fd97 	bl	800687a <osMutexRelease>
 8001d4c:	6178      	str	r0, [r7, #20]
		    assert(mutexStatus == osOK);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <vehicleMonitorTask+0x76>
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001d56:	4a56      	ldr	r2, [pc, #344]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001d58:	f240 2151 	movw	r1, #593	; 0x251
 8001d5c:	4855      	ldr	r0, [pc, #340]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001d5e:	f00a fa7f 	bl	800c260 <__assert_func>
		}


		// Check if the direction update event flag is set
		if(eventStatus & directionUpdateEventFlag)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d026      	beq.n	8001dba <vehicleMonitorTask+0xce>
		{
			// Acquire the vehicle direction data mutex before trying to
			// read vehicle direction data
			osStatus_t mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <vehicleMonitorTask+0x1d0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fd35 	bl	80067e4 <osMutexAcquire>
 8001d7a:	6138      	str	r0, [r7, #16]
		    assert(mutexStatus == osOK);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <vehicleMonitorTask+0xa4>
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001d84:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001d86:	f240 215b 	movw	r1, #603	; 0x25b
 8001d8a:	484a      	ldr	r0, [pc, #296]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001d8c:	f00a fa68 	bl	800c260 <__assert_func>

		    // Update directional data
		    previousDirection = currentDirection;
 8001d90:	7fbb      	ldrb	r3, [r7, #30]
 8001d92:	777b      	strb	r3, [r7, #29]
		    currentDirection = directionData.direction;
 8001d94:	4b4a      	ldr	r3, [pc, #296]	; (8001ec0 <vehicleMonitorTask+0x1d4>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	77bb      	strb	r3, [r7, #30]

		    // Done reading vehicle direction data; release the vehicle
		    // direction data mutex
		    mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 8001d9a:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <vehicleMonitorTask+0x1d0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fd6b 	bl	800687a <osMutexRelease>
 8001da4:	6138      	str	r0, [r7, #16]
		    assert(mutexStatus == osOK);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d006      	beq.n	8001dba <vehicleMonitorTask+0xce>
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <vehicleMonitorTask+0x1c0>)
 8001dae:	4a40      	ldr	r2, [pc, #256]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001db0:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001db4:	483f      	ldr	r0, [pc, #252]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001db6:	f00a fa53 	bl	800c260 <__assert_func>
		}

		/* Speed Violation – Light LED3 (green) for the following warnings:
		 * - Over limit, regardless of direction. Suggested limit is 75 mph.
		 * - Over limit, when making a turn. Suggested limit is 45 mph. */
		if((currentSpeed > 75) || ((currentSpeed > 45) && (currentDirection != drivingStraight)))
 8001dba:	7ffb      	ldrb	r3, [r7, #31]
 8001dbc:	2b4b      	cmp	r3, #75	; 0x4b
 8001dbe:	d805      	bhi.n	8001dcc <vehicleMonitorTask+0xe0>
 8001dc0:	7ffb      	ldrb	r3, [r7, #31]
 8001dc2:	2b2d      	cmp	r3, #45	; 0x2d
 8001dc4:	d909      	bls.n	8001dda <vehicleMonitorTask+0xee>
 8001dc6:	7fbb      	ldrb	r3, [r7, #30]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d006      	beq.n	8001dda <vehicleMonitorTask+0xee>
		{
			osEventFlagsSet(ledOutputEventFlagID, speedUpdateEventFlag);
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <vehicleMonitorTask+0x1d8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 fbd6 	bl	8006584 <osEventFlagsSet>
 8001dd8:	e005      	b.n	8001de6 <vehicleMonitorTask+0xfa>
//			assert(flagStatus & speedAndDirectionEventFlags);
		}
		else
		{
			osEventFlagsSet(ledOutputEventFlagID, deactivateSpeedAlertEventFlag);
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <vehicleMonitorTask+0x1d8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2110      	movs	r1, #16
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fbcf 	bl	8006584 <osEventFlagsSet>
//			assert(flagStatus & deactivateBothAlertEventFlags);
		}

		// Makes the compound conditional easier to read
		bool currentLeft = (currentDirection < drivingStraight);
 8001de6:	7fbb      	ldrb	r3, [r7, #30]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	bf94      	ite	ls
 8001dec:	2301      	movls	r3, #1
 8001dee:	2300      	movhi	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
		bool previouslyNotLeft = (previousDirection >= drivingStraight);
 8001df2:	7f7b      	ldrb	r3, [r7, #29]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	bf8c      	ite	hi
 8001df8:	2301      	movhi	r3, #1
 8001dfa:	2300      	movls	r3, #0
 8001dfc:	73bb      	strb	r3, [r7, #14]
		bool currentRight = (currentDirection > drivingStraight);
 8001dfe:	7fbb      	ldrb	r3, [r7, #30]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	bf8c      	ite	hi
 8001e04:	2301      	movhi	r3, #1
 8001e06:	2300      	movls	r3, #0
 8001e08:	737b      	strb	r3, [r7, #13]
		bool previouslyNotRight = (previousDirection <= drivingStraight);
 8001e0a:	7f7b      	ldrb	r3, [r7, #29]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	733b      	strb	r3, [r7, #12]

		// Check if the vehicle has changed direction
		// NOTE: The direction alert timer is started/restarted when the
		//		 vehicle changes direction. It is only stopped when driving
		//		 straight.
		if((currentDirection == drivingStraight) 	||	/* Vehicle is now driving straight */
 8001e16:	7fbb      	ldrb	r3, [r7, #30]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d00d      	beq.n	8001e38 <vehicleMonitorTask+0x14c>
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <vehicleMonitorTask+0x13c>
		   (currentLeft && previouslyNotLeft) 		||	/* Vehicle is now turning left; but wasn't previously */
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d107      	bne.n	8001e38 <vehicleMonitorTask+0x14c>
 8001e28:	7b7b      	ldrb	r3, [r7, #13]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f43f af66 	beq.w	8001cfc <vehicleMonitorTask+0x10>
		   (currentRight && previouslyNotRight))		/* Vehicle is now turning right; but wasn't previously */
 8001e30:	7b3b      	ldrb	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f43f af62 	beq.w	8001cfc <vehicleMonitorTask+0x10>
		{
			// Direction changed, so set the deactivate direction alert flag
			osEventFlagsSet(ledOutputEventFlagID, deactivateDirAlertEventFlag);
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <vehicleMonitorTask+0x1d8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fba0 	bl	8006584 <osEventFlagsSet>
//			assert(flagStatus & deactivateBothAlertEventFlags);

			// Since the vehicle is driving straight, it is not in danger
			// of committing a direction violation. Therefore, stop the
			// direction alert timer
			if(currentDirection == drivingStraight)
 8001e44:	7fbb      	ldrb	r3, [r7, #30]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d119      	bne.n	8001e7e <vehicleMonitorTask+0x192>
			{
				// Stop timer if running
				// NOTE: osTimerStop will return osErrorResource if
				// 		 the timer is not running
				if(osTimerIsRunning(directionAlertTimerID))
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <vehicleMonitorTask+0x1dc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 fb3d 	bl	80064ce <osTimerIsRunning>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f43f af50 	beq.w	8001cfc <vehicleMonitorTask+0x10>
				{
					status = osTimerStop(directionAlertTimerID);
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <vehicleMonitorTask+0x1dc>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f004 fafd 	bl	8006460 <osTimerStop>
 8001e66:	60b8      	str	r0, [r7, #8]
					assert(status == osOK);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f43f af46 	beq.w	8001cfc <vehicleMonitorTask+0x10>
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <vehicleMonitorTask+0x1e0>)
 8001e72:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001e74:	f240 2193 	movw	r1, #659	; 0x293
 8001e78:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001e7a:	f00a f9f1 	bl	800c260 <__assert_func>
			else
			{
				// NOTE: If the callback is called (after 5 seconds), then the direction
				// 		 alert event flag is raised and the proper LED is turned on via
				//		 the LED Output Task.
				status = osTimerStart(directionAlertTimerID, DIRECTION_ALERT_TIMER_TICKS);
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <vehicleMonitorTask+0x1dc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 fabc 	bl	8006404 <osTimerStart>
 8001e8c:	60b8      	str	r0, [r7, #8]
				assert(status == osOK);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f43f af33 	beq.w	8001cfc <vehicleMonitorTask+0x10>
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <vehicleMonitorTask+0x1e0>)
 8001e98:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <vehicleMonitorTask+0x1c4>)
 8001e9a:	f240 219e 	movw	r1, #670	; 0x29e
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <vehicleMonitorTask+0x1c8>)
 8001ea0:	f00a f9de 	bl	800c260 <__assert_func>
 8001ea4:	20025c0c 	.word	0x20025c0c
 8001ea8:	20025c04 	.word	0x20025c04
 8001eac:	0800d6a8 	.word	0x0800d6a8
 8001eb0:	0800d96c 	.word	0x0800d96c
 8001eb4:	0800d3fc 	.word	0x0800d3fc
 8001eb8:	200259d4 	.word	0x200259d4
 8001ebc:	20025c08 	.word	0x20025c08
 8001ec0:	200259d8 	.word	0x200259d8
 8001ec4:	20025c10 	.word	0x20025c10
 8001ec8:	200259fc 	.word	0x200259fc
 8001ecc:	0800d698 	.word	0x0800d698

08001ed0 <ledOutputTask>:
 * 			direction violation is linked to the red LED (LED4).
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void ledOutputTask(void* arg)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Pend on the alert update event flag
		uint32_t flags = osEventFlagsWait(ledOutputEventFlagID, LedOutputEventAllFlag,
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <ledOutputTask+0xd8>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	213c      	movs	r1, #60	; 0x3c
 8001ee4:	f004 fb92 	bl	800660c <osEventFlagsWait>
 8001ee8:	60f8      	str	r0, [r7, #12]
										  osFlagsWaitAny, osWaitForever);

//		assert(flags & LedOutputEventAllFlag);

		// Drive the LEDs according to which flag was set
		switch(flags)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3b04      	subs	r3, #4
 8001eee:	2b1c      	cmp	r3, #28
 8001ef0:	d858      	bhi.n	8001fa4 <ledOutputTask+0xd4>
 8001ef2:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <ledOutputTask+0x28>)
 8001ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef8:	08001f6d 	.word	0x08001f6d
 8001efc:	08001fa5 	.word	0x08001fa5
 8001f00:	08001fa5 	.word	0x08001fa5
 8001f04:	08001fa5 	.word	0x08001fa5
 8001f08:	08001f7b 	.word	0x08001f7b
 8001f0c:	08001fa5 	.word	0x08001fa5
 8001f10:	08001fa5 	.word	0x08001fa5
 8001f14:	08001fa5 	.word	0x08001fa5
 8001f18:	08001fa5 	.word	0x08001fa5
 8001f1c:	08001fa5 	.word	0x08001fa5
 8001f20:	08001fa5 	.word	0x08001fa5
 8001f24:	08001fa5 	.word	0x08001fa5
 8001f28:	08001f89 	.word	0x08001f89
 8001f2c:	08001fa5 	.word	0x08001fa5
 8001f30:	08001fa5 	.word	0x08001fa5
 8001f34:	08001fa5 	.word	0x08001fa5
 8001f38:	08001fa5 	.word	0x08001fa5
 8001f3c:	08001fa5 	.word	0x08001fa5
 8001f40:	08001fa5 	.word	0x08001fa5
 8001f44:	08001fa5 	.word	0x08001fa5
 8001f48:	08001fa5 	.word	0x08001fa5
 8001f4c:	08001fa5 	.word	0x08001fa5
 8001f50:	08001fa5 	.word	0x08001fa5
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fa5 	.word	0x08001fa5
 8001f5c:	08001fa5 	.word	0x08001fa5
 8001f60:	08001fa5 	.word	0x08001fa5
 8001f64:	08001fa5 	.word	0x08001fa5
 8001f68:	08001f97 	.word	0x08001f97
		{
			// Activate Speed Violation: Turn on green LED (LED3)
			case activateSpeedAlertEventFlag:
				HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <ledOutputTask+0xdc>)
 8001f74:	f001 fdfe 	bl	8003b74 <HAL_GPIO_WritePin>
				break;
 8001f78:	e015      	b.n	8001fa6 <ledOutputTask+0xd6>
			// Activate Direction Violation: Turn on red LED (LED4)
			case activateDirAlertEventFlag:
				HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <ledOutputTask+0xdc>)
 8001f82:	f001 fdf7 	bl	8003b74 <HAL_GPIO_WritePin>
				break;
 8001f86:	e00e      	b.n	8001fa6 <ledOutputTask+0xd6>
			// Deactivate Speed Violation: Turn off green LED (LED3)
			case deactivateSpeedAlertEventFlag:
				HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <ledOutputTask+0xdc>)
 8001f90:	f001 fdf0 	bl	8003b74 <HAL_GPIO_WritePin>
				break;
 8001f94:	e007      	b.n	8001fa6 <ledOutputTask+0xd6>
			// Deactivate Direction Violation: Turn off red LED (LED4)
			case deactivateDirAlertEventFlag:
				HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <ledOutputTask+0xdc>)
 8001f9e:	f001 fde9 	bl	8003b74 <HAL_GPIO_WritePin>
				break;
 8001fa2:	e000      	b.n	8001fa6 <ledOutputTask+0xd6>
			default:
				break;
 8001fa4:	bf00      	nop
	{
 8001fa6:	e797      	b.n	8001ed8 <ledOutputTask+0x8>
 8001fa8:	20025c10 	.word	0x20025c10
 8001fac:	40021800 	.word	0x40021800

08001fb0 <lcdDisplayTask>:
 * @details
 *
 * @param[in] arg Dummy parameter for use with osThreadNew()
 */
void lcdDisplayTask(void* arg)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Pend on the LCD Display Semaphore
		osStatus_t status = osSemaphoreAcquire(lcdDisplaySemaphoreID, osWaitForever);
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <lcdDisplayTask+0xd0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fd21 	bl	8006a08 <osSemaphoreAcquire>
 8001fc6:	6178      	str	r0, [r7, #20]
		assert(status == osOK);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <lcdDisplayTask+0x2c>
 8001fce:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <lcdDisplayTask+0xd4>)
 8001fd0:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <lcdDisplayTask+0xd8>)
 8001fd2:	f240 21e1 	movw	r1, #737	; 0x2e1
 8001fd6:	482d      	ldr	r0, [pc, #180]	; (800208c <lcdDisplayTask+0xdc>)
 8001fd8:	f00a f942 	bl	800c260 <__assert_func>

		// Acquire the Speed Data Mutex
		osStatus_t mutexStatus = osMutexAcquire(speedDataMutexID, osWaitForever);
 8001fdc:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <lcdDisplayTask+0xe0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f004 fbfd 	bl	80067e4 <osMutexAcquire>
 8001fea:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <lcdDisplayTask+0x50>
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <lcdDisplayTask+0xe4>)
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <lcdDisplayTask+0xd8>)
 8001ff6:	f240 21e5 	movw	r1, #741	; 0x2e5
 8001ffa:	4824      	ldr	r0, [pc, #144]	; (800208c <lcdDisplayTask+0xdc>)
 8001ffc:	f00a f930 	bl	800c260 <__assert_func>

		uint8_t currentSpeed = speedData.speed;
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <lcdDisplayTask+0xe8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	73fb      	strb	r3, [r7, #15]

		// Release the Speed Data Mutex
		mutexStatus = osMutexRelease(speedDataMutexID);
 8002006:	4b22      	ldr	r3, [pc, #136]	; (8002090 <lcdDisplayTask+0xe0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 fc35 	bl	800687a <osMutexRelease>
 8002010:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <lcdDisplayTask+0x76>
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <lcdDisplayTask+0xe4>)
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <lcdDisplayTask+0xd8>)
 800201c:	f240 21eb 	movw	r1, #747	; 0x2eb
 8002020:	481a      	ldr	r0, [pc, #104]	; (800208c <lcdDisplayTask+0xdc>)
 8002022:	f00a f91d 	bl	800c260 <__assert_func>

		// Acquire the Vehicle Direction Data Mutex
		mutexStatus = osMutexAcquire(vehicleDirDataMutexID, osWaitForever);
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <lcdDisplayTask+0xec>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f04f 31ff 	mov.w	r1, #4294967295
 800202e:	4618      	mov	r0, r3
 8002030:	f004 fbd8 	bl	80067e4 <osMutexAcquire>
 8002034:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <lcdDisplayTask+0x9a>
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <lcdDisplayTask+0xe4>)
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <lcdDisplayTask+0xd8>)
 8002040:	f240 21ef 	movw	r1, #751	; 0x2ef
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <lcdDisplayTask+0xdc>)
 8002046:	f00a f90b 	bl	800c260 <__assert_func>

		vehicleDirection currentDirection = directionData.direction;
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <lcdDisplayTask+0xf0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	73bb      	strb	r3, [r7, #14]

		// Release the Vehicle Direction Data Mutex
		mutexStatus = osMutexRelease(vehicleDirDataMutexID);
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <lcdDisplayTask+0xec>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f004 fc10 	bl	800687a <osMutexRelease>
 800205a:	6138      	str	r0, [r7, #16]
		assert(mutexStatus == osOK);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <lcdDisplayTask+0xc0>
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <lcdDisplayTask+0xe4>)
 8002064:	4a08      	ldr	r2, [pc, #32]	; (8002088 <lcdDisplayTask+0xd8>)
 8002066:	f240 21f5 	movw	r1, #757	; 0x2f5
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <lcdDisplayTask+0xdc>)
 800206c:	f00a f8f8 	bl	800c260 <__assert_func>

		// Update the LCD with the current speed and direction
		updateLCD(currentSpeed, currentDirection);
 8002070:	7bba      	ldrb	r2, [r7, #14]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fcbe 	bl	80019f8 <updateLCD>
	{
 800207c:	e79c      	b.n	8001fb8 <lcdDisplayTask+0x8>
 800207e:	bf00      	nop
 8002080:	20025c00 	.word	0x20025c00
 8002084:	0800d698 	.word	0x0800d698
 8002088:	0800d980 	.word	0x0800d980
 800208c:	0800d3fc 	.word	0x0800d3fc
 8002090:	20025c04 	.word	0x20025c04
 8002094:	0800d6a8 	.word	0x0800d6a8
 8002098:	200259d4 	.word	0x200259d4
 800209c:	20025c08 	.word	0x20025c08
 80020a0:	200259d8 	.word	0x200259d8

080020a4 <holdButtonTimerCallback>:
 * 			was held for more than 1 second.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void holdButtonTimerCallback(void* arg)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	// Notify the speedSetpoint task that the button was held
	buttonHeld = true;
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <holdButtonTimerCallback+0x1c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20025c15 	.word	0x20025c15

080020c4 <vehicleDirWakeupTimerCallback>:
 * 			to wakeup the Vehicle Direction Task.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void vehicleDirWakeupTimerCallback(void* arg)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	osStatus_t status = osSemaphoreRelease(vehicleDirSemaphoreID);
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <vehicleDirWakeupTimerCallback+0x30>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 fceb 	bl	8006aac <osSemaphoreRelease>
 80020d6:	60f8      	str	r0, [r7, #12]
	assert(status == osOK);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <vehicleDirWakeupTimerCallback+0x28>
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <vehicleDirWakeupTimerCallback+0x34>)
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <vehicleDirWakeupTimerCallback+0x38>)
 80020e2:	f240 3121 	movw	r1, #801	; 0x321
 80020e6:	4806      	ldr	r0, [pc, #24]	; (8002100 <vehicleDirWakeupTimerCallback+0x3c>)
 80020e8:	f00a f8ba 	bl	800c260 <__assert_func>
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20025b54 	.word	0x20025b54
 80020f8:	0800d698 	.word	0x0800d698
 80020fc:	0800d990 	.word	0x0800d990
 8002100:	0800d3fc 	.word	0x0800d3fc

08002104 <lcdDisplayWakeupTimerCallback>:
 * @details
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void lcdDisplayWakeupTimerCallback(void* arg)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	osStatus_t status = osSemaphoreRelease(lcdDisplaySemaphoreID);
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <lcdDisplayWakeupTimerCallback+0x30>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f004 fccb 	bl	8006aac <osSemaphoreRelease>
 8002116:	60f8      	str	r0, [r7, #12]
	assert(status == osOK);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <lcdDisplayWakeupTimerCallback+0x28>
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <lcdDisplayWakeupTimerCallback+0x34>)
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <lcdDisplayWakeupTimerCallback+0x38>)
 8002122:	f240 3132 	movw	r1, #818	; 0x332
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <lcdDisplayWakeupTimerCallback+0x3c>)
 8002128:	f00a f89a 	bl	800c260 <__assert_func>
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20025c00 	.word	0x20025c00
 8002138:	0800d698 	.word	0x0800d698
 800213c:	0800d9b0 	.word	0x0800d9b0
 8002140:	0800d3fc 	.word	0x0800d3fc

08002144 <directionAlertTimerCallback>:
 * 			to signal that a direction violation has occured.
 *
 * @param[in] arg Dummy parameter for use with osTimerNew()
 */
void directionAlertTimerCallback(void* arg)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	// Avoids a compiler warning for unused parameter
	(void) &arg;

	osEventFlagsSet(ledOutputEventFlagID, directionUpdateEventFlag);
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <directionAlertTimerCallback+0x1c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fa16 	bl	8006584 <osEventFlagsSet>
//	assert(flagStatus & speedAndDirectionEventFlags);
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20025c10 	.word	0x20025c10

08002164 <EXTI0_IRQHandler>:
 * 			post on the Button State Semaphore inorder to wake up the
 * 			Speed Setpoint Task. Toggles the buttonPressed global variable
 * 			on press/release.
 */
void EXTI0_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
	// Disable interrupts
	HAL_NVIC_DisableIRQ(BUTTON_IRQn);
 800216a:	2006      	movs	r0, #6
 800216c:	f001 f93c 	bl	80033e8 <HAL_NVIC_DisableIRQ>

	osStatus_t status = osSemaphoreRelease(buttonStateSemaphorID);
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <EXTI0_IRQHandler+0x60>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f004 fc99 	bl	8006aac <osSemaphoreRelease>
 800217a:	6078      	str	r0, [r7, #4]

	// verify status
	assert(status == osOK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <EXTI0_IRQHandler+0x2c>
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <EXTI0_IRQHandler+0x64>)
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <EXTI0_IRQHandler+0x68>)
 8002186:	f240 315d 	movw	r1, #861	; 0x35d
 800218a:	4811      	ldr	r0, [pc, #68]	; (80021d0 <EXTI0_IRQHandler+0x6c>)
 800218c:	f00a f868 	bl	800c260 <__assert_func>

	// Toggle buttonPressed
	// - On press: true
	// - On release false
	buttonPressed = !buttonPressed;
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <EXTI0_IRQHandler+0x70>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf14      	ite	ne
 800219a:	2301      	movne	r3, #1
 800219c:	2300      	moveq	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <EXTI0_IRQHandler+0x70>)
 80021ae:	701a      	strb	r2, [r3, #0]

	// Clear interrupt flag
	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_PIN);
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <EXTI0_IRQHandler+0x74>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	615a      	str	r2, [r3, #20]

	// Re-enable interrupts
	HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 80021b6:	2006      	movs	r0, #6
 80021b8:	f001 f908 	bl	80033cc <HAL_NVIC_EnableIRQ>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20025aa8 	.word	0x20025aa8
 80021c8:	0800d698 	.word	0x0800d698
 80021cc:	0800d9d0 	.word	0x0800d9d0
 80021d0:	0800d3fc 	.word	0x0800d3fc
 80021d4:	20025c14 	.word	0x20025c14
 80021d8:	40013c00 	.word	0x40013c00

080021dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db0a      	blt.n	8002206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	490c      	ldr	r1, [pc, #48]	; (8002228 <__NVIC_SetPriority+0x4c>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	440b      	add	r3, r1
 8002200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002204:	e00a      	b.n	800221c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4908      	ldr	r1, [pc, #32]	; (800222c <__NVIC_SetPriority+0x50>)
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	3b04      	subs	r3, #4
 8002214:	0112      	lsls	r2, r2, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	440b      	add	r3, r1
 800221a:	761a      	strb	r2, [r3, #24]
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <systemClockOverride>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void systemClockOverride(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b092      	sub	sp, #72	; 0x48
 8002234:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <systemClockOverride+0x7c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	4a1b      	ldr	r2, [pc, #108]	; (80022ac <systemClockOverride+0x7c>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	; 0x40
 8002246:	4b19      	ldr	r3, [pc, #100]	; (80022ac <systemClockOverride+0x7c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002252:	2301      	movs	r3, #1
 8002254:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800225a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225c:	2302      	movs	r3, #2
 800225e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002260:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002266:	2308      	movs	r3, #8
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800226a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800226e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002270:	2302      	movs	r3, #2
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002274:	2307      	movs	r3, #7
 8002276:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	4618      	mov	r0, r3
 800227c:	f002 f8fa 	bl	8004474 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002280:	230f      	movs	r3, #15
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002284:	2302      	movs	r3, #2
 8002286:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800228c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002296:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002298:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800229c:	2105      	movs	r1, #5
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 fb60 	bl	8004964 <HAL_RCC_ClockConfig>
}
 80022a4:	bf00      	nop
 80022a6:	3748      	adds	r7, #72	; 0x48
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800

080022b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Configure the system clock */
//  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  //TODO: if you ever regenerate HAL code you will need to comment out SystemClock_Config() again located above this comment
  systemClockOverride();
 80022b4:	f7ff ffbc 	bl	8002230 <systemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b8:	f000 f9f6 	bl	80026a8 <MX_GPIO_Init>
  MX_SPI5_Init();
 80022bc:	f000 f94c 	bl	8002558 <MX_SPI5_Init>
  MX_LTDC_Init();
 80022c0:	f000 f898 	bl	80023f4 <MX_LTDC_Init>
  MX_TIM11_Init();
 80022c4:	f000 f97e 	bl	80025c4 <MX_TIM11_Init>
  MX_DMA2D_Init();
 80022c8:	f000 f822 	bl	8002310 <MX_DMA2D_Init>
  MX_FMC_Init();
 80022cc:	f000 f99e 	bl	800260c <MX_FMC_Init>
  MX_I2C3_Init();
 80022d0:	f000 f850 	bl	8002374 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_EnableIRQ(BUTTON_IRQn);
 80022d4:	2006      	movs	r0, #6
 80022d6:	f001 f879 	bl	80033cc <HAL_NVIC_EnableIRQ>
  NVIC_SetPriority(BUTTON_IRQn, 13);
 80022da:	210d      	movs	r1, #13
 80022dc:	2006      	movs	r0, #6
 80022de:	f7ff ff7d 	bl	80021dc <__NVIC_SetPriority>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80022e2:	f003 ff07 	bl	80060f4 <osKernelInitialize>

  appInit();
 80022e6:	f7ff f904 	bl	80014f2 <appInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80022ea:	4a06      	ldr	r2, [pc, #24]	; (8002304 <main+0x54>)
 80022ec:	2100      	movs	r1, #0
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <main+0x58>)
 80022f0:	f003 ff4a 	bl	8006188 <osThreadNew>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <main+0x5c>)
 80022f8:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  traceSTART();
 80022fa:	f009 fe6d 	bl	800bfd8 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80022fe:	f003 ff1d 	bl	800613c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002302:	e7fe      	b.n	8002302 <main+0x52>
 8002304:	0800ebb4 	.word	0x0800ebb4
 8002308:	08002941 	.word	0x08002941
 800230c:	20025e28 	.word	0x20025e28

08002310 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <MX_DMA2D_Init+0x5c>)
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <MX_DMA2D_Init+0x60>)
 8002318:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <MX_DMA2D_Init+0x5c>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <MX_DMA2D_Init+0x5c>)
 8002322:	2202      	movs	r2, #2
 8002324:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_DMA2D_Init+0x5c>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <MX_DMA2D_Init+0x5c>)
 800232e:	2200      	movs	r2, #0
 8002330:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_DMA2D_Init+0x5c>)
 8002334:	2202      	movs	r2, #2
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_DMA2D_Init+0x5c>)
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_DMA2D_Init+0x5c>)
 8002340:	2200      	movs	r2, #0
 8002342:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002344:	4809      	ldr	r0, [pc, #36]	; (800236c <MX_DMA2D_Init+0x5c>)
 8002346:	f001 f869 	bl	800341c <HAL_DMA2D_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002350:	f000 fafe 	bl	8002950 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002354:	2101      	movs	r1, #1
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_DMA2D_Init+0x5c>)
 8002358:	f001 f8aa 	bl	80034b0 <HAL_DMA2D_ConfigLayer>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002362:	f000 faf5 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20025c18 	.word	0x20025c18
 8002370:	4002b000 	.word	0x4002b000

08002374 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002378:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <MX_I2C3_Init+0x74>)
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <MX_I2C3_Init+0x78>)
 800237c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_I2C3_Init+0x74>)
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <MX_I2C3_Init+0x7c>)
 8002382:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <MX_I2C3_Init+0x74>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <MX_I2C3_Init+0x74>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <MX_I2C3_Init+0x74>)
 8002392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002396:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <MX_I2C3_Init+0x74>)
 800239a:	2200      	movs	r2, #0
 800239c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <MX_I2C3_Init+0x74>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023a4:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <MX_I2C3_Init+0x74>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <MX_I2C3_Init+0x74>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <MX_I2C3_Init+0x74>)
 80023b2:	f001 fbf9 	bl	8003ba8 <HAL_I2C_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80023bc:	f000 fac8 	bl	8002950 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023c0:	2100      	movs	r1, #0
 80023c2:	4809      	ldr	r0, [pc, #36]	; (80023e8 <MX_I2C3_Init+0x74>)
 80023c4:	f001 fd34 	bl	8003e30 <HAL_I2CEx_ConfigAnalogFilter>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80023ce:	f000 fabf 	bl	8002950 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80023d2:	2100      	movs	r1, #0
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <MX_I2C3_Init+0x74>)
 80023d6:	f001 fd67 	bl	8003ea8 <HAL_I2CEx_ConfigDigitalFilter>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80023e0:	f000 fab6 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20025c58 	.word	0x20025c58
 80023ec:	40005c00 	.word	0x40005c00
 80023f0:	000186a0 	.word	0x000186a0

080023f4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b09a      	sub	sp, #104	; 0x68
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80023fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023fe:	2234      	movs	r2, #52	; 0x34
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f00a f871 	bl	800c4ea <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002408:	463b      	mov	r3, r7
 800240a:	2234      	movs	r2, #52	; 0x34
 800240c:	2100      	movs	r1, #0
 800240e:	4618      	mov	r0, r3
 8002410:	f00a f86b 	bl	800c4ea <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002414:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002416:	4a4f      	ldr	r2, [pc, #316]	; (8002554 <MX_LTDC_Init+0x160>)
 8002418:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800241a:	4b4d      	ldr	r3, [pc, #308]	; (8002550 <MX_LTDC_Init+0x15c>)
 800241c:	2200      	movs	r2, #0
 800241e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002420:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800242c:	4b48      	ldr	r3, [pc, #288]	; (8002550 <MX_LTDC_Init+0x15c>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002432:	4b47      	ldr	r3, [pc, #284]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002434:	2207      	movs	r2, #7
 8002436:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002438:	4b45      	ldr	r3, [pc, #276]	; (8002550 <MX_LTDC_Init+0x15c>)
 800243a:	2203      	movs	r2, #3
 800243c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800243e:	4b44      	ldr	r3, [pc, #272]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002440:	220e      	movs	r2, #14
 8002442:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002446:	2205      	movs	r2, #5
 8002448:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800244a:	4b41      	ldr	r3, [pc, #260]	; (8002550 <MX_LTDC_Init+0x15c>)
 800244c:	f240 228e 	movw	r2, #654	; 0x28e
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002454:	f240 12e5 	movw	r2, #485	; 0x1e5
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <MX_LTDC_Init+0x15c>)
 800245c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8002460:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002464:	f240 12e7 	movw	r2, #487	; 0x1e7
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <MX_LTDC_Init+0x15c>)
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002472:	4b37      	ldr	r3, [pc, #220]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800247a:	4b35      	ldr	r3, [pc, #212]	; (8002550 <MX_LTDC_Init+0x15c>)
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002482:	4833      	ldr	r0, [pc, #204]	; (8002550 <MX_LTDC_Init+0x15c>)
 8002484:	f001 fd50 	bl	8003f28 <HAL_LTDC_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800248e:	f000 fa5f 	bl	8002950 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024a2:	2300      	movs	r3, #0
 80024a4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80024ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024b2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80024b4:	2305      	movs	r3, #5
 80024b6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80024d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024da:	2200      	movs	r2, #0
 80024dc:	4619      	mov	r1, r3
 80024de:	481c      	ldr	r0, [pc, #112]	; (8002550 <MX_LTDC_Init+0x15c>)
 80024e0:	f001 fdf2 	bl	80040c8 <HAL_LTDC_ConfigLayer>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80024ea:	f000 fa31 	bl	8002950 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800250a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800250e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002510:	2305      	movs	r3, #5
 8002512:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002532:	463b      	mov	r3, r7
 8002534:	2201      	movs	r2, #1
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <MX_LTDC_Init+0x15c>)
 800253a:	f001 fdc5 	bl	80040c8 <HAL_LTDC_ConfigLayer>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8002544:	f000 fa04 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002548:	bf00      	nop
 800254a:	3768      	adds	r7, #104	; 0x68
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20025cac 	.word	0x20025cac
 8002554:	40016800 	.word	0x40016800

08002558 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <MX_SPI5_Init+0x64>)
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <MX_SPI5_Init+0x68>)
 8002560:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <MX_SPI5_Init+0x64>)
 8002564:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002568:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <MX_SPI5_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <MX_SPI5_Init+0x64>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <MX_SPI5_Init+0x64>)
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800257c:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <MX_SPI5_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <MX_SPI5_Init+0x64>)
 8002584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002588:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <MX_SPI5_Init+0x64>)
 800258c:	2200      	movs	r2, #0
 800258e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <MX_SPI5_Init+0x64>)
 8002592:	2200      	movs	r2, #0
 8002594:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <MX_SPI5_Init+0x64>)
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259c:	4b07      	ldr	r3, [pc, #28]	; (80025bc <MX_SPI5_Init+0x64>)
 800259e:	2200      	movs	r2, #0
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80025a2:	4b06      	ldr	r3, [pc, #24]	; (80025bc <MX_SPI5_Init+0x64>)
 80025a4:	220a      	movs	r2, #10
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80025a8:	4804      	ldr	r0, [pc, #16]	; (80025bc <MX_SPI5_Init+0x64>)
 80025aa:	f002 fddb 	bl	8005164 <HAL_SPI_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80025b4:	f000 f9cc 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20025d54 	.word	0x20025d54
 80025c0:	40015000 	.word	0x40015000

080025c4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <MX_TIM11_Init+0x40>)
 80025ca:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <MX_TIM11_Init+0x44>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <MX_TIM11_Init+0x40>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <MX_TIM11_Init+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <MX_TIM11_Init+0x40>)
 80025dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e2:	4b08      	ldr	r3, [pc, #32]	; (8002604 <MX_TIM11_Init+0x40>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <MX_TIM11_Init+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_TIM11_Init+0x40>)
 80025f0:	f003 fb96 	bl	8005d20 <HAL_TIM_Base_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80025fa:	f000 f9a9 	bl	8002950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20025dac 	.word	0x20025dac
 8002608:	40014800 	.word	0x40014800

0800260c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
 8002620:	615a      	str	r2, [r3, #20]
 8002622:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <MX_FMC_Init+0x94>)
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <MX_FMC_Init+0x98>)
 8002628:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <MX_FMC_Init+0x94>)
 800262c:	2201      	movs	r2, #1
 800262e:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002630:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <MX_FMC_Init+0x94>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002636:	4b1a      	ldr	r3, [pc, #104]	; (80026a0 <MX_FMC_Init+0x94>)
 8002638:	2204      	movs	r2, #4
 800263a:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800263c:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <MX_FMC_Init+0x94>)
 800263e:	2210      	movs	r2, #16
 8002640:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002642:	4b17      	ldr	r3, [pc, #92]	; (80026a0 <MX_FMC_Init+0x94>)
 8002644:	2240      	movs	r2, #64	; 0x40
 8002646:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002648:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <MX_FMC_Init+0x94>)
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800264e:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <MX_FMC_Init+0x94>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002654:	4b12      	ldr	r3, [pc, #72]	; (80026a0 <MX_FMC_Init+0x94>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_FMC_Init+0x94>)
 800265c:	2200      	movs	r2, #0
 800265e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <MX_FMC_Init+0x94>)
 8002662:	2200      	movs	r2, #0
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002666:	2310      	movs	r3, #16
 8002668:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800266a:	2310      	movs	r3, #16
 800266c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800266e:	2310      	movs	r3, #16
 8002670:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002672:	2310      	movs	r3, #16
 8002674:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002676:	2310      	movs	r3, #16
 8002678:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800267a:	2310      	movs	r3, #16
 800267c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800267e:	2310      	movs	r3, #16
 8002680:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4806      	ldr	r0, [pc, #24]	; (80026a0 <MX_FMC_Init+0x94>)
 8002688:	f002 fd38 	bl	80050fc <HAL_SDRAM_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002692:	f000 f95d 	bl	8002950 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002696:	bf00      	nop
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20025df4 	.word	0x20025df4
 80026a4:	a0000140 	.word	0xa0000140

080026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08e      	sub	sp, #56	; 0x38
 80026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]
 80026bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	4b99      	ldr	r3, [pc, #612]	; (8002928 <MX_GPIO_Init+0x280>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a98      	ldr	r2, [pc, #608]	; (8002928 <MX_GPIO_Init+0x280>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b96      	ldr	r3, [pc, #600]	; (8002928 <MX_GPIO_Init+0x280>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	4b92      	ldr	r3, [pc, #584]	; (8002928 <MX_GPIO_Init+0x280>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a91      	ldr	r2, [pc, #580]	; (8002928 <MX_GPIO_Init+0x280>)
 80026e4:	f043 0320 	orr.w	r3, r3, #32
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <MX_GPIO_Init+0x280>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	4b8b      	ldr	r3, [pc, #556]	; (8002928 <MX_GPIO_Init+0x280>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a8a      	ldr	r2, [pc, #552]	; (8002928 <MX_GPIO_Init+0x280>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b88      	ldr	r3, [pc, #544]	; (8002928 <MX_GPIO_Init+0x280>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	61bb      	str	r3, [r7, #24]
 8002710:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	4b84      	ldr	r3, [pc, #528]	; (8002928 <MX_GPIO_Init+0x280>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a83      	ldr	r2, [pc, #524]	; (8002928 <MX_GPIO_Init+0x280>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b81      	ldr	r3, [pc, #516]	; (8002928 <MX_GPIO_Init+0x280>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	4b7d      	ldr	r3, [pc, #500]	; (8002928 <MX_GPIO_Init+0x280>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a7c      	ldr	r2, [pc, #496]	; (8002928 <MX_GPIO_Init+0x280>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b7a      	ldr	r3, [pc, #488]	; (8002928 <MX_GPIO_Init+0x280>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <MX_GPIO_Init+0x280>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a75      	ldr	r2, [pc, #468]	; (8002928 <MX_GPIO_Init+0x280>)
 8002754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b73      	ldr	r3, [pc, #460]	; (8002928 <MX_GPIO_Init+0x280>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b6f      	ldr	r3, [pc, #444]	; (8002928 <MX_GPIO_Init+0x280>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a6e      	ldr	r2, [pc, #440]	; (8002928 <MX_GPIO_Init+0x280>)
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <MX_GPIO_Init+0x280>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	4b68      	ldr	r3, [pc, #416]	; (8002928 <MX_GPIO_Init+0x280>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a67      	ldr	r2, [pc, #412]	; (8002928 <MX_GPIO_Init+0x280>)
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <MX_GPIO_Init+0x280>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800279e:	2200      	movs	r2, #0
 80027a0:	2116      	movs	r1, #22
 80027a2:	4862      	ldr	r0, [pc, #392]	; (800292c <MX_GPIO_Init+0x284>)
 80027a4:	f001 f9e6 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	4860      	ldr	r0, [pc, #384]	; (8002930 <MX_GPIO_Init+0x288>)
 80027ae:	f001 f9e1 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80027b2:	2200      	movs	r2, #0
 80027b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80027b8:	485e      	ldr	r0, [pc, #376]	; (8002934 <MX_GPIO_Init+0x28c>)
 80027ba:	f001 f9db 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80027be:	2200      	movs	r2, #0
 80027c0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80027c4:	485c      	ldr	r0, [pc, #368]	; (8002938 <MX_GPIO_Init+0x290>)
 80027c6:	f001 f9d5 	bl	8003b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80027ca:	2316      	movs	r3, #22
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027de:	4619      	mov	r1, r3
 80027e0:	4852      	ldr	r0, [pc, #328]	; (800292c <MX_GPIO_Init+0x284>)
 80027e2:	f000 fef7 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027e6:	2301      	movs	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027ea:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f8:	4619      	mov	r1, r3
 80027fa:	484d      	ldr	r0, [pc, #308]	; (8002930 <MX_GPIO_Init+0x288>)
 80027fc:	f000 feea 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002800:	f248 0306 	movw	r3, #32774	; 0x8006
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002806:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002814:	4619      	mov	r1, r3
 8002816:	4846      	ldr	r0, [pc, #280]	; (8002930 <MX_GPIO_Init+0x288>)
 8002818:	f000 fedc 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002820:	2301      	movs	r3, #1
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	483f      	ldr	r0, [pc, #252]	; (8002930 <MX_GPIO_Init+0x288>)
 8002834:	f000 fece 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002838:	2320      	movs	r3, #32
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800283c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284a:	4619      	mov	r1, r3
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <MX_GPIO_Init+0x284>)
 800284e:	f000 fec1 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002852:	2304      	movs	r3, #4
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002856:	2300      	movs	r3, #0
 8002858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800285e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002862:	4619      	mov	r1, r3
 8002864:	4835      	ldr	r0, [pc, #212]	; (800293c <MX_GPIO_Init+0x294>)
 8002866:	f000 feb5 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800286a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	2302      	movs	r3, #2
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002878:	2300      	movs	r3, #0
 800287a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800287c:	230c      	movs	r3, #12
 800287e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002884:	4619      	mov	r1, r3
 8002886:	482d      	ldr	r0, [pc, #180]	; (800293c <MX_GPIO_Init+0x294>)
 8002888:	f000 fea4 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800288c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002892:	2300      	movs	r3, #0
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800289a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289e:	4619      	mov	r1, r3
 80028a0:	4826      	ldr	r0, [pc, #152]	; (800293c <MX_GPIO_Init+0x294>)
 80028a2:	f000 fe97 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80028a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b8:	4619      	mov	r1, r3
 80028ba:	481e      	ldr	r0, [pc, #120]	; (8002934 <MX_GPIO_Init+0x28c>)
 80028bc:	f000 fe8a 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80028c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d6:	4619      	mov	r1, r3
 80028d8:	4816      	ldr	r0, [pc, #88]	; (8002934 <MX_GPIO_Init+0x28c>)
 80028da:	f000 fe7b 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80028de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028f0:	2307      	movs	r3, #7
 80028f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f8:	4619      	mov	r1, r3
 80028fa:	480d      	ldr	r0, [pc, #52]	; (8002930 <MX_GPIO_Init+0x288>)
 80028fc:	f000 fe6a 	bl	80035d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002900:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002906:	2301      	movs	r3, #1
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002916:	4619      	mov	r1, r3
 8002918:	4807      	ldr	r0, [pc, #28]	; (8002938 <MX_GPIO_Init+0x290>)
 800291a:	f000 fe5b 	bl	80035d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800291e:	bf00      	nop
 8002920:	3738      	adds	r7, #56	; 0x38
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40020800 	.word	0x40020800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020c00 	.word	0x40020c00
 8002938:	40021800 	.word	0x40021800
 800293c:	40020400 	.word	0x40020400

08002940 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8002948:	2001      	movs	r0, #1
 800294a:	f003 fcaf 	bl	80062ac <osDelay>
 800294e:	e7fb      	b.n	8002948 <StartDefaultTask+0x8>

08002950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002954:	b672      	cpsid	i
}
 8002956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002958:	e7fe      	b.n	8002958 <Error_Handler+0x8>
	...

0800295c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0b      	ldr	r2, [pc, #44]	; (8002998 <HAL_DMA2D_MspInit+0x3c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10d      	bne.n	800298a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_DMA2D_MspInit+0x40>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_DMA2D_MspInit+0x40>)
 8002978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_DMA2D_MspInit+0x40>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	4002b000 	.word	0x4002b000
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a29      	ldr	r2, [pc, #164]	; (8002a64 <HAL_I2C_MspInit+0xc4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d14b      	bne.n	8002a5a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80029fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a00:	2312      	movs	r3, #18
 8002a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4619      	mov	r1, r3
 8002a16:	4815      	ldr	r0, [pc, #84]	; (8002a6c <HAL_I2C_MspInit+0xcc>)
 8002a18:	f000 fddc 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a22:	2312      	movs	r3, #18
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <HAL_I2C_MspInit+0xd0>)
 8002a3a:	f000 fdcb 	bl	80035d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 8002a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_I2C_MspInit+0xc8>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40005c00 	.word	0x40005c00
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b09a      	sub	sp, #104	; 0x68
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	2230      	movs	r2, #48	; 0x30
 8002a92:	2100      	movs	r1, #0
 8002a94:	4618      	mov	r0, r3
 8002a96:	f009 fd28 	bl	800c4ea <memset>
  if(hltdc->Instance==LTDC)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a81      	ldr	r2, [pc, #516]	; (8002ca4 <HAL_LTDC_MspInit+0x230>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 80fa 	bne.w	8002c9a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002aaa:	2332      	movs	r3, #50	; 0x32
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aba:	4618      	mov	r0, r3
 8002abc:	f002 f95e 	bl	8004d7c <HAL_RCCEx_PeriphCLKConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002ac6:	f7ff ff43 	bl	8002950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a75      	ldr	r2, [pc, #468]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b73      	ldr	r3, [pc, #460]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ae2:	623b      	str	r3, [r7, #32]
 8002ae4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a6e      	ldr	r2, [pc, #440]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002af0:	f043 0320 	orr.w	r3, r3, #32
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	61fb      	str	r3, [r7, #28]
 8002b00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a60      	ldr	r2, [pc, #384]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a59      	ldr	r2, [pc, #356]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	6313      	str	r3, [r2, #48]	; 0x30
 8002b66:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b4c      	ldr	r3, [pc, #304]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a4b      	ldr	r2, [pc, #300]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <HAL_LTDC_MspInit+0x234>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b92:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba0:	230e      	movs	r3, #14
 8002ba2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4840      	ldr	r0, [pc, #256]	; (8002cac <HAL_LTDC_MspInit+0x238>)
 8002bac:	f000 fd12 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002bb0:	f641 0358 	movw	r3, #6232	; 0x1858
 8002bb4:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bc2:	230e      	movs	r3, #14
 8002bc4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4838      	ldr	r0, [pc, #224]	; (8002cb0 <HAL_LTDC_MspInit+0x23c>)
 8002bce:	f000 fd01 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002be2:	2309      	movs	r3, #9
 8002be4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bea:	4619      	mov	r1, r3
 8002bec:	4831      	ldr	r0, [pc, #196]	; (8002cb4 <HAL_LTDC_MspInit+0x240>)
 8002bee:	f000 fcf1 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002bf2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c00:	2300      	movs	r3, #0
 8002c02:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c04:	230e      	movs	r3, #14
 8002c06:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4829      	ldr	r0, [pc, #164]	; (8002cb4 <HAL_LTDC_MspInit+0x240>)
 8002c10:	f000 fce0 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002c14:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002c18:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c26:	230e      	movs	r3, #14
 8002c28:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4821      	ldr	r0, [pc, #132]	; (8002cb8 <HAL_LTDC_MspInit+0x244>)
 8002c32:	f000 fccf 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002c36:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002c3a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c48:	230e      	movs	r3, #14
 8002c4a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c50:	4619      	mov	r1, r3
 8002c52:	481a      	ldr	r0, [pc, #104]	; (8002cbc <HAL_LTDC_MspInit+0x248>)
 8002c54:	f000 fcbe 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002c58:	2348      	movs	r3, #72	; 0x48
 8002c5a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c68:	230e      	movs	r3, #14
 8002c6a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c70:	4619      	mov	r1, r3
 8002c72:	4813      	ldr	r0, [pc, #76]	; (8002cc0 <HAL_LTDC_MspInit+0x24c>)
 8002c74:	f000 fcae 	bl	80035d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c7c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c8a:	2309      	movs	r3, #9
 8002c8c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c92:	4619      	mov	r1, r3
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <HAL_LTDC_MspInit+0x244>)
 8002c96:	f000 fc9d 	bl	80035d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c9a:	bf00      	nop
 8002c9c:	3768      	adds	r7, #104	; 0x68
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40016800 	.word	0x40016800
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40021400 	.word	0x40021400
 8002cb0:	40020000 	.word	0x40020000
 8002cb4:	40020400 	.word	0x40020400
 8002cb8:	40021800 	.word	0x40021800
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00

08002cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <HAL_SPI_MspInit+0x84>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d12c      	bne.n	8002d40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <HAL_SPI_MspInit+0x88>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <HAL_SPI_MspInit+0x88>)
 8002cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <HAL_SPI_MspInit+0x88>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_SPI_MspInit+0x88>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	4a10      	ldr	r2, [pc, #64]	; (8002d4c <HAL_SPI_MspInit+0x88>)
 8002d0c:	f043 0320 	orr.w	r3, r3, #32
 8002d10:	6313      	str	r3, [r2, #48]	; 0x30
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <HAL_SPI_MspInit+0x88>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002d1e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d24:	2302      	movs	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d30:	2305      	movs	r3, #5
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4805      	ldr	r0, [pc, #20]	; (8002d50 <HAL_SPI_MspInit+0x8c>)
 8002d3c:	f000 fc4a 	bl	80035d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002d40:	bf00      	nop
 8002d42:	3728      	adds	r7, #40	; 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40015000 	.word	0x40015000
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40021400 	.word	0x40021400

08002d54 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_SPI_MspDeInit+0x30>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10a      	bne.n	8002d7c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_SPI_MspDeInit+0x34>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_SPI_MspDeInit+0x34>)
 8002d6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d70:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d72:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <HAL_SPI_MspDeInit+0x38>)
 8002d78:	f000 fdd8 	bl	800392c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40015000 	.word	0x40015000
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40021400 	.word	0x40021400

08002d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_TIM_Base_MspInit+0x3c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10d      	bne.n	8002dbe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_TIM_Base_MspInit+0x40>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_TIM_Base_MspInit+0x40>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <HAL_TIM_Base_MspInit+0x40>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002de8:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_FMC_MspInit+0x104>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d16f      	bne.n	8002ed0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002df0:	4b39      	ldr	r3, [pc, #228]	; (8002ed8 <HAL_FMC_MspInit+0x104>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	4b38      	ldr	r3, [pc, #224]	; (8002edc <HAL_FMC_MspInit+0x108>)
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	4a37      	ldr	r2, [pc, #220]	; (8002edc <HAL_FMC_MspInit+0x108>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6393      	str	r3, [r2, #56]	; 0x38
 8002e06:	4b35      	ldr	r3, [pc, #212]	; (8002edc <HAL_FMC_MspInit+0x108>)
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002e12:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e16:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e20:	2303      	movs	r3, #3
 8002e22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e24:	230c      	movs	r3, #12
 8002e26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	482c      	ldr	r0, [pc, #176]	; (8002ee0 <HAL_FMC_MspInit+0x10c>)
 8002e2e:	f000 fbd1 	bl	80035d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002e32:	2301      	movs	r3, #1
 8002e34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e42:	230c      	movs	r3, #12
 8002e44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4826      	ldr	r0, [pc, #152]	; (8002ee4 <HAL_FMC_MspInit+0x110>)
 8002e4c:	f000 fbc2 	bl	80035d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002e50:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e54:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e62:	230c      	movs	r3, #12
 8002e64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481f      	ldr	r0, [pc, #124]	; (8002ee8 <HAL_FMC_MspInit+0x114>)
 8002e6c:	f000 fbb2 	bl	80035d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002e70:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e74:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e82:	230c      	movs	r3, #12
 8002e84:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4818      	ldr	r0, [pc, #96]	; (8002eec <HAL_FMC_MspInit+0x118>)
 8002e8c:	f000 fba2 	bl	80035d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002e90:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e94:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4811      	ldr	r0, [pc, #68]	; (8002ef0 <HAL_FMC_MspInit+0x11c>)
 8002eac:	f000 fb92 	bl	80035d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002eb0:	2360      	movs	r3, #96	; 0x60
 8002eb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ec0:	230c      	movs	r3, #12
 8002ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	480a      	ldr	r0, [pc, #40]	; (8002ef4 <HAL_FMC_MspInit+0x120>)
 8002eca:	f000 fb83 	bl	80035d4 <HAL_GPIO_Init>
 8002ece:	e000      	b.n	8002ed2 <HAL_FMC_MspInit+0xfe>
    return;
 8002ed0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20025e2c 	.word	0x20025e2c
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40021400 	.word	0x40021400
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	40021800 	.word	0x40021800
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40020c00 	.word	0x40020c00
 8002ef4:	40020400 	.word	0x40020400

08002ef8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002f00:	f7ff ff68 	bl	8002dd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f10:	e7fe      	b.n	8002f10 <NMI_Handler+0x4>

08002f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f16:	e7fe      	b.n	8002f16 <HardFault_Handler+0x4>

08002f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f1c:	e7fe      	b.n	8002f1c <MemManage_Handler+0x4>

08002f1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f22:	e7fe      	b.n	8002f22 <BusFault_Handler+0x4>

08002f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <UsageFault_Handler+0x4>

08002f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f3c:	f000 f93a 	bl	80031b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002f40:	f006 fa10 	bl	8009364 <xTaskGetSchedulerState>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d001      	beq.n	8002f4e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002f4a:	f007 fa2d 	bl	800a3a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  return 1;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <_kill>:

int _kill(int pid, int sig)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b082      	sub	sp, #8
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f6c:	f009 fb62 	bl	800c634 <__errno>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2216      	movs	r2, #22
 8002f74:	601a      	str	r2, [r3, #0]
  return -1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <_exit>:

void _exit (int status)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffe7 	bl	8002f62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f94:	e7fe      	b.n	8002f94 <_exit+0x12>

08002f96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e00a      	b.n	8002fbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fa8:	f3af 8000 	nop.w
 8002fac:	4601      	mov	r1, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	60ba      	str	r2, [r7, #8]
 8002fb4:	b2ca      	uxtb	r2, r1
 8002fb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	dbf0      	blt.n	8002fa8 <_read+0x12>
  }

  return len;
 8002fc6:	687b      	ldr	r3, [r7, #4]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e009      	b.n	8002ff6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	60ba      	str	r2, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	dbf1      	blt.n	8002fe2 <_write+0x12>
  }
  return len;
 8002ffe:	687b      	ldr	r3, [r7, #4]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_close>:

int _close(int file)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003010:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003014:	4618      	mov	r0, r3
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003030:	605a      	str	r2, [r3, #4]
  return 0;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_isatty>:

int _isatty(int file)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003078:	4a14      	ldr	r2, [pc, #80]	; (80030cc <_sbrk+0x5c>)
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <_sbrk+0x60>)
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003084:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <_sbrk+0x64>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <_sbrk+0x64>)
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <_sbrk+0x68>)
 8003090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	429a      	cmp	r2, r3
 800309e:	d207      	bcs.n	80030b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030a0:	f009 fac8 	bl	800c634 <__errno>
 80030a4:	4603      	mov	r3, r0
 80030a6:	220c      	movs	r2, #12
 80030a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e009      	b.n	80030c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <_sbrk+0x64>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <_sbrk+0x64>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4413      	add	r3, r2
 80030be:	4a05      	ldr	r2, [pc, #20]	; (80030d4 <_sbrk+0x64>)
 80030c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030c2:	68fb      	ldr	r3, [r7, #12]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20030000 	.word	0x20030000
 80030d0:	00000400 	.word	0x00000400
 80030d4:	20025e30 	.word	0x20025e30
 80030d8:	2002b3e8 	.word	0x2002b3e8

080030dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <SystemInit+0x20>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <SystemInit+0x20>)
 80030e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003138 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003104:	480d      	ldr	r0, [pc, #52]	; (800313c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003106:	490e      	ldr	r1, [pc, #56]	; (8003140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003108:	4a0e      	ldr	r2, [pc, #56]	; (8003144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800310c:	e002      	b.n	8003114 <LoopCopyDataInit>

0800310e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003112:	3304      	adds	r3, #4

08003114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003118:	d3f9      	bcc.n	800310e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800311c:	4c0b      	ldr	r4, [pc, #44]	; (800314c <LoopFillZerobss+0x26>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003120:	e001      	b.n	8003126 <LoopFillZerobss>

08003122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003124:	3204      	adds	r2, #4

08003126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003128:	d3fb      	bcc.n	8003122 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800312a:	f7ff ffd7 	bl	80030dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800312e:	f009 fa87 	bl	800c640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003132:	f7ff f8bd 	bl	80022b0 <main>
  bx  lr    
 8003136:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003138:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800313c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003140:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003144:	0800ec84 	.word	0x0800ec84
  ldr r2, =_sbss
 8003148:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800314c:	2002b3e8 	.word	0x2002b3e8

08003150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003150:	e7fe      	b.n	8003150 <ADC_IRQHandler>
	...

08003154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <HAL_InitTick+0x54>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_InitTick+0x58>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316a:	fbb3 f3f1 	udiv	r3, r3, r1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f946 	bl	8003404 <HAL_SYSTICK_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e00e      	b.n	80031a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d80a      	bhi.n	800319e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003188:	2200      	movs	r2, #0
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f000 f900 	bl	8003394 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003194:	4a06      	ldr	r2, [pc, #24]	; (80031b0 <HAL_InitTick+0x5c>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	e000      	b.n	80031a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000010 	.word	0x20000010
 80031ac:	20000018 	.word	0x20000018
 80031b0:	20000014 	.word	0x20000014

080031b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_IncTick+0x20>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x24>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4413      	add	r3, r2
 80031c4:	4a04      	ldr	r2, [pc, #16]	; (80031d8 <HAL_IncTick+0x24>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	20000018 	.word	0x20000018
 80031d8:	20025e34 	.word	0x20025e34

080031dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  return uwTick;
 80031e0:	4b03      	ldr	r3, [pc, #12]	; (80031f0 <HAL_GetTick+0x14>)
 80031e2:	681b      	ldr	r3, [r3, #0]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20025e34 	.word	0x20025e34

080031f4 <__NVIC_GetPriorityGrouping>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_DisableIRQ>:
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db12      	blt.n	8003284 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	490a      	ldr	r1, [pc, #40]	; (8003290 <__NVIC_DisableIRQ+0x44>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	3320      	adds	r3, #32
 8003274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003278:	f3bf 8f4f 	dsb	sy
}
 800327c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800327e:	f3bf 8f6f 	isb	sy
}
 8003282:	bf00      	nop
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100

08003294 <__NVIC_SetPriority>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	4603      	mov	r3, r0
 800329c:	6039      	str	r1, [r7, #0]
 800329e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	db0a      	blt.n	80032be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	490c      	ldr	r1, [pc, #48]	; (80032e0 <__NVIC_SetPriority+0x4c>)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	440b      	add	r3, r1
 80032b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80032bc:	e00a      	b.n	80032d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4908      	ldr	r1, [pc, #32]	; (80032e4 <__NVIC_SetPriority+0x50>)
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	3b04      	subs	r3, #4
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	440b      	add	r3, r1
 80032d2:	761a      	strb	r2, [r3, #24]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	e000e100 	.word	0xe000e100
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f1c3 0307 	rsb	r3, r3, #7
 8003302:	2b04      	cmp	r3, #4
 8003304:	bf28      	it	cs
 8003306:	2304      	movcs	r3, #4
 8003308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3304      	adds	r3, #4
 800330e:	2b06      	cmp	r3, #6
 8003310:	d902      	bls.n	8003318 <NVIC_EncodePriority+0x30>
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3b03      	subs	r3, #3
 8003316:	e000      	b.n	800331a <NVIC_EncodePriority+0x32>
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003330:	f04f 31ff 	mov.w	r1, #4294967295
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	43d9      	mvns	r1, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	4313      	orrs	r3, r2
         );
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	; 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003360:	d301      	bcc.n	8003366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003362:	2301      	movs	r3, #1
 8003364:	e00f      	b.n	8003386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <SysTick_Config+0x40>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336e:	210f      	movs	r1, #15
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f7ff ff8e 	bl	8003294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <SysTick_Config+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <SysTick_Config+0x40>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a6:	f7ff ff25 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 80033aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	6978      	ldr	r0, [r7, #20]
 80033b2:	f7ff ff99 	bl	80032e8 <NVIC_EncodePriority>
 80033b6:	4602      	mov	r2, r0
 80033b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff68 	bl	8003294 <__NVIC_SetPriority>
}
 80033c4:	bf00      	nop
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff ff18 	bl	8003210 <__NVIC_EnableIRQ>
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff ff28 	bl	800324c <__NVIC_DisableIRQ>
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff ff9f 	bl	8003350 <SysTick_Config>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e03b      	b.n	80034a6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fa8a 	bl	800295c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	f023 0107 	bic.w	r1, r3, #7
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003486:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	68d1      	ldr	r1, [r2, #12]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	430b      	orrs	r3, r1
 8003494:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_DMA2D_ConfigLayer+0x20>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e079      	b.n	80035c4 <HAL_DMA2D_ConfigLayer+0x114>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	3318      	adds	r3, #24
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80034fa:	4b35      	ldr	r3, [pc, #212]	; (80035d0 <HAL_DMA2D_ConfigLayer+0x120>)
 80034fc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b0a      	cmp	r3, #10
 8003504:	d003      	beq.n	800350e <HAL_DMA2D_ConfigLayer+0x5e>
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b09      	cmp	r3, #9
 800350c:	d107      	bne.n	800351e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	e005      	b.n	800352a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d120      	bne.n	8003572 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	43db      	mvns	r3, r3
 800353a:	ea02 0103 	and.w	r1, r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	430a      	orrs	r2, r1
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b0a      	cmp	r3, #10
 8003558:	d003      	beq.n	8003562 <HAL_DMA2D_ConfigLayer+0xb2>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b09      	cmp	r3, #9
 8003560:	d127      	bne.n	80035b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
 8003570:	e01f      	b.n	80035b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	ea02 0103 	and.w	r1, r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	430a      	orrs	r2, r1
 8003588:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b0a      	cmp	r3, #10
 800359a:	d003      	beq.n	80035a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b09      	cmp	r3, #9
 80035a2:	d106      	bne.n	80035b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80035b0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	371c      	adds	r7, #28
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	ff03000f 	.word	0xff03000f

080035d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	; 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e177      	b.n	80038e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035f0:	2201      	movs	r2, #1
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	429a      	cmp	r2, r3
 800360a:	f040 8166 	bne.w	80038da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d005      	beq.n	8003626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003622:	2b02      	cmp	r3, #2
 8003624:	d130      	bne.n	8003688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800365c:	2201      	movs	r2, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 0201 	and.w	r2, r3, #1
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d017      	beq.n	80036c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d123      	bne.n	8003718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	08da      	lsrs	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3208      	adds	r2, #8
 80036d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	220f      	movs	r2, #15
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	08da      	lsrs	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3208      	adds	r2, #8
 8003712:	69b9      	ldr	r1, [r7, #24]
 8003714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	2203      	movs	r2, #3
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 0203 	and.w	r2, r3, #3
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80c0 	beq.w	80038da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <HAL_GPIO_Init+0x324>)
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_GPIO_Init+0x324>)
 8003764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003768:	6453      	str	r3, [r2, #68]	; 0x44
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_GPIO_Init+0x324>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003776:	4a61      	ldr	r2, [pc, #388]	; (80038fc <HAL_GPIO_Init+0x328>)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	220f      	movs	r2, #15
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a58      	ldr	r2, [pc, #352]	; (8003900 <HAL_GPIO_Init+0x32c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d037      	beq.n	8003812 <HAL_GPIO_Init+0x23e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a57      	ldr	r2, [pc, #348]	; (8003904 <HAL_GPIO_Init+0x330>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d031      	beq.n	800380e <HAL_GPIO_Init+0x23a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a56      	ldr	r2, [pc, #344]	; (8003908 <HAL_GPIO_Init+0x334>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02b      	beq.n	800380a <HAL_GPIO_Init+0x236>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a55      	ldr	r2, [pc, #340]	; (800390c <HAL_GPIO_Init+0x338>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d025      	beq.n	8003806 <HAL_GPIO_Init+0x232>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a54      	ldr	r2, [pc, #336]	; (8003910 <HAL_GPIO_Init+0x33c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01f      	beq.n	8003802 <HAL_GPIO_Init+0x22e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a53      	ldr	r2, [pc, #332]	; (8003914 <HAL_GPIO_Init+0x340>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x22a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a52      	ldr	r2, [pc, #328]	; (8003918 <HAL_GPIO_Init+0x344>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x226>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a51      	ldr	r2, [pc, #324]	; (800391c <HAL_GPIO_Init+0x348>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x222>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a50      	ldr	r2, [pc, #320]	; (8003920 <HAL_GPIO_Init+0x34c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x21e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a4f      	ldr	r2, [pc, #316]	; (8003924 <HAL_GPIO_Init+0x350>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x21a>
 80037ea:	2309      	movs	r3, #9
 80037ec:	e012      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037ee:	230a      	movs	r3, #10
 80037f0:	e010      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037f2:	2308      	movs	r3, #8
 80037f4:	e00e      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037f6:	2307      	movs	r3, #7
 80037f8:	e00c      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037fa:	2306      	movs	r3, #6
 80037fc:	e00a      	b.n	8003814 <HAL_GPIO_Init+0x240>
 80037fe:	2305      	movs	r3, #5
 8003800:	e008      	b.n	8003814 <HAL_GPIO_Init+0x240>
 8003802:	2304      	movs	r3, #4
 8003804:	e006      	b.n	8003814 <HAL_GPIO_Init+0x240>
 8003806:	2303      	movs	r3, #3
 8003808:	e004      	b.n	8003814 <HAL_GPIO_Init+0x240>
 800380a:	2302      	movs	r3, #2
 800380c:	e002      	b.n	8003814 <HAL_GPIO_Init+0x240>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <HAL_GPIO_Init+0x240>
 8003812:	2300      	movs	r3, #0
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f002 0203 	and.w	r2, r2, #3
 800381a:	0092      	lsls	r2, r2, #2
 800381c:	4093      	lsls	r3, r2
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4313      	orrs	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003824:	4935      	ldr	r1, [pc, #212]	; (80038fc <HAL_GPIO_Init+0x328>)
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	089b      	lsrs	r3, r3, #2
 800382a:	3302      	adds	r3, #2
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003832:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <HAL_GPIO_Init+0x354>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003856:	4a34      	ldr	r2, [pc, #208]	; (8003928 <HAL_GPIO_Init+0x354>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800385c:	4b32      	ldr	r3, [pc, #200]	; (8003928 <HAL_GPIO_Init+0x354>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003880:	4a29      	ldr	r2, [pc, #164]	; (8003928 <HAL_GPIO_Init+0x354>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003886:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_GPIO_Init+0x354>)
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038aa:	4a1f      	ldr	r2, [pc, #124]	; (8003928 <HAL_GPIO_Init+0x354>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038b0:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <HAL_GPIO_Init+0x354>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <HAL_GPIO_Init+0x354>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	3301      	adds	r3, #1
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b0f      	cmp	r3, #15
 80038e4:	f67f ae84 	bls.w	80035f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3724      	adds	r7, #36	; 0x24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40013800 	.word	0x40013800
 8003900:	40020000 	.word	0x40020000
 8003904:	40020400 	.word	0x40020400
 8003908:	40020800 	.word	0x40020800
 800390c:	40020c00 	.word	0x40020c00
 8003910:	40021000 	.word	0x40021000
 8003914:	40021400 	.word	0x40021400
 8003918:	40021800 	.word	0x40021800
 800391c:	40021c00 	.word	0x40021c00
 8003920:	40022000 	.word	0x40022000
 8003924:	40022400 	.word	0x40022400
 8003928:	40013c00 	.word	0x40013c00

0800392c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e0d9      	b.n	8003afc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003948:	2201      	movs	r2, #1
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	429a      	cmp	r2, r3
 8003960:	f040 80c9 	bne.w	8003af6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003964:	4a6b      	ldr	r2, [pc, #428]	; (8003b14 <HAL_GPIO_DeInit+0x1e8>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0303 	and.w	r3, r3, #3
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	220f      	movs	r2, #15
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4013      	ands	r3, r2
 8003984:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a63      	ldr	r2, [pc, #396]	; (8003b18 <HAL_GPIO_DeInit+0x1ec>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d037      	beq.n	80039fe <HAL_GPIO_DeInit+0xd2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a62      	ldr	r2, [pc, #392]	; (8003b1c <HAL_GPIO_DeInit+0x1f0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d031      	beq.n	80039fa <HAL_GPIO_DeInit+0xce>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a61      	ldr	r2, [pc, #388]	; (8003b20 <HAL_GPIO_DeInit+0x1f4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02b      	beq.n	80039f6 <HAL_GPIO_DeInit+0xca>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a60      	ldr	r2, [pc, #384]	; (8003b24 <HAL_GPIO_DeInit+0x1f8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d025      	beq.n	80039f2 <HAL_GPIO_DeInit+0xc6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a5f      	ldr	r2, [pc, #380]	; (8003b28 <HAL_GPIO_DeInit+0x1fc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01f      	beq.n	80039ee <HAL_GPIO_DeInit+0xc2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a5e      	ldr	r2, [pc, #376]	; (8003b2c <HAL_GPIO_DeInit+0x200>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d019      	beq.n	80039ea <HAL_GPIO_DeInit+0xbe>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a5d      	ldr	r2, [pc, #372]	; (8003b30 <HAL_GPIO_DeInit+0x204>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_DeInit+0xba>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a5c      	ldr	r2, [pc, #368]	; (8003b34 <HAL_GPIO_DeInit+0x208>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_DeInit+0xb6>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a5b      	ldr	r2, [pc, #364]	; (8003b38 <HAL_GPIO_DeInit+0x20c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_DeInit+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a5a      	ldr	r2, [pc, #360]	; (8003b3c <HAL_GPIO_DeInit+0x210>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_DeInit+0xae>
 80039d6:	2309      	movs	r3, #9
 80039d8:	e012      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039da:	230a      	movs	r3, #10
 80039dc:	e010      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039de:	2308      	movs	r3, #8
 80039e0:	e00e      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039e2:	2307      	movs	r3, #7
 80039e4:	e00c      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039e6:	2306      	movs	r3, #6
 80039e8:	e00a      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039ea:	2305      	movs	r3, #5
 80039ec:	e008      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039ee:	2304      	movs	r3, #4
 80039f0:	e006      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039f2:	2303      	movs	r3, #3
 80039f4:	e004      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e002      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_GPIO_DeInit+0xd4>
 80039fe:	2300      	movs	r3, #0
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	f002 0203 	and.w	r2, r2, #3
 8003a06:	0092      	lsls	r2, r2, #2
 8003a08:	4093      	lsls	r3, r2
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d132      	bne.n	8003a76 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a10:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	4949      	ldr	r1, [pc, #292]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a1e:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	4946      	ldr	r1, [pc, #280]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a2c:	4b44      	ldr	r3, [pc, #272]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43db      	mvns	r3, r3
 8003a34:	4942      	ldr	r1, [pc, #264]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a3a:	4b41      	ldr	r3, [pc, #260]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	493f      	ldr	r1, [pc, #252]	; (8003b40 <HAL_GPIO_DeInit+0x214>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a58:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <HAL_GPIO_DeInit+0x1e8>)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	43da      	mvns	r2, r3
 8003a68:	482a      	ldr	r0, [pc, #168]	; (8003b14 <HAL_GPIO_DeInit+0x1e8>)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	400a      	ands	r2, r1
 8003a70:	3302      	adds	r3, #2
 8003a72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	2103      	movs	r1, #3
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	43db      	mvns	r3, r3
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	08da      	lsrs	r2, r3, #3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3208      	adds	r2, #8
 8003a94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	220f      	movs	r2, #15
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	08d2      	lsrs	r2, r2, #3
 8003aac:	4019      	ands	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2103      	movs	r1, #3
 8003ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	401a      	ands	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	2103      	movs	r1, #3
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	401a      	ands	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f af22 	bls.w	8003948 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40013800 	.word	0x40013800
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	40020400 	.word	0x40020400
 8003b20:	40020800 	.word	0x40020800
 8003b24:	40020c00 	.word	0x40020c00
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	40021400 	.word	0x40021400
 8003b30:	40021800 	.word	0x40021800
 8003b34:	40021c00 	.word	0x40021c00
 8003b38:	40022000 	.word	0x40022000
 8003b3c:	40022400 	.word	0x40022400
 8003b40:	40013c00 	.word	0x40013c00

08003b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	887b      	ldrh	r3, [r7, #2]
 8003b56:	4013      	ands	r3, r2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	e001      	b.n	8003b66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	807b      	strh	r3, [r7, #2]
 8003b80:	4613      	mov	r3, r2
 8003b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b84:	787b      	ldrb	r3, [r7, #1]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8a:	887a      	ldrh	r2, [r7, #2]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b90:	e003      	b.n	8003b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	041a      	lsls	r2, r3, #16
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	619a      	str	r2, [r3, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e12b      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe fee6 	bl	80029a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f001 f8a2 	bl	8004d54 <HAL_RCC_GetPCLK1Freq>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4a81      	ldr	r2, [pc, #516]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d807      	bhi.n	8003c2c <HAL_I2C_Init+0x84>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a80      	ldr	r2, [pc, #512]	; (8003e20 <HAL_I2C_Init+0x278>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	e006      	b.n	8003c3a <HAL_I2C_Init+0x92>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4a7d      	ldr	r2, [pc, #500]	; (8003e24 <HAL_I2C_Init+0x27c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	bf94      	ite	ls
 8003c34:	2301      	movls	r3, #1
 8003c36:	2300      	movhi	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e0e7      	b.n	8003e12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a78      	ldr	r2, [pc, #480]	; (8003e28 <HAL_I2C_Init+0x280>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0c9b      	lsrs	r3, r3, #18
 8003c4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a6a      	ldr	r2, [pc, #424]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d802      	bhi.n	8003c7c <HAL_I2C_Init+0xd4>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	e009      	b.n	8003c90 <HAL_I2C_Init+0xe8>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	4a69      	ldr	r2, [pc, #420]	; (8003e2c <HAL_I2C_Init+0x284>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	3301      	adds	r3, #1
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	430b      	orrs	r3, r1
 8003c96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ca2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	495c      	ldr	r1, [pc, #368]	; (8003e1c <HAL_I2C_Init+0x274>)
 8003cac:	428b      	cmp	r3, r1
 8003cae:	d819      	bhi.n	8003ce4 <HAL_I2C_Init+0x13c>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e59      	subs	r1, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cbe:	1c59      	adds	r1, r3, #1
 8003cc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_I2C_Init+0x138>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e59      	subs	r1, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	e051      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	e04f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d111      	bne.n	8003d10 <HAL_I2C_Init+0x168>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	440b      	add	r3, r1
 8003cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cfe:	3301      	adds	r3, #1
 8003d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	e012      	b.n	8003d36 <HAL_I2C_Init+0x18e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e58      	subs	r0, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6859      	ldr	r1, [r3, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	0099      	lsls	r1, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Init+0x196>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e022      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_I2C_Init+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e58      	subs	r0, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	460b      	mov	r3, r1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	440b      	add	r3, r1
 8003d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	e00f      	b.n	8003d84 <HAL_I2C_Init+0x1dc>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	6809      	ldr	r1, [r1, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69da      	ldr	r2, [r3, #28]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6911      	ldr	r1, [r2, #16]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	000186a0 	.word	0x000186a0
 8003e20:	001e847f 	.word	0x001e847f
 8003e24:	003d08ff 	.word	0x003d08ff
 8003e28:	431bde83 	.word	0x431bde83
 8003e2c:	10624dd3 	.word	0x10624dd3

08003e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d129      	bne.n	8003e9a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2224      	movs	r2, #36	; 0x24
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0210 	bic.w	r2, r2, #16
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e000      	b.n	8003e9c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
  }
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d12a      	bne.n	8003f18 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2224      	movs	r2, #36	; 0x24
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ee2:	89fb      	ldrh	r3, [r7, #14]
 8003ee4:	f023 030f 	bic.w	r3, r3, #15
 8003ee8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	89fb      	ldrh	r3, [r7, #14]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	89fa      	ldrh	r2, [r7, #14]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f18:	2302      	movs	r3, #2
  }
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0bf      	b.n	80040ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fe fd90 	bl	8002a74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003f6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6999      	ldr	r1, [r3, #24]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	; (80040c4 <HAL_LTDC_Init+0x19c>)
 8003f9c:	400b      	ands	r3, r1
 8003f9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6899      	ldr	r1, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68d9      	ldr	r1, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <HAL_LTDC_Init+0x19c>)
 8003fca:	400b      	ands	r3, r1
 8003fcc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68d9      	ldr	r1, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6919      	ldr	r1, [r3, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <HAL_LTDC_Init+0x19c>)
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6919      	ldr	r1, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6959      	ldr	r1, [r3, #20]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b27      	ldr	r3, [pc, #156]	; (80040c4 <HAL_LTDC_Init+0x19c>)
 8004026:	400b      	ands	r3, r1
 8004028:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6959      	ldr	r1, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800406a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0206 	orr.w	r2, r2, #6
 8004096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	f000f800 	.word	0xf000f800

080040c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040c8:	b5b0      	push	{r4, r5, r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_LTDC_ConfigLayer+0x1a>
 80040de:	2302      	movs	r3, #2
 80040e0:	e02c      	b.n	800413c <HAL_LTDC_ConfigLayer+0x74>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2202      	movs	r2, #2
 80040ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2134      	movs	r1, #52	; 0x34
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	4413      	add	r3, r2
 80040fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
 8004108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004114:	682b      	ldr	r3, [r5, #0]
 8004116:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f811 	bl	8004144 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2201      	movs	r2, #1
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bdb0      	pop	{r4, r5, r7, pc}

08004144 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004160:	4413      	add	r3, r2
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	01db      	lsls	r3, r3, #7
 8004170:	4413      	add	r3, r2
 8004172:	3384      	adds	r3, #132	; 0x84
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	4611      	mov	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	01d2      	lsls	r2, r2, #7
 8004180:	440a      	add	r2, r1
 8004182:	3284      	adds	r2, #132	; 0x84
 8004184:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004188:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	0c1b      	lsrs	r3, r3, #16
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800419a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800419c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	01db      	lsls	r3, r3, #7
 80041a8:	440b      	add	r3, r1
 80041aa:	3384      	adds	r3, #132	; 0x84
 80041ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c2:	4413      	add	r3, r2
 80041c4:	041b      	lsls	r3, r3, #16
 80041c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	01db      	lsls	r3, r3, #7
 80041d2:	4413      	add	r3, r2
 80041d4:	3384      	adds	r3, #132	; 0x84
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	6812      	ldr	r2, [r2, #0]
 80041dc:	4611      	mov	r1, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	01d2      	lsls	r2, r2, #7
 80041e2:	440a      	add	r2, r1
 80041e4:	3284      	adds	r2, #132	; 0x84
 80041e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041fa:	4413      	add	r3, r2
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4619      	mov	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	01db      	lsls	r3, r3, #7
 8004208:	440b      	add	r3, r1
 800420a:	3384      	adds	r3, #132	; 0x84
 800420c:	4619      	mov	r1, r3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4313      	orrs	r3, r2
 8004212:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	4413      	add	r3, r2
 8004220:	3384      	adds	r3, #132	; 0x84
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	4611      	mov	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	01d2      	lsls	r2, r2, #7
 800422e:	440a      	add	r2, r1
 8004230:	3284      	adds	r2, #132	; 0x84
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	01db      	lsls	r3, r3, #7
 8004242:	4413      	add	r3, r2
 8004244:	3384      	adds	r3, #132	; 0x84
 8004246:	461a      	mov	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	01db      	lsls	r3, r3, #7
 8004274:	4413      	add	r3, r2
 8004276:	3384      	adds	r3, #132	; 0x84
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	01db      	lsls	r3, r3, #7
 8004284:	4413      	add	r3, r2
 8004286:	3384      	adds	r3, #132	; 0x84
 8004288:	461a      	mov	r2, r3
 800428a:	2300      	movs	r3, #0
 800428c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004294:	461a      	mov	r2, r3
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	431a      	orrs	r2, r3
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	431a      	orrs	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	440b      	add	r3, r1
 80042aa:	3384      	adds	r3, #132	; 0x84
 80042ac:	4619      	mov	r1, r3
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	01db      	lsls	r3, r3, #7
 80042be:	4413      	add	r3, r2
 80042c0:	3384      	adds	r3, #132	; 0x84
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	4611      	mov	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	01d2      	lsls	r2, r2, #7
 80042ce:	440a      	add	r2, r1
 80042d0:	3284      	adds	r2, #132	; 0x84
 80042d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	01db      	lsls	r3, r3, #7
 80042e2:	4413      	add	r3, r2
 80042e4:	3384      	adds	r3, #132	; 0x84
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	01db      	lsls	r3, r3, #7
 80042f8:	4413      	add	r3, r2
 80042fa:	3384      	adds	r3, #132	; 0x84
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	4611      	mov	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	01d2      	lsls	r2, r2, #7
 8004308:	440a      	add	r2, r1
 800430a:	3284      	adds	r2, #132	; 0x84
 800430c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004310:	f023 0307 	bic.w	r3, r3, #7
 8004314:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	6809      	ldr	r1, [r1, #0]
 8004322:	4608      	mov	r0, r1
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	01c9      	lsls	r1, r1, #7
 8004328:	4401      	add	r1, r0
 800432a:	3184      	adds	r1, #132	; 0x84
 800432c:	4313      	orrs	r3, r2
 800432e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	01db      	lsls	r3, r3, #7
 800433a:	4413      	add	r3, r2
 800433c:	3384      	adds	r3, #132	; 0x84
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	01db      	lsls	r3, r3, #7
 800434a:	4413      	add	r3, r2
 800434c:	3384      	adds	r3, #132	; 0x84
 800434e:	461a      	mov	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	01db      	lsls	r3, r3, #7
 800435e:	4413      	add	r3, r2
 8004360:	3384      	adds	r3, #132	; 0x84
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004372:	2304      	movs	r3, #4
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	e01b      	b.n	80043b0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004380:	2303      	movs	r3, #3
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e014      	b.n	80043b0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d00b      	beq.n	80043a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004392:	2b02      	cmp	r3, #2
 8004394:	d007      	beq.n	80043a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800439a:	2b03      	cmp	r3, #3
 800439c:	d003      	beq.n	80043a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043a2:	2b07      	cmp	r3, #7
 80043a4:	d102      	bne.n	80043ac <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80043a6:	2302      	movs	r3, #2
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e001      	b.n	80043b0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80043ac:	2301      	movs	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	01db      	lsls	r3, r3, #7
 80043ba:	4413      	add	r3, r2
 80043bc:	3384      	adds	r3, #132	; 0x84
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	4611      	mov	r1, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	01d2      	lsls	r2, r2, #7
 80043ca:	440a      	add	r2, r1
 80043cc:	3284      	adds	r2, #132	; 0x84
 80043ce:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80043d2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6859      	ldr	r1, [r3, #4]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	1acb      	subs	r3, r1, r3
 80043ea:	69f9      	ldr	r1, [r7, #28]
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	6809      	ldr	r1, [r1, #0]
 80043f6:	4608      	mov	r0, r1
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	01c9      	lsls	r1, r1, #7
 80043fc:	4401      	add	r1, r0
 80043fe:	3184      	adds	r1, #132	; 0x84
 8004400:	4313      	orrs	r3, r2
 8004402:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	4413      	add	r3, r2
 8004410:	3384      	adds	r3, #132	; 0x84
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	4611      	mov	r1, r2
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	01d2      	lsls	r2, r2, #7
 800441e:	440a      	add	r2, r1
 8004420:	3284      	adds	r2, #132	; 0x84
 8004422:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	461a      	mov	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	01db      	lsls	r3, r3, #7
 8004436:	4413      	add	r3, r2
 8004438:	3384      	adds	r3, #132	; 0x84
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	01db      	lsls	r3, r3, #7
 800444c:	4413      	add	r3, r2
 800444e:	3384      	adds	r3, #132	; 0x84
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	4611      	mov	r1, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	01d2      	lsls	r2, r2, #7
 800445c:	440a      	add	r2, r1
 800445e:	3284      	adds	r2, #132	; 0x84
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6013      	str	r3, [r2, #0]
}
 8004466:	bf00      	nop
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e267      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d075      	beq.n	800457e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004492:	4b88      	ldr	r3, [pc, #544]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d00c      	beq.n	80044b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800449e:	4b85      	ldr	r3, [pc, #532]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d112      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b82      	ldr	r3, [pc, #520]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4b7e      	ldr	r3, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d05b      	beq.n	800457c <HAL_RCC_OscConfig+0x108>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d157      	bne.n	800457c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e242      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_OscConfig+0x74>
 80044da:	4b76      	ldr	r3, [pc, #472]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a75      	ldr	r2, [pc, #468]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x98>
 80044f2:	4b70      	ldr	r3, [pc, #448]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a6f      	ldr	r2, [pc, #444]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b6d      	ldr	r3, [pc, #436]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6c      	ldr	r2, [pc, #432]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0xb0>
 800450c:	4b69      	ldr	r3, [pc, #420]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a68      	ldr	r2, [pc, #416]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a65      	ldr	r2, [pc, #404]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fe56 	bl	80031dc <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fe fe52 	bl	80031dc <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e207      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b5b      	ldr	r3, [pc, #364]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0xc0>
 8004552:	e014      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe fe42 	bl	80031dc <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fe fe3e 	bl	80031dc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b64      	cmp	r3, #100	; 0x64
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1f3      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	4b51      	ldr	r3, [pc, #324]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0xe8>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d063      	beq.n	8004652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800458a:	4b4a      	ldr	r3, [pc, #296]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004596:	4b47      	ldr	r3, [pc, #284]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d11c      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b44      	ldr	r3, [pc, #272]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d116      	bne.n	80045dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ae:	4b41      	ldr	r3, [pc, #260]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d001      	beq.n	80045c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1c7      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	4937      	ldr	r1, [pc, #220]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	e03a      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d020      	beq.n	8004626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e4:	4b34      	ldr	r3, [pc, #208]	; (80046b8 <HAL_RCC_OscConfig+0x244>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fe fdf7 	bl	80031dc <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fe fdf3 	bl	80031dc <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1a8      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004604:	4b2b      	ldr	r3, [pc, #172]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4925      	ldr	r1, [pc, #148]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004620:	4313      	orrs	r3, r2
 8004622:	600b      	str	r3, [r1, #0]
 8004624:	e015      	b.n	8004652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_OscConfig+0x244>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fe fdd6 	bl	80031dc <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004634:	f7fe fdd2 	bl	80031dc <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e187      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d036      	beq.n	80046cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d016      	beq.n	8004694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <HAL_RCC_OscConfig+0x248>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fe fdb6 	bl	80031dc <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004674:	f7fe fdb2 	bl	80031dc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e167      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_RCC_OscConfig+0x240>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x200>
 8004692:	e01b      	b.n	80046cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004694:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_RCC_OscConfig+0x248>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469a:	f7fe fd9f 	bl	80031dc <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	e00e      	b.n	80046c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fe fd9b 	bl	80031dc <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d907      	bls.n	80046c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e150      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	42470000 	.word	0x42470000
 80046bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c0:	4b88      	ldr	r3, [pc, #544]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ea      	bne.n	80046a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8097 	beq.w	8004808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046da:	2300      	movs	r3, #0
 80046dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046de:	4b81      	ldr	r3, [pc, #516]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ea:	2300      	movs	r3, #0
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	4b7d      	ldr	r3, [pc, #500]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	4a7c      	ldr	r2, [pc, #496]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f8:	6413      	str	r3, [r2, #64]	; 0x40
 80046fa:	4b7a      	ldr	r3, [pc, #488]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b77      	ldr	r3, [pc, #476]	; (80048e8 <HAL_RCC_OscConfig+0x474>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <HAL_RCC_OscConfig+0x474>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a73      	ldr	r2, [pc, #460]	; (80048e8 <HAL_RCC_OscConfig+0x474>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fe fd5b 	bl	80031dc <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fe fd57 	bl	80031dc <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e10c      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <HAL_RCC_OscConfig+0x474>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x2ea>
 8004750:	4b64      	ldr	r3, [pc, #400]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	4a63      	ldr	r2, [pc, #396]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6713      	str	r3, [r2, #112]	; 0x70
 800475c:	e01c      	b.n	8004798 <HAL_RCC_OscConfig+0x324>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b05      	cmp	r3, #5
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x30c>
 8004766:	4b5f      	ldr	r3, [pc, #380]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	4a5e      	ldr	r2, [pc, #376]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	6713      	str	r3, [r2, #112]	; 0x70
 8004772:	4b5c      	ldr	r3, [pc, #368]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	4a5b      	ldr	r2, [pc, #364]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 0301 	orr.w	r3, r3, #1
 800477c:	6713      	str	r3, [r2, #112]	; 0x70
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0x324>
 8004780:	4b58      	ldr	r3, [pc, #352]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a57      	ldr	r2, [pc, #348]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
 800478c:	4b55      	ldr	r3, [pc, #340]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004790:	4a54      	ldr	r2, [pc, #336]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004792:	f023 0304 	bic.w	r3, r3, #4
 8004796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d015      	beq.n	80047cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fe fd1c 	bl	80031dc <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	e00a      	b.n	80047be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fe fd18 	bl	80031dc <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e0cb      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	4b49      	ldr	r3, [pc, #292]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ee      	beq.n	80047a8 <HAL_RCC_OscConfig+0x334>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047cc:	f7fe fd06 	bl	80031dc <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fe fd02 	bl	80031dc <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0b5      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ea:	4b3e      	ldr	r3, [pc, #248]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ee      	bne.n	80047d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047f6:	7dfb      	ldrb	r3, [r7, #23]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d105      	bne.n	8004808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fc:	4b39      	ldr	r3, [pc, #228]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	4a38      	ldr	r2, [pc, #224]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 80a1 	beq.w	8004954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004812:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b08      	cmp	r3, #8
 800481c:	d05c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d141      	bne.n	80048aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004826:	4b31      	ldr	r3, [pc, #196]	; (80048ec <HAL_RCC_OscConfig+0x478>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482c:	f7fe fcd6 	bl	80031dc <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004834:	f7fe fcd2 	bl	80031dc <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e087      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004846:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69da      	ldr	r2, [r3, #28]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	019b      	lsls	r3, r3, #6
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	3b01      	subs	r3, #1
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	491b      	ldr	r1, [pc, #108]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 8004878:	4313      	orrs	r3, r2
 800487a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800487c:	4b1b      	ldr	r3, [pc, #108]	; (80048ec <HAL_RCC_OscConfig+0x478>)
 800487e:	2201      	movs	r2, #1
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7fe fcab 	bl	80031dc <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488a:	f7fe fca7 	bl	80031dc <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e05c      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x416>
 80048a8:	e054      	b.n	8004954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048aa:	4b10      	ldr	r3, [pc, #64]	; (80048ec <HAL_RCC_OscConfig+0x478>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b0:	f7fe fc94 	bl	80031dc <HAL_GetTick>
 80048b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048b6:	e008      	b.n	80048ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b8:	f7fe fc90 	bl	80031dc <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e045      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f0      	bne.n	80048b8 <HAL_RCC_OscConfig+0x444>
 80048d6:	e03d      	b.n	8004954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d107      	bne.n	80048f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e038      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
 80048e4:	40023800 	.word	0x40023800
 80048e8:	40007000 	.word	0x40007000
 80048ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x4ec>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d028      	beq.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d121      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004916:	429a      	cmp	r2, r3
 8004918:	d11a      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004920:	4013      	ands	r3, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004928:	4293      	cmp	r3, r2
 800492a:	d111      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	3b01      	subs	r3, #1
 800493a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800

08004964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0cc      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004978:	4b68      	ldr	r3, [pc, #416]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d90c      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b65      	ldr	r3, [pc, #404]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b63      	ldr	r3, [pc, #396]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a58      	ldr	r2, [pc, #352]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d0:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a52      	ldr	r2, [pc, #328]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b50      	ldr	r3, [pc, #320]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	494d      	ldr	r1, [pc, #308]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d044      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d119      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a22:	4b3f      	ldr	r3, [pc, #252]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e06f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a32:	4b3b      	ldr	r3, [pc, #236]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e067      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a42:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f023 0203 	bic.w	r2, r3, #3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	4934      	ldr	r1, [pc, #208]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a54:	f7fe fbc2 	bl	80031dc <HAL_GetTick>
 8004a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5a:	e00a      	b.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5c:	f7fe fbbe 	bl	80031dc <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e04f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a72:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 020c 	and.w	r2, r3, #12
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d1eb      	bne.n	8004a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d20c      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b22      	ldr	r3, [pc, #136]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e032      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab8:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4916      	ldr	r1, [pc, #88]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	490e      	ldr	r1, [pc, #56]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aea:	f000 f821 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	490a      	ldr	r1, [pc, #40]	; (8004b24 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <HAL_RCC_ClockConfig+0x1c4>)
 8004b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_RCC_ClockConfig+0x1c8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fb22 	bl	8003154 <HAL_InitTick>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023c00 	.word	0x40023c00
 8004b20:	40023800 	.word	0x40023800
 8004b24:	0800ebd8 	.word	0x0800ebd8
 8004b28:	20000010 	.word	0x20000010
 8004b2c:	20000014 	.word	0x20000014

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b094      	sub	sp, #80	; 0x50
 8004b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b40:	2300      	movs	r3, #0
 8004b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b48:	4b79      	ldr	r3, [pc, #484]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d00d      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x40>
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	f200 80e1 	bhi.w	8004d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x34>
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b62:	e0db      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b64:	4b73      	ldr	r3, [pc, #460]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b68:	e0db      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b6a:	4b73      	ldr	r3, [pc, #460]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b6e:	e0d8      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b70:	4b6f      	ldr	r3, [pc, #444]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b7a:	4b6d      	ldr	r3, [pc, #436]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d063      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b86:	4b6a      	ldr	r3, [pc, #424]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	099b      	lsrs	r3, r3, #6
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b98:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	462b      	mov	r3, r5
 8004ba6:	f04f 0000 	mov.w	r0, #0
 8004baa:	f04f 0100 	mov.w	r1, #0
 8004bae:	0159      	lsls	r1, r3, #5
 8004bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb4:	0150      	lsls	r0, r2, #5
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4621      	mov	r1, r4
 8004bbc:	1a51      	subs	r1, r2, r1
 8004bbe:	6139      	str	r1, [r7, #16]
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bd4:	4659      	mov	r1, fp
 8004bd6:	018b      	lsls	r3, r1, #6
 8004bd8:	4651      	mov	r1, sl
 8004bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bde:	4651      	mov	r1, sl
 8004be0:	018a      	lsls	r2, r1, #6
 8004be2:	4651      	mov	r1, sl
 8004be4:	ebb2 0801 	subs.w	r8, r2, r1
 8004be8:	4659      	mov	r1, fp
 8004bea:	eb63 0901 	sbc.w	r9, r3, r1
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c02:	4690      	mov	r8, r2
 8004c04:	4699      	mov	r9, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	eb18 0303 	adds.w	r3, r8, r3
 8004c0c:	60bb      	str	r3, [r7, #8]
 8004c0e:	462b      	mov	r3, r5
 8004c10:	eb49 0303 	adc.w	r3, r9, r3
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c22:	4629      	mov	r1, r5
 8004c24:	024b      	lsls	r3, r1, #9
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	024a      	lsls	r2, r1, #9
 8004c30:	4610      	mov	r0, r2
 8004c32:	4619      	mov	r1, r3
 8004c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c36:	2200      	movs	r2, #0
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c40:	f7fb fb76 	bl	8000330 <__aeabi_uldivmod>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4613      	mov	r3, r2
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	e058      	b.n	8004d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4e:	4b38      	ldr	r3, [pc, #224]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	099b      	lsrs	r3, r3, #6
 8004c54:	2200      	movs	r2, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	4611      	mov	r1, r2
 8004c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c5e:	623b      	str	r3, [r7, #32]
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
 8004c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c68:	4642      	mov	r2, r8
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	f04f 0000 	mov.w	r0, #0
 8004c70:	f04f 0100 	mov.w	r1, #0
 8004c74:	0159      	lsls	r1, r3, #5
 8004c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c7a:	0150      	lsls	r0, r2, #5
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4641      	mov	r1, r8
 8004c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c86:	4649      	mov	r1, r9
 8004c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	00eb      	lsls	r3, r5, #3
 8004cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cb6:	00e2      	lsls	r2, r4, #3
 8004cb8:	4614      	mov	r4, r2
 8004cba:	461d      	mov	r5, r3
 8004cbc:	4643      	mov	r3, r8
 8004cbe:	18e3      	adds	r3, r4, r3
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	eb45 0303 	adc.w	r3, r5, r3
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	028b      	lsls	r3, r1, #10
 8004cda:	4621      	mov	r1, r4
 8004cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	028a      	lsls	r2, r1, #10
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cea:	2200      	movs	r2, #0
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	61fa      	str	r2, [r7, #28]
 8004cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cf4:	f7fb fb1c 	bl	8000330 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3750      	adds	r7, #80	; 0x50
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	00f42400 	.word	0x00f42400
 8004d38:	007a1200 	.word	0x007a1200

08004d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d42:	681b      	ldr	r3, [r3, #0]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000010 	.word	0x20000010

08004d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d58:	f7ff fff0 	bl	8004d3c <HAL_RCC_GetHCLKFreq>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	0a9b      	lsrs	r3, r3, #10
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	4903      	ldr	r1, [pc, #12]	; (8004d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6a:	5ccb      	ldrb	r3, [r1, r3]
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40023800 	.word	0x40023800
 8004d78:	0800ebe8 	.word	0x0800ebe8

08004d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10b      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d075      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004db0:	4b91      	ldr	r3, [pc, #580]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004db6:	f7fe fa11 	bl	80031dc <HAL_GetTick>
 8004dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dbe:	f7fe fa0d 	bl	80031dc <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e189      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dd0:	4b8a      	ldr	r3, [pc, #552]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d009      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	019a      	lsls	r2, r3, #6
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	071b      	lsls	r3, r3, #28
 8004df4:	4981      	ldr	r1, [pc, #516]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0302 	and.w	r3, r3, #2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e08:	4b7c      	ldr	r3, [pc, #496]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	0f1b      	lsrs	r3, r3, #28
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	019a      	lsls	r2, r3, #6
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	431a      	orrs	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	071b      	lsls	r3, r3, #28
 8004e28:	4974      	ldr	r1, [pc, #464]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e30:	4b72      	ldr	r3, [pc, #456]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e36:	f023 021f 	bic.w	r2, r3, #31
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	496e      	ldr	r1, [pc, #440]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	019a      	lsls	r2, r3, #6
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	061b      	lsls	r3, r3, #24
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	071b      	lsls	r3, r3, #28
 8004e68:	4964      	ldr	r1, [pc, #400]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e70:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e76:	f7fe f9b1 	bl	80031dc <HAL_GetTick>
 8004e7a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e7e:	f7fe f9ad 	bl	80031dc <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e129      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e90:	4b5a      	ldr	r3, [pc, #360]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d079      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004eb4:	4b52      	ldr	r3, [pc, #328]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eba:	f7fe f98f 	bl	80031dc <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ec2:	f7fe f98b 	bl	80031dc <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e107      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ed4:	4b49      	ldr	r3, [pc, #292]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ee0:	d0ef      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d020      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004eee:	4b43      	ldr	r3, [pc, #268]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef4:	0f1b      	lsrs	r3, r3, #28
 8004ef6:	f003 0307 	and.w	r3, r3, #7
 8004efa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	019a      	lsls	r2, r3, #6
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	061b      	lsls	r3, r3, #24
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	071b      	lsls	r3, r3, #28
 8004f0e:	493b      	ldr	r1, [pc, #236]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f16:	4b39      	ldr	r3, [pc, #228]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	4934      	ldr	r1, [pc, #208]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01e      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	0e1b      	lsrs	r3, r3, #24
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	019a      	lsls	r2, r3, #6
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	071b      	lsls	r3, r3, #28
 8004f5c:	4927      	ldr	r1, [pc, #156]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	4922      	ldr	r1, [pc, #136]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f7a:	4b21      	ldr	r3, [pc, #132]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f80:	f7fe f92c 	bl	80031dc <HAL_GetTick>
 8004f84:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f88:	f7fe f928 	bl	80031dc <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e0a4      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa6:	d1ef      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 808b 	beq.w	80050cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	4a0f      	ldr	r2, [pc, #60]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fc6:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004fd2:	4b0c      	ldr	r3, [pc, #48]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004fde:	f7fe f8fd 	bl	80031dc <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004fe4:	e010      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004fe6:	f7fe f8f9 	bl	80031dc <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d909      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e075      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004ff8:	42470068 	.word	0x42470068
 8004ffc:	40023800 	.word	0x40023800
 8005000:	42470070 	.word	0x42470070
 8005004:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005008:	4b38      	ldr	r3, [pc, #224]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0e8      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005014:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d02f      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	429a      	cmp	r2, r3
 8005030:	d028      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005032:	4b2f      	ldr	r3, [pc, #188]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800503c:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005042:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005048:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800504e:	4b28      	ldr	r3, [pc, #160]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d114      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800505a:	f7fe f8bf 	bl	80031dc <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005060:	e00a      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005062:	f7fe f8bb 	bl	80031dc <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005070:	4293      	cmp	r3, r2
 8005072:	d901      	bls.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e035      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800507a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ee      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005090:	d10d      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005092:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a6:	4912      	ldr	r1, [pc, #72]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]
 80050ac:	e005      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	4a0f      	ldr	r2, [pc, #60]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c6:	490a      	ldr	r1, [pc, #40]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80050e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40007000 	.word	0x40007000
 80050f0:	40023800 	.word	0x40023800
 80050f4:	42470e40 	.word	0x42470e40
 80050f8:	424711e0 	.word	0x424711e0

080050fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e025      	b.n	800515c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7fd fee7 	bl	8002ef8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f000 fedf 	bl	8005f00 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	f000 ff34 	bl	8005fba <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07b      	b.n	800526e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	2b00      	cmp	r3, #0
 800517c:	d108      	bne.n	8005190 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005186:	d009      	beq.n	800519c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	61da      	str	r2, [r3, #28]
 800518e:	e005      	b.n	800519c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fd fd84 	bl	8002cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	ea42 0103 	orr.w	r1, r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 0104 	and.w	r1, r3, #4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 0210 	and.w	r2, r3, #16
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800525c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e01a      	b.n	80052be <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7fd fd57 	bl	8002d54 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b088      	sub	sp, #32
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d101      	bne.n	80052e8 <HAL_SPI_Transmit+0x22>
 80052e4:	2302      	movs	r3, #2
 80052e6:	e126      	b.n	8005536 <HAL_SPI_Transmit+0x270>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052f0:	f7fd ff74 	bl	80031dc <HAL_GetTick>
 80052f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d002      	beq.n	800530c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005306:	2302      	movs	r3, #2
 8005308:	77fb      	strb	r3, [r7, #31]
    goto error;
 800530a:	e10b      	b.n	8005524 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <HAL_SPI_Transmit+0x52>
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800531c:	e102      	b.n	8005524 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2203      	movs	r2, #3
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	88fa      	ldrh	r2, [r7, #6]
 8005336:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005364:	d10f      	bne.n	8005386 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005374:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005384:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d007      	beq.n	80053a4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ac:	d14b      	bne.n	8005446 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_SPI_Transmit+0xf6>
 80053b6:	8afb      	ldrh	r3, [r7, #22]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d13e      	bne.n	800543a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	881a      	ldrh	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	1c9a      	adds	r2, r3, #2
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053e0:	e02b      	b.n	800543a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d112      	bne.n	8005416 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	881a      	ldrh	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005400:	1c9a      	adds	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	86da      	strh	r2, [r3, #54]	; 0x36
 8005414:	e011      	b.n	800543a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005416:	f7fd fee1 	bl	80031dc <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d803      	bhi.n	800542e <HAL_SPI_Transmit+0x168>
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d102      	bne.n	8005434 <HAL_SPI_Transmit+0x16e>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005438:	e074      	b.n	8005524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543e:	b29b      	uxth	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ce      	bne.n	80053e2 <HAL_SPI_Transmit+0x11c>
 8005444:	e04c      	b.n	80054e0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Transmit+0x18e>
 800544e:	8afb      	ldrh	r3, [r7, #22]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d140      	bne.n	80054d6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800547a:	e02c      	b.n	80054d6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	d113      	bne.n	80054b2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	330c      	adds	r3, #12
 8005494:	7812      	ldrb	r2, [r2, #0]
 8005496:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80054b0:	e011      	b.n	80054d6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054b2:	f7fd fe93 	bl	80031dc <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d803      	bhi.n	80054ca <HAL_SPI_Transmit+0x204>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d102      	bne.n	80054d0 <HAL_SPI_Transmit+0x20a>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054d4:	e026      	b.n	8005524 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1cd      	bne.n	800547c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 fbd9 	bl	8005c9c <SPI_EndRxTxTransaction>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e000      	b.n	8005524 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005522:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005534:	7ffb      	ldrb	r3, [r7, #31]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af02      	add	r7, sp, #8
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555a:	d112      	bne.n	8005582 <HAL_SPI_Receive+0x44>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10e      	bne.n	8005582 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2204      	movs	r2, #4
 8005568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4613      	mov	r3, r2
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f8f1 	bl	8005760 <HAL_SPI_TransmitReceive>
 800557e:	4603      	mov	r3, r0
 8005580:	e0ea      	b.n	8005758 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_SPI_Receive+0x52>
 800558c:	2302      	movs	r3, #2
 800558e:	e0e3      	b.n	8005758 <HAL_SPI_Receive+0x21a>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005598:	f7fd fe20 	bl	80031dc <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d002      	beq.n	80055b0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055aa:	2302      	movs	r3, #2
 80055ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055ae:	e0ca      	b.n	8005746 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_Receive+0x7e>
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055c0:	e0c1      	b.n	8005746 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2204      	movs	r2, #4
 80055c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	88fa      	ldrh	r2, [r7, #6]
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005608:	d10f      	bne.n	800562a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005618:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d007      	beq.n	8005648 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005646:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d162      	bne.n	8005716 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005650:	e02e      	b.n	80056b0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b01      	cmp	r3, #1
 800565e:	d115      	bne.n	800568c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f103 020c 	add.w	r2, r3, #12
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	7812      	ldrb	r2, [r2, #0]
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005680:	b29b      	uxth	r3, r3
 8005682:	3b01      	subs	r3, #1
 8005684:	b29a      	uxth	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	87da      	strh	r2, [r3, #62]	; 0x3e
 800568a:	e011      	b.n	80056b0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568c:	f7fd fda6 	bl	80031dc <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d803      	bhi.n	80056a4 <HAL_SPI_Receive+0x166>
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d102      	bne.n	80056aa <HAL_SPI_Receive+0x16c>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056ae:	e04a      	b.n	8005746 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1cb      	bne.n	8005652 <HAL_SPI_Receive+0x114>
 80056ba:	e031      	b.n	8005720 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d113      	bne.n	80056f2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	b292      	uxth	r2, r2
 80056d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	1c9a      	adds	r2, r3, #2
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056f0:	e011      	b.n	8005716 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f2:	f7fd fd73 	bl	80031dc <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d803      	bhi.n	800570a <HAL_SPI_Receive+0x1cc>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005708:	d102      	bne.n	8005710 <HAL_SPI_Receive+0x1d2>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005714:	e017      	b.n	8005746 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1cd      	bne.n	80056bc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 fa53 	bl	8005bd0 <SPI_EndRxTransaction>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
 8005742:	e000      	b.n	8005746 <HAL_SPI_Receive+0x208>
  }

error :
 8005744:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005756:	7dfb      	ldrb	r3, [r7, #23]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800576e:	2301      	movs	r3, #1
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_SPI_TransmitReceive+0x26>
 8005782:	2302      	movs	r3, #2
 8005784:	e18a      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x33c>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800578e:	f7fd fd25 	bl	80031dc <HAL_GetTick>
 8005792:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80057a4:	887b      	ldrh	r3, [r7, #2]
 80057a6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80057a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d00f      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x70>
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b6:	d107      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d103      	bne.n	80057c8 <HAL_SPI_TransmitReceive+0x68>
 80057c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d003      	beq.n	80057d0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057ce:	e15b      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_SPI_TransmitReceive+0x82>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_SPI_TransmitReceive+0x82>
 80057dc:	887b      	ldrh	r3, [r7, #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d103      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057e8:	e14e      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d003      	beq.n	80057fe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2205      	movs	r2, #5
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	887a      	ldrh	r2, [r7, #2]
 800580e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	887a      	ldrh	r2, [r7, #2]
 8005814:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	887a      	ldrh	r2, [r7, #2]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	887a      	ldrh	r2, [r7, #2]
 8005826:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d007      	beq.n	8005852 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005850:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800585a:	d178      	bne.n	800594e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <HAL_SPI_TransmitReceive+0x10a>
 8005864:	8b7b      	ldrh	r3, [r7, #26]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d166      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	881a      	ldrh	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800588e:	e053      	b.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d11b      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x176>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d016      	beq.n	80058d6 <HAL_SPI_TransmitReceive+0x176>
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d113      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	1c9a      	adds	r2, r3, #2
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d119      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x1b8>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d014      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	b292      	uxth	r2, r2
 80058fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005914:	2301      	movs	r3, #1
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005918:	f7fd fc60 	bl	80031dc <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005924:	429a      	cmp	r2, r3
 8005926:	d807      	bhi.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592e:	d003      	beq.n	8005938 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005936:	e0a7      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1a6      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x130>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1a1      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x130>
 800594c:	e07c      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_SPI_TransmitReceive+0x1fc>
 8005956:	8b7b      	ldrh	r3, [r7, #26]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d16b      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	7812      	ldrb	r2, [r2, #0]
 8005968:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005982:	e057      	b.n	8005a34 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d11c      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x26c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d017      	beq.n	80059cc <HAL_SPI_TransmitReceive+0x26c>
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d114      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	7812      	ldrb	r2, [r2, #0]
 80059ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d119      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x2ae>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d014      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a0e:	f7fd fbe5 	bl	80031dc <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d803      	bhi.n	8005a26 <HAL_SPI_TransmitReceive+0x2c6>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d102      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x2cc>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a32:	e029      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1a2      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x224>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d19d      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f925 	bl	8005c9c <SPI_EndRxTxTransaction>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d006      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a64:	e010      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10b      	bne.n	8005a86 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	e000      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3730      	adds	r7, #48	; 0x30
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ab2:	b2db      	uxtb	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b088      	sub	sp, #32
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ad0:	f7fd fb84 	bl	80031dc <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ae0:	f7fd fb7c 	bl	80031dc <HAL_GetTick>
 8005ae4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	015b      	lsls	r3, r3, #5
 8005aec:	0d1b      	lsrs	r3, r3, #20
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af6:	e054      	b.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afe:	d050      	beq.n	8005ba2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b00:	f7fd fb6c 	bl	80031dc <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d902      	bls.n	8005b16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d13d      	bne.n	8005b92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b2e:	d111      	bne.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b38:	d004      	beq.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b42:	d107      	bne.n	8005b54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b5c:	d10f      	bne.n	8005b7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e017      	b.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d19b      	bne.n	8005af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	20000010 	.word	0x20000010

08005bd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005be4:	d111      	bne.n	8005c0a <SPI_EndRxTransaction+0x3a>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bee:	d004      	beq.n	8005bfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf8:	d107      	bne.n	8005c0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c12:	d12a      	bne.n	8005c6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c1c:	d012      	beq.n	8005c44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2200      	movs	r2, #0
 8005c26:	2180      	movs	r1, #128	; 0x80
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7ff ff49 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02d      	beq.n	8005c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f043 0220 	orr.w	r2, r3, #32
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e026      	b.n	8005c92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff ff36 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01a      	beq.n	8005c90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5e:	f043 0220 	orr.w	r2, r3, #32
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e013      	b.n	8005c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2101      	movs	r1, #1
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff ff23 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c84:	f043 0220 	orr.w	r2, r3, #32
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e000      	b.n	8005c92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ca8:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <SPI_EndRxTxTransaction+0x7c>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1b      	ldr	r2, [pc, #108]	; (8005d1c <SPI_EndRxTxTransaction+0x80>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	0d5b      	lsrs	r3, r3, #21
 8005cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc6:	d112      	bne.n	8005cee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2180      	movs	r1, #128	; 0x80
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fef4 	bl	8005ac0 <SPI_WaitFlagStateUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e00f      	b.n	8005d0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00a      	beq.n	8005d0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d04:	2b80      	cmp	r3, #128	; 0x80
 8005d06:	d0f2      	beq.n	8005cee <SPI_EndRxTxTransaction+0x52>
 8005d08:	e000      	b.n	8005d0c <SPI_EndRxTxTransaction+0x70>
        break;
 8005d0a:	bf00      	nop
  }

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	20000010 	.word	0x20000010
 8005d1c:	165e9f81 	.word	0x165e9f81

08005d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e041      	b.n	8005db6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7fd f822 	bl	8002d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4610      	mov	r0, r2
 8005d60:	f000 f82e 	bl	8005dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
	...

08005dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a40      	ldr	r2, [pc, #256]	; (8005ed4 <TIM_Base_SetConfig+0x114>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dde:	d00f      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a3d      	ldr	r2, [pc, #244]	; (8005ed8 <TIM_Base_SetConfig+0x118>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00b      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3c      	ldr	r2, [pc, #240]	; (8005edc <TIM_Base_SetConfig+0x11c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d007      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3b      	ldr	r2, [pc, #236]	; (8005ee0 <TIM_Base_SetConfig+0x120>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3a      	ldr	r2, [pc, #232]	; (8005ee4 <TIM_Base_SetConfig+0x124>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d108      	bne.n	8005e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2f      	ldr	r2, [pc, #188]	; (8005ed4 <TIM_Base_SetConfig+0x114>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d02b      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e20:	d027      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2c      	ldr	r2, [pc, #176]	; (8005ed8 <TIM_Base_SetConfig+0x118>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d023      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	; (8005edc <TIM_Base_SetConfig+0x11c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01f      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <TIM_Base_SetConfig+0x120>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01b      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a29      	ldr	r2, [pc, #164]	; (8005ee4 <TIM_Base_SetConfig+0x124>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d017      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a28      	ldr	r2, [pc, #160]	; (8005ee8 <TIM_Base_SetConfig+0x128>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d013      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a27      	ldr	r2, [pc, #156]	; (8005eec <TIM_Base_SetConfig+0x12c>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00f      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <TIM_Base_SetConfig+0x130>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <TIM_Base_SetConfig+0x134>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a24      	ldr	r2, [pc, #144]	; (8005ef8 <TIM_Base_SetConfig+0x138>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a23      	ldr	r2, [pc, #140]	; (8005efc <TIM_Base_SetConfig+0x13c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d108      	bne.n	8005e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a0a      	ldr	r2, [pc, #40]	; (8005ed4 <TIM_Base_SetConfig+0x114>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_Base_SetConfig+0xf8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a0c      	ldr	r2, [pc, #48]	; (8005ee4 <TIM_Base_SetConfig+0x124>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d103      	bne.n	8005ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	615a      	str	r2, [r3, #20]
}
 8005ec6:	bf00      	nop
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40010000 	.word	0x40010000
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40010400 	.word	0x40010400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800
 8005ef4:	40001800 	.word	0x40001800
 8005ef8:	40001c00 	.word	0x40001c00
 8005efc:	40002000 	.word	0x40002000

08005f00 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d123      	bne.n	8005f5a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	6851      	ldr	r1, [r2, #4]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	6892      	ldr	r2, [r2, #8]
 8005f26:	4311      	orrs	r1, r2
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	68d2      	ldr	r2, [r2, #12]
 8005f2c:	4311      	orrs	r1, r2
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	6912      	ldr	r2, [r2, #16]
 8005f32:	4311      	orrs	r1, r2
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	6952      	ldr	r2, [r2, #20]
 8005f38:	4311      	orrs	r1, r2
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	6992      	ldr	r2, [r2, #24]
 8005f3e:	4311      	orrs	r1, r2
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	69d2      	ldr	r2, [r2, #28]
 8005f44:	4311      	orrs	r1, r2
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	6a12      	ldr	r2, [r2, #32]
 8005f4a:	4311      	orrs	r1, r2
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f50:	430a      	orrs	r2, r1
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	e028      	b.n	8005fac <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	69d9      	ldr	r1, [r3, #28]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	4319      	orrs	r1, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	430b      	orrs	r3, r1
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	6851      	ldr	r1, [r2, #4]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	4311      	orrs	r1, r2
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	68d2      	ldr	r2, [r2, #12]
 8005f92:	4311      	orrs	r1, r2
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	6912      	ldr	r2, [r2, #16]
 8005f98:	4311      	orrs	r1, r2
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	6952      	ldr	r2, [r2, #20]
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	6992      	ldr	r2, [r2, #24]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d128      	bne.n	800601e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	1e59      	subs	r1, r3, #1
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	4319      	orrs	r1, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	4319      	orrs	r1, r3
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	031b      	lsls	r3, r3, #12
 8005ff6:	4319      	orrs	r1, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	4319      	orrs	r1, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	3b01      	subs	r3, #1
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	4319      	orrs	r1, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	3b01      	subs	r3, #1
 8006012:	061b      	lsls	r3, r3, #24
 8006014:	430b      	orrs	r3, r1
 8006016:	431a      	orrs	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	e02f      	b.n	800607e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	68d2      	ldr	r2, [r2, #12]
 800602e:	3a01      	subs	r2, #1
 8006030:	0311      	lsls	r1, r2, #12
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	6952      	ldr	r2, [r2, #20]
 8006036:	3a01      	subs	r2, #1
 8006038:	0512      	lsls	r2, r2, #20
 800603a:	430a      	orrs	r2, r1
 800603c:	431a      	orrs	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1e59      	subs	r1, r3, #1
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	3b01      	subs	r3, #1
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	4319      	orrs	r1, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	3b01      	subs	r3, #1
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	4319      	orrs	r1, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	3b01      	subs	r3, #1
 800606a:	041b      	lsls	r3, r3, #16
 800606c:	4319      	orrs	r1, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	3b01      	subs	r3, #1
 8006074:	061b      	lsls	r3, r3, #24
 8006076:	430b      	orrs	r3, r1
 8006078:	431a      	orrs	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <__NVIC_SetPriority>:
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	6039      	str	r1, [r7, #0]
 8006096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800609c:	2b00      	cmp	r3, #0
 800609e:	db0a      	blt.n	80060b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	490c      	ldr	r1, [pc, #48]	; (80060d8 <__NVIC_SetPriority+0x4c>)
 80060a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060aa:	0112      	lsls	r2, r2, #4
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	440b      	add	r3, r1
 80060b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80060b4:	e00a      	b.n	80060cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	4908      	ldr	r1, [pc, #32]	; (80060dc <__NVIC_SetPriority+0x50>)
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	3b04      	subs	r3, #4
 80060c4:	0112      	lsls	r2, r2, #4
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	440b      	add	r3, r1
 80060ca:	761a      	strb	r2, [r3, #24]
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	e000e100 	.word	0xe000e100
 80060dc:	e000ed00 	.word	0xe000ed00

080060e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060e4:	2100      	movs	r1, #0
 80060e6:	f06f 0004 	mvn.w	r0, #4
 80060ea:	f7ff ffcf 	bl	800608c <__NVIC_SetPriority>
#endif
}
 80060ee:	bf00      	nop
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060fa:	f3ef 8305 	mrs	r3, IPSR
 80060fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006100:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006106:	f06f 0305 	mvn.w	r3, #5
 800610a:	607b      	str	r3, [r7, #4]
 800610c:	e00c      	b.n	8006128 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800610e:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <osKernelInitialize+0x44>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d105      	bne.n	8006122 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006116:	4b08      	ldr	r3, [pc, #32]	; (8006138 <osKernelInitialize+0x44>)
 8006118:	2201      	movs	r2, #1
 800611a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800611c:	2300      	movs	r3, #0
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	e002      	b.n	8006128 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
 8006126:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006128:	687b      	ldr	r3, [r7, #4]
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20025e38 	.word	0x20025e38

0800613c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006142:	f3ef 8305 	mrs	r3, IPSR
 8006146:	603b      	str	r3, [r7, #0]
  return(result);
 8006148:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <osKernelStart+0x1a>
    stat = osErrorISR;
 800614e:	f06f 0305 	mvn.w	r3, #5
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	e010      	b.n	8006178 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006156:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <osKernelStart+0x48>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d109      	bne.n	8006172 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800615e:	f7ff ffbf 	bl	80060e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006162:	4b08      	ldr	r3, [pc, #32]	; (8006184 <osKernelStart+0x48>)
 8006164:	2202      	movs	r2, #2
 8006166:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006168:	f002 fb70 	bl	800884c <vTaskStartScheduler>
      stat = osOK;
 800616c:	2300      	movs	r3, #0
 800616e:	607b      	str	r3, [r7, #4]
 8006170:	e002      	b.n	8006178 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006172:	f04f 33ff 	mov.w	r3, #4294967295
 8006176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006178:	687b      	ldr	r3, [r7, #4]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20025e38 	.word	0x20025e38

08006188 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	; 0x38
 800618c:	af04      	add	r7, sp, #16
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006198:	f3ef 8305 	mrs	r3, IPSR
 800619c:	617b      	str	r3, [r7, #20]
  return(result);
 800619e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d17e      	bne.n	80062a2 <osThreadNew+0x11a>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d07b      	beq.n	80062a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061ae:	2318      	movs	r3, #24
 80061b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80061b6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d045      	beq.n	800624e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <osThreadNew+0x48>
        name = attr->name;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <osThreadNew+0x6e>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b38      	cmp	r3, #56	; 0x38
 80061e8:	d805      	bhi.n	80061f6 <osThreadNew+0x6e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <osThreadNew+0x72>
        return (NULL);
 80061f6:	2300      	movs	r3, #0
 80061f8:	e054      	b.n	80062a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <osThreadNew+0xa8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2ba7      	cmp	r3, #167	; 0xa7
 8006218:	d90a      	bls.n	8006230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800621e:	2b00      	cmp	r3, #0
 8006220:	d006      	beq.n	8006230 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <osThreadNew+0xa8>
        mem = 1;
 800622a:	2301      	movs	r3, #1
 800622c:	61bb      	str	r3, [r7, #24]
 800622e:	e010      	b.n	8006252 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10c      	bne.n	8006252 <osThreadNew+0xca>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d108      	bne.n	8006252 <osThreadNew+0xca>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <osThreadNew+0xca>
          mem = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	e001      	b.n	8006252 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d110      	bne.n	800627a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006260:	9202      	str	r2, [sp, #8]
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6a3a      	ldr	r2, [r7, #32]
 800626c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f002 f8de 	bl	8008430 <xTaskCreateStatic>
 8006274:	4603      	mov	r3, r0
 8006276:	613b      	str	r3, [r7, #16]
 8006278:	e013      	b.n	80062a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d110      	bne.n	80062a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	b29a      	uxth	r2, r3
 8006284:	f107 0310 	add.w	r3, r7, #16
 8006288:	9301      	str	r3, [sp, #4]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f002 f929 	bl	80084ea <xTaskCreate>
 8006298:	4603      	mov	r3, r0
 800629a:	2b01      	cmp	r3, #1
 800629c:	d001      	beq.n	80062a2 <osThreadNew+0x11a>
            hTask = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062a2:	693b      	ldr	r3, [r7, #16]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3728      	adds	r7, #40	; 0x28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062b4:	f3ef 8305 	mrs	r3, IPSR
 80062b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <osDelay+0x1c>
    stat = osErrorISR;
 80062c0:	f06f 0305 	mvn.w	r3, #5
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e007      	b.n	80062d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f002 fa82 	bl	80087dc <vTaskDelay>
    }
  }

  return (stat);
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f003 fe5b 	bl	8009fa6 <pvTimerGetTimerID>
 80062f0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d005      	beq.n	8006304 <TimerCallback+0x22>
    callb->func (callb->arg);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	6852      	ldr	r2, [r2, #4]
 8006300:	4610      	mov	r0, r2
 8006302:	4798      	blx	r3
  }
}
 8006304:	bf00      	nop
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b08c      	sub	sp, #48	; 0x30
 8006310:	af02      	add	r7, sp, #8
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	607a      	str	r2, [r7, #4]
 8006316:	603b      	str	r3, [r7, #0]
 8006318:	460b      	mov	r3, r1
 800631a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006320:	f3ef 8305 	mrs	r3, IPSR
 8006324:	613b      	str	r3, [r7, #16]
  return(result);
 8006326:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006328:	2b00      	cmp	r3, #0
 800632a:	d163      	bne.n	80063f4 <osTimerNew+0xe8>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d060      	beq.n	80063f4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8006332:	2008      	movs	r0, #8
 8006334:	f004 f8c8 	bl	800a4c8 <pvPortMalloc>
 8006338:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d059      	beq.n	80063f4 <osTimerNew+0xe8>
      callb->func = func;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800634c:	7afb      	ldrb	r3, [r7, #11]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	e001      	b.n	800635c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800635c:	f04f 33ff 	mov.w	r3, #4294967295
 8006360:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01c      	beq.n	80063a6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <osTimerNew+0x6e>
          name = attr->name;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d006      	beq.n	8006390 <osTimerNew+0x84>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b2b      	cmp	r3, #43	; 0x2b
 8006388:	d902      	bls.n	8006390 <osTimerNew+0x84>
          mem = 1;
 800638a:	2301      	movs	r3, #1
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	e00c      	b.n	80063aa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <osTimerNew+0x9e>
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d104      	bne.n	80063aa <osTimerNew+0x9e>
            mem = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e001      	b.n	80063aa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10c      	bne.n	80063ca <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	4b12      	ldr	r3, [pc, #72]	; (8006400 <osTimerNew+0xf4>)
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	2101      	movs	r1, #1
 80063c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063c2:	f003 fa48 	bl	8009856 <xTimerCreateStatic>
 80063c6:	6238      	str	r0, [r7, #32]
 80063c8:	e00b      	b.n	80063e2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d108      	bne.n	80063e2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <osTimerNew+0xf4>)
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	2101      	movs	r1, #1
 80063da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063dc:	f003 fa1a 	bl	8009814 <xTimerCreate>
 80063e0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d105      	bne.n	80063f4 <osTimerNew+0xe8>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <osTimerNew+0xe8>
        vPortFree (callb);
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f004 f936 	bl	800a660 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80063f4:	6a3b      	ldr	r3, [r7, #32]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3728      	adds	r7, #40	; 0x28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	080062e3 	.word	0x080062e3

08006404 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af02      	add	r7, sp, #8
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006412:	f3ef 8305 	mrs	r3, IPSR
 8006416:	60fb      	str	r3, [r7, #12]
  return(result);
 8006418:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <osTimerStart+0x22>
    stat = osErrorISR;
 800641e:	f06f 0305 	mvn.w	r3, #5
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e017      	b.n	8006456 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d103      	bne.n	8006434 <osTimerStart+0x30>
    stat = osErrorParameter;
 800642c:	f06f 0303 	mvn.w	r3, #3
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	e010      	b.n	8006456 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006434:	2300      	movs	r3, #0
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	2300      	movs	r3, #0
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	2104      	movs	r1, #4
 800643e:	6938      	ldr	r0, [r7, #16]
 8006440:	f003 fa82 	bl	8009948 <xTimerGenericCommand>
 8006444:	4603      	mov	r3, r0
 8006446:	2b01      	cmp	r3, #1
 8006448:	d102      	bne.n	8006450 <osTimerStart+0x4c>
      stat = osOK;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
 800644e:	e002      	b.n	8006456 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006450:	f06f 0302 	mvn.w	r3, #2
 8006454:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006456:	697b      	ldr	r3, [r7, #20]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8
 8006466:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800646c:	f3ef 8305 	mrs	r3, IPSR
 8006470:	60fb      	str	r3, [r7, #12]
  return(result);
 8006472:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <osTimerStop+0x20>
    stat = osErrorISR;
 8006478:	f06f 0305 	mvn.w	r3, #5
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e021      	b.n	80064c4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8006486:	f06f 0303 	mvn.w	r3, #3
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e01a      	b.n	80064c4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800648e:	6938      	ldr	r0, [r7, #16]
 8006490:	f003 fd60 	bl	8009f54 <xTimerIsTimerActive>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <osTimerStop+0x42>
      stat = osErrorResource;
 800649a:	f06f 0302 	mvn.w	r3, #2
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e010      	b.n	80064c4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80064a2:	2300      	movs	r3, #0
 80064a4:	9300      	str	r3, [sp, #0]
 80064a6:	2300      	movs	r3, #0
 80064a8:	2200      	movs	r2, #0
 80064aa:	2103      	movs	r1, #3
 80064ac:	6938      	ldr	r0, [r7, #16]
 80064ae:	f003 fa4b 	bl	8009948 <xTimerGenericCommand>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d102      	bne.n	80064be <osTimerStop+0x5e>
        stat = osOK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	e002      	b.n	80064c4 <osTimerStop+0x64>
      } else {
        stat = osError;
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80064c4:	697b      	ldr	r3, [r7, #20]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b086      	sub	sp, #24
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064da:	f3ef 8305 	mrs	r3, IPSR
 80064de:	60fb      	str	r3, [r7, #12]
  return(result);
 80064e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <osTimerIsRunning+0x1e>
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d102      	bne.n	80064f2 <osTimerIsRunning+0x24>
    running = 0U;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e004      	b.n	80064fc <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80064f2:	6938      	ldr	r0, [r7, #16]
 80064f4:	f003 fd2e 	bl	8009f54 <xTimerIsTimerActive>
 80064f8:	4603      	mov	r3, r0
 80064fa:	617b      	str	r3, [r7, #20]
  }

  return (running);
 80064fc:	697b      	ldr	r3, [r7, #20]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8006506:	b580      	push	{r7, lr}
 8006508:	b086      	sub	sp, #24
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006512:	f3ef 8305 	mrs	r3, IPSR
 8006516:	60fb      	str	r3, [r7, #12]
  return(result);
 8006518:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800651a:	2b00      	cmp	r3, #0
 800651c:	d12d      	bne.n	800657a <osEventFlagsNew+0x74>
    mem = -1;
 800651e:	f04f 33ff 	mov.w	r3, #4294967295
 8006522:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d015      	beq.n	8006556 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d006      	beq.n	8006540 <osEventFlagsNew+0x3a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	2b1f      	cmp	r3, #31
 8006538:	d902      	bls.n	8006540 <osEventFlagsNew+0x3a>
        mem = 1;
 800653a:	2301      	movs	r3, #1
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	e00c      	b.n	800655a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d108      	bne.n	800655a <osEventFlagsNew+0x54>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <osEventFlagsNew+0x54>
          mem = 0;
 8006550:	2300      	movs	r3, #0
 8006552:	613b      	str	r3, [r7, #16]
 8006554:	e001      	b.n	800655a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d106      	bne.n	800656e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fb19 	bl	8006b9c <xEventGroupCreateStatic>
 800656a:	6178      	str	r0, [r7, #20]
 800656c:	e005      	b.n	800657a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8006574:	f000 fb49 	bl	8006c0a <xEventGroupCreate>
 8006578:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800657a:	697b      	ldr	r3, [r7, #20]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <osEventFlagsSet+0x1e>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80065a2:	f06f 0303 	mvn.w	r3, #3
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e028      	b.n	80065fc <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065aa:	f3ef 8305 	mrs	r3, IPSR
 80065ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80065b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01d      	beq.n	80065f2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	461a      	mov	r2, r3
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6938      	ldr	r0, [r7, #16]
 80065c4:	f000 fcc4 	bl	8006f50 <xEventGroupSetBitsFromISR>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d103      	bne.n	80065d6 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80065ce:	f06f 0302 	mvn.w	r3, #2
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e012      	b.n	80065fc <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00d      	beq.n	80065fc <osEventFlagsSet+0x78>
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <osEventFlagsSet+0x84>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	e004      	b.n	80065fc <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6938      	ldr	r0, [r7, #16]
 80065f6:	f000 fbf1 	bl	8006ddc <xEventGroupSetBits>
 80065fa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80065fc:	697b      	ldr	r3, [r7, #20]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af02      	add	r7, sp, #8
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <osEventFlagsWait+0x22>
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800662e:	f06f 0303 	mvn.w	r3, #3
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	e04b      	b.n	80066ce <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006636:	f3ef 8305 	mrs	r3, IPSR
 800663a:	617b      	str	r3, [r7, #20]
  return(result);
 800663c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8006642:	f06f 0305 	mvn.w	r3, #5
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	e041      	b.n	80066ce <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8006654:	2301      	movs	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
 8006658:	e001      	b.n	800665e <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800665a:	2300      	movs	r3, #0
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8006668:	2300      	movs	r3, #0
 800666a:	623b      	str	r3, [r7, #32]
 800666c:	e001      	b.n	8006672 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	69b8      	ldr	r0, [r7, #24]
 800667e:	f000 fadf 	bl	8006c40 <xEventGroupWaitBits>
 8006682:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b00      	cmp	r3, #0
 800668c:	d010      	beq.n	80066b0 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4013      	ands	r3, r2
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	429a      	cmp	r2, r3
 8006698:	d019      	beq.n	80066ce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80066a0:	f06f 0301 	mvn.w	r3, #1
 80066a4:	61fb      	str	r3, [r7, #28]
 80066a6:	e012      	b.n	80066ce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80066a8:	f06f 0302 	mvn.w	r3, #2
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	e00e      	b.n	80066ce <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80066c0:	f06f 0301 	mvn.w	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	e002      	b.n	80066ce <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80066c8:	f06f 0302 	mvn.w	r3, #2
 80066cc:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80066ce:	69fb      	ldr	r3, [r7, #28]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3728      	adds	r7, #40	; 0x28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e4:	f3ef 8305 	mrs	r3, IPSR
 80066e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066ea:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d174      	bne.n	80067da <osMutexNew+0x102>
    if (attr != NULL) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <osMutexNew+0x26>
      type = attr->attr_bits;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	e001      	b.n	8006702 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <osMutexNew+0x3a>
      rmtx = 1U;
 800670c:	2301      	movs	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e001      	b.n	8006716 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b00      	cmp	r3, #0
 800671e:	d15c      	bne.n	80067da <osMutexNew+0x102>
      mem = -1;
 8006720:	f04f 33ff 	mov.w	r3, #4294967295
 8006724:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d015      	beq.n	8006758 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <osMutexNew+0x6a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b4f      	cmp	r3, #79	; 0x4f
 800673a:	d902      	bls.n	8006742 <osMutexNew+0x6a>
          mem = 1;
 800673c:	2301      	movs	r3, #1
 800673e:	613b      	str	r3, [r7, #16]
 8006740:	e00c      	b.n	800675c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d108      	bne.n	800675c <osMutexNew+0x84>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d104      	bne.n	800675c <osMutexNew+0x84>
            mem = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	e001      	b.n	800675c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d112      	bne.n	8006788 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	4619      	mov	r1, r3
 800676e:	2004      	movs	r0, #4
 8006770:	f000 fe2b 	bl	80073ca <xQueueCreateMutexStatic>
 8006774:	61f8      	str	r0, [r7, #28]
 8006776:	e016      	b.n	80067a6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	4619      	mov	r1, r3
 800677e:	2001      	movs	r0, #1
 8006780:	f000 fe23 	bl	80073ca <xQueueCreateMutexStatic>
 8006784:	61f8      	str	r0, [r7, #28]
 8006786:	e00e      	b.n	80067a6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10b      	bne.n	80067a6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006794:	2004      	movs	r0, #4
 8006796:	f000 fe00 	bl	800739a <xQueueCreateMutex>
 800679a:	61f8      	str	r0, [r7, #28]
 800679c:	e003      	b.n	80067a6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800679e:	2001      	movs	r0, #1
 80067a0:	f000 fdfb 	bl	800739a <xQueueCreateMutex>
 80067a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <osMutexNew+0xee>
        if (attr != NULL) {
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <osMutexNew+0xe2>
          name = attr->name;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e001      	b.n	80067be <osMutexNew+0xe6>
        } else {
          name = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80067be:	68f9      	ldr	r1, [r7, #12]
 80067c0:	69f8      	ldr	r0, [r7, #28]
 80067c2:	f001 fda5 	bl	8008310 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d006      	beq.n	80067da <osMutexNew+0x102>
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80067da:	69fb      	ldr	r3, [r7, #28]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3720      	adds	r7, #32
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006802:	f3ef 8305 	mrs	r3, IPSR
 8006806:	60bb      	str	r3, [r7, #8]
  return(result);
 8006808:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800680e:	f06f 0305 	mvn.w	r3, #5
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e02c      	b.n	8006870 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d103      	bne.n	8006824 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800681c:	f06f 0303 	mvn.w	r3, #3
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e025      	b.n	8006870 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d011      	beq.n	800684e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6938      	ldr	r0, [r7, #16]
 800682e:	f000 fe1b 	bl	8007468 <xQueueTakeMutexRecursive>
 8006832:	4603      	mov	r3, r0
 8006834:	2b01      	cmp	r3, #1
 8006836:	d01b      	beq.n	8006870 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800683e:	f06f 0301 	mvn.w	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e014      	b.n	8006870 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006846:	f06f 0302 	mvn.w	r3, #2
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e010      	b.n	8006870 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6938      	ldr	r0, [r7, #16]
 8006852:	f001 fa2f 	bl	8007cb4 <xQueueSemaphoreTake>
 8006856:	4603      	mov	r3, r0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d009      	beq.n	8006870 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006862:	f06f 0301 	mvn.w	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e002      	b.n	8006870 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800686a:	f06f 0302 	mvn.w	r3, #2
 800686e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006870:	697b      	ldr	r3, [r7, #20]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006896:	f3ef 8305 	mrs	r3, IPSR
 800689a:	60bb      	str	r3, [r7, #8]
  return(result);
 800689c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <osMutexRelease+0x30>
    stat = osErrorISR;
 80068a2:	f06f 0305 	mvn.w	r3, #5
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e01f      	b.n	80068ea <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80068b0:	f06f 0303 	mvn.w	r3, #3
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e018      	b.n	80068ea <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80068be:	6938      	ldr	r0, [r7, #16]
 80068c0:	f000 fd9e 	bl	8007400 <xQueueGiveMutexRecursive>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d00f      	beq.n	80068ea <osMutexRelease+0x70>
        stat = osErrorResource;
 80068ca:	f06f 0302 	mvn.w	r3, #2
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e00b      	b.n	80068ea <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80068d2:	2300      	movs	r3, #0
 80068d4:	2200      	movs	r2, #0
 80068d6:	2100      	movs	r1, #0
 80068d8:	6938      	ldr	r0, [r7, #16]
 80068da:	f000 fe65 	bl	80075a8 <xQueueGenericSend>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d002      	beq.n	80068ea <osMutexRelease+0x70>
        stat = osErrorResource;
 80068e4:	f06f 0302 	mvn.w	r3, #2
 80068e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80068ea:	697b      	ldr	r3, [r7, #20]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08a      	sub	sp, #40	; 0x28
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006900:	2300      	movs	r3, #0
 8006902:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006904:	f3ef 8305 	mrs	r3, IPSR
 8006908:	613b      	str	r3, [r7, #16]
  return(result);
 800690a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800690c:	2b00      	cmp	r3, #0
 800690e:	d175      	bne.n	80069fc <osSemaphoreNew+0x108>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d072      	beq.n	80069fc <osSemaphoreNew+0x108>
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	429a      	cmp	r2, r3
 800691c:	d86e      	bhi.n	80069fc <osSemaphoreNew+0x108>
    mem = -1;
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d015      	beq.n	8006956 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d006      	beq.n	8006940 <osSemaphoreNew+0x4c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2b4f      	cmp	r3, #79	; 0x4f
 8006938:	d902      	bls.n	8006940 <osSemaphoreNew+0x4c>
        mem = 1;
 800693a:	2301      	movs	r3, #1
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e00c      	b.n	800695a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d108      	bne.n	800695a <osSemaphoreNew+0x66>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d104      	bne.n	800695a <osSemaphoreNew+0x66>
          mem = 0;
 8006950:	2300      	movs	r3, #0
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	e001      	b.n	800695a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006960:	d04c      	beq.n	80069fc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d128      	bne.n	80069ba <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d10a      	bne.n	8006984 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2203      	movs	r2, #3
 8006974:	9200      	str	r2, [sp, #0]
 8006976:	2200      	movs	r2, #0
 8006978:	2100      	movs	r1, #0
 800697a:	2001      	movs	r0, #1
 800697c:	f000 fc18 	bl	80071b0 <xQueueGenericCreateStatic>
 8006980:	61f8      	str	r0, [r7, #28]
 8006982:	e005      	b.n	8006990 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006984:	2203      	movs	r2, #3
 8006986:	2100      	movs	r1, #0
 8006988:	2001      	movs	r0, #1
 800698a:	f000 fc89 	bl	80072a0 <xQueueGenericCreate>
 800698e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d022      	beq.n	80069dc <osSemaphoreNew+0xe8>
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01f      	beq.n	80069dc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800699c:	2300      	movs	r3, #0
 800699e:	2200      	movs	r2, #0
 80069a0:	2100      	movs	r1, #0
 80069a2:	69f8      	ldr	r0, [r7, #28]
 80069a4:	f000 fe00 	bl	80075a8 <xQueueGenericSend>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d016      	beq.n	80069dc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80069ae:	69f8      	ldr	r0, [r7, #28]
 80069b0:	f001 fb5a 	bl	8008068 <vQueueDelete>
            hSemaphore = NULL;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	e010      	b.n	80069dc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d108      	bne.n	80069d2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	461a      	mov	r2, r3
 80069c6:	68b9      	ldr	r1, [r7, #8]
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fd83 	bl	80074d4 <xQueueCreateCountingSemaphoreStatic>
 80069ce:	61f8      	str	r0, [r7, #28]
 80069d0:	e004      	b.n	80069dc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fdb4 	bl	8007542 <xQueueCreateCountingSemaphore>
 80069da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00c      	beq.n	80069fc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e001      	b.n	80069f4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80069f4:	6979      	ldr	r1, [r7, #20]
 80069f6:	69f8      	ldr	r0, [r7, #28]
 80069f8:	f001 fc8a 	bl	8008310 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80069fc:	69fb      	ldr	r3, [r7, #28]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d103      	bne.n	8006a28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006a20:	f06f 0303 	mvn.w	r3, #3
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	e039      	b.n	8006a9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a28:	f3ef 8305 	mrs	r3, IPSR
 8006a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d022      	beq.n	8006a7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006a3a:	f06f 0303 	mvn.w	r3, #3
 8006a3e:	617b      	str	r3, [r7, #20]
 8006a40:	e02c      	b.n	8006a9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006a46:	f107 0308 	add.w	r3, r7, #8
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	6938      	ldr	r0, [r7, #16]
 8006a50:	f001 fa6c 	bl	8007f2c <xQueueReceiveFromISR>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d003      	beq.n	8006a62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006a5a:	f06f 0302 	mvn.w	r3, #2
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	e01c      	b.n	8006a9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d019      	beq.n	8006a9c <osSemaphoreAcquire+0x94>
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <osSemaphoreAcquire+0xa0>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	e010      	b.n	8006a9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6938      	ldr	r0, [r7, #16]
 8006a7e:	f001 f919 	bl	8007cb4 <xQueueSemaphoreTake>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d009      	beq.n	8006a9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006a8e:	f06f 0301 	mvn.w	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
 8006a94:	e002      	b.n	8006a9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006a96:	f06f 0302 	mvn.w	r3, #2
 8006a9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006a9c:	697b      	ldr	r3, [r7, #20]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	e000ed04 	.word	0xe000ed04

08006aac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006ac2:	f06f 0303 	mvn.w	r3, #3
 8006ac6:	617b      	str	r3, [r7, #20]
 8006ac8:	e02c      	b.n	8006b24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aca:	f3ef 8305 	mrs	r3, IPSR
 8006ace:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01a      	beq.n	8006b0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6938      	ldr	r0, [r7, #16]
 8006ae2:	f000 ff36 	bl	8007952 <xQueueGiveFromISR>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d003      	beq.n	8006af4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006aec:	f06f 0302 	mvn.w	r3, #2
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	e017      	b.n	8006b24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d014      	beq.n	8006b24 <osSemaphoreRelease+0x78>
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <osSemaphoreRelease+0x84>)
 8006afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	e00b      	b.n	8006b24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2100      	movs	r1, #0
 8006b12:	6938      	ldr	r0, [r7, #16]
 8006b14:	f000 fd48 	bl	80075a8 <xQueueGenericSend>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d002      	beq.n	8006b24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006b1e:	f06f 0302 	mvn.w	r3, #2
 8006b22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006b24:	697b      	ldr	r3, [r7, #20]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	e000ed04 	.word	0xe000ed04

08006b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	4a07      	ldr	r2, [pc, #28]	; (8006b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8006b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	4a06      	ldr	r2, [pc, #24]	; (8006b64 <vApplicationGetIdleTaskMemory+0x30>)
 8006b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2280      	movs	r2, #128	; 0x80
 8006b50:	601a      	str	r2, [r3, #0]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20025e3c 	.word	0x20025e3c
 8006b64:	20025ee4 	.word	0x20025ee4

08006b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4a07      	ldr	r2, [pc, #28]	; (8006b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a06      	ldr	r2, [pc, #24]	; (8006b98 <vApplicationGetTimerTaskMemory+0x30>)
 8006b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b86:	601a      	str	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	200260e4 	.word	0x200260e4
 8006b98:	2002618c 	.word	0x2002618c

08006b9c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bbc:	bf00      	nop
 8006bbe:	e7fe      	b.n	8006bbe <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8006bc0:	2320      	movs	r3, #32
 8006bc2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d00a      	beq.n	8006be0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	60fb      	str	r3, [r7, #12]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f9bf 	bl	8006f78 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8006c00:	697b      	ldr	r3, [r7, #20]
	}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b082      	sub	sp, #8
 8006c0e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8006c10:	2020      	movs	r0, #32
 8006c12:	f003 fc59 	bl	800a4c8 <pvPortMalloc>
 8006c16:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f9a5 	bl	8006f78 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8006c34:	687b      	ldr	r3, [r7, #4]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b090      	sub	sp, #64	; 0x40
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <xEventGroupWaitBits+0x36>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	623b      	str	r3, [r7, #32]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <xEventGroupWaitBits+0x56>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	61fb      	str	r3, [r7, #28]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <xEventGroupWaitBits+0x72>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	61bb      	str	r3, [r7, #24]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cb2:	f002 fb57 	bl	8009364 <xTaskGetSchedulerState>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <xEventGroupWaitBits+0x82>
 8006cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <xEventGroupWaitBits+0x86>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <xEventGroupWaitBits+0x88>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10a      	bne.n	8006ce2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	617b      	str	r3, [r7, #20]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006ce2:	f001 fe35 	bl	8008950 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cf2:	f000 f90b 	bl	8006f0c <prvTestWaitCondition>
 8006cf6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d028      	beq.n	8006d5e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	43db      	mvns	r3, r3
 8006d14:	401a      	ands	r2, r3
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e020      	b.n	8006d5e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d104      	bne.n	8006d2c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006d26:	2301      	movs	r3, #1
 8006d28:	633b      	str	r3, [r7, #48]	; 0x30
 8006d2a:	e018      	b.n	8006d5e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	1d18      	adds	r0, r3, #4
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	4313      	orrs	r3, r2
 8006d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d54:	4619      	mov	r1, r3
 8006d56:	f002 f827 	bl	8008da8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006d5e:	f001 fe05 	bl	800896c <xTaskResumeAll>
 8006d62:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d031      	beq.n	8006dce <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d107      	bne.n	8006d80 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006d70:	4b19      	ldr	r3, [pc, #100]	; (8006dd8 <xEventGroupWaitBits+0x198>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006d80:	f002 fc80 	bl	8009684 <uxTaskResetEventItemValue>
 8006d84:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8006d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d11a      	bne.n	8006dc6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006d90:	f003 fa78 	bl	800a284 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006da0:	f000 f8b4 	bl	8006f0c <prvTestWaitCondition>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	43db      	mvns	r3, r3
 8006db8:	401a      	ands	r2, r3
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006dc2:	f003 fa8f 	bl	800a2e4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3740      	adds	r7, #64	; 0x40
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	; 0x38
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006de6:	2300      	movs	r3, #0
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xEventGroupSetBits+0x32>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	613b      	str	r3, [r7, #16]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <xEventGroupSetBits+0x52>
	__asm volatile
 8006e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	60fb      	str	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	e7fe      	b.n	8006e2c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	3304      	adds	r3, #4
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	3308      	adds	r3, #8
 8006e38:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8006e3a:	f001 fd89 	bl	8008950 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006e50:	e03c      	b.n	8006ecc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006e68:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e70:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d108      	bne.n	8006e8e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	4013      	ands	r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8c:	e008      	b.n	8006ea0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	4013      	ands	r3, r2
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d101      	bne.n	8006ea0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d010      	beq.n	8006ec8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006ec4:	f002 f842 	bl	8008f4c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006ecc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d1be      	bne.n	8006e52 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	43db      	mvns	r3, r3
 8006edc:	401a      	ands	r2, r3
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006ee2:	f001 fd43 	bl	800896c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	681b      	ldr	r3, [r3, #0]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3738      	adds	r7, #56	; 0x38
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8006efc:	6839      	ldr	r1, [r7, #0]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff ff6c 	bl	8006ddc <xEventGroupSetBits>
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e007      	b.n	8006f42 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4013      	ands	r3, r2
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d101      	bne.n	8006f42 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006f42:	697b      	ldr	r3, [r7, #20]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	371c      	adds	r7, #28
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	4804      	ldr	r0, [pc, #16]	; (8006f74 <xEventGroupSetBitsFromISR+0x24>)
 8006f64:	f003 f840 	bl	8009fe8 <xTimerPendFunctionCallFromISR>
 8006f68:	6178      	str	r0, [r7, #20]

		return xReturn;
 8006f6a:	697b      	ldr	r3, [r7, #20]
	}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	08006ef3 	.word	0x08006ef3

08006f78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f103 0208 	add.w	r2, r3, #8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f103 0208 	add.w	r2, r3, #8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f103 0208 	add.w	r2, r3, #8
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fc6:	bf00      	nop
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007030:	d103      	bne.n	800703a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e00c      	b.n	8007054 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3308      	adds	r3, #8
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e002      	b.n	8007048 <vListInsert+0x2e>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	429a      	cmp	r2, r3
 8007052:	d2f6      	bcs.n	8007042 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	6892      	ldr	r2, [r2, #8]
 80070a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6852      	ldr	r2, [r2, #4]
 80070ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d103      	bne.n	80070c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	1e5a      	subs	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueGenericReset+0x2a>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	60bb      	str	r3, [r7, #8]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800710a:	f003 f8bb 	bl	800a284 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007116:	68f9      	ldr	r1, [r7, #12]
 8007118:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800711a:	fb01 f303 	mul.w	r3, r1, r3
 800711e:	441a      	add	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	3b01      	subs	r3, #1
 800713c:	68f9      	ldr	r1, [r7, #12]
 800713e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007140:	fb01 f303 	mul.w	r3, r1, r3
 8007144:	441a      	add	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	22ff      	movs	r2, #255	; 0xff
 800714e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	22ff      	movs	r2, #255	; 0xff
 8007156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d114      	bne.n	800718a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01a      	beq.n	800719e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	3310      	adds	r3, #16
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fe85 	bl	8008e7c <xTaskRemoveFromEventList>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d012      	beq.n	800719e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <xQueueGenericReset+0xcc>)
 800717a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	e009      	b.n	800719e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	3310      	adds	r3, #16
 800718e:	4618      	mov	r0, r3
 8007190:	f7ff fef2 	bl	8006f78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3324      	adds	r3, #36	; 0x24
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff feed 	bl	8006f78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800719e:	f003 f8a1 	bl	800a2e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071a2:	2301      	movs	r3, #1
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	; 0x38
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10a      	bne.n	80071f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d002      	beq.n	8007202 <xQueueGenericCreateStatic+0x52>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <xQueueGenericCreateStatic+0x56>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <xQueueGenericCreateStatic+0x58>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10a      	bne.n	8007222 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	623b      	str	r3, [r7, #32]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <xQueueGenericCreateStatic+0x7e>
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <xQueueGenericCreateStatic+0x82>
 800722e:	2301      	movs	r3, #1
 8007230:	e000      	b.n	8007234 <xQueueGenericCreateStatic+0x84>
 8007232:	2300      	movs	r3, #0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	61fb      	str	r3, [r7, #28]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800724e:	2350      	movs	r3, #80	; 0x50
 8007250:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b50      	cmp	r3, #80	; 0x50
 8007256:	d00a      	beq.n	800726e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	61bb      	str	r3, [r7, #24]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800726e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00d      	beq.n	8007296 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4613      	mov	r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f83f 	bl	8007314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007298:	4618      	mov	r0, r3
 800729a:	3730      	adds	r7, #48	; 0x30
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	; 0x28
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	613b      	str	r3, [r7, #16]
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	fb02 f303 	mul.w	r3, r2, r3
 80072d2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3350      	adds	r3, #80	; 0x50
 80072d8:	4618      	mov	r0, r3
 80072da:	f003 f8f5 	bl	800a4c8 <pvPortMalloc>
 80072de:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d011      	beq.n	800730a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	3350      	adds	r3, #80	; 0x50
 80072ee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072f8:	79fa      	ldrb	r2, [r7, #7]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	4613      	mov	r3, r2
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f805 	bl	8007314 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800730a:	69bb      	ldr	r3, [r7, #24]
	}
 800730c:	4618      	mov	r0, r3
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d103      	bne.n	8007330 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	e002      	b.n	8007336 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007342:	2101      	movs	r1, #1
 8007344:	69b8      	ldr	r0, [r7, #24]
 8007346:	f7ff fecb 	bl	80070e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	78fa      	ldrb	r2, [r7, #3]
 800734e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8007352:	78fb      	ldrb	r3, [r7, #3]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	2073      	movs	r0, #115	; 0x73
 800735a:	f003 ff79 	bl	800b250 <SEGGER_SYSVIEW_RecordU32x3>
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	2100      	movs	r1, #0
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f90b 	bl	80075a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007392:	bf00      	nop
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800739a:	b580      	push	{r7, lr}
 800739c:	b086      	sub	sp, #24
 800739e:	af00      	add	r7, sp, #0
 80073a0:	4603      	mov	r3, r0
 80073a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	2300      	movs	r3, #0
 80073aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	461a      	mov	r2, r3
 80073b0:	6939      	ldr	r1, [r7, #16]
 80073b2:	6978      	ldr	r0, [r7, #20]
 80073b4:	f7ff ff74 	bl	80072a0 <xQueueGenericCreate>
 80073b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff ffd3 	bl	8007366 <prvInitialiseMutex>

		return xNewQueue;
 80073c0:	68fb      	ldr	r3, [r7, #12]
	}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b088      	sub	sp, #32
 80073ce:	af02      	add	r7, sp, #8
 80073d0:	4603      	mov	r3, r0
 80073d2:	6039      	str	r1, [r7, #0]
 80073d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073d6:	2301      	movs	r3, #1
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2200      	movs	r2, #0
 80073e6:	6939      	ldr	r1, [r7, #16]
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	f7ff fee1 	bl	80071b0 <xQueueGenericCreateStatic>
 80073ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f7ff ffb8 	bl	8007366 <prvInitialiseMutex>

		return xNewQueue;
 80073f6:	68fb      	ldr	r3, [r7, #12]
	}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3718      	adds	r7, #24
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007400:	b590      	push	{r4, r7, lr}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60fb      	str	r3, [r7, #12]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	689c      	ldr	r4, [r3, #8]
 800742c:	f001 ff8a 	bl	8009344 <xTaskGetCurrentTaskHandle>
 8007430:	4603      	mov	r3, r0
 8007432:	429c      	cmp	r4, r3
 8007434:	d111      	bne.n	800745a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	1e5a      	subs	r2, r3, #1
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007448:	2300      	movs	r3, #0
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	6938      	ldr	r0, [r7, #16]
 8007450:	f000 f8aa 	bl	80075a8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007454:	2301      	movs	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e001      	b.n	800745e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800745e:	697b      	ldr	r3, [r7, #20]
	}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	bd90      	pop	{r4, r7, pc}

08007468 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007468:	b590      	push	{r4, r7, lr}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	60fb      	str	r3, [r7, #12]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	689c      	ldr	r4, [r3, #8]
 8007496:	f001 ff55 	bl	8009344 <xTaskGetCurrentTaskHandle>
 800749a:	4603      	mov	r3, r0
 800749c:	429c      	cmp	r4, r3
 800749e:	d107      	bne.n	80074b0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80074aa:	2301      	movs	r3, #1
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	e00c      	b.n	80074ca <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6938      	ldr	r0, [r7, #16]
 80074b4:	f000 fbfe 	bl	8007cb4 <xQueueSemaphoreTake>
 80074b8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d004      	beq.n	80074ca <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	1c5a      	adds	r2, r3, #1
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80074ca:	697b      	ldr	r3, [r7, #20]
	}
 80074cc:	4618      	mov	r0, r3
 80074ce:	371c      	adds	r7, #28
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd90      	pop	{r4, r7, pc}

080074d4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08a      	sub	sp, #40	; 0x28
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	61bb      	str	r3, [r7, #24]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	429a      	cmp	r2, r3
 8007502:	d90a      	bls.n	800751a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	617b      	str	r3, [r7, #20]
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800751a:	2302      	movs	r3, #2
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	2100      	movs	r1, #0
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fe43 	bl	80071b0 <xQueueGenericCreateStatic>
 800752a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007538:	69fb      	ldr	r3, [r7, #28]
	}
 800753a:	4618      	mov	r0, r3
 800753c:	3720      	adds	r7, #32
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007542:	b580      	push	{r7, lr}
 8007544:	b086      	sub	sp, #24
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10a      	bne.n	8007568 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	613b      	str	r3, [r7, #16]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d90a      	bls.n	8007586 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
}
 8007582:	bf00      	nop
 8007584:	e7fe      	b.n	8007584 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007586:	2202      	movs	r2, #2
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff fe88 	bl	80072a0 <xQueueGenericCreate>
 8007590:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800759e:	697b      	ldr	r3, [r7, #20]
	}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b090      	sub	sp, #64	; 0x40
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075b6:	2300      	movs	r3, #0
 80075b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <xQueueGenericSend+0x32>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <xQueueGenericSend+0x40>
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <xQueueGenericSend+0x44>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <xQueueGenericSend+0x46>
 80075ec:	2300      	movs	r3, #0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <xQueueGenericSend+0x60>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d103      	bne.n	8007616 <xQueueGenericSend+0x6e>
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <xQueueGenericSend+0x72>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <xQueueGenericSend+0x74>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericSend+0x8e>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	623b      	str	r3, [r7, #32]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007636:	f001 fe95 	bl	8009364 <xTaskGetSchedulerState>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d102      	bne.n	8007646 <xQueueGenericSend+0x9e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <xQueueGenericSend+0xa2>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <xQueueGenericSend+0xa4>
 800764a:	2300      	movs	r3, #0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10a      	bne.n	8007666 <xQueueGenericSend+0xbe>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	61fb      	str	r3, [r7, #28]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007666:	f002 fe0d 	bl	800a284 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	429a      	cmp	r2, r3
 8007674:	d302      	bcc.n	800767c <xQueueGenericSend+0xd4>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d136      	bne.n	80076ea <xQueueGenericSend+0x142>
			{
				traceQUEUE_SEND( pxQueue );
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	4618      	mov	r0, r3
 8007680:	f004 fa98 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	460b      	mov	r3, r1
 800768e:	4601      	mov	r1, r0
 8007690:	205a      	movs	r0, #90	; 0x5a
 8007692:	f003 fe53 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800769c:	f000 fd28 	bl	80080f0 <prvCopyDataToQueue>
 80076a0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d010      	beq.n	80076cc <xQueueGenericSend+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	3324      	adds	r3, #36	; 0x24
 80076ae:	4618      	mov	r0, r3
 80076b0:	f001 fbe4 	bl	8008e7c <xTaskRemoveFromEventList>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d013      	beq.n	80076e2 <xQueueGenericSend+0x13a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076ba:	4b4d      	ldr	r3, [pc, #308]	; (80077f0 <xQueueGenericSend+0x248>)
 80076bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	e00a      	b.n	80076e2 <xQueueGenericSend+0x13a>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d007      	beq.n	80076e2 <xQueueGenericSend+0x13a>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076d2:	4b47      	ldr	r3, [pc, #284]	; (80077f0 <xQueueGenericSend+0x248>)
 80076d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076e2:	f002 fdff 	bl	800a2e4 <vPortExitCritical>
				return pdPASS;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e07d      	b.n	80077e6 <xQueueGenericSend+0x23e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d110      	bne.n	8007712 <xQueueGenericSend+0x16a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076f0:	f002 fdf8 	bl	800a2e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80076f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f6:	4618      	mov	r0, r3
 80076f8:	f004 fa5c 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	460b      	mov	r3, r1
 8007706:	4601      	mov	r1, r0
 8007708:	205a      	movs	r0, #90	; 0x5a
 800770a:	f003 fe17 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800770e:	2300      	movs	r3, #0
 8007710:	e069      	b.n	80077e6 <xQueueGenericSend+0x23e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007714:	2b00      	cmp	r3, #0
 8007716:	d106      	bne.n	8007726 <xQueueGenericSend+0x17e>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007718:	f107 0314 	add.w	r3, r7, #20
 800771c:	4618      	mov	r0, r3
 800771e:	f001 fc7b 	bl	8009018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007722:	2301      	movs	r3, #1
 8007724:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007726:	f002 fddd 	bl	800a2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800772a:	f001 f911 	bl	8008950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800772e:	f002 fda9 	bl	800a284 <vPortEnterCritical>
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007738:	b25b      	sxtb	r3, r3
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d103      	bne.n	8007748 <xQueueGenericSend+0x1a0>
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800774e:	b25b      	sxtb	r3, r3
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d103      	bne.n	800775e <xQueueGenericSend+0x1b6>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800775e:	f002 fdc1 	bl	800a2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007762:	1d3a      	adds	r2, r7, #4
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f001 fc6a 	bl	8009044 <xTaskCheckForTimeOut>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d124      	bne.n	80077c0 <xQueueGenericSend+0x218>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007778:	f000 fdb2 	bl	80082e0 <prvIsQueueFull>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d018      	beq.n	80077b4 <xQueueGenericSend+0x20c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	3310      	adds	r3, #16
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	4611      	mov	r1, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f001 fae8 	bl	8008d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007792:	f000 fd3d 	bl	8008210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007796:	f001 f8e9 	bl	800896c <xTaskResumeAll>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	f47f af62 	bne.w	8007666 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80077a2:	4b13      	ldr	r3, [pc, #76]	; (80077f0 <xQueueGenericSend+0x248>)
 80077a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	e758      	b.n	8007666 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077b6:	f000 fd2b 	bl	8008210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077ba:	f001 f8d7 	bl	800896c <xTaskResumeAll>
 80077be:	e752      	b.n	8007666 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077c2:	f000 fd25 	bl	8008210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077c6:	f001 f8d1 	bl	800896c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	4618      	mov	r0, r3
 80077ce:	f004 f9f1 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	460b      	mov	r3, r1
 80077dc:	4601      	mov	r1, r0
 80077de:	205a      	movs	r0, #90	; 0x5a
 80077e0:	f003 fdac 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80077e4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3738      	adds	r7, #56	; 0x38
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b090      	sub	sp, #64	; 0x40
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d103      	bne.n	8007830 <xQueueGenericSendFromISR+0x3c>
 8007828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <xQueueGenericSendFromISR+0x40>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <xQueueGenericSendFromISR+0x42>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d103      	bne.n	800785e <xQueueGenericSendFromISR+0x6a>
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <xQueueGenericSendFromISR+0x6e>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <xQueueGenericSendFromISR+0x70>
 8007862:	2300      	movs	r3, #0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d10a      	bne.n	800787e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	623b      	str	r3, [r7, #32]
}
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800787e:	f002 fde3 	bl	800a448 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007882:	f3ef 8211 	mrs	r2, BASEPRI
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	61fa      	str	r2, [r7, #28]
 8007898:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800789a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <xQueueGenericSendFromISR+0xbc>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d139      	bne.n	8007924 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80078c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c2:	4618      	mov	r0, r3
 80078c4:	f004 f976 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 80078c8:	4601      	mov	r1, r0
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	461a      	mov	r2, r3
 80078ce:	2060      	movs	r0, #96	; 0x60
 80078d0:	f003 fc64 	bl	800b19c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	68b9      	ldr	r1, [r7, #8]
 80078d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078da:	f000 fc09 	bl	80080f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80078e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e6:	d112      	bne.n	800790e <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d016      	beq.n	800791e <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	3324      	adds	r3, #36	; 0x24
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 fac1 	bl	8008e7c <xTaskRemoveFromEventList>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00e      	beq.n	800791e <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00b      	beq.n	800791e <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e007      	b.n	800791e <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800790e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007912:	3301      	adds	r3, #1
 8007914:	b2db      	uxtb	r3, r3
 8007916:	b25a      	sxtb	r2, r3
 8007918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800791e:	2301      	movs	r3, #1
 8007920:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007922:	e00b      	b.n	800793c <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007926:	4618      	mov	r0, r3
 8007928:	f004 f944 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 800792c:	4601      	mov	r1, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	461a      	mov	r2, r3
 8007932:	2060      	movs	r0, #96	; 0x60
 8007934:	f003 fc32 	bl	800b19c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8007938:	2300      	movs	r3, #0
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800793c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007946:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800794a:	4618      	mov	r0, r3
 800794c:	3740      	adds	r7, #64	; 0x40
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b08e      	sub	sp, #56	; 0x38
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10a      	bne.n	800797c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	623b      	str	r3, [r7, #32]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <xQueueGiveFromISR+0x48>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	61fb      	str	r3, [r7, #28]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d103      	bne.n	80079aa <xQueueGiveFromISR+0x58>
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <xQueueGiveFromISR+0x5c>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <xQueueGiveFromISR+0x5e>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <xQueueGiveFromISR+0x78>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	61bb      	str	r3, [r7, #24]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079ca:	f002 fd3d 	bl	800a448 <vPortValidateInterruptPriority>
	__asm volatile
 80079ce:	f3ef 8211 	mrs	r2, BASEPRI
 80079d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	617a      	str	r2, [r7, #20]
 80079e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80079e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d235      	bcs.n	8007a66 <xQueueGiveFromISR+0x114>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	4618      	mov	r0, r3
 8007a08:	f004 f8d4 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007a0c:	4601      	mov	r1, r0
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	2060      	movs	r0, #96	; 0x60
 8007a14:	f003 fbc2 	bl	800b19c <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d112      	bne.n	8007a50 <xQueueGiveFromISR+0xfe>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <xQueueGiveFromISR+0x10e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	3324      	adds	r3, #36	; 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f001 fa20 	bl	8008e7c <xTaskRemoveFromEventList>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00e      	beq.n	8007a60 <xQueueGiveFromISR+0x10e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <xQueueGiveFromISR+0x10e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e007      	b.n	8007a60 <xQueueGiveFromISR+0x10e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a54:	3301      	adds	r3, #1
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	b25a      	sxtb	r2, r3
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a60:	2301      	movs	r3, #1
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
 8007a64:	e00b      	b.n	8007a7e <xQueueGiveFromISR+0x12c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f004 f8a3 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007a6e:	4601      	mov	r1, r0
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	2060      	movs	r0, #96	; 0x60
 8007a76:	f003 fb91 	bl	800b19c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f383 8811 	msr	BASEPRI, r3
}
 8007a88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3738      	adds	r7, #56	; 0x38
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a94:	b590      	push	{r4, r7, lr}
 8007a96:	b08f      	sub	sp, #60	; 0x3c
 8007a98:	af02      	add	r7, sp, #8
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <xQueueReceive+0x30>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	623b      	str	r3, [r7, #32]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d103      	bne.n	8007ad2 <xQueueReceive+0x3e>
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <xQueueReceive+0x42>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e000      	b.n	8007ad8 <xQueueReceive+0x44>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10a      	bne.n	8007af2 <xQueueReceive+0x5e>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	61fb      	str	r3, [r7, #28]
}
 8007aee:	bf00      	nop
 8007af0:	e7fe      	b.n	8007af0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007af2:	f001 fc37 	bl	8009364 <xTaskGetSchedulerState>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d102      	bne.n	8007b02 <xQueueReceive+0x6e>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <xQueueReceive+0x72>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <xQueueReceive+0x74>
 8007b06:	2300      	movs	r3, #0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <xQueueReceive+0x8e>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	61bb      	str	r3, [r7, #24]
}
 8007b1e:	bf00      	nop
 8007b20:	e7fe      	b.n	8007b20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b22:	f002 fbaf 	bl	800a284 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d02f      	beq.n	8007b92 <xQueueReceive+0xfe>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b36:	f000 fb45 	bl	80081c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f004 f839 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007b42:	4604      	mov	r4, r0
 8007b44:	2000      	movs	r0, #0
 8007b46:	f004 f835 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2101      	movs	r1, #1
 8007b50:	9100      	str	r1, [sp, #0]
 8007b52:	4621      	mov	r1, r4
 8007b54:	205c      	movs	r0, #92	; 0x5c
 8007b56:	f003 fbf1 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5c:	1e5a      	subs	r2, r3, #1
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00f      	beq.n	8007b8a <xQueueReceive+0xf6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f001 f984 	bl	8008e7c <xTaskRemoveFromEventList>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d007      	beq.n	8007b8a <xQueueReceive+0xf6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b7a:	4b4d      	ldr	r3, [pc, #308]	; (8007cb0 <xQueueReceive+0x21c>)
 8007b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b8a:	f002 fbab 	bl	800a2e4 <vPortExitCritical>
				return pdPASS;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e08a      	b.n	8007ca8 <xQueueReceive+0x214>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d113      	bne.n	8007bc0 <xQueueReceive+0x12c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b98:	f002 fba4 	bl	800a2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f004 f808 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	f004 f804 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007bac:	4602      	mov	r2, r0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	9100      	str	r1, [sp, #0]
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	205c      	movs	r0, #92	; 0x5c
 8007bb8:	f003 fbc0 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e073      	b.n	8007ca8 <xQueueReceive+0x214>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d106      	bne.n	8007bd4 <xQueueReceive+0x140>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bc6:	f107 0310 	add.w	r3, r7, #16
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f001 fa24 	bl	8009018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bd4:	f002 fb86 	bl	800a2e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bd8:	f000 feba 	bl	8008950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bdc:	f002 fb52 	bl	800a284 <vPortEnterCritical>
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d103      	bne.n	8007bf6 <xQueueReceive+0x162>
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bfc:	b25b      	sxtb	r3, r3
 8007bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c02:	d103      	bne.n	8007c0c <xQueueReceive+0x178>
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c0c:	f002 fb6a 	bl	800a2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c10:	1d3a      	adds	r2, r7, #4
 8007c12:	f107 0310 	add.w	r3, r7, #16
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 fa13 	bl	8009044 <xTaskCheckForTimeOut>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d124      	bne.n	8007c6e <xQueueReceive+0x1da>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c26:	f000 fb45 	bl	80082b4 <prvIsQueueEmpty>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d018      	beq.n	8007c62 <xQueueReceive+0x1ce>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	3324      	adds	r3, #36	; 0x24
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 f891 	bl	8008d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c40:	f000 fae6 	bl	8008210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c44:	f000 fe92 	bl	800896c <xTaskResumeAll>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f47f af69 	bne.w	8007b22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c50:	4b17      	ldr	r3, [pc, #92]	; (8007cb0 <xQueueReceive+0x21c>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	e75f      	b.n	8007b22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c64:	f000 fad4 	bl	8008210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c68:	f000 fe80 	bl	800896c <xTaskResumeAll>
 8007c6c:	e759      	b.n	8007b22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	f000 face 	bl	8008210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c74:	f000 fe7a 	bl	800896c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7a:	f000 fb1b 	bl	80082b4 <prvIsQueueEmpty>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f43f af4e 	beq.w	8007b22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f003 ff93 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007c8e:	4604      	mov	r4, r0
 8007c90:	2000      	movs	r0, #0
 8007c92:	f003 ff8f 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007c96:	4602      	mov	r2, r0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	9100      	str	r1, [sp, #0]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	205c      	movs	r0, #92	; 0x5c
 8007ca2:	f003 fb4b 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8007ca6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3734      	adds	r7, #52	; 0x34
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd90      	pop	{r4, r7, pc}
 8007cb0:	e000ed04 	.word	0xe000ed04

08007cb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b091      	sub	sp, #68	; 0x44
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	623b      	str	r3, [r7, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	e7fe      	b.n	8007ce4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	61fb      	str	r3, [r7, #28]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d04:	f001 fb2e 	bl	8009364 <xTaskGetSchedulerState>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <xQueueSemaphoreTake+0x60>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <xQueueSemaphoreTake+0x64>
 8007d14:	2301      	movs	r3, #1
 8007d16:	e000      	b.n	8007d1a <xQueueSemaphoreTake+0x66>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	61bb      	str	r3, [r7, #24]
}
 8007d30:	bf00      	nop
 8007d32:	e7fe      	b.n	8007d32 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d34:	f002 faa6 	bl	800a284 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d034      	beq.n	8007dae <xQueueSemaphoreTake+0xfa>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	4618      	mov	r0, r3
 8007d48:	f003 ff34 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007d4c:	4604      	mov	r4, r0
 8007d4e:	2000      	movs	r0, #0
 8007d50:	f003 ff30 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007d54:	4602      	mov	r2, r0
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2101      	movs	r1, #1
 8007d5a:	9100      	str	r1, [sp, #0]
 8007d5c:	4621      	mov	r1, r4
 8007d5e:	205c      	movs	r0, #92	; 0x5c
 8007d60:	f003 faec 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	1e5a      	subs	r2, r3, #1
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d104      	bne.n	8007d7e <xQueueSemaphoreTake+0xca>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d74:	f001 fc9e 	bl	80096b4 <pvTaskIncrementMutexHeldCount>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00f      	beq.n	8007da6 <xQueueSemaphoreTake+0xf2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	3310      	adds	r3, #16
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f001 f876 	bl	8008e7c <xTaskRemoveFromEventList>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d007      	beq.n	8007da6 <xQueueSemaphoreTake+0xf2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d96:	4b64      	ldr	r3, [pc, #400]	; (8007f28 <xQueueSemaphoreTake+0x274>)
 8007d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	f3bf 8f4f 	dsb	sy
 8007da2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007da6:	f002 fa9d 	bl	800a2e4 <vPortExitCritical>
				return pdPASS;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e0b7      	b.n	8007f1e <xQueueSemaphoreTake+0x26a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d121      	bne.n	8007df8 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <xQueueSemaphoreTake+0x11c>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	617b      	str	r3, [r7, #20]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <xQueueSemaphoreTake+0x11a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007dd0:	f002 fa88 	bl	800a2e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f003 feec 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007ddc:	4604      	mov	r4, r0
 8007dde:	2000      	movs	r0, #0
 8007de0:	f003 fee8 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007de4:	4602      	mov	r2, r0
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2101      	movs	r1, #1
 8007dea:	9100      	str	r1, [sp, #0]
 8007dec:	4621      	mov	r1, r4
 8007dee:	205c      	movs	r0, #92	; 0x5c
 8007df0:	f003 faa4 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e092      	b.n	8007f1e <xQueueSemaphoreTake+0x26a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d106      	bne.n	8007e0c <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dfe:	f107 030c 	add.w	r3, r7, #12
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 f908 	bl	8009018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e0c:	f002 fa6a 	bl	800a2e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e10:	f000 fd9e 	bl	8008950 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e14:	f002 fa36 	bl	800a284 <vPortEnterCritical>
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d103      	bne.n	8007e2e <xQueueSemaphoreTake+0x17a>
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e34:	b25b      	sxtb	r3, r3
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d103      	bne.n	8007e44 <xQueueSemaphoreTake+0x190>
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e44:	f002 fa4e 	bl	800a2e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e48:	463a      	mov	r2, r7
 8007e4a:	f107 030c 	add.w	r3, r7, #12
 8007e4e:	4611      	mov	r1, r2
 8007e50:	4618      	mov	r0, r3
 8007e52:	f001 f8f7 	bl	8009044 <xTaskCheckForTimeOut>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d132      	bne.n	8007ec2 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e5e:	f000 fa29 	bl	80082b4 <prvIsQueueEmpty>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d026      	beq.n	8007eb6 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d109      	bne.n	8007e84 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8007e70:	f002 fa08 	bl	800a284 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 fa91 	bl	80093a0 <xTaskPriorityInherit>
 8007e7e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007e80:	f002 fa30 	bl	800a2e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	3324      	adds	r3, #36	; 0x24
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	4611      	mov	r1, r2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 ff67 	bl	8008d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e94:	f000 f9bc 	bl	8008210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e98:	f000 fd68 	bl	800896c <xTaskResumeAll>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f47f af48 	bne.w	8007d34 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007ea4:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <xQueueSemaphoreTake+0x274>)
 8007ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	e73e      	b.n	8007d34 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eb8:	f000 f9aa 	bl	8008210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ebc:	f000 fd56 	bl	800896c <xTaskResumeAll>
 8007ec0:	e738      	b.n	8007d34 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ec2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec4:	f000 f9a4 	bl	8008210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ec8:	f000 fd50 	bl	800896c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ece:	f000 f9f1 	bl	80082b4 <prvIsQueueEmpty>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f43f af2d 	beq.w	8007d34 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00d      	beq.n	8007efc <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8007ee0:	f002 f9d0 	bl	800a284 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ee6:	f000 f8eb 	bl	80080c0 <prvGetDisinheritPriorityAfterTimeout>
 8007eea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 fb3c 	bl	8009570 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ef8:	f002 f9f4 	bl	800a2e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	4618      	mov	r0, r3
 8007f00:	f003 fe58 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007f04:	4604      	mov	r4, r0
 8007f06:	2000      	movs	r0, #0
 8007f08:	f003 fe54 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2101      	movs	r1, #1
 8007f12:	9100      	str	r1, [sp, #0]
 8007f14:	4621      	mov	r1, r4
 8007f16:	205c      	movs	r0, #92	; 0x5c
 8007f18:	f003 fa10 	bl	800b33c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8007f1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	373c      	adds	r7, #60	; 0x3c
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd90      	pop	{r4, r7, pc}
 8007f26:	bf00      	nop
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b08f      	sub	sp, #60	; 0x3c
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	623b      	str	r3, [r7, #32]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <xQueueReceiveFromISR+0x3a>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <xQueueReceiveFromISR+0x3e>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <xQueueReceiveFromISR+0x40>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d10a      	bne.n	8007f86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	61fb      	str	r3, [r7, #28]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f86:	f002 fa5f 	bl	800a448 <vPortValidateInterruptPriority>
	__asm volatile
 8007f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	61ba      	str	r2, [r7, #24]
 8007fa0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007fa2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d03e      	beq.n	8008030 <xQueueReceiveFromISR+0x104>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f003 fdf8 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f003 fdf3 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	2062      	movs	r0, #98	; 0x62
 8007fd6:	f003 f93b 	bl	800b250 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fde:	f000 f8f1 	bl	80081c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	1e5a      	subs	r2, r3, #1
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007fea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff2:	d112      	bne.n	800801a <xQueueReceiveFromISR+0xee>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d016      	beq.n	800802a <xQueueReceiveFromISR+0xfe>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	3310      	adds	r3, #16
 8008000:	4618      	mov	r0, r3
 8008002:	f000 ff3b 	bl	8008e7c <xTaskRemoveFromEventList>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00e      	beq.n	800802a <xQueueReceiveFromISR+0xfe>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00b      	beq.n	800802a <xQueueReceiveFromISR+0xfe>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	601a      	str	r2, [r3, #0]
 8008018:	e007      	b.n	800802a <xQueueReceiveFromISR+0xfe>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800801a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800801e:	3301      	adds	r3, #1
 8008020:	b2db      	uxtb	r3, r3
 8008022:	b25a      	sxtb	r2, r3
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800802a:	2301      	movs	r3, #1
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
 800802e:	e010      	b.n	8008052 <xQueueReceiveFromISR+0x126>
		}
		else
		{
			xReturn = pdFAIL;
 8008030:	2300      	movs	r3, #0
 8008032:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	4618      	mov	r0, r3
 8008038:	f003 fdbc 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 800803c:	4604      	mov	r4, r0
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	4618      	mov	r0, r3
 8008042:	f003 fdb7 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8008046:	4602      	mov	r2, r0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4621      	mov	r1, r4
 800804c:	2062      	movs	r0, #98	; 0x62
 800804e:	f003 f8ff 	bl	800b250 <SEGGER_SYSVIEW_RecordU32x3>
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f383 8811 	msr	BASEPRI, r3
}
 800805c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008060:	4618      	mov	r0, r3
 8008062:	373c      	adds	r7, #60	; 0x3c
 8008064:	46bd      	mov	sp, r7
 8008066:	bd90      	pop	{r4, r7, pc}

08008068 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <vQueueDelete+0x28>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	60bb      	str	r3, [r7, #8]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4618      	mov	r0, r3
 8008094:	f003 fd8e 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 8008098:	4603      	mov	r3, r0
 800809a:	4619      	mov	r1, r3
 800809c:	205f      	movs	r0, #95	; 0x5f
 800809e:	f003 f841 	bl	800b124 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f000 f966 	bl	8008374 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <vQueueDelete+0x50>
		{
			vPortFree( pxQueue );
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f002 fad4 	bl	800a660 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080b8:	bf00      	nop
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d006      	beq.n	80080de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	e001      	b.n	80080e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80080e2:	68fb      	ldr	r3, [r7, #12]
	}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008104:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d10d      	bne.n	800812a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d14d      	bne.n	80081b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	4618      	mov	r0, r3
 800811c:	f001 f9b2 	bl	8009484 <xTaskPriorityDisinherit>
 8008120:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	609a      	str	r2, [r3, #8]
 8008128:	e043      	b.n	80081b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d119      	bne.n	8008164 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	6858      	ldr	r0, [r3, #4]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008138:	461a      	mov	r2, r3
 800813a:	68b9      	ldr	r1, [r7, #8]
 800813c:	f004 faa7 	bl	800c68e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	441a      	add	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	429a      	cmp	r2, r3
 8008158:	d32b      	bcc.n	80081b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	e026      	b.n	80081b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68d8      	ldr	r0, [r3, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816c:	461a      	mov	r2, r3
 800816e:	68b9      	ldr	r1, [r7, #8]
 8008170:	f004 fa8d 	bl	800c68e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817c:	425b      	negs	r3, r3
 800817e:	441a      	add	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d207      	bcs.n	80081a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	425b      	negs	r3, r3
 800819a:	441a      	add	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d105      	bne.n	80081b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081ba:	697b      	ldr	r3, [r7, #20]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d018      	beq.n	8008208 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	441a      	add	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d303      	bcc.n	80081f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68d9      	ldr	r1, [r3, #12]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	461a      	mov	r2, r3
 8008202:	6838      	ldr	r0, [r7, #0]
 8008204:	f004 fa43 	bl	800c68e <memcpy>
	}
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008218:	f002 f834 	bl	800a284 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008222:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008224:	e011      	b.n	800824a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b00      	cmp	r3, #0
 800822c:	d012      	beq.n	8008254 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3324      	adds	r3, #36	; 0x24
 8008232:	4618      	mov	r0, r3
 8008234:	f000 fe22 	bl	8008e7c <xTaskRemoveFromEventList>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d001      	beq.n	8008242 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800823e:	f000 ff63 	bl	8009108 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	3b01      	subs	r3, #1
 8008246:	b2db      	uxtb	r3, r3
 8008248:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800824a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dce9      	bgt.n	8008226 <prvUnlockQueue+0x16>
 8008252:	e000      	b.n	8008256 <prvUnlockQueue+0x46>
					break;
 8008254:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	22ff      	movs	r2, #255	; 0xff
 800825a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800825e:	f002 f841 	bl	800a2e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008262:	f002 f80f 	bl	800a284 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800826c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800826e:	e011      	b.n	8008294 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d012      	beq.n	800829e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3310      	adds	r3, #16
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fdfd 	bl	8008e7c <xTaskRemoveFromEventList>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008288:	f000 ff3e 	bl	8009108 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	3b01      	subs	r3, #1
 8008290:	b2db      	uxtb	r3, r3
 8008292:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008298:	2b00      	cmp	r3, #0
 800829a:	dce9      	bgt.n	8008270 <prvUnlockQueue+0x60>
 800829c:	e000      	b.n	80082a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800829e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	22ff      	movs	r2, #255	; 0xff
 80082a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082a8:	f002 f81c 	bl	800a2e4 <vPortExitCritical>
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082bc:	f001 ffe2 	bl	800a284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082c8:	2301      	movs	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]
 80082cc:	e001      	b.n	80082d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082d2:	f002 f807 	bl	800a2e4 <vPortExitCritical>

	return xReturn;
 80082d6:	68fb      	ldr	r3, [r7, #12]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082e8:	f001 ffcc 	bl	800a284 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d102      	bne.n	80082fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082f8:	2301      	movs	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e001      	b.n	8008302 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008302:	f001 ffef 	bl	800a2e4 <vPortExitCritical>

	return xReturn;
 8008306:	68fb      	ldr	r3, [r7, #12]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	e01e      	b.n	800835e <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008320:	4a13      	ldr	r2, [pc, #76]	; (8008370 <vQueueAddToRegistry+0x60>)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d115      	bne.n	8008358 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800832c:	4910      	ldr	r1, [pc, #64]	; (8008370 <vQueueAddToRegistry+0x60>)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008336:	4a0e      	ldr	r2, [pc, #56]	; (8008370 <vQueueAddToRegistry+0x60>)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	4413      	add	r3, r2
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4618      	mov	r0, r3
 8008346:	f003 fc35 	bl	800bbb4 <SEGGER_SYSVIEW_ShrinkId>
 800834a:	4601      	mov	r1, r0
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	2071      	movs	r0, #113	; 0x71
 8008352:	f002 ff23 	bl	800b19c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8008356:	e006      	b.n	8008366 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b07      	cmp	r3, #7
 8008362:	d9dd      	bls.n	8008320 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	2002658c 	.word	0x2002658c

08008374 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800837c:	2300      	movs	r3, #0
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e016      	b.n	80083b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008382:	4a10      	ldr	r2, [pc, #64]	; (80083c4 <vQueueUnregisterQueue+0x50>)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4413      	add	r3, r2
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	429a      	cmp	r2, r3
 8008390:	d10b      	bne.n	80083aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008392:	4a0c      	ldr	r2, [pc, #48]	; (80083c4 <vQueueUnregisterQueue+0x50>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2100      	movs	r1, #0
 8008398:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800839c:	4a09      	ldr	r2, [pc, #36]	; (80083c4 <vQueueUnregisterQueue+0x50>)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	00db      	lsls	r3, r3, #3
 80083a2:	4413      	add	r3, r2
 80083a4:	2200      	movs	r2, #0
 80083a6:	605a      	str	r2, [r3, #4]
				break;
 80083a8:	e006      	b.n	80083b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3301      	adds	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b07      	cmp	r3, #7
 80083b4:	d9e5      	bls.n	8008382 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	2002658c 	.word	0x2002658c

080083c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083d8:	f001 ff54 	bl	800a284 <vPortEnterCritical>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e8:	d103      	bne.n	80083f2 <vQueueWaitForMessageRestricted+0x2a>
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083f8:	b25b      	sxtb	r3, r3
 80083fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083fe:	d103      	bne.n	8008408 <vQueueWaitForMessageRestricted+0x40>
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008408:	f001 ff6c 	bl	800a2e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	2b00      	cmp	r3, #0
 8008412:	d106      	bne.n	8008422 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	3324      	adds	r3, #36	; 0x24
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fcff 	bl	8008e20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008422:	6978      	ldr	r0, [r7, #20]
 8008424:	f7ff fef4 	bl	8008210 <prvUnlockQueue>
	}
 8008428:	bf00      	nop
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008430:	b580      	push	{r7, lr}
 8008432:	b08e      	sub	sp, #56	; 0x38
 8008434:	af04      	add	r7, sp, #16
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800843e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	623b      	str	r3, [r7, #32]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	2b00      	cmp	r3, #0
 800845e:	d10a      	bne.n	8008476 <xTaskCreateStatic+0x46>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	61fb      	str	r3, [r7, #28]
}
 8008472:	bf00      	nop
 8008474:	e7fe      	b.n	8008474 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008476:	23a8      	movs	r3, #168	; 0xa8
 8008478:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2ba8      	cmp	r3, #168	; 0xa8
 800847e:	d00a      	beq.n	8008496 <xTaskCreateStatic+0x66>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	61bb      	str	r3, [r7, #24]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008496:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	2b00      	cmp	r3, #0
 800849c:	d01e      	beq.n	80084dc <xTaskCreateStatic+0xac>
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01b      	beq.n	80084dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	2202      	movs	r2, #2
 80084b2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084b6:	2300      	movs	r3, #0
 80084b8:	9303      	str	r3, [sp, #12]
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	9302      	str	r3, [sp, #8]
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f850 	bl	8008574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084d6:	f000 f8f3 	bl	80086c0 <prvAddNewTaskToReadyList>
 80084da:	e001      	b.n	80084e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084e0:	697b      	ldr	r3, [r7, #20]
	}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3728      	adds	r7, #40	; 0x28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b08c      	sub	sp, #48	; 0x30
 80084ee:	af04      	add	r7, sp, #16
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084fa:	88fb      	ldrh	r3, [r7, #6]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 ffe2 	bl	800a4c8 <pvPortMalloc>
 8008504:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00e      	beq.n	800852a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800850c:	20a8      	movs	r0, #168	; 0xa8
 800850e:	f001 ffdb 	bl	800a4c8 <pvPortMalloc>
 8008512:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	631a      	str	r2, [r3, #48]	; 0x30
 8008520:	e005      	b.n	800852e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008522:	6978      	ldr	r0, [r7, #20]
 8008524:	f002 f89c 	bl	800a660 <vPortFree>
 8008528:	e001      	b.n	800852e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d017      	beq.n	8008564 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800853c:	88fa      	ldrh	r2, [r7, #6]
 800853e:	2300      	movs	r3, #0
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	9302      	str	r3, [sp, #8]
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f80e 	bl	8008574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008558:	69f8      	ldr	r0, [r7, #28]
 800855a:	f000 f8b1 	bl	80086c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800855e:	2301      	movs	r3, #1
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	e002      	b.n	800856a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008564:	f04f 33ff 	mov.w	r3, #4294967295
 8008568:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800856a:	69bb      	ldr	r3, [r7, #24]
	}
 800856c:	4618      	mov	r0, r3
 800856e:	3720      	adds	r7, #32
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	461a      	mov	r2, r3
 800858c:	21a5      	movs	r1, #165	; 0xa5
 800858e:	f003 ffac 	bl	800c4ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800859c:	3b01      	subs	r3, #1
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <prvInitialiseNewTask+0x58>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	617b      	str	r3, [r7, #20]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d01f      	beq.n	8008612 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085d2:	2300      	movs	r3, #0
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	e012      	b.n	80085fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	4413      	add	r3, r2
 80085de:	7819      	ldrb	r1, [r3, #0]
 80085e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	3334      	adds	r3, #52	; 0x34
 80085e8:	460a      	mov	r2, r1
 80085ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	4413      	add	r3, r2
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d006      	beq.n	8008606 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	3301      	adds	r3, #1
 80085fc:	61fb      	str	r3, [r7, #28]
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	2b0f      	cmp	r3, #15
 8008602:	d9e9      	bls.n	80085d8 <prvInitialiseNewTask+0x64>
 8008604:	e000      	b.n	8008608 <prvInitialiseNewTask+0x94>
			{
				break;
 8008606:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008610:	e003      	b.n	800861a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861c:	2b37      	cmp	r3, #55	; 0x37
 800861e:	d901      	bls.n	8008624 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008620:	2337      	movs	r3, #55	; 0x37
 8008622:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008628:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800862e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	2200      	movs	r2, #0
 8008634:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	3304      	adds	r3, #4
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fcbc 	bl	8006fb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	3318      	adds	r3, #24
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fcb7 	bl	8006fb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800864e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	2200      	movs	r2, #0
 800866c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	3354      	adds	r3, #84	; 0x54
 8008674:	224c      	movs	r2, #76	; 0x4c
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f003 ff36 	bl	800c4ea <memset>
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	4a0c      	ldr	r2, [pc, #48]	; (80086b4 <prvInitialiseNewTask+0x140>)
 8008682:	659a      	str	r2, [r3, #88]	; 0x58
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <prvInitialiseNewTask+0x144>)
 8008688:	65da      	str	r2, [r3, #92]	; 0x5c
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	4a0b      	ldr	r2, [pc, #44]	; (80086bc <prvInitialiseNewTask+0x148>)
 800868e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	68f9      	ldr	r1, [r7, #12]
 8008694:	69b8      	ldr	r0, [r7, #24]
 8008696:	f001 fcc7 	bl	800a028 <pxPortInitialiseStack>
 800869a:	4602      	mov	r2, r0
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ac:	bf00      	nop
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	2002b29c 	.word	0x2002b29c
 80086b8:	2002b304 	.word	0x2002b304
 80086bc:	2002b36c 	.word	0x2002b36c

080086c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086c0:	b5b0      	push	{r4, r5, r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086c8:	f001 fddc 	bl	800a284 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086cc:	4b3c      	ldr	r3, [pc, #240]	; (80087c0 <prvAddNewTaskToReadyList+0x100>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	4a3b      	ldr	r2, [pc, #236]	; (80087c0 <prvAddNewTaskToReadyList+0x100>)
 80086d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086d6:	4b3b      	ldr	r3, [pc, #236]	; (80087c4 <prvAddNewTaskToReadyList+0x104>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d109      	bne.n	80086f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086de:	4a39      	ldr	r2, [pc, #228]	; (80087c4 <prvAddNewTaskToReadyList+0x104>)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086e4:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <prvAddNewTaskToReadyList+0x100>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d110      	bne.n	800870e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086ec:	f000 fd30 	bl	8009150 <prvInitialiseTaskLists>
 80086f0:	e00d      	b.n	800870e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086f2:	4b35      	ldr	r3, [pc, #212]	; (80087c8 <prvAddNewTaskToReadyList+0x108>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086fa:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <prvAddNewTaskToReadyList+0x104>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	429a      	cmp	r2, r3
 8008706:	d802      	bhi.n	800870e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008708:	4a2e      	ldr	r2, [pc, #184]	; (80087c4 <prvAddNewTaskToReadyList+0x104>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800870e:	4b2f      	ldr	r3, [pc, #188]	; (80087cc <prvAddNewTaskToReadyList+0x10c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a2d      	ldr	r2, [pc, #180]	; (80087cc <prvAddNewTaskToReadyList+0x10c>)
 8008716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008718:	4b2c      	ldr	r3, [pc, #176]	; (80087cc <prvAddNewTaskToReadyList+0x10c>)
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d016      	beq.n	8008754 <prvAddNewTaskToReadyList+0x94>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4618      	mov	r0, r3
 800872a:	f003 f97d 	bl	800ba28 <SEGGER_SYSVIEW_OnTaskCreate>
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873e:	461d      	mov	r5, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461c      	mov	r4, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	1ae3      	subs	r3, r4, r3
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	462b      	mov	r3, r5
 8008750:	f003 fcfc 	bl	800c14c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4618      	mov	r0, r3
 8008758:	f003 f9ea 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008760:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <prvAddNewTaskToReadyList+0x110>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d903      	bls.n	8008770 <prvAddNewTaskToReadyList+0xb0>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	4a18      	ldr	r2, [pc, #96]	; (80087d0 <prvAddNewTaskToReadyList+0x110>)
 800876e:	6013      	str	r3, [r2, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008774:	4613      	mov	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4a15      	ldr	r2, [pc, #84]	; (80087d4 <prvAddNewTaskToReadyList+0x114>)
 800877e:	441a      	add	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3304      	adds	r3, #4
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7fe fc23 	bl	8006fd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800878c:	f001 fdaa 	bl	800a2e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008790:	4b0d      	ldr	r3, [pc, #52]	; (80087c8 <prvAddNewTaskToReadyList+0x108>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00e      	beq.n	80087b6 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <prvAddNewTaskToReadyList+0x104>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d207      	bcs.n	80087b6 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <prvAddNewTaskToReadyList+0x118>)
 80087a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bdb0      	pop	{r4, r5, r7, pc}
 80087be:	bf00      	nop
 80087c0:	20026aa0 	.word	0x20026aa0
 80087c4:	200265cc 	.word	0x200265cc
 80087c8:	20026aac 	.word	0x20026aac
 80087cc:	20026abc 	.word	0x20026abc
 80087d0:	20026aa8 	.word	0x20026aa8
 80087d4:	200265d0 	.word	0x200265d0
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d01b      	beq.n	8008826 <vTaskDelay+0x4a>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087ee:	4b15      	ldr	r3, [pc, #84]	; (8008844 <vTaskDelay+0x68>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <vTaskDelay+0x30>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
 800880a:	e7fe      	b.n	800880a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800880c:	f000 f8a0 	bl	8008950 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	2023      	movs	r0, #35	; 0x23
 8008814:	f002 fc86 	bl	800b124 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 ff5e 	bl	80096dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008820:	f000 f8a4 	bl	800896c <xTaskResumeAll>
 8008824:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d107      	bne.n	800883c <vTaskDelay+0x60>
		{
			portYIELD_WITHIN_API();
 800882c:	4b06      	ldr	r3, [pc, #24]	; (8008848 <vTaskDelay+0x6c>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800883c:	bf00      	nop
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	20026ac8 	.word	0x20026ac8
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008852:	2300      	movs	r3, #0
 8008854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008856:	2300      	movs	r3, #0
 8008858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800885a:	463a      	mov	r2, r7
 800885c:	1d39      	adds	r1, r7, #4
 800885e:	f107 0308 	add.w	r3, r7, #8
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe f966 	bl	8006b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	9202      	str	r2, [sp, #8]
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	2300      	movs	r3, #0
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	2300      	movs	r3, #0
 8008878:	460a      	mov	r2, r1
 800887a:	492d      	ldr	r1, [pc, #180]	; (8008930 <vTaskStartScheduler+0xe4>)
 800887c:	482d      	ldr	r0, [pc, #180]	; (8008934 <vTaskStartScheduler+0xe8>)
 800887e:	f7ff fdd7 	bl	8008430 <xTaskCreateStatic>
 8008882:	4603      	mov	r3, r0
 8008884:	4a2c      	ldr	r2, [pc, #176]	; (8008938 <vTaskStartScheduler+0xec>)
 8008886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008888:	4b2b      	ldr	r3, [pc, #172]	; (8008938 <vTaskStartScheduler+0xec>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008890:	2301      	movs	r3, #1
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	e001      	b.n	800889a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d102      	bne.n	80088a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088a0:	f000 ff70 	bl	8009784 <xTimerCreateTimerTask>
 80088a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d12e      	bne.n	800890a <vTaskStartScheduler+0xbe>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	613b      	str	r3, [r7, #16]
}
 80088be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088c0:	4b1e      	ldr	r3, [pc, #120]	; (800893c <vTaskStartScheduler+0xf0>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3354      	adds	r3, #84	; 0x54
 80088c6:	4a1e      	ldr	r2, [pc, #120]	; (8008940 <vTaskStartScheduler+0xf4>)
 80088c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088ca:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <vTaskStartScheduler+0xf8>)
 80088cc:	f04f 32ff 	mov.w	r2, #4294967295
 80088d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088d2:	4b1d      	ldr	r3, [pc, #116]	; (8008948 <vTaskStartScheduler+0xfc>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088d8:	4b1c      	ldr	r3, [pc, #112]	; (800894c <vTaskStartScheduler+0x100>)
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80088de:	4b17      	ldr	r3, [pc, #92]	; (800893c <vTaskStartScheduler+0xf0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3334      	adds	r3, #52	; 0x34
 80088e4:	2205      	movs	r2, #5
 80088e6:	4912      	ldr	r1, [pc, #72]	; (8008930 <vTaskStartScheduler+0xe4>)
 80088e8:	4618      	mov	r0, r3
 80088ea:	f003 fdee 	bl	800c4ca <memcmp>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <vTaskStartScheduler+0xb4>
 80088f4:	4b11      	ldr	r3, [pc, #68]	; (800893c <vTaskStartScheduler+0xf0>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f003 f8d7 	bl	800baac <SEGGER_SYSVIEW_OnTaskStartExec>
 80088fe:	e001      	b.n	8008904 <vTaskStartScheduler+0xb8>
 8008900:	f003 f876 	bl	800b9f0 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008904:	f001 fc1c 	bl	800a140 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008908:	e00e      	b.n	8008928 <vTaskStartScheduler+0xdc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d10a      	bne.n	8008928 <vTaskStartScheduler+0xdc>
	__asm volatile
 8008912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008916:	f383 8811 	msr	BASEPRI, r3
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	f3bf 8f4f 	dsb	sy
 8008922:	60fb      	str	r3, [r7, #12]
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <vTaskStartScheduler+0xda>
}
 8008928:	bf00      	nop
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	0800d6c8 	.word	0x0800d6c8
 8008934:	08009121 	.word	0x08009121
 8008938:	20026ac4 	.word	0x20026ac4
 800893c:	200265cc 	.word	0x200265cc
 8008940:	20000078 	.word	0x20000078
 8008944:	20026ac0 	.word	0x20026ac0
 8008948:	20026aac 	.word	0x20026aac
 800894c:	20026aa4 	.word	0x20026aa4

08008950 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008954:	4b04      	ldr	r3, [pc, #16]	; (8008968 <vTaskSuspendAll+0x18>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3301      	adds	r3, #1
 800895a:	4a03      	ldr	r2, [pc, #12]	; (8008968 <vTaskSuspendAll+0x18>)
 800895c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800895e:	bf00      	nop
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	20026ac8 	.word	0x20026ac8

0800896c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800897a:	4b44      	ldr	r3, [pc, #272]	; (8008a8c <xTaskResumeAll+0x120>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <xTaskResumeAll+0x2c>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	603b      	str	r3, [r7, #0]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008998:	f001 fc74 	bl	800a284 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800899c:	4b3b      	ldr	r3, [pc, #236]	; (8008a8c <xTaskResumeAll+0x120>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	4a3a      	ldr	r2, [pc, #232]	; (8008a8c <xTaskResumeAll+0x120>)
 80089a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089a6:	4b39      	ldr	r3, [pc, #228]	; (8008a8c <xTaskResumeAll+0x120>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d166      	bne.n	8008a7c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089ae:	4b38      	ldr	r3, [pc, #224]	; (8008a90 <xTaskResumeAll+0x124>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d062      	beq.n	8008a7c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089b6:	e033      	b.n	8008a20 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b8:	4b36      	ldr	r3, [pc, #216]	; (8008a94 <xTaskResumeAll+0x128>)
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3318      	adds	r3, #24
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe fb61 	bl	800708c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fb5c 	bl	800708c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f003 f8aa 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4b2d      	ldr	r3, [pc, #180]	; (8008a98 <xTaskResumeAll+0x12c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d903      	bls.n	80089f0 <xTaskResumeAll+0x84>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	4a2a      	ldr	r2, [pc, #168]	; (8008a98 <xTaskResumeAll+0x12c>)
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4a27      	ldr	r2, [pc, #156]	; (8008a9c <xTaskResumeAll+0x130>)
 80089fe:	441a      	add	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f7fe fae3 	bl	8006fd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a10:	4b23      	ldr	r3, [pc, #140]	; (8008aa0 <xTaskResumeAll+0x134>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d302      	bcc.n	8008a20 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8008a1a:	4b22      	ldr	r3, [pc, #136]	; (8008aa4 <xTaskResumeAll+0x138>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a20:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <xTaskResumeAll+0x128>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1c7      	bne.n	80089b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d001      	beq.n	8008a32 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a2e:	f000 fc69 	bl	8009304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a32:	4b1d      	ldr	r3, [pc, #116]	; (8008aa8 <xTaskResumeAll+0x13c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d010      	beq.n	8008a60 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a3e:	f000 f859 	bl	8008af4 <xTaskIncrementTick>
 8008a42:	4603      	mov	r3, r0
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d002      	beq.n	8008a4e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8008a48:	4b16      	ldr	r3, [pc, #88]	; (8008aa4 <xTaskResumeAll+0x138>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1f1      	bne.n	8008a3e <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 8008a5a:	4b13      	ldr	r3, [pc, #76]	; (8008aa8 <xTaskResumeAll+0x13c>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a60:	4b10      	ldr	r3, [pc, #64]	; (8008aa4 <xTaskResumeAll+0x138>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d009      	beq.n	8008a7c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <xTaskResumeAll+0x140>)
 8008a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a72:	601a      	str	r2, [r3, #0]
 8008a74:	f3bf 8f4f 	dsb	sy
 8008a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a7c:	f001 fc32 	bl	800a2e4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a80:	68bb      	ldr	r3, [r7, #8]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20026ac8 	.word	0x20026ac8
 8008a90:	20026aa0 	.word	0x20026aa0
 8008a94:	20026a60 	.word	0x20026a60
 8008a98:	20026aa8 	.word	0x20026aa8
 8008a9c:	200265d0 	.word	0x200265d0
 8008aa0:	200265cc 	.word	0x200265cc
 8008aa4:	20026ab4 	.word	0x20026ab4
 8008aa8:	20026ab0 	.word	0x20026ab0
 8008aac:	e000ed04 	.word	0xe000ed04

08008ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <xTaskGetTickCount+0x1c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008abc:	687b      	ldr	r3, [r7, #4]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	20026aa4 	.word	0x20026aa4

08008ad0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ad6:	f001 fcb7 	bl	800a448 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008ada:	2300      	movs	r3, #0
 8008adc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008ade:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <xTaskGetTickCountFromISR+0x20>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ae4:	683b      	ldr	r3, [r7, #0]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20026aa4 	.word	0x20026aa4

08008af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008afe:	4b51      	ldr	r3, [pc, #324]	; (8008c44 <xTaskIncrementTick+0x150>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f040 8093 	bne.w	8008c2e <xTaskIncrementTick+0x13a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b08:	4b4f      	ldr	r3, [pc, #316]	; (8008c48 <xTaskIncrementTick+0x154>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b10:	4a4d      	ldr	r2, [pc, #308]	; (8008c48 <xTaskIncrementTick+0x154>)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d120      	bne.n	8008b5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b1c:	4b4b      	ldr	r3, [pc, #300]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <xTaskIncrementTick+0x48>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	603b      	str	r3, [r7, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	e7fe      	b.n	8008b3a <xTaskIncrementTick+0x46>
 8008b3c:	4b43      	ldr	r3, [pc, #268]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	60fb      	str	r3, [r7, #12]
 8008b42:	4b43      	ldr	r3, [pc, #268]	; (8008c50 <xTaskIncrementTick+0x15c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a41      	ldr	r2, [pc, #260]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b48:	6013      	str	r3, [r2, #0]
 8008b4a:	4a41      	ldr	r2, [pc, #260]	; (8008c50 <xTaskIncrementTick+0x15c>)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	4b40      	ldr	r3, [pc, #256]	; (8008c54 <xTaskIncrementTick+0x160>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3301      	adds	r3, #1
 8008b56:	4a3f      	ldr	r2, [pc, #252]	; (8008c54 <xTaskIncrementTick+0x160>)
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	f000 fbd3 	bl	8009304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b5e:	4b3e      	ldr	r3, [pc, #248]	; (8008c58 <xTaskIncrementTick+0x164>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d34d      	bcc.n	8008c04 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b68:	4b38      	ldr	r3, [pc, #224]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d104      	bne.n	8008b7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b72:	4b39      	ldr	r3, [pc, #228]	; (8008c58 <xTaskIncrementTick+0x164>)
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295
 8008b78:	601a      	str	r2, [r3, #0]
					break;
 8008b7a:	e043      	b.n	8008c04 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b7c:	4b33      	ldr	r3, [pc, #204]	; (8008c4c <xTaskIncrementTick+0x158>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d203      	bcs.n	8008b9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b94:	4a30      	ldr	r2, [pc, #192]	; (8008c58 <xTaskIncrementTick+0x164>)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b9a:	e033      	b.n	8008c04 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7fe fa73 	bl	800708c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d004      	beq.n	8008bb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	3318      	adds	r3, #24
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fa6a 	bl	800708c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f002 ffb8 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <xTaskIncrementTick+0x168>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d903      	bls.n	8008bd4 <xTaskIncrementTick+0xe0>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	4a22      	ldr	r2, [pc, #136]	; (8008c5c <xTaskIncrementTick+0x168>)
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd8:	4613      	mov	r3, r2
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4a1f      	ldr	r2, [pc, #124]	; (8008c60 <xTaskIncrementTick+0x16c>)
 8008be2:	441a      	add	r2, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7fe f9f1 	bl	8006fd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <xTaskIncrementTick+0x170>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d3b4      	bcc.n	8008b68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c02:	e7b1      	b.n	8008b68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c04:	4b17      	ldr	r3, [pc, #92]	; (8008c64 <xTaskIncrementTick+0x170>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0a:	4915      	ldr	r1, [pc, #84]	; (8008c60 <xTaskIncrementTick+0x16c>)
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	440b      	add	r3, r1
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d901      	bls.n	8008c20 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <xTaskIncrementTick+0x174>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d007      	beq.n	8008c38 <xTaskIncrementTick+0x144>
			{
				xSwitchRequired = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	e004      	b.n	8008c38 <xTaskIncrementTick+0x144>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <xTaskIncrementTick+0x178>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	4a0d      	ldr	r2, [pc, #52]	; (8008c6c <xTaskIncrementTick+0x178>)
 8008c36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20026ac8 	.word	0x20026ac8
 8008c48:	20026aa4 	.word	0x20026aa4
 8008c4c:	20026a58 	.word	0x20026a58
 8008c50:	20026a5c 	.word	0x20026a5c
 8008c54:	20026ab8 	.word	0x20026ab8
 8008c58:	20026ac0 	.word	0x20026ac0
 8008c5c:	20026aa8 	.word	0x20026aa8
 8008c60:	200265d0 	.word	0x200265d0
 8008c64:	200265cc 	.word	0x200265cc
 8008c68:	20026ab4 	.word	0x20026ab4
 8008c6c:	20026ab0 	.word	0x20026ab0

08008c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c76:	4b33      	ldr	r3, [pc, #204]	; (8008d44 <vTaskSwitchContext+0xd4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c7e:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <vTaskSwitchContext+0xd8>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c84:	e059      	b.n	8008d3a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8008c86:	4b30      	ldr	r3, [pc, #192]	; (8008d48 <vTaskSwitchContext+0xd8>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c8c:	4b2f      	ldr	r3, [pc, #188]	; (8008d4c <vTaskSwitchContext+0xdc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e010      	b.n	8008cb6 <vTaskSwitchContext+0x46>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <vTaskSwitchContext+0x40>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	607b      	str	r3, [r7, #4]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <vTaskSwitchContext+0x3e>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	4926      	ldr	r1, [pc, #152]	; (8008d50 <vTaskSwitchContext+0xe0>)
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	440b      	add	r3, r1
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0e4      	beq.n	8008c94 <vTaskSwitchContext+0x24>
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4a1e      	ldr	r2, [pc, #120]	; (8008d50 <vTaskSwitchContext+0xe0>)
 8008cd6:	4413      	add	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	605a      	str	r2, [r3, #4]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	3308      	adds	r3, #8
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d104      	bne.n	8008cfa <vTaskSwitchContext+0x8a>
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	685a      	ldr	r2, [r3, #4]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	605a      	str	r2, [r3, #4]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	4a14      	ldr	r2, [pc, #80]	; (8008d54 <vTaskSwitchContext+0xe4>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	4a11      	ldr	r2, [pc, #68]	; (8008d4c <vTaskSwitchContext+0xdc>)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <vTaskSwitchContext+0xe4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3334      	adds	r3, #52	; 0x34
 8008d10:	2205      	movs	r2, #5
 8008d12:	4911      	ldr	r1, [pc, #68]	; (8008d58 <vTaskSwitchContext+0xe8>)
 8008d14:	4618      	mov	r0, r3
 8008d16:	f003 fbd8 	bl	800c4ca <memcmp>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <vTaskSwitchContext+0xbc>
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <vTaskSwitchContext+0xe4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f002 fec1 	bl	800baac <SEGGER_SYSVIEW_OnTaskStartExec>
 8008d2a:	e001      	b.n	8008d30 <vTaskSwitchContext+0xc0>
 8008d2c:	f002 fe60 	bl	800b9f0 <SEGGER_SYSVIEW_OnIdle>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d30:	4b08      	ldr	r3, [pc, #32]	; (8008d54 <vTaskSwitchContext+0xe4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3354      	adds	r3, #84	; 0x54
 8008d36:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <vTaskSwitchContext+0xec>)
 8008d38:	6013      	str	r3, [r2, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	3710      	adds	r7, #16
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20026ac8 	.word	0x20026ac8
 8008d48:	20026ab4 	.word	0x20026ab4
 8008d4c:	20026aa8 	.word	0x20026aa8
 8008d50:	200265d0 	.word	0x200265d0
 8008d54:	200265cc 	.word	0x200265cc
 8008d58:	0800d6c8 	.word	0x0800d6c8
 8008d5c:	20000078 	.word	0x20000078

08008d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10a      	bne.n	8008d86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
}
 8008d82:	bf00      	nop
 8008d84:	e7fe      	b.n	8008d84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d86:	4b07      	ldr	r3, [pc, #28]	; (8008da4 <vTaskPlaceOnEventList+0x44>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3318      	adds	r3, #24
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe f943 	bl	800701a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d94:	2101      	movs	r1, #1
 8008d96:	6838      	ldr	r0, [r7, #0]
 8008d98:	f000 fca0 	bl	80096dc <prvAddCurrentTaskToDelayedList>
}
 8008d9c:	bf00      	nop
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200265cc 	.word	0x200265cc

08008da8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	617b      	str	r3, [r7, #20]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8008dd0:	4b11      	ldr	r3, [pc, #68]	; (8008e18 <vTaskPlaceOnUnorderedEventList+0x70>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d10a      	bne.n	8008dee <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8008dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ddc:	f383 8811 	msr	BASEPRI, r3
 8008de0:	f3bf 8f6f 	isb	sy
 8008de4:	f3bf 8f4f 	dsb	sy
 8008de8:	613b      	str	r3, [r7, #16]
}
 8008dea:	bf00      	nop
 8008dec:	e7fe      	b.n	8008dec <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008dee:	4b0b      	ldr	r3, [pc, #44]	; (8008e1c <vTaskPlaceOnUnorderedEventList+0x74>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008df8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dfa:	4b08      	ldr	r3, [pc, #32]	; (8008e1c <vTaskPlaceOnUnorderedEventList+0x74>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3318      	adds	r3, #24
 8008e00:	4619      	mov	r1, r3
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f7fe f8e5 	bl	8006fd2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e08:	2101      	movs	r1, #1
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fc66 	bl	80096dc <prvAddCurrentTaskToDelayedList>
}
 8008e10:	bf00      	nop
 8008e12:	3718      	adds	r7, #24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20026ac8 	.word	0x20026ac8
 8008e1c:	200265cc 	.word	0x200265cc

08008e20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	617b      	str	r3, [r7, #20]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e48:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <vTaskPlaceOnEventListRestricted+0x58>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3318      	adds	r3, #24
 8008e4e:	4619      	mov	r1, r3
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7fe f8be 	bl	8006fd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8008e62:	2024      	movs	r0, #36	; 0x24
 8008e64:	f002 f940 	bl	800b0e8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	68b8      	ldr	r0, [r7, #8]
 8008e6c:	f000 fc36 	bl	80096dc <prvAddCurrentTaskToDelayedList>
	}
 8008e70:	bf00      	nop
 8008e72:	3718      	adds	r7, #24
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	200265cc 	.word	0x200265cc

08008e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60fb      	str	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	e7fe      	b.n	8008ea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	3318      	adds	r3, #24
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7fe f8ed 	bl	800708c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb2:	4b20      	ldr	r3, [pc, #128]	; (8008f34 <xTaskRemoveFromEventList+0xb8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d121      	bne.n	8008efe <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fe f8e4 	bl	800708c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 fe32 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed0:	4b19      	ldr	r3, [pc, #100]	; (8008f38 <xTaskRemoveFromEventList+0xbc>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d903      	bls.n	8008ee0 <xTaskRemoveFromEventList+0x64>
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	4a16      	ldr	r2, [pc, #88]	; (8008f38 <xTaskRemoveFromEventList+0xbc>)
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4a13      	ldr	r2, [pc, #76]	; (8008f3c <xTaskRemoveFromEventList+0xc0>)
 8008eee:	441a      	add	r2, r3
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f7fe f86b 	bl	8006fd2 <vListInsertEnd>
 8008efc:	e005      	b.n	8008f0a <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	3318      	adds	r3, #24
 8008f02:	4619      	mov	r1, r3
 8008f04:	480e      	ldr	r0, [pc, #56]	; (8008f40 <xTaskRemoveFromEventList+0xc4>)
 8008f06:	f7fe f864 	bl	8006fd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <xTaskRemoveFromEventList+0xc8>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d905      	bls.n	8008f24 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f1c:	4b0a      	ldr	r3, [pc, #40]	; (8008f48 <xTaskRemoveFromEventList+0xcc>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	e001      	b.n	8008f28 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f28:	697b      	ldr	r3, [r7, #20]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20026ac8 	.word	0x20026ac8
 8008f38:	20026aa8 	.word	0x20026aa8
 8008f3c:	200265d0 	.word	0x200265d0
 8008f40:	20026a60 	.word	0x20026a60
 8008f44:	200265cc 	.word	0x200265cc
 8008f48:	20026ab4 	.word	0x20026ab4

08008f4c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8008f56:	4b2b      	ldr	r3, [pc, #172]	; (8009004 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10a      	bne.n	8008f74 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	613b      	str	r3, [r7, #16]
}
 8008f70:	bf00      	nop
 8008f72:	e7fe      	b.n	8008f72 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10a      	bne.n	8008fa0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	60fb      	str	r3, [r7, #12]
}
 8008f9c:	bf00      	nop
 8008f9e:	e7fe      	b.n	8008f9e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fe f873 	bl	800708c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fe f86e 	bl	800708c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f002 fdbc 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbc:	4b12      	ldr	r3, [pc, #72]	; (8009008 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d903      	bls.n	8008fcc <vTaskRemoveFromUnorderedEventList+0x80>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	4a0f      	ldr	r2, [pc, #60]	; (8009008 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4a0c      	ldr	r2, [pc, #48]	; (800900c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8008fda:	441a      	add	r2, r3
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fd fff5 	bl	8006fd2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	4b08      	ldr	r3, [pc, #32]	; (8009010 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d902      	bls.n	8008ffc <vTaskRemoveFromUnorderedEventList+0xb0>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8008ff6:	4b07      	ldr	r3, [pc, #28]	; (8009014 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	601a      	str	r2, [r3, #0]
	}
}
 8008ffc:	bf00      	nop
 8008ffe:	3718      	adds	r7, #24
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	20026ac8 	.word	0x20026ac8
 8009008:	20026aa8 	.word	0x20026aa8
 800900c:	200265d0 	.word	0x200265d0
 8009010:	200265cc 	.word	0x200265cc
 8009014:	20026ab4 	.word	0x20026ab4

08009018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <vTaskInternalSetTimeOutState+0x24>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009028:	4b05      	ldr	r3, [pc, #20]	; (8009040 <vTaskInternalSetTimeOutState+0x28>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	605a      	str	r2, [r3, #4]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	20026ab8 	.word	0x20026ab8
 8009040:	20026aa4 	.word	0x20026aa4

08009044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	613b      	str	r3, [r7, #16]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10a      	bne.n	8009086 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	60fb      	str	r3, [r7, #12]
}
 8009082:	bf00      	nop
 8009084:	e7fe      	b.n	8009084 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009086:	f001 f8fd 	bl	800a284 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800908a:	4b1d      	ldr	r3, [pc, #116]	; (8009100 <xTaskCheckForTimeOut+0xbc>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	d102      	bne.n	80090aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	e023      	b.n	80090f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4b15      	ldr	r3, [pc, #84]	; (8009104 <xTaskCheckForTimeOut+0xc0>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d007      	beq.n	80090c6 <xTaskCheckForTimeOut+0x82>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	69ba      	ldr	r2, [r7, #24]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d302      	bcc.n	80090c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	61fb      	str	r3, [r7, #28]
 80090c4:	e015      	b.n	80090f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d20b      	bcs.n	80090e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	1ad2      	subs	r2, r2, r3
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff ff9b 	bl	8009018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090e2:	2300      	movs	r3, #0
 80090e4:	61fb      	str	r3, [r7, #28]
 80090e6:	e004      	b.n	80090f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090ee:	2301      	movs	r3, #1
 80090f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090f2:	f001 f8f7 	bl	800a2e4 <vPortExitCritical>

	return xReturn;
 80090f6:	69fb      	ldr	r3, [r7, #28]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20026aa4 	.word	0x20026aa4
 8009104:	20026ab8 	.word	0x20026ab8

08009108 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800910c:	4b03      	ldr	r3, [pc, #12]	; (800911c <vTaskMissedYield+0x14>)
 800910e:	2201      	movs	r2, #1
 8009110:	601a      	str	r2, [r3, #0]
}
 8009112:	bf00      	nop
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	20026ab4 	.word	0x20026ab4

08009120 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009128:	f000 f852 	bl	80091d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <prvIdleTask+0x28>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d9f9      	bls.n	8009128 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <prvIdleTask+0x2c>)
 8009136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913a:	601a      	str	r2, [r3, #0]
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009144:	e7f0      	b.n	8009128 <prvIdleTask+0x8>
 8009146:	bf00      	nop
 8009148:	200265d0 	.word	0x200265d0
 800914c:	e000ed04 	.word	0xe000ed04

08009150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009156:	2300      	movs	r3, #0
 8009158:	607b      	str	r3, [r7, #4]
 800915a:	e00c      	b.n	8009176 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4a12      	ldr	r2, [pc, #72]	; (80091b0 <prvInitialiseTaskLists+0x60>)
 8009168:	4413      	add	r3, r2
 800916a:	4618      	mov	r0, r3
 800916c:	f7fd ff04 	bl	8006f78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3301      	adds	r3, #1
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b37      	cmp	r3, #55	; 0x37
 800917a:	d9ef      	bls.n	800915c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800917c:	480d      	ldr	r0, [pc, #52]	; (80091b4 <prvInitialiseTaskLists+0x64>)
 800917e:	f7fd fefb 	bl	8006f78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009182:	480d      	ldr	r0, [pc, #52]	; (80091b8 <prvInitialiseTaskLists+0x68>)
 8009184:	f7fd fef8 	bl	8006f78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009188:	480c      	ldr	r0, [pc, #48]	; (80091bc <prvInitialiseTaskLists+0x6c>)
 800918a:	f7fd fef5 	bl	8006f78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800918e:	480c      	ldr	r0, [pc, #48]	; (80091c0 <prvInitialiseTaskLists+0x70>)
 8009190:	f7fd fef2 	bl	8006f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009194:	480b      	ldr	r0, [pc, #44]	; (80091c4 <prvInitialiseTaskLists+0x74>)
 8009196:	f7fd feef 	bl	8006f78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800919a:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <prvInitialiseTaskLists+0x78>)
 800919c:	4a05      	ldr	r2, [pc, #20]	; (80091b4 <prvInitialiseTaskLists+0x64>)
 800919e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091a0:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <prvInitialiseTaskLists+0x7c>)
 80091a2:	4a05      	ldr	r2, [pc, #20]	; (80091b8 <prvInitialiseTaskLists+0x68>)
 80091a4:	601a      	str	r2, [r3, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	200265d0 	.word	0x200265d0
 80091b4:	20026a30 	.word	0x20026a30
 80091b8:	20026a44 	.word	0x20026a44
 80091bc:	20026a60 	.word	0x20026a60
 80091c0:	20026a74 	.word	0x20026a74
 80091c4:	20026a8c 	.word	0x20026a8c
 80091c8:	20026a58 	.word	0x20026a58
 80091cc:	20026a5c 	.word	0x20026a5c

080091d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091d6:	e019      	b.n	800920c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091d8:	f001 f854 	bl	800a284 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091dc:	4b10      	ldr	r3, [pc, #64]	; (8009220 <prvCheckTasksWaitingTermination+0x50>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fd ff4f 	bl	800708c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091ee:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <prvCheckTasksWaitingTermination+0x54>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	4a0b      	ldr	r2, [pc, #44]	; (8009224 <prvCheckTasksWaitingTermination+0x54>)
 80091f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091f8:	4b0b      	ldr	r3, [pc, #44]	; (8009228 <prvCheckTasksWaitingTermination+0x58>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	4a0a      	ldr	r2, [pc, #40]	; (8009228 <prvCheckTasksWaitingTermination+0x58>)
 8009200:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009202:	f001 f86f 	bl	800a2e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f848 	bl	800929c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800920c:	4b06      	ldr	r3, [pc, #24]	; (8009228 <prvCheckTasksWaitingTermination+0x58>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e1      	bne.n	80091d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009214:	bf00      	nop
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20026a74 	.word	0x20026a74
 8009224:	20026aa0 	.word	0x20026aa0
 8009228:	20026a88 	.word	0x20026a88

0800922c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009238:	e005      	b.n	8009246 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3301      	adds	r3, #1
 800923e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3301      	adds	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2ba5      	cmp	r3, #165	; 0xa5
 800924c:	d0f5      	beq.n	800923a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	089b      	lsrs	r3, r3, #2
 8009252:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	b29b      	uxth	r3, r3
	}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <uxTaskGetStackHighWaterMark+0x14>
 8009272:	4b09      	ldr	r3, [pc, #36]	; (8009298 <uxTaskGetStackHighWaterMark+0x34>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	e000      	b.n	800927a <uxTaskGetStackHighWaterMark+0x16>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009280:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8009282:	6938      	ldr	r0, [r7, #16]
 8009284:	f7ff ffd2 	bl	800922c <prvTaskCheckFreeStackSpace>
 8009288:	4603      	mov	r3, r0
 800928a:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800928c:	68fb      	ldr	r3, [r7, #12]
	}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	200265cc 	.word	0x200265cc

0800929c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3354      	adds	r3, #84	; 0x54
 80092a8:	4618      	mov	r0, r3
 80092aa:	f003 f937 	bl	800c51c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d108      	bne.n	80092ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 f9cf 	bl	800a660 <vPortFree>
				vPortFree( pxTCB );
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f001 f9cc 	bl	800a660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092c8:	e018      	b.n	80092fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d103      	bne.n	80092dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 f9c3 	bl	800a660 <vPortFree>
	}
 80092da:	e00f      	b.n	80092fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d00a      	beq.n	80092fc <prvDeleteTCB+0x60>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	60fb      	str	r3, [r7, #12]
}
 80092f8:	bf00      	nop
 80092fa:	e7fe      	b.n	80092fa <prvDeleteTCB+0x5e>
	}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800930a:	4b0c      	ldr	r3, [pc, #48]	; (800933c <prvResetNextTaskUnblockTime+0x38>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d104      	bne.n	800931e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009314:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <prvResetNextTaskUnblockTime+0x3c>)
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
 800931a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800931c:	e008      	b.n	8009330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931e:	4b07      	ldr	r3, [pc, #28]	; (800933c <prvResetNextTaskUnblockTime+0x38>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	4a04      	ldr	r2, [pc, #16]	; (8009340 <prvResetNextTaskUnblockTime+0x3c>)
 800932e:	6013      	str	r3, [r2, #0]
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	20026a58 	.word	0x20026a58
 8009340:	20026ac0 	.word	0x20026ac0

08009344 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800934a:	4b05      	ldr	r3, [pc, #20]	; (8009360 <xTaskGetCurrentTaskHandle+0x1c>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009350:	687b      	ldr	r3, [r7, #4]
	}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	200265cc 	.word	0x200265cc

08009364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800936a:	4b0b      	ldr	r3, [pc, #44]	; (8009398 <xTaskGetSchedulerState+0x34>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d102      	bne.n	8009378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009372:	2301      	movs	r3, #1
 8009374:	607b      	str	r3, [r7, #4]
 8009376:	e008      	b.n	800938a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009378:	4b08      	ldr	r3, [pc, #32]	; (800939c <xTaskGetSchedulerState+0x38>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009380:	2302      	movs	r3, #2
 8009382:	607b      	str	r3, [r7, #4]
 8009384:	e001      	b.n	800938a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009386:	2300      	movs	r3, #0
 8009388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800938a:	687b      	ldr	r3, [r7, #4]
	}
 800938c:	4618      	mov	r0, r3
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr
 8009398:	20026aac 	.word	0x20026aac
 800939c:	20026ac8 	.word	0x20026ac8

080093a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d05a      	beq.n	800946c <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ba:	4b2f      	ldr	r3, [pc, #188]	; (8009478 <xTaskPriorityInherit+0xd8>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d24a      	bcs.n	800945a <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	db06      	blt.n	80093da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093cc:	4b2a      	ldr	r3, [pc, #168]	; (8009478 <xTaskPriorityInherit+0xd8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6959      	ldr	r1, [r3, #20]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4a24      	ldr	r2, [pc, #144]	; (800947c <xTaskPriorityInherit+0xdc>)
 80093ec:	4413      	add	r3, r2
 80093ee:	4299      	cmp	r1, r3
 80093f0:	d126      	bne.n	8009440 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fd fe48 	bl	800708c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093fc:	4b1e      	ldr	r3, [pc, #120]	; (8009478 <xTaskPriorityInherit+0xd8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	4618      	mov	r0, r3
 800940a:	f002 fb91 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009412:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <xTaskPriorityInherit+0xe0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	429a      	cmp	r2, r3
 8009418:	d903      	bls.n	8009422 <xTaskPriorityInherit+0x82>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941e:	4a18      	ldr	r2, [pc, #96]	; (8009480 <xTaskPriorityInherit+0xe0>)
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	4613      	mov	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	4413      	add	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a13      	ldr	r2, [pc, #76]	; (800947c <xTaskPriorityInherit+0xdc>)
 8009430:	441a      	add	r2, r3
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f7fd fdca 	bl	8006fd2 <vListInsertEnd>
 800943e:	e004      	b.n	800944a <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009440:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <xTaskPriorityInherit+0xd8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4619      	mov	r1, r3
 800944e:	2049      	movs	r0, #73	; 0x49
 8009450:	f001 fe68 	bl	800b124 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009454:	2301      	movs	r3, #1
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e008      	b.n	800946c <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800945e:	4b06      	ldr	r3, [pc, #24]	; (8009478 <xTaskPriorityInherit+0xd8>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	429a      	cmp	r2, r3
 8009466:	d201      	bcs.n	800946c <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009468:	2301      	movs	r3, #1
 800946a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800946c:	68fb      	ldr	r3, [r7, #12]
	}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	200265cc 	.word	0x200265cc
 800947c:	200265d0 	.word	0x200265d0
 8009480:	20026aa8 	.word	0x20026aa8

08009484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d05f      	beq.n	800955a <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800949a:	4b32      	ldr	r3, [pc, #200]	; (8009564 <xTaskPriorityDisinherit+0xe0>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d00a      	beq.n	80094ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	60fb      	str	r3, [r7, #12]
}
 80094b6:	bf00      	nop
 80094b8:	e7fe      	b.n	80094b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60bb      	str	r3, [r7, #8]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094dc:	1e5a      	subs	r2, r3, #1
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d035      	beq.n	800955a <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d131      	bne.n	800955a <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	3304      	adds	r3, #4
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd fdc6 	bl	800708c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4619      	mov	r1, r3
 8009504:	204a      	movs	r0, #74	; 0x4a
 8009506:	f001 fe0d 	bl	800b124 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009516:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	4618      	mov	r0, r3
 8009522:	f002 fb05 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <xTaskPriorityDisinherit+0xe4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d903      	bls.n	800953a <xTaskPriorityDisinherit+0xb6>
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009536:	4a0c      	ldr	r2, [pc, #48]	; (8009568 <xTaskPriorityDisinherit+0xe4>)
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4a09      	ldr	r2, [pc, #36]	; (800956c <xTaskPriorityDisinherit+0xe8>)
 8009548:	441a      	add	r2, r3
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	3304      	adds	r3, #4
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f7fd fd3e 	bl	8006fd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800955a:	697b      	ldr	r3, [r7, #20]
	}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	200265cc 	.word	0x200265cc
 8009568:	20026aa8 	.word	0x20026aa8
 800956c:	200265d0 	.word	0x200265d0

08009570 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800957e:	2301      	movs	r3, #1
 8009580:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d073      	beq.n	8009670 <vTaskPriorityDisinheritAfterTimeout+0x100>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009594:	f383 8811 	msr	BASEPRI, r3
 8009598:	f3bf 8f6f 	isb	sy
 800959c:	f3bf 8f4f 	dsb	sy
 80095a0:	60fb      	str	r3, [r7, #12]
}
 80095a2:	bf00      	nop
 80095a4:	e7fe      	b.n	80095a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095aa:	683a      	ldr	r2, [r7, #0]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d902      	bls.n	80095b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	61fb      	str	r3, [r7, #28]
 80095b4:	e002      	b.n	80095bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	69fa      	ldr	r2, [r7, #28]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d054      	beq.n	8009670 <vTaskPriorityDisinheritAfterTimeout+0x100>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d14f      	bne.n	8009670 <vTaskPriorityDisinheritAfterTimeout+0x100>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095d0:	4b29      	ldr	r3, [pc, #164]	; (8009678 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d10a      	bne.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	60bb      	str	r3, [r7, #8]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4619      	mov	r1, r3
 80095f4:	204a      	movs	r0, #74	; 0x4a
 80095f6:	f001 fd95 	bl	800b124 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	2b00      	cmp	r3, #0
 800960c:	db04      	blt.n	8009618 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	6959      	ldr	r1, [r3, #20]
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4a15      	ldr	r2, [pc, #84]	; (800967c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009628:	4413      	add	r3, r2
 800962a:	4299      	cmp	r1, r3
 800962c:	d120      	bne.n	8009670 <vTaskPriorityDisinheritAfterTimeout+0x100>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	3304      	adds	r3, #4
 8009632:	4618      	mov	r0, r3
 8009634:	f7fd fd2a 	bl	800708c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	4618      	mov	r0, r3
 800963c:	f002 fa78 	bl	800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009644:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	429a      	cmp	r2, r3
 800964a:	d903      	bls.n	8009654 <vTaskPriorityDisinheritAfterTimeout+0xe4>
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	4a0b      	ldr	r2, [pc, #44]	; (8009680 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009658:	4613      	mov	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4a06      	ldr	r2, [pc, #24]	; (800967c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8009662:	441a      	add	r2, r3
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	3304      	adds	r3, #4
 8009668:	4619      	mov	r1, r3
 800966a:	4610      	mov	r0, r2
 800966c:	f7fd fcb1 	bl	8006fd2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009670:	bf00      	nop
 8009672:	3720      	adds	r7, #32
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	200265cc 	.word	0x200265cc
 800967c:	200265d0 	.word	0x200265d0
 8009680:	20026aa8 	.word	0x20026aa8

08009684 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <uxTaskResetEventItemValue+0x2c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <uxTaskResetEventItemValue+0x2c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009698:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <uxTaskResetEventItemValue+0x2c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80096a0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80096a2:	687b      	ldr	r3, [r7, #4]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	200265cc 	.word	0x200265cc

080096b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80096b8:	4b07      	ldr	r3, [pc, #28]	; (80096d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80096c0:	4b05      	ldr	r3, [pc, #20]	; (80096d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096c6:	3201      	adds	r2, #1
 80096c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80096ca:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80096cc:	681b      	ldr	r3, [r3, #0]
	}
 80096ce:	4618      	mov	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	200265cc 	.word	0x200265cc

080096dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096e6:	4b21      	ldr	r3, [pc, #132]	; (800976c <prvAddCurrentTaskToDelayedList+0x90>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096ec:	4b20      	ldr	r3, [pc, #128]	; (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3304      	adds	r3, #4
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fd fcca 	bl	800708c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fe:	d10a      	bne.n	8009716 <prvAddCurrentTaskToDelayedList+0x3a>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009706:	4b1a      	ldr	r3, [pc, #104]	; (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3304      	adds	r3, #4
 800970c:	4619      	mov	r1, r3
 800970e:	4819      	ldr	r0, [pc, #100]	; (8009774 <prvAddCurrentTaskToDelayedList+0x98>)
 8009710:	f7fd fc5f 	bl	8006fd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009714:	e026      	b.n	8009764 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4413      	add	r3, r2
 800971c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800971e:	4b14      	ldr	r3, [pc, #80]	; (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	429a      	cmp	r2, r3
 800972c:	d209      	bcs.n	8009742 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b0f      	ldr	r3, [pc, #60]	; (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3304      	adds	r3, #4
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f7fd fc6d 	bl	800701a <vListInsert>
}
 8009740:	e010      	b.n	8009764 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009742:	4b0e      	ldr	r3, [pc, #56]	; (800977c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4b0a      	ldr	r3, [pc, #40]	; (8009770 <prvAddCurrentTaskToDelayedList+0x94>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3304      	adds	r3, #4
 800974c:	4619      	mov	r1, r3
 800974e:	4610      	mov	r0, r2
 8009750:	f7fd fc63 	bl	800701a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	429a      	cmp	r2, r3
 800975c:	d202      	bcs.n	8009764 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800975e:	4a08      	ldr	r2, [pc, #32]	; (8009780 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	6013      	str	r3, [r2, #0]
}
 8009764:	bf00      	nop
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20026aa4 	.word	0x20026aa4
 8009770:	200265cc 	.word	0x200265cc
 8009774:	20026a8c 	.word	0x20026a8c
 8009778:	20026a5c 	.word	0x20026a5c
 800977c:	20026a58 	.word	0x20026a58
 8009780:	20026ac0 	.word	0x20026ac0

08009784 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b08a      	sub	sp, #40	; 0x28
 8009788:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800978e:	f000 fba1 	bl	8009ed4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009792:	4b1c      	ldr	r3, [pc, #112]	; (8009804 <xTimerCreateTimerTask+0x80>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d021      	beq.n	80097de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80097a2:	1d3a      	adds	r2, r7, #4
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	f107 030c 	add.w	r3, r7, #12
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7fd f9db 	bl	8006b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097b2:	6879      	ldr	r1, [r7, #4]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	9202      	str	r2, [sp, #8]
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	2302      	movs	r3, #2
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	2300      	movs	r3, #0
 80097c2:	460a      	mov	r2, r1
 80097c4:	4910      	ldr	r1, [pc, #64]	; (8009808 <xTimerCreateTimerTask+0x84>)
 80097c6:	4811      	ldr	r0, [pc, #68]	; (800980c <xTimerCreateTimerTask+0x88>)
 80097c8:	f7fe fe32 	bl	8008430 <xTaskCreateStatic>
 80097cc:	4603      	mov	r3, r0
 80097ce:	4a10      	ldr	r2, [pc, #64]	; (8009810 <xTimerCreateTimerTask+0x8c>)
 80097d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097d2:	4b0f      	ldr	r3, [pc, #60]	; (8009810 <xTimerCreateTimerTask+0x8c>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097da:	2301      	movs	r3, #1
 80097dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	613b      	str	r3, [r7, #16]
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097fa:	697b      	ldr	r3, [r7, #20]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20026afc 	.word	0x20026afc
 8009808:	0800d6d0 	.word	0x0800d6d0
 800980c:	08009a7d 	.word	0x08009a7d
 8009810:	20026b00 	.word	0x20026b00

08009814 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009814:	b580      	push	{r7, lr}
 8009816:	b088      	sub	sp, #32
 8009818:	af02      	add	r7, sp, #8
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009822:	202c      	movs	r0, #44	; 0x2c
 8009824:	f000 fe50 	bl	800a4c8 <pvPortMalloc>
 8009828:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00d      	beq.n	800984c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	68b9      	ldr	r1, [r7, #8]
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f000 f843 	bl	80098d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800984c:	697b      	ldr	r3, [r7, #20]
	}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009856:	b580      	push	{r7, lr}
 8009858:	b08a      	sub	sp, #40	; 0x28
 800985a:	af02      	add	r7, sp, #8
 800985c:	60f8      	str	r0, [r7, #12]
 800985e:	60b9      	str	r1, [r7, #8]
 8009860:	607a      	str	r2, [r7, #4]
 8009862:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009864:	232c      	movs	r3, #44	; 0x2c
 8009866:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b2c      	cmp	r3, #44	; 0x2c
 800986c:	d00a      	beq.n	8009884 <xTimerCreateStatic+0x2e>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	61bb      	str	r3, [r7, #24]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009884:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <xTimerCreateStatic+0x4c>
	__asm volatile
 800988c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009890:	f383 8811 	msr	BASEPRI, r3
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	f3bf 8f4f 	dsb	sy
 800989c:	617b      	str	r3, [r7, #20]
}
 800989e:	bf00      	nop
 80098a0:	e7fe      	b.n	80098a0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80098a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00d      	beq.n	80098c8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	9300      	str	r3, [sp, #0]
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f000 f805 	bl	80098d2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80098c8:	69fb      	ldr	r3, [r7, #28]
	}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3720      	adds	r7, #32
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}

080098d2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80098d2:	b580      	push	{r7, lr}
 80098d4:	b086      	sub	sp, #24
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	60f8      	str	r0, [r7, #12]
 80098da:	60b9      	str	r1, [r7, #8]
 80098dc:	607a      	str	r2, [r7, #4]
 80098de:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	617b      	str	r3, [r7, #20]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01e      	beq.n	8009940 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009902:	f000 fae7 	bl	8009ed4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	6a3a      	ldr	r2, [r7, #32]
 800991c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800991e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009920:	3304      	adds	r3, #4
 8009922:	4618      	mov	r0, r3
 8009924:	f7fd fb48 	bl	8006fb8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d008      	beq.n	8009940 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009934:	f043 0304 	orr.w	r3, r3, #4
 8009938:	b2da      	uxtb	r2, r3
 800993a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009940:	bf00      	nop
 8009942:	3718      	adds	r7, #24
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	; 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009956:	2300      	movs	r3, #0
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	623b      	str	r3, [r7, #32]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009976:	4b1a      	ldr	r3, [pc, #104]	; (80099e0 <xTimerGenericCommand+0x98>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02a      	beq.n	80099d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b05      	cmp	r3, #5
 800998e:	dc18      	bgt.n	80099c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009990:	f7ff fce8 	bl	8009364 <xTaskGetSchedulerState>
 8009994:	4603      	mov	r3, r0
 8009996:	2b02      	cmp	r3, #2
 8009998:	d109      	bne.n	80099ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800999a:	4b11      	ldr	r3, [pc, #68]	; (80099e0 <xTimerGenericCommand+0x98>)
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f107 0110 	add.w	r1, r7, #16
 80099a2:	2300      	movs	r3, #0
 80099a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099a6:	f7fd fdff 	bl	80075a8 <xQueueGenericSend>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24
 80099ac:	e012      	b.n	80099d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80099ae:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <xTimerGenericCommand+0x98>)
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	f107 0110 	add.w	r1, r7, #16
 80099b6:	2300      	movs	r3, #0
 80099b8:	2200      	movs	r2, #0
 80099ba:	f7fd fdf5 	bl	80075a8 <xQueueGenericSend>
 80099be:	6278      	str	r0, [r7, #36]	; 0x24
 80099c0:	e008      	b.n	80099d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <xTimerGenericCommand+0x98>)
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	f107 0110 	add.w	r1, r7, #16
 80099ca:	2300      	movs	r3, #0
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	f7fd ff11 	bl	80077f4 <xQueueGenericSendFromISR>
 80099d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3728      	adds	r7, #40	; 0x28
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20026afc 	.word	0x20026afc

080099e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b088      	sub	sp, #32
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ee:	4b22      	ldr	r3, [pc, #136]	; (8009a78 <prvProcessExpiredTimer+0x94>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	3304      	adds	r3, #4
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fd fb45 	bl	800708c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d022      	beq.n	8009a56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	699a      	ldr	r2, [r3, #24]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	18d1      	adds	r1, r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	6978      	ldr	r0, [r7, #20]
 8009a1e:	f000 f8d1 	bl	8009bc4 <prvInsertTimerInActiveList>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01f      	beq.n	8009a68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	2100      	movs	r1, #0
 8009a32:	6978      	ldr	r0, [r7, #20]
 8009a34:	f7ff ff88 	bl	8009948 <xTimerGenericCommand>
 8009a38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d113      	bne.n	8009a68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a5c:	f023 0301 	bic.w	r3, r3, #1
 8009a60:	b2da      	uxtb	r2, r3
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	6978      	ldr	r0, [r7, #20]
 8009a6e:	4798      	blx	r3
}
 8009a70:	bf00      	nop
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20026af4 	.word	0x20026af4

08009a7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 f857 	bl	8009b3c <prvGetNextExpireTime>
 8009a8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	4619      	mov	r1, r3
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f803 	bl	8009aa0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a9a:	f000 f8d5 	bl	8009c48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a9e:	e7f1      	b.n	8009a84 <prvTimerTask+0x8>

08009aa0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009aaa:	f7fe ff51 	bl	8008950 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aae:	f107 0308 	add.w	r3, r7, #8
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 f866 	bl	8009b84 <prvSampleTimeNow>
 8009ab8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d130      	bne.n	8009b22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10a      	bne.n	8009adc <prvProcessTimerOrBlockTask+0x3c>
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d806      	bhi.n	8009adc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009ace:	f7fe ff4d 	bl	800896c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009ad2:	68f9      	ldr	r1, [r7, #12]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7ff ff85 	bl	80099e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009ada:	e024      	b.n	8009b26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d008      	beq.n	8009af4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ae2:	4b13      	ldr	r3, [pc, #76]	; (8009b30 <prvProcessTimerOrBlockTask+0x90>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <prvProcessTimerOrBlockTask+0x50>
 8009aec:	2301      	movs	r3, #1
 8009aee:	e000      	b.n	8009af2 <prvProcessTimerOrBlockTask+0x52>
 8009af0:	2300      	movs	r3, #0
 8009af2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009af4:	4b0f      	ldr	r3, [pc, #60]	; (8009b34 <prvProcessTimerOrBlockTask+0x94>)
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	4619      	mov	r1, r3
 8009b02:	f7fe fc61 	bl	80083c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b06:	f7fe ff31 	bl	800896c <xTaskResumeAll>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b10:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <prvProcessTimerOrBlockTask+0x98>)
 8009b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b16:	601a      	str	r2, [r3, #0]
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	f3bf 8f6f 	isb	sy
}
 8009b20:	e001      	b.n	8009b26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b22:	f7fe ff23 	bl	800896c <xTaskResumeAll>
}
 8009b26:	bf00      	nop
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20026af8 	.word	0x20026af8
 8009b34:	20026afc 	.word	0x20026afc
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b44:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <prvGetNextExpireTime+0x44>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <prvGetNextExpireTime+0x16>
 8009b4e:	2201      	movs	r2, #1
 8009b50:	e000      	b.n	8009b54 <prvGetNextExpireTime+0x18>
 8009b52:	2200      	movs	r2, #0
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d105      	bne.n	8009b6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <prvGetNextExpireTime+0x44>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60fb      	str	r3, [r7, #12]
 8009b6a:	e001      	b.n	8009b70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b70:	68fb      	ldr	r3, [r7, #12]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	20026af4 	.word	0x20026af4

08009b84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b8c:	f7fe ff90 	bl	8008ab0 <xTaskGetTickCount>
 8009b90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b92:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <prvSampleTimeNow+0x3c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d205      	bcs.n	8009ba8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b9c:	f000 f936 	bl	8009e0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]
 8009ba6:	e002      	b.n	8009bae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009bae:	4a04      	ldr	r2, [pc, #16]	; (8009bc0 <prvSampleTimeNow+0x3c>)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20026b04 	.word	0x20026b04

08009bc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d812      	bhi.n	8009c10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	1ad2      	subs	r2, r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d302      	bcc.n	8009bfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	e01b      	b.n	8009c36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bfe:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <prvInsertTimerInActiveList+0x7c>)
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3304      	adds	r3, #4
 8009c06:	4619      	mov	r1, r3
 8009c08:	4610      	mov	r0, r2
 8009c0a:	f7fd fa06 	bl	800701a <vListInsert>
 8009c0e:	e012      	b.n	8009c36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d206      	bcs.n	8009c26 <prvInsertTimerInActiveList+0x62>
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d302      	bcc.n	8009c26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c20:	2301      	movs	r3, #1
 8009c22:	617b      	str	r3, [r7, #20]
 8009c24:	e007      	b.n	8009c36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c26:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <prvInsertTimerInActiveList+0x80>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4610      	mov	r0, r2
 8009c32:	f7fd f9f2 	bl	800701a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c36:	697b      	ldr	r3, [r7, #20]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20026af8 	.word	0x20026af8
 8009c44:	20026af4 	.word	0x20026af4

08009c48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08e      	sub	sp, #56	; 0x38
 8009c4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c4e:	e0ca      	b.n	8009de6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da18      	bge.n	8009c88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c56:	1d3b      	adds	r3, r7, #4
 8009c58:	3304      	adds	r3, #4
 8009c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10a      	bne.n	8009c78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	61fb      	str	r3, [r7, #28]
}
 8009c74:	bf00      	nop
 8009c76:	e7fe      	b.n	8009c76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c7e:	6850      	ldr	r0, [r2, #4]
 8009c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c82:	6892      	ldr	r2, [r2, #8]
 8009c84:	4611      	mov	r1, r2
 8009c86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f2c0 80ab 	blt.w	8009de6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d004      	beq.n	8009ca6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9e:	3304      	adds	r3, #4
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7fd f9f3 	bl	800708c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ca6:	463b      	mov	r3, r7
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff ff6b 	bl	8009b84 <prvSampleTimeNow>
 8009cae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	f200 8096 	bhi.w	8009de4 <prvProcessReceivedCommands+0x19c>
 8009cb8:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <prvProcessReceivedCommands+0x78>)
 8009cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbe:	bf00      	nop
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009ce9 	.word	0x08009ce9
 8009cc8:	08009ce9 	.word	0x08009ce9
 8009ccc:	08009d5d 	.word	0x08009d5d
 8009cd0:	08009d71 	.word	0x08009d71
 8009cd4:	08009dbb 	.word	0x08009dbb
 8009cd8:	08009ce9 	.word	0x08009ce9
 8009cdc:	08009ce9 	.word	0x08009ce9
 8009ce0:	08009d5d 	.word	0x08009d5d
 8009ce4:	08009d71 	.word	0x08009d71
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cee:	f043 0301 	orr.w	r3, r3, #1
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	18d1      	adds	r1, r2, r3
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d08:	f7ff ff5c 	bl	8009bc4 <prvInsertTimerInActiveList>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d069      	beq.n	8009de6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d05e      	beq.n	8009de6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	441a      	add	r2, r3
 8009d30:	2300      	movs	r3, #0
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	2300      	movs	r3, #0
 8009d36:	2100      	movs	r1, #0
 8009d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d3a:	f7ff fe05 	bl	8009948 <xTimerGenericCommand>
 8009d3e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d14f      	bne.n	8009de6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	61bb      	str	r3, [r7, #24]
}
 8009d58:	bf00      	nop
 8009d5a:	e7fe      	b.n	8009d5a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d62:	f023 0301 	bic.w	r3, r3, #1
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d6e:	e03a      	b.n	8009de6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	699b      	ldr	r3, [r3, #24]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	617b      	str	r3, [r7, #20]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	18d1      	adds	r1, r2, r3
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db4:	f7ff ff06 	bl	8009bc4 <prvInsertTimerInActiveList>
					break;
 8009db8:	e015      	b.n	8009de6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d103      	bne.n	8009dd0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dca:	f000 fc49 	bl	800a660 <vPortFree>
 8009dce:	e00a      	b.n	8009de6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dd6:	f023 0301 	bic.w	r3, r3, #1
 8009dda:	b2da      	uxtb	r2, r3
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009de2:	e000      	b.n	8009de6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009de4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009de6:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <prvProcessReceivedCommands+0x1c0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	1d39      	adds	r1, r7, #4
 8009dec:	2200      	movs	r2, #0
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fd fe50 	bl	8007a94 <xQueueReceive>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f47f af2a 	bne.w	8009c50 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009dfc:	bf00      	nop
 8009dfe:	bf00      	nop
 8009e00:	3730      	adds	r7, #48	; 0x30
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20026afc 	.word	0x20026afc

08009e0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e12:	e048      	b.n	8009ea6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e14:	4b2d      	ldr	r3, [pc, #180]	; (8009ecc <prvSwitchTimerLists+0xc0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e1e:	4b2b      	ldr	r3, [pc, #172]	; (8009ecc <prvSwitchTimerLists+0xc0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7fd f92d 	bl	800708c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d02e      	beq.n	8009ea6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4413      	add	r3, r2
 8009e50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d90e      	bls.n	8009e78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e66:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <prvSwitchTimerLists+0xc0>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4610      	mov	r0, r2
 8009e72:	f7fd f8d2 	bl	800701a <vListInsert>
 8009e76:	e016      	b.n	8009ea6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	2100      	movs	r1, #0
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f7ff fd60 	bl	8009948 <xTimerGenericCommand>
 8009e88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	603b      	str	r3, [r7, #0]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ea6:	4b09      	ldr	r3, [pc, #36]	; (8009ecc <prvSwitchTimerLists+0xc0>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1b1      	bne.n	8009e14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009eb0:	4b06      	ldr	r3, [pc, #24]	; (8009ecc <prvSwitchTimerLists+0xc0>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009eb6:	4b06      	ldr	r3, [pc, #24]	; (8009ed0 <prvSwitchTimerLists+0xc4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a04      	ldr	r2, [pc, #16]	; (8009ecc <prvSwitchTimerLists+0xc0>)
 8009ebc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ebe:	4a04      	ldr	r2, [pc, #16]	; (8009ed0 <prvSwitchTimerLists+0xc4>)
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	6013      	str	r3, [r2, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	3718      	adds	r7, #24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20026af4 	.word	0x20026af4
 8009ed0:	20026af8 	.word	0x20026af8

08009ed4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009eda:	f000 f9d3 	bl	800a284 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ede:	4b15      	ldr	r3, [pc, #84]	; (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d120      	bne.n	8009f28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ee6:	4814      	ldr	r0, [pc, #80]	; (8009f38 <prvCheckForValidListAndQueue+0x64>)
 8009ee8:	f7fd f846 	bl	8006f78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009eec:	4813      	ldr	r0, [pc, #76]	; (8009f3c <prvCheckForValidListAndQueue+0x68>)
 8009eee:	f7fd f843 	bl	8006f78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ef2:	4b13      	ldr	r3, [pc, #76]	; (8009f40 <prvCheckForValidListAndQueue+0x6c>)
 8009ef4:	4a10      	ldr	r2, [pc, #64]	; (8009f38 <prvCheckForValidListAndQueue+0x64>)
 8009ef6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ef8:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <prvCheckForValidListAndQueue+0x70>)
 8009efa:	4a10      	ldr	r2, [pc, #64]	; (8009f3c <prvCheckForValidListAndQueue+0x68>)
 8009efc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009efe:	2300      	movs	r3, #0
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <prvCheckForValidListAndQueue+0x74>)
 8009f04:	4a11      	ldr	r2, [pc, #68]	; (8009f4c <prvCheckForValidListAndQueue+0x78>)
 8009f06:	2110      	movs	r1, #16
 8009f08:	200a      	movs	r0, #10
 8009f0a:	f7fd f951 	bl	80071b0 <xQueueGenericCreateStatic>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4a08      	ldr	r2, [pc, #32]	; (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009f12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f14:	4b07      	ldr	r3, [pc, #28]	; (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d005      	beq.n	8009f28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <prvCheckForValidListAndQueue+0x60>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	490b      	ldr	r1, [pc, #44]	; (8009f50 <prvCheckForValidListAndQueue+0x7c>)
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe f9f4 	bl	8008310 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f28:	f000 f9dc 	bl	800a2e4 <vPortExitCritical>
}
 8009f2c:	bf00      	nop
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	20026afc 	.word	0x20026afc
 8009f38:	20026acc 	.word	0x20026acc
 8009f3c:	20026ae0 	.word	0x20026ae0
 8009f40:	20026af4 	.word	0x20026af4
 8009f44:	20026af8 	.word	0x20026af8
 8009f48:	20026ba8 	.word	0x20026ba8
 8009f4c:	20026b08 	.word	0x20026b08
 8009f50:	0800d6d8 	.word	0x0800d6d8

08009f54 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <xTimerIsTimerActive+0x28>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	60fb      	str	r3, [r7, #12]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8009f7c:	f000 f982 	bl	800a284 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d102      	bne.n	8009f94 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
 8009f92:	e001      	b.n	8009f98 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009f98:	f000 f9a4 	bl	800a2e4 <vPortExitCritical>

	return xReturn;
 8009f9c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3718      	adds	r7, #24
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b086      	sub	sp, #24
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10a      	bne.n	8009fce <pvTimerGetTimerID+0x28>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	60fb      	str	r3, [r7, #12]
}
 8009fca:	bf00      	nop
 8009fcc:	e7fe      	b.n	8009fcc <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009fce:	f000 f959 	bl	800a284 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009fd8:	f000 f984 	bl	800a2e4 <vPortExitCritical>

	return pvReturn;
 8009fdc:	693b      	ldr	r3, [r7, #16]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
	...

08009fe8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08a      	sub	sp, #40	; 0x28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8009ff6:	f06f 0301 	mvn.w	r3, #1
 8009ffa:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a008:	4b06      	ldr	r3, [pc, #24]	; (800a024 <xTimerPendFunctionCallFromISR+0x3c>)
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	f107 0114 	add.w	r1, r7, #20
 800a010:	2300      	movs	r3, #0
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	f7fd fbee 	bl	80077f4 <xQueueGenericSendFromISR>
 800a018:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3728      	adds	r7, #40	; 0x28
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20026afc 	.word	0x20026afc

0800a028 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b04      	subs	r3, #4
 800a038:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3b04      	subs	r3, #4
 800a046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	f023 0201 	bic.w	r2, r3, #1
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3b04      	subs	r3, #4
 800a056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a058:	4a0c      	ldr	r2, [pc, #48]	; (800a08c <pxPortInitialiseStack+0x64>)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	3b14      	subs	r3, #20
 800a062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3b04      	subs	r3, #4
 800a06e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f06f 0202 	mvn.w	r2, #2
 800a076:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3b20      	subs	r3, #32
 800a07c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a07e:	68fb      	ldr	r3, [r7, #12]
}
 800a080:	4618      	mov	r0, r3
 800a082:	3714      	adds	r7, #20
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	0800a091 	.word	0x0800a091

0800a090 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a09a:	4b12      	ldr	r3, [pc, #72]	; (800a0e4 <prvTaskExitError+0x54>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d00a      	beq.n	800a0ba <prvTaskExitError+0x2a>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	60fb      	str	r3, [r7, #12]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <prvTaskExitError+0x28>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	f383 8811 	msr	BASEPRI, r3
 800a0c2:	f3bf 8f6f 	isb	sy
 800a0c6:	f3bf 8f4f 	dsb	sy
 800a0ca:	60bb      	str	r3, [r7, #8]
}
 800a0cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0ce:	bf00      	nop
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0fc      	beq.n	800a0d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0d6:	bf00      	nop
 800a0d8:	bf00      	nop
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr
 800a0e4:	2000001c 	.word	0x2000001c
	...

0800a0f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0f0:	4b07      	ldr	r3, [pc, #28]	; (800a110 <pxCurrentTCBConst2>)
 800a0f2:	6819      	ldr	r1, [r3, #0]
 800a0f4:	6808      	ldr	r0, [r1, #0]
 800a0f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fa:	f380 8809 	msr	PSP, r0
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f380 8811 	msr	BASEPRI, r0
 800a10a:	4770      	bx	lr
 800a10c:	f3af 8000 	nop.w

0800a110 <pxCurrentTCBConst2>:
 800a110:	200265cc 	.word	0x200265cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a114:	bf00      	nop
 800a116:	bf00      	nop

0800a118 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a118:	4808      	ldr	r0, [pc, #32]	; (800a13c <prvPortStartFirstTask+0x24>)
 800a11a:	6800      	ldr	r0, [r0, #0]
 800a11c:	6800      	ldr	r0, [r0, #0]
 800a11e:	f380 8808 	msr	MSP, r0
 800a122:	f04f 0000 	mov.w	r0, #0
 800a126:	f380 8814 	msr	CONTROL, r0
 800a12a:	b662      	cpsie	i
 800a12c:	b661      	cpsie	f
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	df00      	svc	0
 800a138:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a13a:	bf00      	nop
 800a13c:	e000ed08 	.word	0xe000ed08

0800a140 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a146:	4b46      	ldr	r3, [pc, #280]	; (800a260 <xPortStartScheduler+0x120>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a46      	ldr	r2, [pc, #280]	; (800a264 <xPortStartScheduler+0x124>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10a      	bne.n	800a166 <xPortStartScheduler+0x26>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	613b      	str	r3, [r7, #16]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a166:	4b3e      	ldr	r3, [pc, #248]	; (800a260 <xPortStartScheduler+0x120>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a3f      	ldr	r2, [pc, #252]	; (800a268 <xPortStartScheduler+0x128>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d10a      	bne.n	800a186 <xPortStartScheduler+0x46>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	60fb      	str	r3, [r7, #12]
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a186:	4b39      	ldr	r3, [pc, #228]	; (800a26c <xPortStartScheduler+0x12c>)
 800a188:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	22ff      	movs	r2, #255	; 0xff
 800a196:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	4b31      	ldr	r3, [pc, #196]	; (800a270 <xPortStartScheduler+0x130>)
 800a1ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1ae:	4b31      	ldr	r3, [pc, #196]	; (800a274 <xPortStartScheduler+0x134>)
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1b4:	e009      	b.n	800a1ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a1b6:	4b2f      	ldr	r3, [pc, #188]	; (800a274 <xPortStartScheduler+0x134>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	4a2d      	ldr	r2, [pc, #180]	; (800a274 <xPortStartScheduler+0x134>)
 800a1be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1ca:	78fb      	ldrb	r3, [r7, #3]
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1d2:	2b80      	cmp	r3, #128	; 0x80
 800a1d4:	d0ef      	beq.n	800a1b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1d6:	4b27      	ldr	r3, [pc, #156]	; (800a274 <xPortStartScheduler+0x134>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f1c3 0307 	rsb	r3, r3, #7
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d00a      	beq.n	800a1f8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	60bb      	str	r3, [r7, #8]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1f8:	4b1e      	ldr	r3, [pc, #120]	; (800a274 <xPortStartScheduler+0x134>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	021b      	lsls	r3, r3, #8
 800a1fe:	4a1d      	ldr	r2, [pc, #116]	; (800a274 <xPortStartScheduler+0x134>)
 800a200:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a202:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <xPortStartScheduler+0x134>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a20a:	4a1a      	ldr	r2, [pc, #104]	; (800a274 <xPortStartScheduler+0x134>)
 800a20c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	b2da      	uxtb	r2, r3
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a216:	4b18      	ldr	r3, [pc, #96]	; (800a278 <xPortStartScheduler+0x138>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a17      	ldr	r2, [pc, #92]	; (800a278 <xPortStartScheduler+0x138>)
 800a21c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a220:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a222:	4b15      	ldr	r3, [pc, #84]	; (800a278 <xPortStartScheduler+0x138>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a14      	ldr	r2, [pc, #80]	; (800a278 <xPortStartScheduler+0x138>)
 800a228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a22c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a22e:	f000 f8dd 	bl	800a3ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a232:	4b12      	ldr	r3, [pc, #72]	; (800a27c <xPortStartScheduler+0x13c>)
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a238:	f000 f8fc 	bl	800a434 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a23c:	4b10      	ldr	r3, [pc, #64]	; (800a280 <xPortStartScheduler+0x140>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a0f      	ldr	r2, [pc, #60]	; (800a280 <xPortStartScheduler+0x140>)
 800a242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a246:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a248:	f7ff ff66 	bl	800a118 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a24c:	f7fe fd10 	bl	8008c70 <vTaskSwitchContext>
	prvTaskExitError();
 800a250:	f7ff ff1e 	bl	800a090 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	e000ed00 	.word	0xe000ed00
 800a264:	410fc271 	.word	0x410fc271
 800a268:	410fc270 	.word	0x410fc270
 800a26c:	e000e400 	.word	0xe000e400
 800a270:	20026bf8 	.word	0x20026bf8
 800a274:	20026bfc 	.word	0x20026bfc
 800a278:	e000ed20 	.word	0xe000ed20
 800a27c:	2000001c 	.word	0x2000001c
 800a280:	e000ef34 	.word	0xe000ef34

0800a284 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	607b      	str	r3, [r7, #4]
}
 800a29c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a29e:	4b0f      	ldr	r3, [pc, #60]	; (800a2dc <vPortEnterCritical+0x58>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	4a0d      	ldr	r2, [pc, #52]	; (800a2dc <vPortEnterCritical+0x58>)
 800a2a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a2a8:	4b0c      	ldr	r3, [pc, #48]	; (800a2dc <vPortEnterCritical+0x58>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d10f      	bne.n	800a2d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <vPortEnterCritical+0x5c>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	603b      	str	r3, [r7, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	e7fe      	b.n	800a2ce <vPortEnterCritical+0x4a>
	}
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	2000001c 	.word	0x2000001c
 800a2e0:	e000ed04 	.word	0xe000ed04

0800a2e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <vPortExitCritical+0x50>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10a      	bne.n	800a308 <vPortExitCritical+0x24>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	607b      	str	r3, [r7, #4]
}
 800a304:	bf00      	nop
 800a306:	e7fe      	b.n	800a306 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a308:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <vPortExitCritical+0x50>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	4a09      	ldr	r2, [pc, #36]	; (800a334 <vPortExitCritical+0x50>)
 800a310:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a312:	4b08      	ldr	r3, [pc, #32]	; (800a334 <vPortExitCritical+0x50>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d105      	bne.n	800a326 <vPortExitCritical+0x42>
 800a31a:	2300      	movs	r3, #0
 800a31c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	f383 8811 	msr	BASEPRI, r3
}
 800a324:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a326:	bf00      	nop
 800a328:	370c      	adds	r7, #12
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	2000001c 	.word	0x2000001c
	...

0800a340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a340:	f3ef 8009 	mrs	r0, PSP
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	4b15      	ldr	r3, [pc, #84]	; (800a3a0 <pxCurrentTCBConst>)
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	f01e 0f10 	tst.w	lr, #16
 800a350:	bf08      	it	eq
 800a352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35a:	6010      	str	r0, [r2, #0]
 800a35c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a360:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a364:	f380 8811 	msr	BASEPRI, r0
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f7fe fc7e 	bl	8008c70 <vTaskSwitchContext>
 800a374:	f04f 0000 	mov.w	r0, #0
 800a378:	f380 8811 	msr	BASEPRI, r0
 800a37c:	bc09      	pop	{r0, r3}
 800a37e:	6819      	ldr	r1, [r3, #0]
 800a380:	6808      	ldr	r0, [r1, #0]
 800a382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a386:	f01e 0f10 	tst.w	lr, #16
 800a38a:	bf08      	it	eq
 800a38c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a390:	f380 8809 	msr	PSP, r0
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	f3af 8000 	nop.w

0800a3a0 <pxCurrentTCBConst>:
 800a3a0:	200265cc 	.word	0x200265cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop

0800a3a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b2:	f383 8811 	msr	BASEPRI, r3
 800a3b6:	f3bf 8f6f 	isb	sy
 800a3ba:	f3bf 8f4f 	dsb	sy
 800a3be:	607b      	str	r3, [r7, #4]
}
 800a3c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3c2:	f7fe fb97 	bl	8008af4 <xTaskIncrementTick>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3cc:	4b06      	ldr	r3, [pc, #24]	; (800a3e8 <xPortSysTickHandler+0x40>)
 800a3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	f383 8811 	msr	BASEPRI, r3
}
 800a3de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	e000ed04 	.word	0xe000ed04

0800a3ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3f0:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <vPortSetupTimerInterrupt+0x34>)
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3f6:	4b0b      	ldr	r3, [pc, #44]	; (800a424 <vPortSetupTimerInterrupt+0x38>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3fc:	4b0a      	ldr	r3, [pc, #40]	; (800a428 <vPortSetupTimerInterrupt+0x3c>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <vPortSetupTimerInterrupt+0x40>)
 800a402:	fba2 2303 	umull	r2, r3, r2, r3
 800a406:	099b      	lsrs	r3, r3, #6
 800a408:	4a09      	ldr	r2, [pc, #36]	; (800a430 <vPortSetupTimerInterrupt+0x44>)
 800a40a:	3b01      	subs	r3, #1
 800a40c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a40e:	4b04      	ldr	r3, [pc, #16]	; (800a420 <vPortSetupTimerInterrupt+0x34>)
 800a410:	2207      	movs	r2, #7
 800a412:	601a      	str	r2, [r3, #0]
}
 800a414:	bf00      	nop
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	e000e010 	.word	0xe000e010
 800a424:	e000e018 	.word	0xe000e018
 800a428:	20000010 	.word	0x20000010
 800a42c:	10624dd3 	.word	0x10624dd3
 800a430:	e000e014 	.word	0xe000e014

0800a434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a444 <vPortEnableVFP+0x10>
 800a438:	6801      	ldr	r1, [r0, #0]
 800a43a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a43e:	6001      	str	r1, [r0, #0]
 800a440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a442:	bf00      	nop
 800a444:	e000ed88 	.word	0xe000ed88

0800a448 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a44e:	f3ef 8305 	mrs	r3, IPSR
 800a452:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b0f      	cmp	r3, #15
 800a458:	d914      	bls.n	800a484 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a45a:	4a17      	ldr	r2, [pc, #92]	; (800a4b8 <vPortValidateInterruptPriority+0x70>)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a464:	4b15      	ldr	r3, [pc, #84]	; (800a4bc <vPortValidateInterruptPriority+0x74>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	7afa      	ldrb	r2, [r7, #11]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d20a      	bcs.n	800a484 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	607b      	str	r3, [r7, #4]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a484:	4b0e      	ldr	r3, [pc, #56]	; (800a4c0 <vPortValidateInterruptPriority+0x78>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a48c:	4b0d      	ldr	r3, [pc, #52]	; (800a4c4 <vPortValidateInterruptPriority+0x7c>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	429a      	cmp	r2, r3
 800a492:	d90a      	bls.n	800a4aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	603b      	str	r3, [r7, #0]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <vPortValidateInterruptPriority+0x60>
	}
 800a4aa:	bf00      	nop
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	e000e3f0 	.word	0xe000e3f0
 800a4bc:	20026bf8 	.word	0x20026bf8
 800a4c0:	e000ed0c 	.word	0xe000ed0c
 800a4c4:	20026bfc 	.word	0x20026bfc

0800a4c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08a      	sub	sp, #40	; 0x28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4d4:	f7fe fa3c 	bl	8008950 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4d8:	4b5b      	ldr	r3, [pc, #364]	; (800a648 <pvPortMalloc+0x180>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d101      	bne.n	800a4e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4e0:	f000 f920 	bl	800a724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4e4:	4b59      	ldr	r3, [pc, #356]	; (800a64c <pvPortMalloc+0x184>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f040 8093 	bne.w	800a618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d01d      	beq.n	800a534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4f8:	2208      	movs	r2, #8
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f003 0307 	and.w	r3, r3, #7
 800a506:	2b00      	cmp	r3, #0
 800a508:	d014      	beq.n	800a534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f023 0307 	bic.w	r3, r3, #7
 800a510:	3308      	adds	r3, #8
 800a512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00a      	beq.n	800a534 <pvPortMalloc+0x6c>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	617b      	str	r3, [r7, #20]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d06e      	beq.n	800a618 <pvPortMalloc+0x150>
 800a53a:	4b45      	ldr	r3, [pc, #276]	; (800a650 <pvPortMalloc+0x188>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d869      	bhi.n	800a618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a544:	4b43      	ldr	r3, [pc, #268]	; (800a654 <pvPortMalloc+0x18c>)
 800a546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a548:	4b42      	ldr	r3, [pc, #264]	; (800a654 <pvPortMalloc+0x18c>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a54e:	e004      	b.n	800a55a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d903      	bls.n	800a56c <pvPortMalloc+0xa4>
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1f1      	bne.n	800a550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a56c:	4b36      	ldr	r3, [pc, #216]	; (800a648 <pvPortMalloc+0x180>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a572:	429a      	cmp	r2, r3
 800a574:	d050      	beq.n	800a618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a576:	6a3b      	ldr	r3, [r7, #32]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2208      	movs	r2, #8
 800a57c:	4413      	add	r3, r2
 800a57e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	1ad2      	subs	r2, r2, r3
 800a590:	2308      	movs	r3, #8
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	429a      	cmp	r2, r3
 800a596:	d91f      	bls.n	800a5d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4413      	add	r3, r2
 800a59e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	f003 0307 	and.w	r3, r3, #7
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <pvPortMalloc+0xf8>
	__asm volatile
 800a5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ae:	f383 8811 	msr	BASEPRI, r3
 800a5b2:	f3bf 8f6f 	isb	sy
 800a5b6:	f3bf 8f4f 	dsb	sy
 800a5ba:	613b      	str	r3, [r7, #16]
}
 800a5bc:	bf00      	nop
 800a5be:	e7fe      	b.n	800a5be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5d2:	69b8      	ldr	r0, [r7, #24]
 800a5d4:	f000 f908 	bl	800a7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5d8:	4b1d      	ldr	r3, [pc, #116]	; (800a650 <pvPortMalloc+0x188>)
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	4a1b      	ldr	r2, [pc, #108]	; (800a650 <pvPortMalloc+0x188>)
 800a5e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <pvPortMalloc+0x188>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	4b1b      	ldr	r3, [pc, #108]	; (800a658 <pvPortMalloc+0x190>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d203      	bcs.n	800a5fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5f2:	4b17      	ldr	r3, [pc, #92]	; (800a650 <pvPortMalloc+0x188>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a18      	ldr	r2, [pc, #96]	; (800a658 <pvPortMalloc+0x190>)
 800a5f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	4b13      	ldr	r3, [pc, #76]	; (800a64c <pvPortMalloc+0x184>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	431a      	orrs	r2, r3
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a60e:	4b13      	ldr	r3, [pc, #76]	; (800a65c <pvPortMalloc+0x194>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	3301      	adds	r3, #1
 800a614:	4a11      	ldr	r2, [pc, #68]	; (800a65c <pvPortMalloc+0x194>)
 800a616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a618:	f7fe f9a8 	bl	800896c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	f003 0307 	and.w	r3, r3, #7
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <pvPortMalloc+0x174>
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	60fb      	str	r3, [r7, #12]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <pvPortMalloc+0x172>
	return pvReturn;
 800a63c:	69fb      	ldr	r3, [r7, #28]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3728      	adds	r7, #40	; 0x28
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	2002a808 	.word	0x2002a808
 800a64c:	2002a81c 	.word	0x2002a81c
 800a650:	2002a80c 	.word	0x2002a80c
 800a654:	2002a800 	.word	0x2002a800
 800a658:	2002a810 	.word	0x2002a810
 800a65c:	2002a814 	.word	0x2002a814

0800a660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d04d      	beq.n	800a70e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a672:	2308      	movs	r3, #8
 800a674:	425b      	negs	r3, r3
 800a676:	697a      	ldr	r2, [r7, #20]
 800a678:	4413      	add	r3, r2
 800a67a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	4b24      	ldr	r3, [pc, #144]	; (800a718 <vPortFree+0xb8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4013      	ands	r3, r2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <vPortFree+0x44>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	60fb      	str	r3, [r7, #12]
}
 800a6a0:	bf00      	nop
 800a6a2:	e7fe      	b.n	800a6a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <vPortFree+0x62>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	60bb      	str	r3, [r7, #8]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	4b14      	ldr	r3, [pc, #80]	; (800a718 <vPortFree+0xb8>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d01e      	beq.n	800a70e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d11a      	bne.n	800a70e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	4b0e      	ldr	r3, [pc, #56]	; (800a718 <vPortFree+0xb8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	43db      	mvns	r3, r3
 800a6e2:	401a      	ands	r2, r3
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6e8:	f7fe f932 	bl	8008950 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	4b0a      	ldr	r3, [pc, #40]	; (800a71c <vPortFree+0xbc>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	4a09      	ldr	r2, [pc, #36]	; (800a71c <vPortFree+0xbc>)
 800a6f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6fa:	6938      	ldr	r0, [r7, #16]
 800a6fc:	f000 f874 	bl	800a7e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a700:	4b07      	ldr	r3, [pc, #28]	; (800a720 <vPortFree+0xc0>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	3301      	adds	r3, #1
 800a706:	4a06      	ldr	r2, [pc, #24]	; (800a720 <vPortFree+0xc0>)
 800a708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a70a:	f7fe f92f 	bl	800896c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a70e:	bf00      	nop
 800a710:	3718      	adds	r7, #24
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	2002a81c 	.word	0x2002a81c
 800a71c:	2002a80c 	.word	0x2002a80c
 800a720:	2002a818 	.word	0x2002a818

0800a724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a72a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a730:	4b27      	ldr	r3, [pc, #156]	; (800a7d0 <prvHeapInit+0xac>)
 800a732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f003 0307 	and.w	r3, r3, #7
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00c      	beq.n	800a758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3307      	adds	r3, #7
 800a742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f023 0307 	bic.w	r3, r3, #7
 800a74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	4a1f      	ldr	r2, [pc, #124]	; (800a7d0 <prvHeapInit+0xac>)
 800a754:	4413      	add	r3, r2
 800a756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a75c:	4a1d      	ldr	r2, [pc, #116]	; (800a7d4 <prvHeapInit+0xb0>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a762:	4b1c      	ldr	r3, [pc, #112]	; (800a7d4 <prvHeapInit+0xb0>)
 800a764:	2200      	movs	r2, #0
 800a766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	4413      	add	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a770:	2208      	movs	r2, #8
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f023 0307 	bic.w	r3, r3, #7
 800a77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4a15      	ldr	r2, [pc, #84]	; (800a7d8 <prvHeapInit+0xb4>)
 800a784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a786:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <prvHeapInit+0xb4>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2200      	movs	r2, #0
 800a78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a78e:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <prvHeapInit+0xb4>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	1ad2      	subs	r2, r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7a4:	4b0c      	ldr	r3, [pc, #48]	; (800a7d8 <prvHeapInit+0xb4>)
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	4a0a      	ldr	r2, [pc, #40]	; (800a7dc <prvHeapInit+0xb8>)
 800a7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	4a09      	ldr	r2, [pc, #36]	; (800a7e0 <prvHeapInit+0xbc>)
 800a7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7bc:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <prvHeapInit+0xc0>)
 800a7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7c2:	601a      	str	r2, [r3, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	20026c00 	.word	0x20026c00
 800a7d4:	2002a800 	.word	0x2002a800
 800a7d8:	2002a808 	.word	0x2002a808
 800a7dc:	2002a810 	.word	0x2002a810
 800a7e0:	2002a80c 	.word	0x2002a80c
 800a7e4:	2002a81c 	.word	0x2002a81c

0800a7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7f0:	4b28      	ldr	r3, [pc, #160]	; (800a894 <prvInsertBlockIntoFreeList+0xac>)
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	e002      	b.n	800a7fc <prvInsertBlockIntoFreeList+0x14>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	60fb      	str	r3, [r7, #12]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	429a      	cmp	r2, r3
 800a804:	d8f7      	bhi.n	800a7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	4413      	add	r3, r2
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	429a      	cmp	r2, r3
 800a816:	d108      	bne.n	800a82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	441a      	add	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	441a      	add	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d118      	bne.n	800a870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4b15      	ldr	r3, [pc, #84]	; (800a898 <prvInsertBlockIntoFreeList+0xb0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d00d      	beq.n	800a866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	441a      	add	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e008      	b.n	800a878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a866:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <prvInsertBlockIntoFreeList+0xb0>)
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	e003      	b.n	800a878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d002      	beq.n	800a886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a886:	bf00      	nop
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	2002a800 	.word	0x2002a800
 800a898:	2002a808 	.word	0x2002a808

0800a89c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800a8a2:	4b24      	ldr	r3, [pc, #144]	; (800a934 <_DoInit+0x98>)
 800a8a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2203      	movs	r2, #3
 800a8aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2203      	movs	r2, #3
 800a8b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a20      	ldr	r2, [pc, #128]	; (800a938 <_DoInit+0x9c>)
 800a8b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a20      	ldr	r2, [pc, #128]	; (800a93c <_DoInit+0xa0>)
 800a8bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a8c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a17      	ldr	r2, [pc, #92]	; (800a938 <_DoInit+0x9c>)
 800a8dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a17      	ldr	r2, [pc, #92]	; (800a940 <_DoInit+0xa4>)
 800a8e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2210      	movs	r2, #16
 800a8e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3307      	adds	r3, #7
 800a900:	4a10      	ldr	r2, [pc, #64]	; (800a944 <_DoInit+0xa8>)
 800a902:	6810      	ldr	r0, [r2, #0]
 800a904:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a906:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a0e      	ldr	r2, [pc, #56]	; (800a948 <_DoInit+0xac>)
 800a90e:	6810      	ldr	r0, [r2, #0]
 800a910:	6018      	str	r0, [r3, #0]
 800a912:	8891      	ldrh	r1, [r2, #4]
 800a914:	7992      	ldrb	r2, [r2, #6]
 800a916:	8099      	strh	r1, [r3, #4]
 800a918:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a91a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2220      	movs	r2, #32
 800a922:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800a924:	f3bf 8f5f 	dmb	sy
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	2002a820 	.word	0x2002a820
 800a938:	0800d6e0 	.word	0x0800d6e0
 800a93c:	2002a8c8 	.word	0x2002a8c8
 800a940:	2002acc8 	.word	0x2002acc8
 800a944:	0800d6ec 	.word	0x0800d6ec
 800a948:	0800d6f0 	.word	0x0800d6f0

0800a94c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08c      	sub	sp, #48	; 0x30
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800a958:	4b3e      	ldr	r3, [pc, #248]	; (800aa54 <SEGGER_RTT_ReadNoLock+0x108>)
 800a95a:	623b      	str	r3, [r7, #32]
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <SEGGER_RTT_ReadNoLock+0x1e>
 800a966:	f7ff ff99 	bl	800a89c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4613      	mov	r3, r2
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	4413      	add	r3, r2
 800a972:	00db      	lsls	r3, r3, #3
 800a974:	3360      	adds	r3, #96	; 0x60
 800a976:	4a37      	ldr	r2, [pc, #220]	; (800aa54 <SEGGER_RTT_ReadNoLock+0x108>)
 800a978:	4413      	add	r3, r2
 800a97a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800a98c:	2300      	movs	r3, #0
 800a98e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800a990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	429a      	cmp	r2, r3
 800a996:	d92b      	bls.n	800a9f0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	689a      	ldr	r2, [r3, #8]
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	bf28      	it	cs
 800a9aa:	4613      	movcs	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	685a      	ldr	r2, [r3, #4]
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	4413      	add	r3, r2
 800a9b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	6939      	ldr	r1, [r7, #16]
 800a9bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9be:	f001 fe66 	bl	800c68e <memcpy>
    NumBytesRead += NumBytesRem;
 800a9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	4413      	add	r3, r2
 800a9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800a9ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	1ad3      	subs	r3, r2, r3
 800a9d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a9da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	4413      	add	r3, r2
 800a9e0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d101      	bne.n	800a9f0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	1ad3      	subs	r3, r2, r3
 800a9f6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	bf28      	it	cs
 800aa00:	4613      	movcs	r3, r2
 800aa02:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d019      	beq.n	800aa3e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	4413      	add	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	6939      	ldr	r1, [r7, #16]
 800aa18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa1a:	f001 fe38 	bl	800c68e <memcpy>
    NumBytesRead += NumBytesRem;
 800aa1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	4413      	add	r3, r2
 800aa24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800aa26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800aa36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800aa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d002      	beq.n	800aa4a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa48:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800aa4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3730      	adds	r7, #48	; 0x30
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	2002a820 	.word	0x2002a820

0800aa58 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800aa66:	4b3d      	ldr	r3, [pc, #244]	; (800ab5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800aa68:	61bb      	str	r3, [r7, #24]
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d101      	bne.n	800aa78 <SEGGER_RTT_AllocUpBuffer+0x20>
 800aa74:	f7ff ff12 	bl	800a89c <_DoInit>
  SEGGER_RTT_LOCK();
 800aa78:	f3ef 8311 	mrs	r3, BASEPRI
 800aa7c:	f04f 0120 	mov.w	r1, #32
 800aa80:	f381 8811 	msr	BASEPRI, r1
 800aa84:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800aa86:	4b35      	ldr	r3, [pc, #212]	; (800ab5c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800aa88:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800aa8e:	6939      	ldr	r1, [r7, #16]
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	4613      	mov	r3, r2
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	4413      	add	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	440b      	add	r3, r1
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d008      	beq.n	800aab8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	69fa      	ldr	r2, [r7, #28]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	dbeb      	blt.n	800aa8e <SEGGER_RTT_AllocUpBuffer+0x36>
 800aab6:	e000      	b.n	800aaba <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800aab8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	69fa      	ldr	r2, [r7, #28]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	da3f      	bge.n	800ab44 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800aac4:	6939      	ldr	r1, [r7, #16]
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	1c5a      	adds	r2, r3, #1
 800aaca:	4613      	mov	r3, r2
 800aacc:	005b      	lsls	r3, r3, #1
 800aace:	4413      	add	r3, r2
 800aad0:	00db      	lsls	r3, r3, #3
 800aad2:	440b      	add	r3, r1
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800aad8:	6939      	ldr	r1, [r7, #16]
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	4613      	mov	r3, r2
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	4413      	add	r3, r2
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	440b      	add	r3, r1
 800aae8:	3304      	adds	r3, #4
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800aaee:	6939      	ldr	r1, [r7, #16]
 800aaf0:	69fa      	ldr	r2, [r7, #28]
 800aaf2:	4613      	mov	r3, r2
 800aaf4:	005b      	lsls	r3, r3, #1
 800aaf6:	4413      	add	r3, r2
 800aaf8:	00db      	lsls	r3, r3, #3
 800aafa:	440b      	add	r3, r1
 800aafc:	3320      	adds	r3, #32
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800ab02:	6939      	ldr	r1, [r7, #16]
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	4613      	mov	r3, r2
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	4413      	add	r3, r2
 800ab0c:	00db      	lsls	r3, r3, #3
 800ab0e:	440b      	add	r3, r1
 800ab10:	3328      	adds	r3, #40	; 0x28
 800ab12:	2200      	movs	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800ab16:	6939      	ldr	r1, [r7, #16]
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	440b      	add	r3, r1
 800ab24:	3324      	adds	r3, #36	; 0x24
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800ab2a:	6939      	ldr	r1, [r7, #16]
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	4413      	add	r3, r2
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	440b      	add	r3, r1
 800ab38:	332c      	adds	r3, #44	; 0x2c
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ab3e:	f3bf 8f5f 	dmb	sy
 800ab42:	e002      	b.n	800ab4a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800ab44:	f04f 33ff 	mov.w	r3, #4294967295
 800ab48:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800ab50:	69fb      	ldr	r3, [r7, #28]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3720      	adds	r7, #32
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	2002a820 	.word	0x2002a820

0800ab60 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b08a      	sub	sp, #40	; 0x28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
 800ab6c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800ab6e:	4b21      	ldr	r3, [pc, #132]	; (800abf4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800ab70:	623b      	str	r3, [r7, #32]
 800ab72:	6a3b      	ldr	r3, [r7, #32]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800ab7c:	f7ff fe8e 	bl	800a89c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ab80:	4b1c      	ldr	r3, [pc, #112]	; (800abf4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800ab82:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d82c      	bhi.n	800abe4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800ab8a:	f3ef 8311 	mrs	r3, BASEPRI
 800ab8e:	f04f 0120 	mov.w	r1, #32
 800ab92:	f381 8811 	msr	BASEPRI, r1
 800ab96:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	4413      	add	r3, r2
 800aba0:	00db      	lsls	r3, r3, #3
 800aba2:	3360      	adds	r3, #96	; 0x60
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	4413      	add	r3, r2
 800aba8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00e      	beq.n	800abce <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2200      	movs	r2, #0
 800abc6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2200      	movs	r2, #0
 800abcc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abd2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800abd4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800abde:	2300      	movs	r3, #0
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
 800abe2:	e002      	b.n	800abea <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800abe4:	f04f 33ff 	mov.w	r3, #4294967295
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abec:	4618      	mov	r0, r3
 800abee:	3728      	adds	r7, #40	; 0x28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	2002a820 	.word	0x2002a820

0800abf8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800ac04:	2300      	movs	r3, #0
 800ac06:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00f      	beq.n	800ac2e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800ac0e:	e002      	b.n	800ac16 <_EncodeStr+0x1e>
      Len++;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	3301      	adds	r3, #1
 800ac14:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1f6      	bne.n	800ac10 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d901      	bls.n	800ac2e <_EncodeStr+0x36>
      Len = Limit;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2bfe      	cmp	r3, #254	; 0xfe
 800ac32:	d806      	bhi.n	800ac42 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	1c5a      	adds	r2, r3, #1
 800ac38:	60fa      	str	r2, [r7, #12]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	b2d2      	uxtb	r2, r2
 800ac3e:	701a      	strb	r2, [r3, #0]
 800ac40:	e011      	b.n	800ac66 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	60fa      	str	r2, [r7, #12]
 800ac48:	22ff      	movs	r2, #255	; 0xff
 800ac4a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	60fa      	str	r2, [r7, #12]
 800ac52:	693a      	ldr	r2, [r7, #16]
 800ac54:	b2d2      	uxtb	r2, r2
 800ac56:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	0a19      	lsrs	r1, r3, #8
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	60fa      	str	r2, [r7, #12]
 800ac62:	b2ca      	uxtb	r2, r1
 800ac64:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ac6a:	e00a      	b.n	800ac82 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	1c53      	adds	r3, r2, #1
 800ac70:	60bb      	str	r3, [r7, #8]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	1c59      	adds	r1, r3, #1
 800ac76:	60f9      	str	r1, [r7, #12]
 800ac78:	7812      	ldrb	r2, [r2, #0]
 800ac7a:	701a      	strb	r2, [r3, #0]
    n++;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d3f0      	bcc.n	800ac6c <_EncodeStr+0x74>
  }
  return pPayload;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3304      	adds	r3, #4
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800acb6:	4b35      	ldr	r3, [pc, #212]	; (800ad8c <_HandleIncomingPacket+0xdc>)
 800acb8:	7e1b      	ldrb	r3, [r3, #24]
 800acba:	4618      	mov	r0, r3
 800acbc:	1cfb      	adds	r3, r7, #3
 800acbe:	2201      	movs	r2, #1
 800acc0:	4619      	mov	r1, r3
 800acc2:	f7ff fe43 	bl	800a94c <SEGGER_RTT_ReadNoLock>
 800acc6:	4603      	mov	r3, r0
 800acc8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	dd59      	ble.n	800ad84 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	2b80      	cmp	r3, #128	; 0x80
 800acd4:	d032      	beq.n	800ad3c <_HandleIncomingPacket+0x8c>
 800acd6:	2b80      	cmp	r3, #128	; 0x80
 800acd8:	dc42      	bgt.n	800ad60 <_HandleIncomingPacket+0xb0>
 800acda:	2b07      	cmp	r3, #7
 800acdc:	dc16      	bgt.n	800ad0c <_HandleIncomingPacket+0x5c>
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dd3e      	ble.n	800ad60 <_HandleIncomingPacket+0xb0>
 800ace2:	3b01      	subs	r3, #1
 800ace4:	2b06      	cmp	r3, #6
 800ace6:	d83b      	bhi.n	800ad60 <_HandleIncomingPacket+0xb0>
 800ace8:	a201      	add	r2, pc, #4	; (adr r2, 800acf0 <_HandleIncomingPacket+0x40>)
 800acea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acee:	bf00      	nop
 800acf0:	0800ad13 	.word	0x0800ad13
 800acf4:	0800ad19 	.word	0x0800ad19
 800acf8:	0800ad1f 	.word	0x0800ad1f
 800acfc:	0800ad25 	.word	0x0800ad25
 800ad00:	0800ad2b 	.word	0x0800ad2b
 800ad04:	0800ad31 	.word	0x0800ad31
 800ad08:	0800ad37 	.word	0x0800ad37
 800ad0c:	2b7f      	cmp	r3, #127	; 0x7f
 800ad0e:	d034      	beq.n	800ad7a <_HandleIncomingPacket+0xca>
 800ad10:	e026      	b.n	800ad60 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800ad12:	f000 fba5 	bl	800b460 <SEGGER_SYSVIEW_Start>
      break;
 800ad16:	e035      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800ad18:	f000 fc5c 	bl	800b5d4 <SEGGER_SYSVIEW_Stop>
      break;
 800ad1c:	e032      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800ad1e:	f000 fe35 	bl	800b98c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800ad22:	e02f      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800ad24:	f000 fdfa 	bl	800b91c <SEGGER_SYSVIEW_SendTaskList>
      break;
 800ad28:	e02c      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800ad2a:	f000 fc79 	bl	800b620 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800ad2e:	e029      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800ad30:	f000 ffee 	bl	800bd10 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800ad34:	e026      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800ad36:	f000 ffcd 	bl	800bcd4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800ad3a:	e023      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ad3c:	4b13      	ldr	r3, [pc, #76]	; (800ad8c <_HandleIncomingPacket+0xdc>)
 800ad3e:	7e1b      	ldrb	r3, [r3, #24]
 800ad40:	4618      	mov	r0, r3
 800ad42:	1cfb      	adds	r3, r7, #3
 800ad44:	2201      	movs	r2, #1
 800ad46:	4619      	mov	r1, r3
 800ad48:	f7ff fe00 	bl	800a94c <SEGGER_RTT_ReadNoLock>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	dd13      	ble.n	800ad7e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 ff3b 	bl	800bbd4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800ad5e:	e00e      	b.n	800ad7e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	b25b      	sxtb	r3, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	da0c      	bge.n	800ad82 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ad68:	4b08      	ldr	r3, [pc, #32]	; (800ad8c <_HandleIncomingPacket+0xdc>)
 800ad6a:	7e1b      	ldrb	r3, [r3, #24]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	1cfb      	adds	r3, r7, #3
 800ad70:	2201      	movs	r2, #1
 800ad72:	4619      	mov	r1, r3
 800ad74:	f7ff fdea 	bl	800a94c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800ad78:	e003      	b.n	800ad82 <_HandleIncomingPacket+0xd2>
      break;
 800ad7a:	bf00      	nop
 800ad7c:	e002      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
      break;
 800ad7e:	bf00      	nop
 800ad80:	e000      	b.n	800ad84 <_HandleIncomingPacket+0xd4>
      break;
 800ad82:	bf00      	nop
    }
  }
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	2002b0e4 	.word	0x2002b0e4

0800ad90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08c      	sub	sp, #48	; 0x30
 800ad94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800ad96:	2301      	movs	r3, #1
 800ad98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800ad9a:	1d3b      	adds	r3, r7, #4
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ada4:	4b31      	ldr	r3, [pc, #196]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	62bb      	str	r3, [r7, #40]	; 0x28
 800adaa:	e00b      	b.n	800adc4 <_TrySendOverflowPacket+0x34>
 800adac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	1c59      	adds	r1, r3, #1
 800adb4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800adb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800adba:	b2d2      	uxtb	r2, r2
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc0:	09db      	lsrs	r3, r3, #7
 800adc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800adc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adc6:	2b7f      	cmp	r3, #127	; 0x7f
 800adc8:	d8f0      	bhi.n	800adac <_TrySendOverflowPacket+0x1c>
 800adca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800add0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800add2:	b2d2      	uxtb	r2, r2
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800adda:	4b25      	ldr	r3, [pc, #148]	; (800ae70 <_TrySendOverflowPacket+0xe0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ade0:	4b22      	ldr	r3, [pc, #136]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	627b      	str	r3, [r7, #36]	; 0x24
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	623b      	str	r3, [r7, #32]
 800adf2:	e00b      	b.n	800ae0c <_TrySendOverflowPacket+0x7c>
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	b2da      	uxtb	r2, r3
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	1c59      	adds	r1, r3, #1
 800adfc:	6279      	str	r1, [r7, #36]	; 0x24
 800adfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ae02:	b2d2      	uxtb	r2, r2
 800ae04:	701a      	strb	r2, [r3, #0]
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	09db      	lsrs	r3, r3, #7
 800ae0a:	623b      	str	r3, [r7, #32]
 800ae0c:	6a3b      	ldr	r3, [r7, #32]
 800ae0e:	2b7f      	cmp	r3, #127	; 0x7f
 800ae10:	d8f0      	bhi.n	800adf4 <_TrySendOverflowPacket+0x64>
 800ae12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	627a      	str	r2, [r7, #36]	; 0x24
 800ae18:	6a3a      	ldr	r2, [r7, #32]
 800ae1a:	b2d2      	uxtb	r2, r2
 800ae1c:	701a      	strb	r2, [r3, #0]
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800ae22:	4b12      	ldr	r3, [pc, #72]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ae24:	785b      	ldrb	r3, [r3, #1]
 800ae26:	4618      	mov	r0, r3
 800ae28:	1d3b      	adds	r3, r7, #4
 800ae2a:	69fa      	ldr	r2, [r7, #28]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	461a      	mov	r2, r3
 800ae30:	1d3b      	adds	r3, r7, #4
 800ae32:	4619      	mov	r1, r3
 800ae34:	f7f5 f9dc 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d009      	beq.n	800ae56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800ae42:	4a0a      	ldr	r2, [pc, #40]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800ae48:	4b08      	ldr	r3, [pc, #32]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	4b06      	ldr	r3, [pc, #24]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	e004      	b.n	800ae60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	4a03      	ldr	r2, [pc, #12]	; (800ae6c <_TrySendOverflowPacket+0xdc>)
 800ae5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800ae60:	693b      	ldr	r3, [r7, #16]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3730      	adds	r7, #48	; 0x30
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	2002b0e4 	.word	0x2002b0e4
 800ae70:	e0001004 	.word	0xe0001004

0800ae74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b08a      	sub	sp, #40	; 0x28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800ae80:	4b6c      	ldr	r3, [pc, #432]	; (800b034 <_SendPacket+0x1c0>)
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d010      	beq.n	800aeaa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800ae88:	4b6a      	ldr	r3, [pc, #424]	; (800b034 <_SendPacket+0x1c0>)
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 80a3 	beq.w	800afd8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800ae92:	4b68      	ldr	r3, [pc, #416]	; (800b034 <_SendPacket+0x1c0>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d109      	bne.n	800aeae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800ae9a:	f7ff ff79 	bl	800ad90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800ae9e:	4b65      	ldr	r3, [pc, #404]	; (800b034 <_SendPacket+0x1c0>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	f040 809a 	bne.w	800afdc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800aea8:	e001      	b.n	800aeae <_SendPacket+0x3a>
    goto Send;
 800aeaa:	bf00      	nop
 800aeac:	e000      	b.n	800aeb0 <_SendPacket+0x3c>
Send:
 800aeae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b1f      	cmp	r3, #31
 800aeb4:	d809      	bhi.n	800aeca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800aeb6:	4b5f      	ldr	r3, [pc, #380]	; (800b034 <_SendPacket+0x1c0>)
 800aeb8:	69da      	ldr	r2, [r3, #28]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	fa22 f303 	lsr.w	r3, r2, r3
 800aec0:	f003 0301 	and.w	r3, r3, #1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 808b 	bne.w	800afe0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b17      	cmp	r3, #23
 800aece:	d807      	bhi.n	800aee0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e03d      	b.n	800af5c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	2b7f      	cmp	r3, #127	; 0x7f
 800aeec:	d912      	bls.n	800af14 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	09da      	lsrs	r2, r3, #7
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	60fb      	str	r3, [r7, #12]
 800aef8:	b2d2      	uxtb	r2, r2
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	3a01      	subs	r2, #1
 800af06:	60fa      	str	r2, [r7, #12]
 800af08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	e006      	b.n	800af22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	3b01      	subs	r3, #1
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	b2da      	uxtb	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2b7f      	cmp	r3, #127	; 0x7f
 800af26:	d912      	bls.n	800af4e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	09da      	lsrs	r2, r3, #7
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3b01      	subs	r3, #1
 800af30:	60fb      	str	r3, [r7, #12]
 800af32:	b2d2      	uxtb	r2, r2
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	3a01      	subs	r2, #1
 800af40:	60fa      	str	r2, [r7, #12]
 800af42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af46:	b2da      	uxtb	r2, r3
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	701a      	strb	r2, [r3, #0]
 800af4c:	e006      	b.n	800af5c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3b01      	subs	r3, #1
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	b2da      	uxtb	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800af5c:	4b36      	ldr	r3, [pc, #216]	; (800b038 <_SendPacket+0x1c4>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800af62:	4b34      	ldr	r3, [pc, #208]	; (800b034 <_SendPacket+0x1c0>)
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	69ba      	ldr	r2, [r7, #24]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	627b      	str	r3, [r7, #36]	; 0x24
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	623b      	str	r3, [r7, #32]
 800af74:	e00b      	b.n	800af8e <_SendPacket+0x11a>
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	1c59      	adds	r1, r3, #1
 800af7e:	6279      	str	r1, [r7, #36]	; 0x24
 800af80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	701a      	strb	r2, [r3, #0]
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	09db      	lsrs	r3, r3, #7
 800af8c:	623b      	str	r3, [r7, #32]
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	2b7f      	cmp	r3, #127	; 0x7f
 800af92:	d8f0      	bhi.n	800af76 <_SendPacket+0x102>
 800af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	627a      	str	r2, [r7, #36]	; 0x24
 800af9a:	6a3a      	ldr	r2, [r7, #32]
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800afa4:	4b23      	ldr	r3, [pc, #140]	; (800b034 <_SendPacket+0x1c0>)
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	4618      	mov	r0, r3
 800afaa:	68ba      	ldr	r2, [r7, #8]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	f7f5 f91c 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800afb8:	4603      	mov	r3, r0
 800afba:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800afc2:	4a1c      	ldr	r2, [pc, #112]	; (800b034 <_SendPacket+0x1c0>)
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	60d3      	str	r3, [r2, #12]
 800afc8:	e00b      	b.n	800afe2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800afca:	4b1a      	ldr	r3, [pc, #104]	; (800b034 <_SendPacket+0x1c0>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	3301      	adds	r3, #1
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	4b18      	ldr	r3, [pc, #96]	; (800b034 <_SendPacket+0x1c0>)
 800afd4:	701a      	strb	r2, [r3, #0]
 800afd6:	e004      	b.n	800afe2 <_SendPacket+0x16e>
    goto SendDone;
 800afd8:	bf00      	nop
 800afda:	e002      	b.n	800afe2 <_SendPacket+0x16e>
      goto SendDone;
 800afdc:	bf00      	nop
 800afde:	e000      	b.n	800afe2 <_SendPacket+0x16e>
      goto SendDone;
 800afe0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800afe2:	4b14      	ldr	r3, [pc, #80]	; (800b034 <_SendPacket+0x1c0>)
 800afe4:	7e1b      	ldrb	r3, [r3, #24]
 800afe6:	4619      	mov	r1, r3
 800afe8:	4a14      	ldr	r2, [pc, #80]	; (800b03c <_SendPacket+0x1c8>)
 800afea:	460b      	mov	r3, r1
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	440b      	add	r3, r1
 800aff0:	00db      	lsls	r3, r3, #3
 800aff2:	4413      	add	r3, r2
 800aff4:	336c      	adds	r3, #108	; 0x6c
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <_SendPacket+0x1c0>)
 800affa:	7e1b      	ldrb	r3, [r3, #24]
 800affc:	4618      	mov	r0, r3
 800affe:	490f      	ldr	r1, [pc, #60]	; (800b03c <_SendPacket+0x1c8>)
 800b000:	4603      	mov	r3, r0
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	4403      	add	r3, r0
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	440b      	add	r3, r1
 800b00a:	3370      	adds	r3, #112	; 0x70
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d00b      	beq.n	800b02a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <_SendPacket+0x1c0>)
 800b014:	789b      	ldrb	r3, [r3, #2]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d107      	bne.n	800b02a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b01a:	4b06      	ldr	r3, [pc, #24]	; (800b034 <_SendPacket+0x1c0>)
 800b01c:	2201      	movs	r2, #1
 800b01e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b020:	f7ff fe46 	bl	800acb0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b024:	4b03      	ldr	r3, [pc, #12]	; (800b034 <_SendPacket+0x1c0>)
 800b026:	2200      	movs	r2, #0
 800b028:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b02a:	bf00      	nop
 800b02c:	3728      	adds	r7, #40	; 0x28
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	2002b0e4 	.word	0x2002b0e4
 800b038:	e0001004 	.word	0xe0001004
 800b03c:	2002a820 	.word	0x2002a820

0800b040 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b040:	b580      	push	{r7, lr}
 800b042:	b086      	sub	sp, #24
 800b044:	af02      	add	r7, sp, #8
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b04e:	2300      	movs	r3, #0
 800b050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b054:	4917      	ldr	r1, [pc, #92]	; (800b0b4 <SEGGER_SYSVIEW_Init+0x74>)
 800b056:	4818      	ldr	r0, [pc, #96]	; (800b0b8 <SEGGER_SYSVIEW_Init+0x78>)
 800b058:	f7ff fcfe 	bl	800aa58 <SEGGER_RTT_AllocUpBuffer>
 800b05c:	4603      	mov	r3, r0
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	4b16      	ldr	r3, [pc, #88]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b062:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800b064:	4b15      	ldr	r3, [pc, #84]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b066:	785a      	ldrb	r2, [r3, #1]
 800b068:	4b14      	ldr	r3, [pc, #80]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b06a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b06c:	4b13      	ldr	r3, [pc, #76]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b06e:	7e1b      	ldrb	r3, [r3, #24]
 800b070:	4618      	mov	r0, r3
 800b072:	2300      	movs	r3, #0
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	2308      	movs	r3, #8
 800b078:	4a11      	ldr	r2, [pc, #68]	; (800b0c0 <SEGGER_SYSVIEW_Init+0x80>)
 800b07a:	490f      	ldr	r1, [pc, #60]	; (800b0b8 <SEGGER_SYSVIEW_Init+0x78>)
 800b07c:	f7ff fd70 	bl	800ab60 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b080:	4b0e      	ldr	r3, [pc, #56]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b082:	2200      	movs	r2, #0
 800b084:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b086:	4b0f      	ldr	r3, [pc, #60]	; (800b0c4 <SEGGER_SYSVIEW_Init+0x84>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a0c      	ldr	r2, [pc, #48]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b08c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b08e:	4a0b      	ldr	r2, [pc, #44]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b094:	4a09      	ldr	r2, [pc, #36]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b09a:	4a08      	ldr	r2, [pc, #32]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b0a0:	4a06      	ldr	r2, [pc, #24]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b0a6:	4b05      	ldr	r3, [pc, #20]	; (800b0bc <SEGGER_SYSVIEW_Init+0x7c>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b0ac:	bf00      	nop
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	2002acdc 	.word	0x2002acdc
 800b0b8:	0800d6f8 	.word	0x0800d6f8
 800b0bc:	2002b0e4 	.word	0x2002b0e4
 800b0c0:	2002b0dc 	.word	0x2002b0dc
 800b0c4:	e0001004 	.word	0xe0001004

0800b0c8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800b0d0:	4a04      	ldr	r2, [pc, #16]	; (800b0e4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6113      	str	r3, [r2, #16]
}
 800b0d6:	bf00      	nop
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	2002b0e4 	.word	0x2002b0e4

0800b0e8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b0f0:	f3ef 8311 	mrs	r3, BASEPRI
 800b0f4:	f04f 0120 	mov.w	r1, #32
 800b0f8:	f381 8811 	msr	BASEPRI, r1
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	4808      	ldr	r0, [pc, #32]	; (800b120 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b100:	f7ff fdca 	bl	800ac98 <_PreparePacket>
 800b104:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	68b9      	ldr	r1, [r7, #8]
 800b10a:	68b8      	ldr	r0, [r7, #8]
 800b10c:	f7ff feb2 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f383 8811 	msr	BASEPRI, r3
}
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	2002b114 	.word	0x2002b114

0800b124 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b124:	b580      	push	{r7, lr}
 800b126:	b088      	sub	sp, #32
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b12e:	f3ef 8311 	mrs	r3, BASEPRI
 800b132:	f04f 0120 	mov.w	r1, #32
 800b136:	f381 8811 	msr	BASEPRI, r1
 800b13a:	617b      	str	r3, [r7, #20]
 800b13c:	4816      	ldr	r0, [pc, #88]	; (800b198 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b13e:	f7ff fdab 	bl	800ac98 <_PreparePacket>
 800b142:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	61fb      	str	r3, [r7, #28]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	61bb      	str	r3, [r7, #24]
 800b150:	e00b      	b.n	800b16a <SEGGER_SYSVIEW_RecordU32+0x46>
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	b2da      	uxtb	r2, r3
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	1c59      	adds	r1, r3, #1
 800b15a:	61f9      	str	r1, [r7, #28]
 800b15c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b160:	b2d2      	uxtb	r2, r2
 800b162:	701a      	strb	r2, [r3, #0]
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	09db      	lsrs	r3, r3, #7
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	2b7f      	cmp	r3, #127	; 0x7f
 800b16e:	d8f0      	bhi.n	800b152 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	61fa      	str	r2, [r7, #28]
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	b2d2      	uxtb	r2, r2
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	68f9      	ldr	r1, [r7, #12]
 800b184:	6938      	ldr	r0, [r7, #16]
 800b186:	f7ff fe75 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f383 8811 	msr	BASEPRI, r3
}
 800b190:	bf00      	nop
 800b192:	3720      	adds	r7, #32
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	2002b114 	.word	0x2002b114

0800b19c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08c      	sub	sp, #48	; 0x30
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b1a8:	f3ef 8311 	mrs	r3, BASEPRI
 800b1ac:	f04f 0120 	mov.w	r1, #32
 800b1b0:	f381 8811 	msr	BASEPRI, r1
 800b1b4:	61fb      	str	r3, [r7, #28]
 800b1b6:	4825      	ldr	r0, [pc, #148]	; (800b24c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b1b8:	f7ff fd6e 	bl	800ac98 <_PreparePacket>
 800b1bc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1ca:	e00b      	b.n	800b1e4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d2:	1c59      	adds	r1, r3, #1
 800b1d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b1d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b1da:	b2d2      	uxtb	r2, r2
 800b1dc:	701a      	strb	r2, [r3, #0]
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	09db      	lsrs	r3, r3, #7
 800b1e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	2b7f      	cmp	r3, #127	; 0x7f
 800b1e8:	d8f0      	bhi.n	800b1cc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	623b      	str	r3, [r7, #32]
 800b202:	e00b      	b.n	800b21c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	b2da      	uxtb	r2, r3
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	1c59      	adds	r1, r3, #1
 800b20c:	6279      	str	r1, [r7, #36]	; 0x24
 800b20e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b212:	b2d2      	uxtb	r2, r2
 800b214:	701a      	strb	r2, [r3, #0]
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	09db      	lsrs	r3, r3, #7
 800b21a:	623b      	str	r3, [r7, #32]
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	2b7f      	cmp	r3, #127	; 0x7f
 800b220:	d8f0      	bhi.n	800b204 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	627a      	str	r2, [r7, #36]	; 0x24
 800b228:	6a3a      	ldr	r2, [r7, #32]
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	6979      	ldr	r1, [r7, #20]
 800b236:	69b8      	ldr	r0, [r7, #24]
 800b238:	f7ff fe1c 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	f383 8811 	msr	BASEPRI, r3
}
 800b242:	bf00      	nop
 800b244:	3730      	adds	r7, #48	; 0x30
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	2002b114 	.word	0x2002b114

0800b250 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800b250:	b580      	push	{r7, lr}
 800b252:	b08e      	sub	sp, #56	; 0x38
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800b25e:	f3ef 8311 	mrs	r3, BASEPRI
 800b262:	f04f 0120 	mov.w	r1, #32
 800b266:	f381 8811 	msr	BASEPRI, r1
 800b26a:	61fb      	str	r3, [r7, #28]
 800b26c:	4832      	ldr	r0, [pc, #200]	; (800b338 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800b26e:	f7ff fd13 	bl	800ac98 <_PreparePacket>
 800b272:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	637b      	str	r3, [r7, #52]	; 0x34
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	633b      	str	r3, [r7, #48]	; 0x30
 800b280:	e00b      	b.n	800b29a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800b282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b284:	b2da      	uxtb	r2, r3
 800b286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b288:	1c59      	adds	r1, r3, #1
 800b28a:	6379      	str	r1, [r7, #52]	; 0x34
 800b28c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b290:	b2d2      	uxtb	r2, r2
 800b292:	701a      	strb	r2, [r3, #0]
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	09db      	lsrs	r3, r3, #7
 800b298:	633b      	str	r3, [r7, #48]	; 0x30
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	2b7f      	cmp	r3, #127	; 0x7f
 800b29e:	d8f0      	bhi.n	800b282 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800b2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a2:	1c5a      	adds	r2, r3, #1
 800b2a4:	637a      	str	r2, [r7, #52]	; 0x34
 800b2a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a8:	b2d2      	uxtb	r2, r2
 800b2aa:	701a      	strb	r2, [r3, #0]
 800b2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2b8:	e00b      	b.n	800b2d2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c0:	1c59      	adds	r1, r3, #1
 800b2c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b2c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b2c8:	b2d2      	uxtb	r2, r2
 800b2ca:	701a      	strb	r2, [r3, #0]
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ce:	09db      	lsrs	r3, r3, #7
 800b2d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	2b7f      	cmp	r3, #127	; 0x7f
 800b2d6:	d8f0      	bhi.n	800b2ba <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800b2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b2de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2e0:	b2d2      	uxtb	r2, r2
 800b2e2:	701a      	strb	r2, [r3, #0]
 800b2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	623b      	str	r3, [r7, #32]
 800b2f0:	e00b      	b.n	800b30a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800b2f2:	6a3b      	ldr	r3, [r7, #32]
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	1c59      	adds	r1, r3, #1
 800b2fa:	6279      	str	r1, [r7, #36]	; 0x24
 800b2fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	09db      	lsrs	r3, r3, #7
 800b308:	623b      	str	r3, [r7, #32]
 800b30a:	6a3b      	ldr	r3, [r7, #32]
 800b30c:	2b7f      	cmp	r3, #127	; 0x7f
 800b30e:	d8f0      	bhi.n	800b2f2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	627a      	str	r2, [r7, #36]	; 0x24
 800b316:	6a3a      	ldr	r2, [r7, #32]
 800b318:	b2d2      	uxtb	r2, r2
 800b31a:	701a      	strb	r2, [r3, #0]
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	6979      	ldr	r1, [r7, #20]
 800b324:	69b8      	ldr	r0, [r7, #24]
 800b326:	f7ff fda5 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	f383 8811 	msr	BASEPRI, r3
}
 800b330:	bf00      	nop
 800b332:	3738      	adds	r7, #56	; 0x38
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	2002b114 	.word	0x2002b114

0800b33c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b090      	sub	sp, #64	; 0x40
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b34a:	f3ef 8311 	mrs	r3, BASEPRI
 800b34e:	f04f 0120 	mov.w	r1, #32
 800b352:	f381 8811 	msr	BASEPRI, r1
 800b356:	61fb      	str	r3, [r7, #28]
 800b358:	4840      	ldr	r0, [pc, #256]	; (800b45c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800b35a:	f7ff fc9d 	bl	800ac98 <_PreparePacket>
 800b35e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b36c:	e00b      	b.n	800b386 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800b36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b370:	b2da      	uxtb	r2, r3
 800b372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b374:	1c59      	adds	r1, r3, #1
 800b376:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b378:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b37c:	b2d2      	uxtb	r2, r2
 800b37e:	701a      	strb	r2, [r3, #0]
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	09db      	lsrs	r3, r3, #7
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	2b7f      	cmp	r3, #127	; 0x7f
 800b38a:	d8f0      	bhi.n	800b36e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800b38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b38e:	1c5a      	adds	r2, r3, #1
 800b390:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b394:	b2d2      	uxtb	r2, r2
 800b396:	701a      	strb	r2, [r3, #0]
 800b398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	637b      	str	r3, [r7, #52]	; 0x34
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b3a4:	e00b      	b.n	800b3be <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	b2da      	uxtb	r2, r3
 800b3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ac:	1c59      	adds	r1, r3, #1
 800b3ae:	6379      	str	r1, [r7, #52]	; 0x34
 800b3b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3b4:	b2d2      	uxtb	r2, r2
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	09db      	lsrs	r3, r3, #7
 800b3bc:	633b      	str	r3, [r7, #48]	; 0x30
 800b3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c0:	2b7f      	cmp	r3, #127	; 0x7f
 800b3c2:	d8f0      	bhi.n	800b3a6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c6:	1c5a      	adds	r2, r3, #1
 800b3c8:	637a      	str	r2, [r7, #52]	; 0x34
 800b3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	701a      	strb	r2, [r3, #0]
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3dc:	e00b      	b.n	800b3f6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	1c59      	adds	r1, r3, #1
 800b3e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b3e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3ec:	b2d2      	uxtb	r2, r2
 800b3ee:	701a      	strb	r2, [r3, #0]
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	09db      	lsrs	r3, r3, #7
 800b3f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	2b7f      	cmp	r3, #127	; 0x7f
 800b3fa:	d8f0      	bhi.n	800b3de <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800b3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b404:	b2d2      	uxtb	r2, r2
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	627b      	str	r3, [r7, #36]	; 0x24
 800b410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b412:	623b      	str	r3, [r7, #32]
 800b414:	e00b      	b.n	800b42e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	1c59      	adds	r1, r3, #1
 800b41e:	6279      	str	r1, [r7, #36]	; 0x24
 800b420:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	09db      	lsrs	r3, r3, #7
 800b42c:	623b      	str	r3, [r7, #32]
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	2b7f      	cmp	r3, #127	; 0x7f
 800b432:	d8f0      	bhi.n	800b416 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	627a      	str	r2, [r7, #36]	; 0x24
 800b43a:	6a3a      	ldr	r2, [r7, #32]
 800b43c:	b2d2      	uxtb	r2, r2
 800b43e:	701a      	strb	r2, [r3, #0]
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	6979      	ldr	r1, [r7, #20]
 800b448:	69b8      	ldr	r0, [r7, #24]
 800b44a:	f7ff fd13 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	f383 8811 	msr	BASEPRI, r3
}
 800b454:	bf00      	nop
 800b456:	3740      	adds	r7, #64	; 0x40
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	2002b114 	.word	0x2002b114

0800b460 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b460:	b580      	push	{r7, lr}
 800b462:	b08c      	sub	sp, #48	; 0x30
 800b464:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b466:	4b58      	ldr	r3, [pc, #352]	; (800b5c8 <SEGGER_SYSVIEW_Start+0x168>)
 800b468:	2201      	movs	r2, #1
 800b46a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800b46c:	f3ef 8311 	mrs	r3, BASEPRI
 800b470:	f04f 0120 	mov.w	r1, #32
 800b474:	f381 8811 	msr	BASEPRI, r1
 800b478:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800b47a:	4b53      	ldr	r3, [pc, #332]	; (800b5c8 <SEGGER_SYSVIEW_Start+0x168>)
 800b47c:	785b      	ldrb	r3, [r3, #1]
 800b47e:	220a      	movs	r2, #10
 800b480:	4952      	ldr	r1, [pc, #328]	; (800b5cc <SEGGER_SYSVIEW_Start+0x16c>)
 800b482:	4618      	mov	r0, r3
 800b484:	f7f4 feb4 	bl	80001f0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800b48e:	200a      	movs	r0, #10
 800b490:	f7ff fe2a 	bl	800b0e8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b494:	f3ef 8311 	mrs	r3, BASEPRI
 800b498:	f04f 0120 	mov.w	r1, #32
 800b49c:	f381 8811 	msr	BASEPRI, r1
 800b4a0:	60bb      	str	r3, [r7, #8]
 800b4a2:	484b      	ldr	r0, [pc, #300]	; (800b5d0 <SEGGER_SYSVIEW_Start+0x170>)
 800b4a4:	f7ff fbf8 	bl	800ac98 <_PreparePacket>
 800b4a8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4b2:	4b45      	ldr	r3, [pc, #276]	; (800b5c8 <SEGGER_SYSVIEW_Start+0x168>)
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4b8:	e00b      	b.n	800b4d2 <SEGGER_SYSVIEW_Start+0x72>
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	b2da      	uxtb	r2, r3
 800b4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c0:	1c59      	adds	r1, r3, #1
 800b4c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b4c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b4c8:	b2d2      	uxtb	r2, r2
 800b4ca:	701a      	strb	r2, [r3, #0]
 800b4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ce:	09db      	lsrs	r3, r3, #7
 800b4d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d4:	2b7f      	cmp	r3, #127	; 0x7f
 800b4d6:	d8f0      	bhi.n	800b4ba <SEGGER_SYSVIEW_Start+0x5a>
 800b4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4e0:	b2d2      	uxtb	r2, r2
 800b4e2:	701a      	strb	r2, [r3, #0]
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ec:	4b36      	ldr	r3, [pc, #216]	; (800b5c8 <SEGGER_SYSVIEW_Start+0x168>)
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	623b      	str	r3, [r7, #32]
 800b4f2:	e00b      	b.n	800b50c <SEGGER_SYSVIEW_Start+0xac>
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	1c59      	adds	r1, r3, #1
 800b4fc:	6279      	str	r1, [r7, #36]	; 0x24
 800b4fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	6a3b      	ldr	r3, [r7, #32]
 800b508:	09db      	lsrs	r3, r3, #7
 800b50a:	623b      	str	r3, [r7, #32]
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	2b7f      	cmp	r3, #127	; 0x7f
 800b510:	d8f0      	bhi.n	800b4f4 <SEGGER_SYSVIEW_Start+0x94>
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	627a      	str	r2, [r7, #36]	; 0x24
 800b518:	6a3a      	ldr	r2, [r7, #32]
 800b51a:	b2d2      	uxtb	r2, r2
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	61fb      	str	r3, [r7, #28]
 800b526:	4b28      	ldr	r3, [pc, #160]	; (800b5c8 <SEGGER_SYSVIEW_Start+0x168>)
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	61bb      	str	r3, [r7, #24]
 800b52c:	e00b      	b.n	800b546 <SEGGER_SYSVIEW_Start+0xe6>
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	b2da      	uxtb	r2, r3
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	1c59      	adds	r1, r3, #1
 800b536:	61f9      	str	r1, [r7, #28]
 800b538:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b53c:	b2d2      	uxtb	r2, r2
 800b53e:	701a      	strb	r2, [r3, #0]
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	09db      	lsrs	r3, r3, #7
 800b544:	61bb      	str	r3, [r7, #24]
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	2b7f      	cmp	r3, #127	; 0x7f
 800b54a:	d8f0      	bhi.n	800b52e <SEGGER_SYSVIEW_Start+0xce>
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	61fa      	str	r2, [r7, #28]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	b2d2      	uxtb	r2, r2
 800b556:	701a      	strb	r2, [r3, #0]
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	617b      	str	r3, [r7, #20]
 800b560:	2300      	movs	r3, #0
 800b562:	613b      	str	r3, [r7, #16]
 800b564:	e00b      	b.n	800b57e <SEGGER_SYSVIEW_Start+0x11e>
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	1c59      	adds	r1, r3, #1
 800b56e:	6179      	str	r1, [r7, #20]
 800b570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b574:	b2d2      	uxtb	r2, r2
 800b576:	701a      	strb	r2, [r3, #0]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	09db      	lsrs	r3, r3, #7
 800b57c:	613b      	str	r3, [r7, #16]
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	2b7f      	cmp	r3, #127	; 0x7f
 800b582:	d8f0      	bhi.n	800b566 <SEGGER_SYSVIEW_Start+0x106>
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	617a      	str	r2, [r7, #20]
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	b2d2      	uxtb	r2, r2
 800b58e:	701a      	strb	r2, [r3, #0]
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b594:	2218      	movs	r2, #24
 800b596:	6839      	ldr	r1, [r7, #0]
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7ff fc6b 	bl	800ae74 <_SendPacket>
      RECORD_END();
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b5a4:	4b08      	ldr	r3, [pc, #32]	; (800b5c8 <SEGGER_SYSVIEW_Start+0x168>)
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b5ac:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <SEGGER_SYSVIEW_Start+0x168>)
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b5b2:	f000 f9eb 	bl	800b98c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b5b6:	f000 f9b1 	bl	800b91c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b5ba:	f000 fba9 	bl	800bd10 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b5be:	bf00      	nop
 800b5c0:	3730      	adds	r7, #48	; 0x30
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	2002b0e4 	.word	0x2002b0e4
 800b5cc:	0800ebf0 	.word	0x0800ebf0
 800b5d0:	2002b114 	.word	0x2002b114

0800b5d4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b5da:	f3ef 8311 	mrs	r3, BASEPRI
 800b5de:	f04f 0120 	mov.w	r1, #32
 800b5e2:	f381 8811 	msr	BASEPRI, r1
 800b5e6:	607b      	str	r3, [r7, #4]
 800b5e8:	480b      	ldr	r0, [pc, #44]	; (800b618 <SEGGER_SYSVIEW_Stop+0x44>)
 800b5ea:	f7ff fb55 	bl	800ac98 <_PreparePacket>
 800b5ee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <SEGGER_SYSVIEW_Stop+0x48>)
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d007      	beq.n	800b608 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b5f8:	220b      	movs	r2, #11
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6838      	ldr	r0, [r7, #0]
 800b5fe:	f7ff fc39 	bl	800ae74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b602:	4b06      	ldr	r3, [pc, #24]	; (800b61c <SEGGER_SYSVIEW_Stop+0x48>)
 800b604:	2200      	movs	r2, #0
 800b606:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f383 8811 	msr	BASEPRI, r3
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	2002b114 	.word	0x2002b114
 800b61c:	2002b0e4 	.word	0x2002b0e4

0800b620 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b620:	b580      	push	{r7, lr}
 800b622:	b08c      	sub	sp, #48	; 0x30
 800b624:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b626:	f3ef 8311 	mrs	r3, BASEPRI
 800b62a:	f04f 0120 	mov.w	r1, #32
 800b62e:	f381 8811 	msr	BASEPRI, r1
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	4845      	ldr	r0, [pc, #276]	; (800b74c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b636:	f7ff fb2f 	bl	800ac98 <_PreparePacket>
 800b63a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b644:	4b42      	ldr	r3, [pc, #264]	; (800b750 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	62bb      	str	r3, [r7, #40]	; 0x28
 800b64a:	e00b      	b.n	800b664 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64e:	b2da      	uxtb	r2, r3
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	1c59      	adds	r1, r3, #1
 800b654:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b656:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b65a:	b2d2      	uxtb	r2, r2
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	09db      	lsrs	r3, r3, #7
 800b662:	62bb      	str	r3, [r7, #40]	; 0x28
 800b664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b666:	2b7f      	cmp	r3, #127	; 0x7f
 800b668:	d8f0      	bhi.n	800b64c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	627b      	str	r3, [r7, #36]	; 0x24
 800b67e:	4b34      	ldr	r3, [pc, #208]	; (800b750 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	623b      	str	r3, [r7, #32]
 800b684:	e00b      	b.n	800b69e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	1c59      	adds	r1, r3, #1
 800b68e:	6279      	str	r1, [r7, #36]	; 0x24
 800b690:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b694:	b2d2      	uxtb	r2, r2
 800b696:	701a      	strb	r2, [r3, #0]
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	09db      	lsrs	r3, r3, #7
 800b69c:	623b      	str	r3, [r7, #32]
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	2b7f      	cmp	r3, #127	; 0x7f
 800b6a2:	d8f0      	bhi.n	800b686 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	627a      	str	r2, [r7, #36]	; 0x24
 800b6aa:	6a3a      	ldr	r2, [r7, #32]
 800b6ac:	b2d2      	uxtb	r2, r2
 800b6ae:	701a      	strb	r2, [r3, #0]
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	61fb      	str	r3, [r7, #28]
 800b6b8:	4b25      	ldr	r3, [pc, #148]	; (800b750 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	61bb      	str	r3, [r7, #24]
 800b6be:	e00b      	b.n	800b6d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	1c59      	adds	r1, r3, #1
 800b6c8:	61f9      	str	r1, [r7, #28]
 800b6ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b6ce:	b2d2      	uxtb	r2, r2
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	09db      	lsrs	r3, r3, #7
 800b6d6:	61bb      	str	r3, [r7, #24]
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	2b7f      	cmp	r3, #127	; 0x7f
 800b6dc:	d8f0      	bhi.n	800b6c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	61fa      	str	r2, [r7, #28]
 800b6e4:	69ba      	ldr	r2, [r7, #24]
 800b6e6:	b2d2      	uxtb	r2, r2
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	617b      	str	r3, [r7, #20]
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	613b      	str	r3, [r7, #16]
 800b6f6:	e00b      	b.n	800b710 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	1c59      	adds	r1, r3, #1
 800b700:	6179      	str	r1, [r7, #20]
 800b702:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b706:	b2d2      	uxtb	r2, r2
 800b708:	701a      	strb	r2, [r3, #0]
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	09db      	lsrs	r3, r3, #7
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b7f      	cmp	r3, #127	; 0x7f
 800b714:	d8f0      	bhi.n	800b6f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	617a      	str	r2, [r7, #20]
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b726:	2218      	movs	r2, #24
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	68b8      	ldr	r0, [r7, #8]
 800b72c:	f7ff fba2 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d002      	beq.n	800b744 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b73e:	4b04      	ldr	r3, [pc, #16]	; (800b750 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b742:	4798      	blx	r3
  }
}
 800b744:	bf00      	nop
 800b746:	3730      	adds	r7, #48	; 0x30
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	2002b114 	.word	0x2002b114
 800b750:	2002b0e4 	.word	0x2002b0e4

0800b754 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b754:	b580      	push	{r7, lr}
 800b756:	b092      	sub	sp, #72	; 0x48
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b75c:	f3ef 8311 	mrs	r3, BASEPRI
 800b760:	f04f 0120 	mov.w	r1, #32
 800b764:	f381 8811 	msr	BASEPRI, r1
 800b768:	617b      	str	r3, [r7, #20]
 800b76a:	486a      	ldr	r0, [pc, #424]	; (800b914 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b76c:	f7ff fa94 	bl	800ac98 <_PreparePacket>
 800b770:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	647b      	str	r3, [r7, #68]	; 0x44
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b66      	ldr	r3, [pc, #408]	; (800b918 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b780:	691b      	ldr	r3, [r3, #16]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	643b      	str	r3, [r7, #64]	; 0x40
 800b786:	e00b      	b.n	800b7a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b78a:	b2da      	uxtb	r2, r3
 800b78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b78e:	1c59      	adds	r1, r3, #1
 800b790:	6479      	str	r1, [r7, #68]	; 0x44
 800b792:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b796:	b2d2      	uxtb	r2, r2
 800b798:	701a      	strb	r2, [r3, #0]
 800b79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b79c:	09db      	lsrs	r3, r3, #7
 800b79e:	643b      	str	r3, [r7, #64]	; 0x40
 800b7a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7a2:	2b7f      	cmp	r3, #127	; 0x7f
 800b7a4:	d8f0      	bhi.n	800b788 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b7a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	647a      	str	r2, [r7, #68]	; 0x44
 800b7ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	701a      	strb	r2, [r3, #0]
 800b7b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7c0:	e00b      	b.n	800b7da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c8:	1c59      	adds	r1, r3, #1
 800b7ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b7cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7d0:	b2d2      	uxtb	r2, r2
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d6:	09db      	lsrs	r3, r3, #7
 800b7d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	2b7f      	cmp	r3, #127	; 0x7f
 800b7de:	d8f0      	bhi.n	800b7c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	701a      	strb	r2, [r3, #0]
 800b7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7ff f9fd 	bl	800abf8 <_EncodeStr>
 800b7fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b800:	2209      	movs	r2, #9
 800b802:	68f9      	ldr	r1, [r7, #12]
 800b804:	6938      	ldr	r0, [r7, #16]
 800b806:	f7ff fb35 	bl	800ae74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	637b      	str	r3, [r7, #52]	; 0x34
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	4b40      	ldr	r3, [pc, #256]	; (800b918 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	633b      	str	r3, [r7, #48]	; 0x30
 800b81e:	e00b      	b.n	800b838 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	b2da      	uxtb	r2, r3
 800b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b826:	1c59      	adds	r1, r3, #1
 800b828:	6379      	str	r1, [r7, #52]	; 0x34
 800b82a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b82e:	b2d2      	uxtb	r2, r2
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	09db      	lsrs	r3, r3, #7
 800b836:	633b      	str	r3, [r7, #48]	; 0x30
 800b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83a:	2b7f      	cmp	r3, #127	; 0x7f
 800b83c:	d8f0      	bhi.n	800b820 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b840:	1c5a      	adds	r2, r3, #1
 800b842:	637a      	str	r2, [r7, #52]	; 0x34
 800b844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b846:	b2d2      	uxtb	r2, r2
 800b848:	701a      	strb	r2, [r3, #0]
 800b84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	62bb      	str	r3, [r7, #40]	; 0x28
 800b858:	e00b      	b.n	800b872 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	1c59      	adds	r1, r3, #1
 800b862:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b868:	b2d2      	uxtb	r2, r2
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	09db      	lsrs	r3, r3, #7
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	2b7f      	cmp	r3, #127	; 0x7f
 800b876:	d8f0      	bhi.n	800b85a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b880:	b2d2      	uxtb	r2, r2
 800b882:	701a      	strb	r2, [r3, #0]
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	627b      	str	r3, [r7, #36]	; 0x24
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	623b      	str	r3, [r7, #32]
 800b892:	e00b      	b.n	800b8ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	b2da      	uxtb	r2, r3
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	1c59      	adds	r1, r3, #1
 800b89c:	6279      	str	r1, [r7, #36]	; 0x24
 800b89e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b8a2:	b2d2      	uxtb	r2, r2
 800b8a4:	701a      	strb	r2, [r3, #0]
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	09db      	lsrs	r3, r3, #7
 800b8aa:	623b      	str	r3, [r7, #32]
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	2b7f      	cmp	r3, #127	; 0x7f
 800b8b0:	d8f0      	bhi.n	800b894 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800b8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b4:	1c5a      	adds	r2, r3, #1
 800b8b6:	627a      	str	r2, [r7, #36]	; 0x24
 800b8b8:	6a3a      	ldr	r2, [r7, #32]
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	701a      	strb	r2, [r3, #0]
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	61fb      	str	r3, [r7, #28]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	61bb      	str	r3, [r7, #24]
 800b8ca:	e00b      	b.n	800b8e4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	1c59      	adds	r1, r3, #1
 800b8d4:	61f9      	str	r1, [r7, #28]
 800b8d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b8da:	b2d2      	uxtb	r2, r2
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	09db      	lsrs	r3, r3, #7
 800b8e2:	61bb      	str	r3, [r7, #24]
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	2b7f      	cmp	r3, #127	; 0x7f
 800b8e8:	d8f0      	bhi.n	800b8cc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	61fa      	str	r2, [r7, #28]
 800b8f0:	69ba      	ldr	r2, [r7, #24]
 800b8f2:	b2d2      	uxtb	r2, r2
 800b8f4:	701a      	strb	r2, [r3, #0]
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b8fa:	2215      	movs	r2, #21
 800b8fc:	68f9      	ldr	r1, [r7, #12]
 800b8fe:	6938      	ldr	r0, [r7, #16]
 800b900:	f7ff fab8 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f383 8811 	msr	BASEPRI, r3
}
 800b90a:	bf00      	nop
 800b90c:	3748      	adds	r7, #72	; 0x48
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	2002b114 	.word	0x2002b114
 800b918:	2002b0e4 	.word	0x2002b0e4

0800b91c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d008      	beq.n	800b93a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b92a:	6a1b      	ldr	r3, [r3, #32]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b932:	4b03      	ldr	r3, [pc, #12]	; (800b940 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	4798      	blx	r3
  }
}
 800b93a:	bf00      	nop
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	2002b0e4 	.word	0x2002b0e4

0800b944 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b94c:	f3ef 8311 	mrs	r3, BASEPRI
 800b950:	f04f 0120 	mov.w	r1, #32
 800b954:	f381 8811 	msr	BASEPRI, r1
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	480b      	ldr	r0, [pc, #44]	; (800b988 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800b95c:	f7ff f99c 	bl	800ac98 <_PreparePacket>
 800b960:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b962:	2280      	movs	r2, #128	; 0x80
 800b964:	6879      	ldr	r1, [r7, #4]
 800b966:	6938      	ldr	r0, [r7, #16]
 800b968:	f7ff f946 	bl	800abf8 <_EncodeStr>
 800b96c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800b96e:	220e      	movs	r2, #14
 800b970:	68f9      	ldr	r1, [r7, #12]
 800b972:	6938      	ldr	r0, [r7, #16]
 800b974:	f7ff fa7e 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f383 8811 	msr	BASEPRI, r3
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	2002b114 	.word	0x2002b114

0800b98c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d01a      	beq.n	800b9d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800b99a:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d015      	beq.n	800b9d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800b9a4:	4b10      	ldr	r3, [pc, #64]	; (800b9e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b9a6:	6a1b      	ldr	r3, [r3, #32]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	4798      	blx	r3
 800b9ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b9b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800b9b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b9b6:	f04f 0200 	mov.w	r2, #0
 800b9ba:	f04f 0300 	mov.w	r3, #0
 800b9be:	000a      	movs	r2, r1
 800b9c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b9c2:	4613      	mov	r3, r2
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	200d      	movs	r0, #13
 800b9ca:	f7ff fbe7 	bl	800b19c <SEGGER_SYSVIEW_RecordU32x2>
 800b9ce:	e006      	b.n	800b9de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800b9d0:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	200c      	movs	r0, #12
 800b9d8:	f7ff fba4 	bl	800b124 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800b9dc:	bf00      	nop
 800b9de:	bf00      	nop
 800b9e0:	370c      	adds	r7, #12
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd90      	pop	{r4, r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	2002b0e4 	.word	0x2002b0e4
 800b9ec:	e0001004 	.word	0xe0001004

0800b9f0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b9f6:	f3ef 8311 	mrs	r3, BASEPRI
 800b9fa:	f04f 0120 	mov.w	r1, #32
 800b9fe:	f381 8811 	msr	BASEPRI, r1
 800ba02:	607b      	str	r3, [r7, #4]
 800ba04:	4807      	ldr	r0, [pc, #28]	; (800ba24 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800ba06:	f7ff f947 	bl	800ac98 <_PreparePacket>
 800ba0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800ba0c:	2211      	movs	r2, #17
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6838      	ldr	r0, [r7, #0]
 800ba12:	f7ff fa2f 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f383 8811 	msr	BASEPRI, r3
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	2002b114 	.word	0x2002b114

0800ba28 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ba30:	f3ef 8311 	mrs	r3, BASEPRI
 800ba34:	f04f 0120 	mov.w	r1, #32
 800ba38:	f381 8811 	msr	BASEPRI, r1
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	4819      	ldr	r0, [pc, #100]	; (800baa4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800ba40:	f7ff f92a 	bl	800ac98 <_PreparePacket>
 800ba44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ba4a:	4b17      	ldr	r3, [pc, #92]	; (800baa8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	1ad3      	subs	r3, r2, r3
 800ba52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	61fb      	str	r3, [r7, #28]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	61bb      	str	r3, [r7, #24]
 800ba5c:	e00b      	b.n	800ba76 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	b2da      	uxtb	r2, r3
 800ba62:	69fb      	ldr	r3, [r7, #28]
 800ba64:	1c59      	adds	r1, r3, #1
 800ba66:	61f9      	str	r1, [r7, #28]
 800ba68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba6c:	b2d2      	uxtb	r2, r2
 800ba6e:	701a      	strb	r2, [r3, #0]
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	09db      	lsrs	r3, r3, #7
 800ba74:	61bb      	str	r3, [r7, #24]
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	2b7f      	cmp	r3, #127	; 0x7f
 800ba7a:	d8f0      	bhi.n	800ba5e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	1c5a      	adds	r2, r3, #1
 800ba80:	61fa      	str	r2, [r7, #28]
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	b2d2      	uxtb	r2, r2
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800ba8c:	2208      	movs	r2, #8
 800ba8e:	68f9      	ldr	r1, [r7, #12]
 800ba90:	6938      	ldr	r0, [r7, #16]
 800ba92:	f7ff f9ef 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f383 8811 	msr	BASEPRI, r3
}
 800ba9c:	bf00      	nop
 800ba9e:	3720      	adds	r7, #32
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	2002b114 	.word	0x2002b114
 800baa8:	2002b0e4 	.word	0x2002b0e4

0800baac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bab4:	f3ef 8311 	mrs	r3, BASEPRI
 800bab8:	f04f 0120 	mov.w	r1, #32
 800babc:	f381 8811 	msr	BASEPRI, r1
 800bac0:	617b      	str	r3, [r7, #20]
 800bac2:	4819      	ldr	r0, [pc, #100]	; (800bb28 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800bac4:	f7ff f8e8 	bl	800ac98 <_PreparePacket>
 800bac8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bace:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	61fb      	str	r3, [r7, #28]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	61bb      	str	r3, [r7, #24]
 800bae0:	e00b      	b.n	800bafa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	1c59      	adds	r1, r3, #1
 800baea:	61f9      	str	r1, [r7, #28]
 800baec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800baf0:	b2d2      	uxtb	r2, r2
 800baf2:	701a      	strb	r2, [r3, #0]
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	09db      	lsrs	r3, r3, #7
 800baf8:	61bb      	str	r3, [r7, #24]
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2b7f      	cmp	r3, #127	; 0x7f
 800bafe:	d8f0      	bhi.n	800bae2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	61fa      	str	r2, [r7, #28]
 800bb06:	69ba      	ldr	r2, [r7, #24]
 800bb08:	b2d2      	uxtb	r2, r2
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800bb10:	2204      	movs	r2, #4
 800bb12:	68f9      	ldr	r1, [r7, #12]
 800bb14:	6938      	ldr	r0, [r7, #16]
 800bb16:	f7ff f9ad 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f383 8811 	msr	BASEPRI, r3
}
 800bb20:	bf00      	nop
 800bb22:	3720      	adds	r7, #32
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	2002b114 	.word	0x2002b114
 800bb2c:	2002b0e4 	.word	0x2002b0e4

0800bb30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bb38:	f3ef 8311 	mrs	r3, BASEPRI
 800bb3c:	f04f 0120 	mov.w	r1, #32
 800bb40:	f381 8811 	msr	BASEPRI, r1
 800bb44:	617b      	str	r3, [r7, #20]
 800bb46:	4819      	ldr	r0, [pc, #100]	; (800bbac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800bb48:	f7ff f8a6 	bl	800ac98 <_PreparePacket>
 800bb4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bb52:	4b17      	ldr	r3, [pc, #92]	; (800bbb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	61fb      	str	r3, [r7, #28]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	61bb      	str	r3, [r7, #24]
 800bb64:	e00b      	b.n	800bb7e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	1c59      	adds	r1, r3, #1
 800bb6e:	61f9      	str	r1, [r7, #28]
 800bb70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb74:	b2d2      	uxtb	r2, r2
 800bb76:	701a      	strb	r2, [r3, #0]
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	09db      	lsrs	r3, r3, #7
 800bb7c:	61bb      	str	r3, [r7, #24]
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b7f      	cmp	r3, #127	; 0x7f
 800bb82:	d8f0      	bhi.n	800bb66 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	61fa      	str	r2, [r7, #28]
 800bb8a:	69ba      	ldr	r2, [r7, #24]
 800bb8c:	b2d2      	uxtb	r2, r2
 800bb8e:	701a      	strb	r2, [r3, #0]
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800bb94:	2206      	movs	r2, #6
 800bb96:	68f9      	ldr	r1, [r7, #12]
 800bb98:	6938      	ldr	r0, [r7, #16]
 800bb9a:	f7ff f96b 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f383 8811 	msr	BASEPRI, r3
}
 800bba4:	bf00      	nop
 800bba6:	3720      	adds	r7, #32
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	2002b114 	.word	0x2002b114
 800bbb0:	2002b0e4 	.word	0x2002b0e4

0800bbb4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800bbbc:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	1ad3      	subs	r3, r2, r3
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	370c      	adds	r7, #12
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr
 800bbd0:	2002b0e4 	.word	0x2002b0e4

0800bbd4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b08c      	sub	sp, #48	; 0x30
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800bbde:	4b3b      	ldr	r3, [pc, #236]	; (800bccc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d06d      	beq.n	800bcc2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800bbe6:	4b39      	ldr	r3, [pc, #228]	; (800bccc <SEGGER_SYSVIEW_SendModule+0xf8>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800bbec:	2300      	movs	r3, #0
 800bbee:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbf0:	e008      	b.n	800bc04 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800bbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800bbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc00:	3301      	adds	r3, #1
 800bc02:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc04:	79fb      	ldrb	r3, [r7, #7]
 800bc06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d3f2      	bcc.n	800bbf2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800bc0c:	e000      	b.n	800bc10 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800bc0e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800bc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d055      	beq.n	800bcc2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bc16:	f3ef 8311 	mrs	r3, BASEPRI
 800bc1a:	f04f 0120 	mov.w	r1, #32
 800bc1e:	f381 8811 	msr	BASEPRI, r1
 800bc22:	617b      	str	r3, [r7, #20]
 800bc24:	482a      	ldr	r0, [pc, #168]	; (800bcd0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800bc26:	f7ff f837 	bl	800ac98 <_PreparePacket>
 800bc2a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	627b      	str	r3, [r7, #36]	; 0x24
 800bc34:	79fb      	ldrb	r3, [r7, #7]
 800bc36:	623b      	str	r3, [r7, #32]
 800bc38:	e00b      	b.n	800bc52 <SEGGER_SYSVIEW_SendModule+0x7e>
 800bc3a:	6a3b      	ldr	r3, [r7, #32]
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	1c59      	adds	r1, r3, #1
 800bc42:	6279      	str	r1, [r7, #36]	; 0x24
 800bc44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc48:	b2d2      	uxtb	r2, r2
 800bc4a:	701a      	strb	r2, [r3, #0]
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	09db      	lsrs	r3, r3, #7
 800bc50:	623b      	str	r3, [r7, #32]
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	2b7f      	cmp	r3, #127	; 0x7f
 800bc56:	d8f0      	bhi.n	800bc3a <SEGGER_SYSVIEW_SendModule+0x66>
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	627a      	str	r2, [r7, #36]	; 0x24
 800bc5e:	6a3a      	ldr	r2, [r7, #32]
 800bc60:	b2d2      	uxtb	r2, r2
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc66:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	61fb      	str	r3, [r7, #28]
 800bc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	61bb      	str	r3, [r7, #24]
 800bc72:	e00b      	b.n	800bc8c <SEGGER_SYSVIEW_SendModule+0xb8>
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	1c59      	adds	r1, r3, #1
 800bc7c:	61f9      	str	r1, [r7, #28]
 800bc7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc82:	b2d2      	uxtb	r2, r2
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	09db      	lsrs	r3, r3, #7
 800bc8a:	61bb      	str	r3, [r7, #24]
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	2b7f      	cmp	r3, #127	; 0x7f
 800bc90:	d8f0      	bhi.n	800bc74 <SEGGER_SYSVIEW_SendModule+0xa0>
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	1c5a      	adds	r2, r3, #1
 800bc96:	61fa      	str	r2, [r7, #28]
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	b2d2      	uxtb	r2, r2
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2280      	movs	r2, #128	; 0x80
 800bca8:	4619      	mov	r1, r3
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f7fe ffa4 	bl	800abf8 <_EncodeStr>
 800bcb0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800bcb2:	2216      	movs	r2, #22
 800bcb4:	68f9      	ldr	r1, [r7, #12]
 800bcb6:	6938      	ldr	r0, [r7, #16]
 800bcb8:	f7ff f8dc 	bl	800ae74 <_SendPacket>
      RECORD_END();
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800bcc2:	bf00      	nop
 800bcc4:	3730      	adds	r7, #48	; 0x30
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	2002b10c 	.word	0x2002b10c
 800bcd0:	2002b114 	.word	0x2002b114

0800bcd4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800bcda:	4b0c      	ldr	r3, [pc, #48]	; (800bd0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00f      	beq.n	800bd02 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800bce2:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d1f2      	bne.n	800bce8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	2002b10c 	.word	0x2002b10c

0800bd10 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800bd16:	f3ef 8311 	mrs	r3, BASEPRI
 800bd1a:	f04f 0120 	mov.w	r1, #32
 800bd1e:	f381 8811 	msr	BASEPRI, r1
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	4817      	ldr	r0, [pc, #92]	; (800bd84 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800bd26:	f7fe ffb7 	bl	800ac98 <_PreparePacket>
 800bd2a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	617b      	str	r3, [r7, #20]
 800bd34:	4b14      	ldr	r3, [pc, #80]	; (800bd88 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	e00b      	b.n	800bd54 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	1c59      	adds	r1, r3, #1
 800bd44:	6179      	str	r1, [r7, #20]
 800bd46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd4a:	b2d2      	uxtb	r2, r2
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	09db      	lsrs	r3, r3, #7
 800bd52:	613b      	str	r3, [r7, #16]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	2b7f      	cmp	r3, #127	; 0x7f
 800bd58:	d8f0      	bhi.n	800bd3c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	617a      	str	r2, [r7, #20]
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	701a      	strb	r2, [r3, #0]
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800bd6a:	221b      	movs	r2, #27
 800bd6c:	6879      	ldr	r1, [r7, #4]
 800bd6e:	68b8      	ldr	r0, [r7, #8]
 800bd70:	f7ff f880 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f383 8811 	msr	BASEPRI, r3
}
 800bd7a:	bf00      	nop
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	2002b114 	.word	0x2002b114
 800bd88:	2002b110 	.word	0x2002b110

0800bd8c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08a      	sub	sp, #40	; 0x28
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bd94:	f3ef 8311 	mrs	r3, BASEPRI
 800bd98:	f04f 0120 	mov.w	r1, #32
 800bd9c:	f381 8811 	msr	BASEPRI, r1
 800bda0:	617b      	str	r3, [r7, #20]
 800bda2:	4827      	ldr	r0, [pc, #156]	; (800be40 <SEGGER_SYSVIEW_Warn+0xb4>)
 800bda4:	f7fe ff78 	bl	800ac98 <_PreparePacket>
 800bda8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bdaa:	2280      	movs	r2, #128	; 0x80
 800bdac:	6879      	ldr	r1, [r7, #4]
 800bdae:	6938      	ldr	r0, [r7, #16]
 800bdb0:	f7fe ff22 	bl	800abf8 <_EncodeStr>
 800bdb4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdba:	2301      	movs	r3, #1
 800bdbc:	623b      	str	r3, [r7, #32]
 800bdbe:	e00b      	b.n	800bdd8 <SEGGER_SYSVIEW_Warn+0x4c>
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	1c59      	adds	r1, r3, #1
 800bdc8:	6279      	str	r1, [r7, #36]	; 0x24
 800bdca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bdce:	b2d2      	uxtb	r2, r2
 800bdd0:	701a      	strb	r2, [r3, #0]
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	09db      	lsrs	r3, r3, #7
 800bdd6:	623b      	str	r3, [r7, #32]
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	2b7f      	cmp	r3, #127	; 0x7f
 800bddc:	d8f0      	bhi.n	800bdc0 <SEGGER_SYSVIEW_Warn+0x34>
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	1c5a      	adds	r2, r3, #1
 800bde2:	627a      	str	r2, [r7, #36]	; 0x24
 800bde4:	6a3a      	ldr	r2, [r7, #32]
 800bde6:	b2d2      	uxtb	r2, r2
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	61fb      	str	r3, [r7, #28]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	61bb      	str	r3, [r7, #24]
 800bdf6:	e00b      	b.n	800be10 <SEGGER_SYSVIEW_Warn+0x84>
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	1c59      	adds	r1, r3, #1
 800be00:	61f9      	str	r1, [r7, #28]
 800be02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be06:	b2d2      	uxtb	r2, r2
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	09db      	lsrs	r3, r3, #7
 800be0e:	61bb      	str	r3, [r7, #24]
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	2b7f      	cmp	r3, #127	; 0x7f
 800be14:	d8f0      	bhi.n	800bdf8 <SEGGER_SYSVIEW_Warn+0x6c>
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	61fa      	str	r2, [r7, #28]
 800be1c:	69ba      	ldr	r2, [r7, #24]
 800be1e:	b2d2      	uxtb	r2, r2
 800be20:	701a      	strb	r2, [r3, #0]
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800be26:	221a      	movs	r2, #26
 800be28:	68f9      	ldr	r1, [r7, #12]
 800be2a:	6938      	ldr	r0, [r7, #16]
 800be2c:	f7ff f822 	bl	800ae74 <_SendPacket>
  RECORD_END();
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	f383 8811 	msr	BASEPRI, r3
}
 800be36:	bf00      	nop
 800be38:	3728      	adds	r7, #40	; 0x28
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	2002b114 	.word	0x2002b114

0800be44 <__NVIC_EnableIRQ>:
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be52:	2b00      	cmp	r3, #0
 800be54:	db0b      	blt.n	800be6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	f003 021f 	and.w	r2, r3, #31
 800be5c:	4907      	ldr	r1, [pc, #28]	; (800be7c <__NVIC_EnableIRQ+0x38>)
 800be5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be62:	095b      	lsrs	r3, r3, #5
 800be64:	2001      	movs	r0, #1
 800be66:	fa00 f202 	lsl.w	r2, r0, r2
 800be6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800be6e:	bf00      	nop
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	e000e100 	.word	0xe000e100

0800be80 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800be88:	4b08      	ldr	r3, [pc, #32]	; (800beac <LL_APB1_GRP1_EnableClock+0x2c>)
 800be8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be8c:	4907      	ldr	r1, [pc, #28]	; (800beac <LL_APB1_GRP1_EnableClock+0x2c>)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4313      	orrs	r3, r2
 800be92:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <LL_APB1_GRP1_EnableClock+0x2c>)
 800be96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4013      	ands	r3, r2
 800be9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800be9e:	68fb      	ldr	r3, [r7, #12]
}
 800bea0:	bf00      	nop
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	40023800 	.word	0x40023800

0800beb0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f043 0201 	orr.w	r2, r3, #1
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	601a      	str	r2, [r3, #0]
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	683a      	ldr	r2, [r7, #0]
 800bede:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f06f 0201 	mvn.w	r2, #1
 800befa:	611a      	str	r2, [r3, #16]
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	f003 0301 	and.w	r3, r3, #1
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d101      	bne.n	800bf20 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e000      	b.n	800bf22 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f043 0201 	orr.w	r2, r3, #1
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60da      	str	r2, [r3, #12]
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
	...

0800bf50 <_cbSendSystemDesc>:
 *       _cbSendSystemDesc()
 *
 *  Function description
 *    Sends SystemView description strings.
 */
static void _cbSendSystemDesc(void) {
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800bf54:	4802      	ldr	r0, [pc, #8]	; (800bf60 <_cbSendSystemDesc+0x10>)
 800bf56:	f7ff fcf5 	bl	800b944 <SEGGER_SYSVIEW_SendSysDesc>
//	SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
//	SEGGER_SYSVIEW_SendSysDesc("I#23=EXTI[0]");
}
 800bf5a:	bf00      	nop
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	0800d700 	.word	0x0800d700

0800bf64 <TIM7_IRQHandler>:

/// [SYSVIEW_TIMESTAMP]
void TIM7_IRQHandler(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
	// Interrupt flag set?
	if(LL_TIM_IsActiveFlag_UPDATE(TIM7))
 800bf68:	4807      	ldr	r0, [pc, #28]	; (800bf88 <TIM7_IRQHandler+0x24>)
 800bf6a:	f7ff ffcd 	bl	800bf08 <LL_TIM_IsActiveFlag_UPDATE>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d007      	beq.n	800bf84 <TIM7_IRQHandler+0x20>
	{
		// Clear flag
		LL_TIM_ClearFlag_UPDATE(TIM7);
 800bf74:	4804      	ldr	r0, [pc, #16]	; (800bf88 <TIM7_IRQHandler+0x24>)
 800bf76:	f7ff ffb9 	bl	800beec <LL_TIM_ClearFlag_UPDATE>
		// Increment counter
		SEGGER_SYSVIEW_TickCnt++;
 800bf7a:	4b04      	ldr	r3, [pc, #16]	; (800bf8c <TIM7_IRQHandler+0x28>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	4a02      	ldr	r2, [pc, #8]	; (800bf8c <TIM7_IRQHandler+0x28>)
 800bf82:	6013      	str	r3, [r2, #0]
	}
}
 800bf84:	bf00      	nop
 800bf86:	bd80      	pop	{r7, pc}
 800bf88:	40001400 	.word	0x40001400
 800bf8c:	2002acd8 	.word	0x2002acd8

0800bf90 <SEGGER_SYSVIEW_TimeStampInit>:
static void SEGGER_SYSVIEW_TimeStampInit(void)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	af00      	add	r7, sp, #0
//#warning "DO NOT TAKE POINTS OFF, SEGGER PROVIDED WARNING: TIM7 peripheral is used for Segger SysView timestamping"
	// Enable TIM7 peripheral clock
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 800bf94:	2020      	movs	r0, #32
 800bf96:	f7ff ff73 	bl	800be80 <LL_APB1_GRP1_EnableClock>
	// Set prescaler to match timestamp frequency
	LL_TIM_SetPrescaler(TIM7, __LL_TIM_CALC_PSC(SYSVIEW_CPU_FREQ, SYSVIEW_TIMESTAMP_FREQ));
 800bf9a:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	085a      	lsrs	r2, r3, #1
 800bfa0:	4b0b      	ldr	r3, [pc, #44]	; (800bfd0 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	441a      	add	r2, r3
 800bfa6:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <SEGGER_SYSVIEW_TimeStampInit+0x40>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4808      	ldr	r0, [pc, #32]	; (800bfd4 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800bfb4:	f7ff ff8c 	bl	800bed0 <LL_TIM_SetPrescaler>
	// Enable timer interrupt
	NVIC_EnableIRQ(TIM7_IRQn);
 800bfb8:	2037      	movs	r0, #55	; 0x37
 800bfba:	f7ff ff43 	bl	800be44 <__NVIC_EnableIRQ>
	LL_TIM_EnableIT_UPDATE(TIM7);
 800bfbe:	4805      	ldr	r0, [pc, #20]	; (800bfd4 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800bfc0:	f7ff ffb5 	bl	800bf2e <LL_TIM_EnableIT_UPDATE>
	// Enable counter
	LL_TIM_EnableCounter(TIM7);
 800bfc4:	4803      	ldr	r0, [pc, #12]	; (800bfd4 <SEGGER_SYSVIEW_TimeStampInit+0x44>)
 800bfc6:	f7ff ff73 	bl	800beb0 <LL_TIM_EnableCounter>
}
 800bfca:	bf00      	nop
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	20000010 	.word	0x20000010
 800bfd4:	40001400 	.word	0x40001400

0800bfd8 <SEGGER_SYSVIEW_Conf>:
 *
 *       Global functions
 *
 **********************************************************************
 */
void SEGGER_SYSVIEW_Conf(void) {
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	af00      	add	r7, sp, #0
	SEGGER_SYSVIEW_TimeStampInit();
 800bfdc:	f7ff ffd8 	bl	800bf90 <SEGGER_SYSVIEW_TimeStampInit>
	SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 800bfe0:	4b06      	ldr	r3, [pc, #24]	; (800bffc <SEGGER_SYSVIEW_Conf+0x24>)
 800bfe2:	6818      	ldr	r0, [r3, #0]
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <SEGGER_SYSVIEW_Conf+0x24>)
 800bfe6:	6819      	ldr	r1, [r3, #0]
 800bfe8:	4b05      	ldr	r3, [pc, #20]	; (800c000 <SEGGER_SYSVIEW_Conf+0x28>)
 800bfea:	4a06      	ldr	r2, [pc, #24]	; (800c004 <SEGGER_SYSVIEW_Conf+0x2c>)
 800bfec:	f7ff f828 	bl	800b040 <SEGGER_SYSVIEW_Init>
			&SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
	SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800bff0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800bff4:	f7ff f868 	bl	800b0c8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800bff8:	bf00      	nop
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	20000010 	.word	0x20000010
 800c000:	0800bf51 	.word	0x0800bf51
 800c004:	0800ebfc 	.word	0x0800ebfc

0800c008 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c00e:	2300      	movs	r3, #0
 800c010:	607b      	str	r3, [r7, #4]
 800c012:	e048      	b.n	800c0a6 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800c014:	4929      	ldr	r1, [pc, #164]	; (800c0bc <_cbSendTaskList+0xb4>)
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	440b      	add	r3, r1
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4618      	mov	r0, r3
 800c026:	f7fd f91d 	bl	8009264 <uxTaskGetStackHighWaterMark>
 800c02a:	4601      	mov	r1, r0
 800c02c:	4823      	ldr	r0, [pc, #140]	; (800c0bc <_cbSendTaskList+0xb4>)
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4403      	add	r3, r0
 800c03a:	3310      	adds	r3, #16
 800c03c:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c03e:	491f      	ldr	r1, [pc, #124]	; (800c0bc <_cbSendTaskList+0xb4>)
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	4613      	mov	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	440b      	add	r3, r1
 800c04c:	6818      	ldr	r0, [r3, #0]
 800c04e:	491b      	ldr	r1, [pc, #108]	; (800c0bc <_cbSendTaskList+0xb4>)
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	4613      	mov	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	440b      	add	r3, r1
 800c05c:	3304      	adds	r3, #4
 800c05e:	6819      	ldr	r1, [r3, #0]
 800c060:	4c16      	ldr	r4, [pc, #88]	; (800c0bc <_cbSendTaskList+0xb4>)
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	4613      	mov	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	4423      	add	r3, r4
 800c06e:	3308      	adds	r3, #8
 800c070:	681c      	ldr	r4, [r3, #0]
 800c072:	4d12      	ldr	r5, [pc, #72]	; (800c0bc <_cbSendTaskList+0xb4>)
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	4613      	mov	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	442b      	add	r3, r5
 800c080:	330c      	adds	r3, #12
 800c082:	681d      	ldr	r5, [r3, #0]
 800c084:	4e0d      	ldr	r6, [pc, #52]	; (800c0bc <_cbSendTaskList+0xb4>)
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	4613      	mov	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4413      	add	r3, r2
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4433      	add	r3, r6
 800c092:	3310      	adds	r3, #16
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	462b      	mov	r3, r5
 800c09a:	4622      	mov	r2, r4
 800c09c:	f000 f8be 	bl	800c21c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	607b      	str	r3, [r7, #4]
 800c0a6:	4b06      	ldr	r3, [pc, #24]	; (800c0c0 <_cbSendTaskList+0xb8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d3b1      	bcc.n	800c014 <_cbSendTaskList+0xc>
  }
}
 800c0b0:	bf00      	nop
 800c0b2:	bf00      	nop
 800c0b4:	370c      	adds	r7, #12
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2002b1f8 	.word	0x2002b1f8
 800c0c0:	2002b298 	.word	0x2002b298

0800c0c4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0c8:	b082      	sub	sp, #8
 800c0ca:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c0cc:	f7fc fd00 	bl	8008ad0 <xTaskGetTickCountFromISR>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	469a      	mov	sl, r3
 800c0d6:	4693      	mov	fp, r2
 800c0d8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c0dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	f04f 0a00 	mov.w	sl, #0
 800c0e8:	f04f 0b00 	mov.w	fp, #0
 800c0ec:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c0f0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c0f4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c0f8:	4652      	mov	r2, sl
 800c0fa:	465b      	mov	r3, fp
 800c0fc:	1a14      	subs	r4, r2, r0
 800c0fe:	eb63 0501 	sbc.w	r5, r3, r1
 800c102:	f04f 0200 	mov.w	r2, #0
 800c106:	f04f 0300 	mov.w	r3, #0
 800c10a:	00ab      	lsls	r3, r5, #2
 800c10c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c110:	00a2      	lsls	r2, r4, #2
 800c112:	4614      	mov	r4, r2
 800c114:	461d      	mov	r5, r3
 800c116:	eb14 0800 	adds.w	r8, r4, r0
 800c11a:	eb45 0901 	adc.w	r9, r5, r1
 800c11e:	f04f 0200 	mov.w	r2, #0
 800c122:	f04f 0300 	mov.w	r3, #0
 800c126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c12a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c12e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c132:	4690      	mov	r8, r2
 800c134:	4699      	mov	r9, r3
 800c136:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800c13a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c13e:	4610      	mov	r0, r2
 800c140:	4619      	mov	r1, r3
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c14c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af02      	add	r7, sp, #8
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
 800c158:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c15a:	2205      	movs	r2, #5
 800c15c:	492b      	ldr	r1, [pc, #172]	; (800c20c <SYSVIEW_AddTask+0xc0>)
 800c15e:	68b8      	ldr	r0, [r7, #8]
 800c160:	f000 f9b3 	bl	800c4ca <memcmp>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d04b      	beq.n	800c202 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c16a:	4b29      	ldr	r3, [pc, #164]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b07      	cmp	r3, #7
 800c170:	d903      	bls.n	800c17a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c172:	4828      	ldr	r0, [pc, #160]	; (800c214 <SYSVIEW_AddTask+0xc8>)
 800c174:	f7ff fe0a 	bl	800bd8c <SEGGER_SYSVIEW_Warn>
    return;
 800c178:	e044      	b.n	800c204 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c17a:	4b25      	ldr	r3, [pc, #148]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	4926      	ldr	r1, [pc, #152]	; (800c218 <SYSVIEW_AddTask+0xcc>)
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c18e:	4b20      	ldr	r3, [pc, #128]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	4921      	ldr	r1, [pc, #132]	; (800c218 <SYSVIEW_AddTask+0xcc>)
 800c194:	4613      	mov	r3, r2
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	440b      	add	r3, r1
 800c19e:	3304      	adds	r3, #4
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800c1a4:	4b1a      	ldr	r3, [pc, #104]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	491b      	ldr	r1, [pc, #108]	; (800c218 <SYSVIEW_AddTask+0xcc>)
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	4413      	add	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	440b      	add	r3, r1
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800c1ba:	4b15      	ldr	r3, [pc, #84]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	4916      	ldr	r1, [pc, #88]	; (800c218 <SYSVIEW_AddTask+0xcc>)
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	440b      	add	r3, r1
 800c1ca:	330c      	adds	r3, #12
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800c1d0:	4b0f      	ldr	r3, [pc, #60]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	4910      	ldr	r1, [pc, #64]	; (800c218 <SYSVIEW_AddTask+0xcc>)
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	440b      	add	r3, r1
 800c1e0:	3310      	adds	r3, #16
 800c1e2:	69ba      	ldr	r2, [r7, #24]
 800c1e4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800c1e6:	4b0a      	ldr	r3, [pc, #40]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	4a08      	ldr	r2, [pc, #32]	; (800c210 <SYSVIEW_AddTask+0xc4>)
 800c1ee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f000 f80e 	bl	800c21c <SYSVIEW_SendTaskInfo>
 800c200:	e000      	b.n	800c204 <SYSVIEW_AddTask+0xb8>
    return;
 800c202:	bf00      	nop

}
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	0800d734 	.word	0x0800d734
 800c210:	2002b298 	.word	0x2002b298
 800c214:	0800d73c 	.word	0x0800d73c
 800c218:	2002b1f8 	.word	0x2002b1f8

0800c21c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08a      	sub	sp, #40	; 0x28
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
 800c228:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800c22a:	f107 0314 	add.w	r3, r7, #20
 800c22e:	2214      	movs	r2, #20
 800c230:	2100      	movs	r1, #0
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f959 	bl	800c4ea <memset>
  TaskInfo.TaskID     = TaskID;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800c248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800c24c:	f107 0314 	add.w	r3, r7, #20
 800c250:	4618      	mov	r0, r3
 800c252:	f7ff fa7f 	bl	800b754 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800c256:	bf00      	nop
 800c258:	3728      	adds	r7, #40	; 0x28
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <__assert_func>:
 800c260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c262:	4614      	mov	r4, r2
 800c264:	461a      	mov	r2, r3
 800c266:	4b09      	ldr	r3, [pc, #36]	; (800c28c <__assert_func+0x2c>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4605      	mov	r5, r0
 800c26c:	68d8      	ldr	r0, [r3, #12]
 800c26e:	b14c      	cbz	r4, 800c284 <__assert_func+0x24>
 800c270:	4b07      	ldr	r3, [pc, #28]	; (800c290 <__assert_func+0x30>)
 800c272:	9100      	str	r1, [sp, #0]
 800c274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c278:	4906      	ldr	r1, [pc, #24]	; (800c294 <__assert_func+0x34>)
 800c27a:	462b      	mov	r3, r5
 800c27c:	f000 f8b2 	bl	800c3e4 <fiprintf>
 800c280:	f000 fa13 	bl	800c6aa <abort>
 800c284:	4b04      	ldr	r3, [pc, #16]	; (800c298 <__assert_func+0x38>)
 800c286:	461c      	mov	r4, r3
 800c288:	e7f3      	b.n	800c272 <__assert_func+0x12>
 800c28a:	bf00      	nop
 800c28c:	20000078 	.word	0x20000078
 800c290:	0800ec04 	.word	0x0800ec04
 800c294:	0800ec11 	.word	0x0800ec11
 800c298:	0800ec3f 	.word	0x0800ec3f

0800c29c <std>:
 800c29c:	2300      	movs	r3, #0
 800c29e:	b510      	push	{r4, lr}
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c2a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2aa:	6083      	str	r3, [r0, #8]
 800c2ac:	8181      	strh	r1, [r0, #12]
 800c2ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c2b0:	81c2      	strh	r2, [r0, #14]
 800c2b2:	6183      	str	r3, [r0, #24]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	2208      	movs	r2, #8
 800c2b8:	305c      	adds	r0, #92	; 0x5c
 800c2ba:	f000 f916 	bl	800c4ea <memset>
 800c2be:	4b0d      	ldr	r3, [pc, #52]	; (800c2f4 <std+0x58>)
 800c2c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c2c2:	4b0d      	ldr	r3, [pc, #52]	; (800c2f8 <std+0x5c>)
 800c2c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2c6:	4b0d      	ldr	r3, [pc, #52]	; (800c2fc <std+0x60>)
 800c2c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2ca:	4b0d      	ldr	r3, [pc, #52]	; (800c300 <std+0x64>)
 800c2cc:	6323      	str	r3, [r4, #48]	; 0x30
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <std+0x68>)
 800c2d0:	6224      	str	r4, [r4, #32]
 800c2d2:	429c      	cmp	r4, r3
 800c2d4:	d006      	beq.n	800c2e4 <std+0x48>
 800c2d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c2da:	4294      	cmp	r4, r2
 800c2dc:	d002      	beq.n	800c2e4 <std+0x48>
 800c2de:	33d0      	adds	r3, #208	; 0xd0
 800c2e0:	429c      	cmp	r4, r3
 800c2e2:	d105      	bne.n	800c2f0 <std+0x54>
 800c2e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2ec:	f000 b9cc 	b.w	800c688 <__retarget_lock_init_recursive>
 800c2f0:	bd10      	pop	{r4, pc}
 800c2f2:	bf00      	nop
 800c2f4:	0800c445 	.word	0x0800c445
 800c2f8:	0800c467 	.word	0x0800c467
 800c2fc:	0800c49f 	.word	0x0800c49f
 800c300:	0800c4c3 	.word	0x0800c4c3
 800c304:	2002b29c 	.word	0x2002b29c

0800c308 <stdio_exit_handler>:
 800c308:	4a02      	ldr	r2, [pc, #8]	; (800c314 <stdio_exit_handler+0xc>)
 800c30a:	4903      	ldr	r1, [pc, #12]	; (800c318 <stdio_exit_handler+0x10>)
 800c30c:	4803      	ldr	r0, [pc, #12]	; (800c31c <stdio_exit_handler+0x14>)
 800c30e:	f000 b87b 	b.w	800c408 <_fwalk_sglue>
 800c312:	bf00      	nop
 800c314:	20000020 	.word	0x20000020
 800c318:	0800cf5d 	.word	0x0800cf5d
 800c31c:	2000002c 	.word	0x2000002c

0800c320 <cleanup_stdio>:
 800c320:	6841      	ldr	r1, [r0, #4]
 800c322:	4b0c      	ldr	r3, [pc, #48]	; (800c354 <cleanup_stdio+0x34>)
 800c324:	4299      	cmp	r1, r3
 800c326:	b510      	push	{r4, lr}
 800c328:	4604      	mov	r4, r0
 800c32a:	d001      	beq.n	800c330 <cleanup_stdio+0x10>
 800c32c:	f000 fe16 	bl	800cf5c <_fflush_r>
 800c330:	68a1      	ldr	r1, [r4, #8]
 800c332:	4b09      	ldr	r3, [pc, #36]	; (800c358 <cleanup_stdio+0x38>)
 800c334:	4299      	cmp	r1, r3
 800c336:	d002      	beq.n	800c33e <cleanup_stdio+0x1e>
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fe0f 	bl	800cf5c <_fflush_r>
 800c33e:	68e1      	ldr	r1, [r4, #12]
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <cleanup_stdio+0x3c>)
 800c342:	4299      	cmp	r1, r3
 800c344:	d004      	beq.n	800c350 <cleanup_stdio+0x30>
 800c346:	4620      	mov	r0, r4
 800c348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c34c:	f000 be06 	b.w	800cf5c <_fflush_r>
 800c350:	bd10      	pop	{r4, pc}
 800c352:	bf00      	nop
 800c354:	2002b29c 	.word	0x2002b29c
 800c358:	2002b304 	.word	0x2002b304
 800c35c:	2002b36c 	.word	0x2002b36c

0800c360 <global_stdio_init.part.0>:
 800c360:	b510      	push	{r4, lr}
 800c362:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <global_stdio_init.part.0+0x30>)
 800c364:	4c0b      	ldr	r4, [pc, #44]	; (800c394 <global_stdio_init.part.0+0x34>)
 800c366:	4a0c      	ldr	r2, [pc, #48]	; (800c398 <global_stdio_init.part.0+0x38>)
 800c368:	601a      	str	r2, [r3, #0]
 800c36a:	4620      	mov	r0, r4
 800c36c:	2200      	movs	r2, #0
 800c36e:	2104      	movs	r1, #4
 800c370:	f7ff ff94 	bl	800c29c <std>
 800c374:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c378:	2201      	movs	r2, #1
 800c37a:	2109      	movs	r1, #9
 800c37c:	f7ff ff8e 	bl	800c29c <std>
 800c380:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c384:	2202      	movs	r2, #2
 800c386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c38a:	2112      	movs	r1, #18
 800c38c:	f7ff bf86 	b.w	800c29c <std>
 800c390:	2002b3d4 	.word	0x2002b3d4
 800c394:	2002b29c 	.word	0x2002b29c
 800c398:	0800c309 	.word	0x0800c309

0800c39c <__sfp_lock_acquire>:
 800c39c:	4801      	ldr	r0, [pc, #4]	; (800c3a4 <__sfp_lock_acquire+0x8>)
 800c39e:	f000 b974 	b.w	800c68a <__retarget_lock_acquire_recursive>
 800c3a2:	bf00      	nop
 800c3a4:	2002b3dd 	.word	0x2002b3dd

0800c3a8 <__sfp_lock_release>:
 800c3a8:	4801      	ldr	r0, [pc, #4]	; (800c3b0 <__sfp_lock_release+0x8>)
 800c3aa:	f000 b96f 	b.w	800c68c <__retarget_lock_release_recursive>
 800c3ae:	bf00      	nop
 800c3b0:	2002b3dd 	.word	0x2002b3dd

0800c3b4 <__sinit>:
 800c3b4:	b510      	push	{r4, lr}
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	f7ff fff0 	bl	800c39c <__sfp_lock_acquire>
 800c3bc:	6a23      	ldr	r3, [r4, #32]
 800c3be:	b11b      	cbz	r3, 800c3c8 <__sinit+0x14>
 800c3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3c4:	f7ff bff0 	b.w	800c3a8 <__sfp_lock_release>
 800c3c8:	4b04      	ldr	r3, [pc, #16]	; (800c3dc <__sinit+0x28>)
 800c3ca:	6223      	str	r3, [r4, #32]
 800c3cc:	4b04      	ldr	r3, [pc, #16]	; (800c3e0 <__sinit+0x2c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1f5      	bne.n	800c3c0 <__sinit+0xc>
 800c3d4:	f7ff ffc4 	bl	800c360 <global_stdio_init.part.0>
 800c3d8:	e7f2      	b.n	800c3c0 <__sinit+0xc>
 800c3da:	bf00      	nop
 800c3dc:	0800c321 	.word	0x0800c321
 800c3e0:	2002b3d4 	.word	0x2002b3d4

0800c3e4 <fiprintf>:
 800c3e4:	b40e      	push	{r1, r2, r3}
 800c3e6:	b503      	push	{r0, r1, lr}
 800c3e8:	4601      	mov	r1, r0
 800c3ea:	ab03      	add	r3, sp, #12
 800c3ec:	4805      	ldr	r0, [pc, #20]	; (800c404 <fiprintf+0x20>)
 800c3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f2:	6800      	ldr	r0, [r0, #0]
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	f000 fa81 	bl	800c8fc <_vfiprintf_r>
 800c3fa:	b002      	add	sp, #8
 800c3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c400:	b003      	add	sp, #12
 800c402:	4770      	bx	lr
 800c404:	20000078 	.word	0x20000078

0800c408 <_fwalk_sglue>:
 800c408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c40c:	4607      	mov	r7, r0
 800c40e:	4688      	mov	r8, r1
 800c410:	4614      	mov	r4, r2
 800c412:	2600      	movs	r6, #0
 800c414:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c418:	f1b9 0901 	subs.w	r9, r9, #1
 800c41c:	d505      	bpl.n	800c42a <_fwalk_sglue+0x22>
 800c41e:	6824      	ldr	r4, [r4, #0]
 800c420:	2c00      	cmp	r4, #0
 800c422:	d1f7      	bne.n	800c414 <_fwalk_sglue+0xc>
 800c424:	4630      	mov	r0, r6
 800c426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42a:	89ab      	ldrh	r3, [r5, #12]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d907      	bls.n	800c440 <_fwalk_sglue+0x38>
 800c430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c434:	3301      	adds	r3, #1
 800c436:	d003      	beq.n	800c440 <_fwalk_sglue+0x38>
 800c438:	4629      	mov	r1, r5
 800c43a:	4638      	mov	r0, r7
 800c43c:	47c0      	blx	r8
 800c43e:	4306      	orrs	r6, r0
 800c440:	3568      	adds	r5, #104	; 0x68
 800c442:	e7e9      	b.n	800c418 <_fwalk_sglue+0x10>

0800c444 <__sread>:
 800c444:	b510      	push	{r4, lr}
 800c446:	460c      	mov	r4, r1
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	f000 f8ce 	bl	800c5ec <_read_r>
 800c450:	2800      	cmp	r0, #0
 800c452:	bfab      	itete	ge
 800c454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c456:	89a3      	ldrhlt	r3, [r4, #12]
 800c458:	181b      	addge	r3, r3, r0
 800c45a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c45e:	bfac      	ite	ge
 800c460:	6563      	strge	r3, [r4, #84]	; 0x54
 800c462:	81a3      	strhlt	r3, [r4, #12]
 800c464:	bd10      	pop	{r4, pc}

0800c466 <__swrite>:
 800c466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	461f      	mov	r7, r3
 800c46c:	898b      	ldrh	r3, [r1, #12]
 800c46e:	05db      	lsls	r3, r3, #23
 800c470:	4605      	mov	r5, r0
 800c472:	460c      	mov	r4, r1
 800c474:	4616      	mov	r6, r2
 800c476:	d505      	bpl.n	800c484 <__swrite+0x1e>
 800c478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47c:	2302      	movs	r3, #2
 800c47e:	2200      	movs	r2, #0
 800c480:	f000 f8a2 	bl	800c5c8 <_lseek_r>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c48a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	4632      	mov	r2, r6
 800c492:	463b      	mov	r3, r7
 800c494:	4628      	mov	r0, r5
 800c496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c49a:	f000 b8b9 	b.w	800c610 <_write_r>

0800c49e <__sseek>:
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a6:	f000 f88f 	bl	800c5c8 <_lseek_r>
 800c4aa:	1c43      	adds	r3, r0, #1
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	bf15      	itete	ne
 800c4b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ba:	81a3      	strheq	r3, [r4, #12]
 800c4bc:	bf18      	it	ne
 800c4be:	81a3      	strhne	r3, [r4, #12]
 800c4c0:	bd10      	pop	{r4, pc}

0800c4c2 <__sclose>:
 800c4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c6:	f000 b819 	b.w	800c4fc <_close_r>

0800c4ca <memcmp>:
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	3901      	subs	r1, #1
 800c4ce:	4402      	add	r2, r0
 800c4d0:	4290      	cmp	r0, r2
 800c4d2:	d101      	bne.n	800c4d8 <memcmp+0xe>
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	e005      	b.n	800c4e4 <memcmp+0x1a>
 800c4d8:	7803      	ldrb	r3, [r0, #0]
 800c4da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c4de:	42a3      	cmp	r3, r4
 800c4e0:	d001      	beq.n	800c4e6 <memcmp+0x1c>
 800c4e2:	1b18      	subs	r0, r3, r4
 800c4e4:	bd10      	pop	{r4, pc}
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	e7f2      	b.n	800c4d0 <memcmp+0x6>

0800c4ea <memset>:
 800c4ea:	4402      	add	r2, r0
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d100      	bne.n	800c4f4 <memset+0xa>
 800c4f2:	4770      	bx	lr
 800c4f4:	f803 1b01 	strb.w	r1, [r3], #1
 800c4f8:	e7f9      	b.n	800c4ee <memset+0x4>
	...

0800c4fc <_close_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4d06      	ldr	r5, [pc, #24]	; (800c518 <_close_r+0x1c>)
 800c500:	2300      	movs	r3, #0
 800c502:	4604      	mov	r4, r0
 800c504:	4608      	mov	r0, r1
 800c506:	602b      	str	r3, [r5, #0]
 800c508:	f7f6 fd7e 	bl	8003008 <_close>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_close_r+0x1a>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_close_r+0x1a>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	2002b3d8 	.word	0x2002b3d8

0800c51c <_reclaim_reent>:
 800c51c:	4b29      	ldr	r3, [pc, #164]	; (800c5c4 <_reclaim_reent+0xa8>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4283      	cmp	r3, r0
 800c522:	b570      	push	{r4, r5, r6, lr}
 800c524:	4604      	mov	r4, r0
 800c526:	d04b      	beq.n	800c5c0 <_reclaim_reent+0xa4>
 800c528:	69c3      	ldr	r3, [r0, #28]
 800c52a:	b143      	cbz	r3, 800c53e <_reclaim_reent+0x22>
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d144      	bne.n	800c5bc <_reclaim_reent+0xa0>
 800c532:	69e3      	ldr	r3, [r4, #28]
 800c534:	6819      	ldr	r1, [r3, #0]
 800c536:	b111      	cbz	r1, 800c53e <_reclaim_reent+0x22>
 800c538:	4620      	mov	r0, r4
 800c53a:	f000 f8bd 	bl	800c6b8 <_free_r>
 800c53e:	6961      	ldr	r1, [r4, #20]
 800c540:	b111      	cbz	r1, 800c548 <_reclaim_reent+0x2c>
 800c542:	4620      	mov	r0, r4
 800c544:	f000 f8b8 	bl	800c6b8 <_free_r>
 800c548:	69e1      	ldr	r1, [r4, #28]
 800c54a:	b111      	cbz	r1, 800c552 <_reclaim_reent+0x36>
 800c54c:	4620      	mov	r0, r4
 800c54e:	f000 f8b3 	bl	800c6b8 <_free_r>
 800c552:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c554:	b111      	cbz	r1, 800c55c <_reclaim_reent+0x40>
 800c556:	4620      	mov	r0, r4
 800c558:	f000 f8ae 	bl	800c6b8 <_free_r>
 800c55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c55e:	b111      	cbz	r1, 800c566 <_reclaim_reent+0x4a>
 800c560:	4620      	mov	r0, r4
 800c562:	f000 f8a9 	bl	800c6b8 <_free_r>
 800c566:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c568:	b111      	cbz	r1, 800c570 <_reclaim_reent+0x54>
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 f8a4 	bl	800c6b8 <_free_r>
 800c570:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c572:	b111      	cbz	r1, 800c57a <_reclaim_reent+0x5e>
 800c574:	4620      	mov	r0, r4
 800c576:	f000 f89f 	bl	800c6b8 <_free_r>
 800c57a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c57c:	b111      	cbz	r1, 800c584 <_reclaim_reent+0x68>
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 f89a 	bl	800c6b8 <_free_r>
 800c584:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c586:	b111      	cbz	r1, 800c58e <_reclaim_reent+0x72>
 800c588:	4620      	mov	r0, r4
 800c58a:	f000 f895 	bl	800c6b8 <_free_r>
 800c58e:	6a23      	ldr	r3, [r4, #32]
 800c590:	b1b3      	cbz	r3, 800c5c0 <_reclaim_reent+0xa4>
 800c592:	4620      	mov	r0, r4
 800c594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c598:	4718      	bx	r3
 800c59a:	5949      	ldr	r1, [r1, r5]
 800c59c:	b941      	cbnz	r1, 800c5b0 <_reclaim_reent+0x94>
 800c59e:	3504      	adds	r5, #4
 800c5a0:	69e3      	ldr	r3, [r4, #28]
 800c5a2:	2d80      	cmp	r5, #128	; 0x80
 800c5a4:	68d9      	ldr	r1, [r3, #12]
 800c5a6:	d1f8      	bne.n	800c59a <_reclaim_reent+0x7e>
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 f885 	bl	800c6b8 <_free_r>
 800c5ae:	e7c0      	b.n	800c532 <_reclaim_reent+0x16>
 800c5b0:	680e      	ldr	r6, [r1, #0]
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 f880 	bl	800c6b8 <_free_r>
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	e7ef      	b.n	800c59c <_reclaim_reent+0x80>
 800c5bc:	2500      	movs	r5, #0
 800c5be:	e7ef      	b.n	800c5a0 <_reclaim_reent+0x84>
 800c5c0:	bd70      	pop	{r4, r5, r6, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20000078 	.word	0x20000078

0800c5c8 <_lseek_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d07      	ldr	r5, [pc, #28]	; (800c5e8 <_lseek_r+0x20>)
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	602a      	str	r2, [r5, #0]
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	f7f6 fd3d 	bl	8003056 <_lseek>
 800c5dc:	1c43      	adds	r3, r0, #1
 800c5de:	d102      	bne.n	800c5e6 <_lseek_r+0x1e>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	b103      	cbz	r3, 800c5e6 <_lseek_r+0x1e>
 800c5e4:	6023      	str	r3, [r4, #0]
 800c5e6:	bd38      	pop	{r3, r4, r5, pc}
 800c5e8:	2002b3d8 	.word	0x2002b3d8

0800c5ec <_read_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d07      	ldr	r5, [pc, #28]	; (800c60c <_read_r+0x20>)
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	4608      	mov	r0, r1
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	602a      	str	r2, [r5, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	f7f6 fccb 	bl	8002f96 <_read>
 800c600:	1c43      	adds	r3, r0, #1
 800c602:	d102      	bne.n	800c60a <_read_r+0x1e>
 800c604:	682b      	ldr	r3, [r5, #0]
 800c606:	b103      	cbz	r3, 800c60a <_read_r+0x1e>
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	bd38      	pop	{r3, r4, r5, pc}
 800c60c:	2002b3d8 	.word	0x2002b3d8

0800c610 <_write_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4d07      	ldr	r5, [pc, #28]	; (800c630 <_write_r+0x20>)
 800c614:	4604      	mov	r4, r0
 800c616:	4608      	mov	r0, r1
 800c618:	4611      	mov	r1, r2
 800c61a:	2200      	movs	r2, #0
 800c61c:	602a      	str	r2, [r5, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	f7f6 fcd6 	bl	8002fd0 <_write>
 800c624:	1c43      	adds	r3, r0, #1
 800c626:	d102      	bne.n	800c62e <_write_r+0x1e>
 800c628:	682b      	ldr	r3, [r5, #0]
 800c62a:	b103      	cbz	r3, 800c62e <_write_r+0x1e>
 800c62c:	6023      	str	r3, [r4, #0]
 800c62e:	bd38      	pop	{r3, r4, r5, pc}
 800c630:	2002b3d8 	.word	0x2002b3d8

0800c634 <__errno>:
 800c634:	4b01      	ldr	r3, [pc, #4]	; (800c63c <__errno+0x8>)
 800c636:	6818      	ldr	r0, [r3, #0]
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	20000078 	.word	0x20000078

0800c640 <__libc_init_array>:
 800c640:	b570      	push	{r4, r5, r6, lr}
 800c642:	4d0d      	ldr	r5, [pc, #52]	; (800c678 <__libc_init_array+0x38>)
 800c644:	4c0d      	ldr	r4, [pc, #52]	; (800c67c <__libc_init_array+0x3c>)
 800c646:	1b64      	subs	r4, r4, r5
 800c648:	10a4      	asrs	r4, r4, #2
 800c64a:	2600      	movs	r6, #0
 800c64c:	42a6      	cmp	r6, r4
 800c64e:	d109      	bne.n	800c664 <__libc_init_array+0x24>
 800c650:	4d0b      	ldr	r5, [pc, #44]	; (800c680 <__libc_init_array+0x40>)
 800c652:	4c0c      	ldr	r4, [pc, #48]	; (800c684 <__libc_init_array+0x44>)
 800c654:	f000 fe18 	bl	800d288 <_init>
 800c658:	1b64      	subs	r4, r4, r5
 800c65a:	10a4      	asrs	r4, r4, #2
 800c65c:	2600      	movs	r6, #0
 800c65e:	42a6      	cmp	r6, r4
 800c660:	d105      	bne.n	800c66e <__libc_init_array+0x2e>
 800c662:	bd70      	pop	{r4, r5, r6, pc}
 800c664:	f855 3b04 	ldr.w	r3, [r5], #4
 800c668:	4798      	blx	r3
 800c66a:	3601      	adds	r6, #1
 800c66c:	e7ee      	b.n	800c64c <__libc_init_array+0xc>
 800c66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c672:	4798      	blx	r3
 800c674:	3601      	adds	r6, #1
 800c676:	e7f2      	b.n	800c65e <__libc_init_array+0x1e>
 800c678:	0800ec7c 	.word	0x0800ec7c
 800c67c:	0800ec7c 	.word	0x0800ec7c
 800c680:	0800ec7c 	.word	0x0800ec7c
 800c684:	0800ec80 	.word	0x0800ec80

0800c688 <__retarget_lock_init_recursive>:
 800c688:	4770      	bx	lr

0800c68a <__retarget_lock_acquire_recursive>:
 800c68a:	4770      	bx	lr

0800c68c <__retarget_lock_release_recursive>:
 800c68c:	4770      	bx	lr

0800c68e <memcpy>:
 800c68e:	440a      	add	r2, r1
 800c690:	4291      	cmp	r1, r2
 800c692:	f100 33ff 	add.w	r3, r0, #4294967295
 800c696:	d100      	bne.n	800c69a <memcpy+0xc>
 800c698:	4770      	bx	lr
 800c69a:	b510      	push	{r4, lr}
 800c69c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6a4:	4291      	cmp	r1, r2
 800c6a6:	d1f9      	bne.n	800c69c <memcpy+0xe>
 800c6a8:	bd10      	pop	{r4, pc}

0800c6aa <abort>:
 800c6aa:	b508      	push	{r3, lr}
 800c6ac:	2006      	movs	r0, #6
 800c6ae:	f000 fd3b 	bl	800d128 <raise>
 800c6b2:	2001      	movs	r0, #1
 800c6b4:	f7f6 fc65 	bl	8002f82 <_exit>

0800c6b8 <_free_r>:
 800c6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6ba:	2900      	cmp	r1, #0
 800c6bc:	d044      	beq.n	800c748 <_free_r+0x90>
 800c6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6c2:	9001      	str	r0, [sp, #4]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ca:	bfb8      	it	lt
 800c6cc:	18e4      	addlt	r4, r4, r3
 800c6ce:	f000 f8df 	bl	800c890 <__malloc_lock>
 800c6d2:	4a1e      	ldr	r2, [pc, #120]	; (800c74c <_free_r+0x94>)
 800c6d4:	9801      	ldr	r0, [sp, #4]
 800c6d6:	6813      	ldr	r3, [r2, #0]
 800c6d8:	b933      	cbnz	r3, 800c6e8 <_free_r+0x30>
 800c6da:	6063      	str	r3, [r4, #4]
 800c6dc:	6014      	str	r4, [r2, #0]
 800c6de:	b003      	add	sp, #12
 800c6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6e4:	f000 b8da 	b.w	800c89c <__malloc_unlock>
 800c6e8:	42a3      	cmp	r3, r4
 800c6ea:	d908      	bls.n	800c6fe <_free_r+0x46>
 800c6ec:	6825      	ldr	r5, [r4, #0]
 800c6ee:	1961      	adds	r1, r4, r5
 800c6f0:	428b      	cmp	r3, r1
 800c6f2:	bf01      	itttt	eq
 800c6f4:	6819      	ldreq	r1, [r3, #0]
 800c6f6:	685b      	ldreq	r3, [r3, #4]
 800c6f8:	1949      	addeq	r1, r1, r5
 800c6fa:	6021      	streq	r1, [r4, #0]
 800c6fc:	e7ed      	b.n	800c6da <_free_r+0x22>
 800c6fe:	461a      	mov	r2, r3
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	b10b      	cbz	r3, 800c708 <_free_r+0x50>
 800c704:	42a3      	cmp	r3, r4
 800c706:	d9fa      	bls.n	800c6fe <_free_r+0x46>
 800c708:	6811      	ldr	r1, [r2, #0]
 800c70a:	1855      	adds	r5, r2, r1
 800c70c:	42a5      	cmp	r5, r4
 800c70e:	d10b      	bne.n	800c728 <_free_r+0x70>
 800c710:	6824      	ldr	r4, [r4, #0]
 800c712:	4421      	add	r1, r4
 800c714:	1854      	adds	r4, r2, r1
 800c716:	42a3      	cmp	r3, r4
 800c718:	6011      	str	r1, [r2, #0]
 800c71a:	d1e0      	bne.n	800c6de <_free_r+0x26>
 800c71c:	681c      	ldr	r4, [r3, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	6053      	str	r3, [r2, #4]
 800c722:	440c      	add	r4, r1
 800c724:	6014      	str	r4, [r2, #0]
 800c726:	e7da      	b.n	800c6de <_free_r+0x26>
 800c728:	d902      	bls.n	800c730 <_free_r+0x78>
 800c72a:	230c      	movs	r3, #12
 800c72c:	6003      	str	r3, [r0, #0]
 800c72e:	e7d6      	b.n	800c6de <_free_r+0x26>
 800c730:	6825      	ldr	r5, [r4, #0]
 800c732:	1961      	adds	r1, r4, r5
 800c734:	428b      	cmp	r3, r1
 800c736:	bf04      	itt	eq
 800c738:	6819      	ldreq	r1, [r3, #0]
 800c73a:	685b      	ldreq	r3, [r3, #4]
 800c73c:	6063      	str	r3, [r4, #4]
 800c73e:	bf04      	itt	eq
 800c740:	1949      	addeq	r1, r1, r5
 800c742:	6021      	streq	r1, [r4, #0]
 800c744:	6054      	str	r4, [r2, #4]
 800c746:	e7ca      	b.n	800c6de <_free_r+0x26>
 800c748:	b003      	add	sp, #12
 800c74a:	bd30      	pop	{r4, r5, pc}
 800c74c:	2002b3e0 	.word	0x2002b3e0

0800c750 <sbrk_aligned>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4e0e      	ldr	r6, [pc, #56]	; (800c78c <sbrk_aligned+0x3c>)
 800c754:	460c      	mov	r4, r1
 800c756:	6831      	ldr	r1, [r6, #0]
 800c758:	4605      	mov	r5, r0
 800c75a:	b911      	cbnz	r1, 800c762 <sbrk_aligned+0x12>
 800c75c:	f000 fd00 	bl	800d160 <_sbrk_r>
 800c760:	6030      	str	r0, [r6, #0]
 800c762:	4621      	mov	r1, r4
 800c764:	4628      	mov	r0, r5
 800c766:	f000 fcfb 	bl	800d160 <_sbrk_r>
 800c76a:	1c43      	adds	r3, r0, #1
 800c76c:	d00a      	beq.n	800c784 <sbrk_aligned+0x34>
 800c76e:	1cc4      	adds	r4, r0, #3
 800c770:	f024 0403 	bic.w	r4, r4, #3
 800c774:	42a0      	cmp	r0, r4
 800c776:	d007      	beq.n	800c788 <sbrk_aligned+0x38>
 800c778:	1a21      	subs	r1, r4, r0
 800c77a:	4628      	mov	r0, r5
 800c77c:	f000 fcf0 	bl	800d160 <_sbrk_r>
 800c780:	3001      	adds	r0, #1
 800c782:	d101      	bne.n	800c788 <sbrk_aligned+0x38>
 800c784:	f04f 34ff 	mov.w	r4, #4294967295
 800c788:	4620      	mov	r0, r4
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
 800c78c:	2002b3e4 	.word	0x2002b3e4

0800c790 <_malloc_r>:
 800c790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c794:	1ccd      	adds	r5, r1, #3
 800c796:	f025 0503 	bic.w	r5, r5, #3
 800c79a:	3508      	adds	r5, #8
 800c79c:	2d0c      	cmp	r5, #12
 800c79e:	bf38      	it	cc
 800c7a0:	250c      	movcc	r5, #12
 800c7a2:	2d00      	cmp	r5, #0
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	db01      	blt.n	800c7ac <_malloc_r+0x1c>
 800c7a8:	42a9      	cmp	r1, r5
 800c7aa:	d905      	bls.n	800c7b8 <_malloc_r+0x28>
 800c7ac:	230c      	movs	r3, #12
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7b8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c88c <_malloc_r+0xfc>
 800c7bc:	f000 f868 	bl	800c890 <__malloc_lock>
 800c7c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c4:	461c      	mov	r4, r3
 800c7c6:	bb5c      	cbnz	r4, 800c820 <_malloc_r+0x90>
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	f7ff ffc0 	bl	800c750 <sbrk_aligned>
 800c7d0:	1c43      	adds	r3, r0, #1
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	d155      	bne.n	800c882 <_malloc_r+0xf2>
 800c7d6:	f8d8 4000 	ldr.w	r4, [r8]
 800c7da:	4626      	mov	r6, r4
 800c7dc:	2e00      	cmp	r6, #0
 800c7de:	d145      	bne.n	800c86c <_malloc_r+0xdc>
 800c7e0:	2c00      	cmp	r4, #0
 800c7e2:	d048      	beq.n	800c876 <_malloc_r+0xe6>
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	4631      	mov	r1, r6
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	eb04 0903 	add.w	r9, r4, r3
 800c7ee:	f000 fcb7 	bl	800d160 <_sbrk_r>
 800c7f2:	4581      	cmp	r9, r0
 800c7f4:	d13f      	bne.n	800c876 <_malloc_r+0xe6>
 800c7f6:	6821      	ldr	r1, [r4, #0]
 800c7f8:	1a6d      	subs	r5, r5, r1
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7ff ffa7 	bl	800c750 <sbrk_aligned>
 800c802:	3001      	adds	r0, #1
 800c804:	d037      	beq.n	800c876 <_malloc_r+0xe6>
 800c806:	6823      	ldr	r3, [r4, #0]
 800c808:	442b      	add	r3, r5
 800c80a:	6023      	str	r3, [r4, #0]
 800c80c:	f8d8 3000 	ldr.w	r3, [r8]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d038      	beq.n	800c886 <_malloc_r+0xf6>
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	42a2      	cmp	r2, r4
 800c818:	d12b      	bne.n	800c872 <_malloc_r+0xe2>
 800c81a:	2200      	movs	r2, #0
 800c81c:	605a      	str	r2, [r3, #4]
 800c81e:	e00f      	b.n	800c840 <_malloc_r+0xb0>
 800c820:	6822      	ldr	r2, [r4, #0]
 800c822:	1b52      	subs	r2, r2, r5
 800c824:	d41f      	bmi.n	800c866 <_malloc_r+0xd6>
 800c826:	2a0b      	cmp	r2, #11
 800c828:	d917      	bls.n	800c85a <_malloc_r+0xca>
 800c82a:	1961      	adds	r1, r4, r5
 800c82c:	42a3      	cmp	r3, r4
 800c82e:	6025      	str	r5, [r4, #0]
 800c830:	bf18      	it	ne
 800c832:	6059      	strne	r1, [r3, #4]
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	bf08      	it	eq
 800c838:	f8c8 1000 	streq.w	r1, [r8]
 800c83c:	5162      	str	r2, [r4, r5]
 800c83e:	604b      	str	r3, [r1, #4]
 800c840:	4638      	mov	r0, r7
 800c842:	f104 060b 	add.w	r6, r4, #11
 800c846:	f000 f829 	bl	800c89c <__malloc_unlock>
 800c84a:	f026 0607 	bic.w	r6, r6, #7
 800c84e:	1d23      	adds	r3, r4, #4
 800c850:	1af2      	subs	r2, r6, r3
 800c852:	d0ae      	beq.n	800c7b2 <_malloc_r+0x22>
 800c854:	1b9b      	subs	r3, r3, r6
 800c856:	50a3      	str	r3, [r4, r2]
 800c858:	e7ab      	b.n	800c7b2 <_malloc_r+0x22>
 800c85a:	42a3      	cmp	r3, r4
 800c85c:	6862      	ldr	r2, [r4, #4]
 800c85e:	d1dd      	bne.n	800c81c <_malloc_r+0x8c>
 800c860:	f8c8 2000 	str.w	r2, [r8]
 800c864:	e7ec      	b.n	800c840 <_malloc_r+0xb0>
 800c866:	4623      	mov	r3, r4
 800c868:	6864      	ldr	r4, [r4, #4]
 800c86a:	e7ac      	b.n	800c7c6 <_malloc_r+0x36>
 800c86c:	4634      	mov	r4, r6
 800c86e:	6876      	ldr	r6, [r6, #4]
 800c870:	e7b4      	b.n	800c7dc <_malloc_r+0x4c>
 800c872:	4613      	mov	r3, r2
 800c874:	e7cc      	b.n	800c810 <_malloc_r+0x80>
 800c876:	230c      	movs	r3, #12
 800c878:	603b      	str	r3, [r7, #0]
 800c87a:	4638      	mov	r0, r7
 800c87c:	f000 f80e 	bl	800c89c <__malloc_unlock>
 800c880:	e797      	b.n	800c7b2 <_malloc_r+0x22>
 800c882:	6025      	str	r5, [r4, #0]
 800c884:	e7dc      	b.n	800c840 <_malloc_r+0xb0>
 800c886:	605b      	str	r3, [r3, #4]
 800c888:	deff      	udf	#255	; 0xff
 800c88a:	bf00      	nop
 800c88c:	2002b3e0 	.word	0x2002b3e0

0800c890 <__malloc_lock>:
 800c890:	4801      	ldr	r0, [pc, #4]	; (800c898 <__malloc_lock+0x8>)
 800c892:	f7ff befa 	b.w	800c68a <__retarget_lock_acquire_recursive>
 800c896:	bf00      	nop
 800c898:	2002b3dc 	.word	0x2002b3dc

0800c89c <__malloc_unlock>:
 800c89c:	4801      	ldr	r0, [pc, #4]	; (800c8a4 <__malloc_unlock+0x8>)
 800c89e:	f7ff bef5 	b.w	800c68c <__retarget_lock_release_recursive>
 800c8a2:	bf00      	nop
 800c8a4:	2002b3dc 	.word	0x2002b3dc

0800c8a8 <__sfputc_r>:
 800c8a8:	6893      	ldr	r3, [r2, #8]
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	b410      	push	{r4}
 800c8b0:	6093      	str	r3, [r2, #8]
 800c8b2:	da08      	bge.n	800c8c6 <__sfputc_r+0x1e>
 800c8b4:	6994      	ldr	r4, [r2, #24]
 800c8b6:	42a3      	cmp	r3, r4
 800c8b8:	db01      	blt.n	800c8be <__sfputc_r+0x16>
 800c8ba:	290a      	cmp	r1, #10
 800c8bc:	d103      	bne.n	800c8c6 <__sfputc_r+0x1e>
 800c8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c2:	f000 bb73 	b.w	800cfac <__swbuf_r>
 800c8c6:	6813      	ldr	r3, [r2, #0]
 800c8c8:	1c58      	adds	r0, r3, #1
 800c8ca:	6010      	str	r0, [r2, #0]
 800c8cc:	7019      	strb	r1, [r3, #0]
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8d4:	4770      	bx	lr

0800c8d6 <__sfputs_r>:
 800c8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d8:	4606      	mov	r6, r0
 800c8da:	460f      	mov	r7, r1
 800c8dc:	4614      	mov	r4, r2
 800c8de:	18d5      	adds	r5, r2, r3
 800c8e0:	42ac      	cmp	r4, r5
 800c8e2:	d101      	bne.n	800c8e8 <__sfputs_r+0x12>
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	e007      	b.n	800c8f8 <__sfputs_r+0x22>
 800c8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8ec:	463a      	mov	r2, r7
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	f7ff ffda 	bl	800c8a8 <__sfputc_r>
 800c8f4:	1c43      	adds	r3, r0, #1
 800c8f6:	d1f3      	bne.n	800c8e0 <__sfputs_r+0xa>
 800c8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8fc <_vfiprintf_r>:
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	460d      	mov	r5, r1
 800c902:	b09d      	sub	sp, #116	; 0x74
 800c904:	4614      	mov	r4, r2
 800c906:	4698      	mov	r8, r3
 800c908:	4606      	mov	r6, r0
 800c90a:	b118      	cbz	r0, 800c914 <_vfiprintf_r+0x18>
 800c90c:	6a03      	ldr	r3, [r0, #32]
 800c90e:	b90b      	cbnz	r3, 800c914 <_vfiprintf_r+0x18>
 800c910:	f7ff fd50 	bl	800c3b4 <__sinit>
 800c914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c916:	07d9      	lsls	r1, r3, #31
 800c918:	d405      	bmi.n	800c926 <_vfiprintf_r+0x2a>
 800c91a:	89ab      	ldrh	r3, [r5, #12]
 800c91c:	059a      	lsls	r2, r3, #22
 800c91e:	d402      	bmi.n	800c926 <_vfiprintf_r+0x2a>
 800c920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c922:	f7ff feb2 	bl	800c68a <__retarget_lock_acquire_recursive>
 800c926:	89ab      	ldrh	r3, [r5, #12]
 800c928:	071b      	lsls	r3, r3, #28
 800c92a:	d501      	bpl.n	800c930 <_vfiprintf_r+0x34>
 800c92c:	692b      	ldr	r3, [r5, #16]
 800c92e:	b99b      	cbnz	r3, 800c958 <_vfiprintf_r+0x5c>
 800c930:	4629      	mov	r1, r5
 800c932:	4630      	mov	r0, r6
 800c934:	f000 fb78 	bl	800d028 <__swsetup_r>
 800c938:	b170      	cbz	r0, 800c958 <_vfiprintf_r+0x5c>
 800c93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c93c:	07dc      	lsls	r4, r3, #31
 800c93e:	d504      	bpl.n	800c94a <_vfiprintf_r+0x4e>
 800c940:	f04f 30ff 	mov.w	r0, #4294967295
 800c944:	b01d      	add	sp, #116	; 0x74
 800c946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c94a:	89ab      	ldrh	r3, [r5, #12]
 800c94c:	0598      	lsls	r0, r3, #22
 800c94e:	d4f7      	bmi.n	800c940 <_vfiprintf_r+0x44>
 800c950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c952:	f7ff fe9b 	bl	800c68c <__retarget_lock_release_recursive>
 800c956:	e7f3      	b.n	800c940 <_vfiprintf_r+0x44>
 800c958:	2300      	movs	r3, #0
 800c95a:	9309      	str	r3, [sp, #36]	; 0x24
 800c95c:	2320      	movs	r3, #32
 800c95e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c962:	f8cd 800c 	str.w	r8, [sp, #12]
 800c966:	2330      	movs	r3, #48	; 0x30
 800c968:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cb1c <_vfiprintf_r+0x220>
 800c96c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c970:	f04f 0901 	mov.w	r9, #1
 800c974:	4623      	mov	r3, r4
 800c976:	469a      	mov	sl, r3
 800c978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c97c:	b10a      	cbz	r2, 800c982 <_vfiprintf_r+0x86>
 800c97e:	2a25      	cmp	r2, #37	; 0x25
 800c980:	d1f9      	bne.n	800c976 <_vfiprintf_r+0x7a>
 800c982:	ebba 0b04 	subs.w	fp, sl, r4
 800c986:	d00b      	beq.n	800c9a0 <_vfiprintf_r+0xa4>
 800c988:	465b      	mov	r3, fp
 800c98a:	4622      	mov	r2, r4
 800c98c:	4629      	mov	r1, r5
 800c98e:	4630      	mov	r0, r6
 800c990:	f7ff ffa1 	bl	800c8d6 <__sfputs_r>
 800c994:	3001      	adds	r0, #1
 800c996:	f000 80a9 	beq.w	800caec <_vfiprintf_r+0x1f0>
 800c99a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c99c:	445a      	add	r2, fp
 800c99e:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f000 80a1 	beq.w	800caec <_vfiprintf_r+0x1f0>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9b4:	f10a 0a01 	add.w	sl, sl, #1
 800c9b8:	9304      	str	r3, [sp, #16]
 800c9ba:	9307      	str	r3, [sp, #28]
 800c9bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9c0:	931a      	str	r3, [sp, #104]	; 0x68
 800c9c2:	4654      	mov	r4, sl
 800c9c4:	2205      	movs	r2, #5
 800c9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ca:	4854      	ldr	r0, [pc, #336]	; (800cb1c <_vfiprintf_r+0x220>)
 800c9cc:	f7f3 fc60 	bl	8000290 <memchr>
 800c9d0:	9a04      	ldr	r2, [sp, #16]
 800c9d2:	b9d8      	cbnz	r0, 800ca0c <_vfiprintf_r+0x110>
 800c9d4:	06d1      	lsls	r1, r2, #27
 800c9d6:	bf44      	itt	mi
 800c9d8:	2320      	movmi	r3, #32
 800c9da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9de:	0713      	lsls	r3, r2, #28
 800c9e0:	bf44      	itt	mi
 800c9e2:	232b      	movmi	r3, #43	; 0x2b
 800c9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ee:	d015      	beq.n	800ca1c <_vfiprintf_r+0x120>
 800c9f0:	9a07      	ldr	r2, [sp, #28]
 800c9f2:	4654      	mov	r4, sl
 800c9f4:	2000      	movs	r0, #0
 800c9f6:	f04f 0c0a 	mov.w	ip, #10
 800c9fa:	4621      	mov	r1, r4
 800c9fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca00:	3b30      	subs	r3, #48	; 0x30
 800ca02:	2b09      	cmp	r3, #9
 800ca04:	d94d      	bls.n	800caa2 <_vfiprintf_r+0x1a6>
 800ca06:	b1b0      	cbz	r0, 800ca36 <_vfiprintf_r+0x13a>
 800ca08:	9207      	str	r2, [sp, #28]
 800ca0a:	e014      	b.n	800ca36 <_vfiprintf_r+0x13a>
 800ca0c:	eba0 0308 	sub.w	r3, r0, r8
 800ca10:	fa09 f303 	lsl.w	r3, r9, r3
 800ca14:	4313      	orrs	r3, r2
 800ca16:	9304      	str	r3, [sp, #16]
 800ca18:	46a2      	mov	sl, r4
 800ca1a:	e7d2      	b.n	800c9c2 <_vfiprintf_r+0xc6>
 800ca1c:	9b03      	ldr	r3, [sp, #12]
 800ca1e:	1d19      	adds	r1, r3, #4
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	9103      	str	r1, [sp, #12]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	bfbb      	ittet	lt
 800ca28:	425b      	neglt	r3, r3
 800ca2a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca2e:	9307      	strge	r3, [sp, #28]
 800ca30:	9307      	strlt	r3, [sp, #28]
 800ca32:	bfb8      	it	lt
 800ca34:	9204      	strlt	r2, [sp, #16]
 800ca36:	7823      	ldrb	r3, [r4, #0]
 800ca38:	2b2e      	cmp	r3, #46	; 0x2e
 800ca3a:	d10c      	bne.n	800ca56 <_vfiprintf_r+0x15a>
 800ca3c:	7863      	ldrb	r3, [r4, #1]
 800ca3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca40:	d134      	bne.n	800caac <_vfiprintf_r+0x1b0>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	1d1a      	adds	r2, r3, #4
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	9203      	str	r2, [sp, #12]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	bfb8      	it	lt
 800ca4e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca52:	3402      	adds	r4, #2
 800ca54:	9305      	str	r3, [sp, #20]
 800ca56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cb2c <_vfiprintf_r+0x230>
 800ca5a:	7821      	ldrb	r1, [r4, #0]
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	4650      	mov	r0, sl
 800ca60:	f7f3 fc16 	bl	8000290 <memchr>
 800ca64:	b138      	cbz	r0, 800ca76 <_vfiprintf_r+0x17a>
 800ca66:	9b04      	ldr	r3, [sp, #16]
 800ca68:	eba0 000a 	sub.w	r0, r0, sl
 800ca6c:	2240      	movs	r2, #64	; 0x40
 800ca6e:	4082      	lsls	r2, r0
 800ca70:	4313      	orrs	r3, r2
 800ca72:	3401      	adds	r4, #1
 800ca74:	9304      	str	r3, [sp, #16]
 800ca76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca7a:	4829      	ldr	r0, [pc, #164]	; (800cb20 <_vfiprintf_r+0x224>)
 800ca7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca80:	2206      	movs	r2, #6
 800ca82:	f7f3 fc05 	bl	8000290 <memchr>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	d03f      	beq.n	800cb0a <_vfiprintf_r+0x20e>
 800ca8a:	4b26      	ldr	r3, [pc, #152]	; (800cb24 <_vfiprintf_r+0x228>)
 800ca8c:	bb1b      	cbnz	r3, 800cad6 <_vfiprintf_r+0x1da>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	3307      	adds	r3, #7
 800ca92:	f023 0307 	bic.w	r3, r3, #7
 800ca96:	3308      	adds	r3, #8
 800ca98:	9303      	str	r3, [sp, #12]
 800ca9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca9c:	443b      	add	r3, r7
 800ca9e:	9309      	str	r3, [sp, #36]	; 0x24
 800caa0:	e768      	b.n	800c974 <_vfiprintf_r+0x78>
 800caa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800caa6:	460c      	mov	r4, r1
 800caa8:	2001      	movs	r0, #1
 800caaa:	e7a6      	b.n	800c9fa <_vfiprintf_r+0xfe>
 800caac:	2300      	movs	r3, #0
 800caae:	3401      	adds	r4, #1
 800cab0:	9305      	str	r3, [sp, #20]
 800cab2:	4619      	mov	r1, r3
 800cab4:	f04f 0c0a 	mov.w	ip, #10
 800cab8:	4620      	mov	r0, r4
 800caba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cabe:	3a30      	subs	r2, #48	; 0x30
 800cac0:	2a09      	cmp	r2, #9
 800cac2:	d903      	bls.n	800cacc <_vfiprintf_r+0x1d0>
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d0c6      	beq.n	800ca56 <_vfiprintf_r+0x15a>
 800cac8:	9105      	str	r1, [sp, #20]
 800caca:	e7c4      	b.n	800ca56 <_vfiprintf_r+0x15a>
 800cacc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cad0:	4604      	mov	r4, r0
 800cad2:	2301      	movs	r3, #1
 800cad4:	e7f0      	b.n	800cab8 <_vfiprintf_r+0x1bc>
 800cad6:	ab03      	add	r3, sp, #12
 800cad8:	9300      	str	r3, [sp, #0]
 800cada:	462a      	mov	r2, r5
 800cadc:	4b12      	ldr	r3, [pc, #72]	; (800cb28 <_vfiprintf_r+0x22c>)
 800cade:	a904      	add	r1, sp, #16
 800cae0:	4630      	mov	r0, r6
 800cae2:	f3af 8000 	nop.w
 800cae6:	4607      	mov	r7, r0
 800cae8:	1c78      	adds	r0, r7, #1
 800caea:	d1d6      	bne.n	800ca9a <_vfiprintf_r+0x19e>
 800caec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caee:	07d9      	lsls	r1, r3, #31
 800caf0:	d405      	bmi.n	800cafe <_vfiprintf_r+0x202>
 800caf2:	89ab      	ldrh	r3, [r5, #12]
 800caf4:	059a      	lsls	r2, r3, #22
 800caf6:	d402      	bmi.n	800cafe <_vfiprintf_r+0x202>
 800caf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cafa:	f7ff fdc7 	bl	800c68c <__retarget_lock_release_recursive>
 800cafe:	89ab      	ldrh	r3, [r5, #12]
 800cb00:	065b      	lsls	r3, r3, #25
 800cb02:	f53f af1d 	bmi.w	800c940 <_vfiprintf_r+0x44>
 800cb06:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb08:	e71c      	b.n	800c944 <_vfiprintf_r+0x48>
 800cb0a:	ab03      	add	r3, sp, #12
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	462a      	mov	r2, r5
 800cb10:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <_vfiprintf_r+0x22c>)
 800cb12:	a904      	add	r1, sp, #16
 800cb14:	4630      	mov	r0, r6
 800cb16:	f000 f879 	bl	800cc0c <_printf_i>
 800cb1a:	e7e4      	b.n	800cae6 <_vfiprintf_r+0x1ea>
 800cb1c:	0800ec40 	.word	0x0800ec40
 800cb20:	0800ec4a 	.word	0x0800ec4a
 800cb24:	00000000 	.word	0x00000000
 800cb28:	0800c8d7 	.word	0x0800c8d7
 800cb2c:	0800ec46 	.word	0x0800ec46

0800cb30 <_printf_common>:
 800cb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb34:	4616      	mov	r6, r2
 800cb36:	4699      	mov	r9, r3
 800cb38:	688a      	ldr	r2, [r1, #8]
 800cb3a:	690b      	ldr	r3, [r1, #16]
 800cb3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	bfb8      	it	lt
 800cb44:	4613      	movlt	r3, r2
 800cb46:	6033      	str	r3, [r6, #0]
 800cb48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	460c      	mov	r4, r1
 800cb50:	b10a      	cbz	r2, 800cb56 <_printf_common+0x26>
 800cb52:	3301      	adds	r3, #1
 800cb54:	6033      	str	r3, [r6, #0]
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	0699      	lsls	r1, r3, #26
 800cb5a:	bf42      	ittt	mi
 800cb5c:	6833      	ldrmi	r3, [r6, #0]
 800cb5e:	3302      	addmi	r3, #2
 800cb60:	6033      	strmi	r3, [r6, #0]
 800cb62:	6825      	ldr	r5, [r4, #0]
 800cb64:	f015 0506 	ands.w	r5, r5, #6
 800cb68:	d106      	bne.n	800cb78 <_printf_common+0x48>
 800cb6a:	f104 0a19 	add.w	sl, r4, #25
 800cb6e:	68e3      	ldr	r3, [r4, #12]
 800cb70:	6832      	ldr	r2, [r6, #0]
 800cb72:	1a9b      	subs	r3, r3, r2
 800cb74:	42ab      	cmp	r3, r5
 800cb76:	dc26      	bgt.n	800cbc6 <_printf_common+0x96>
 800cb78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb7c:	1e13      	subs	r3, r2, #0
 800cb7e:	6822      	ldr	r2, [r4, #0]
 800cb80:	bf18      	it	ne
 800cb82:	2301      	movne	r3, #1
 800cb84:	0692      	lsls	r2, r2, #26
 800cb86:	d42b      	bmi.n	800cbe0 <_printf_common+0xb0>
 800cb88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	4638      	mov	r0, r7
 800cb90:	47c0      	blx	r8
 800cb92:	3001      	adds	r0, #1
 800cb94:	d01e      	beq.n	800cbd4 <_printf_common+0xa4>
 800cb96:	6823      	ldr	r3, [r4, #0]
 800cb98:	6922      	ldr	r2, [r4, #16]
 800cb9a:	f003 0306 	and.w	r3, r3, #6
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	bf02      	ittt	eq
 800cba2:	68e5      	ldreq	r5, [r4, #12]
 800cba4:	6833      	ldreq	r3, [r6, #0]
 800cba6:	1aed      	subeq	r5, r5, r3
 800cba8:	68a3      	ldr	r3, [r4, #8]
 800cbaa:	bf0c      	ite	eq
 800cbac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbb0:	2500      	movne	r5, #0
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	bfc4      	itt	gt
 800cbb6:	1a9b      	subgt	r3, r3, r2
 800cbb8:	18ed      	addgt	r5, r5, r3
 800cbba:	2600      	movs	r6, #0
 800cbbc:	341a      	adds	r4, #26
 800cbbe:	42b5      	cmp	r5, r6
 800cbc0:	d11a      	bne.n	800cbf8 <_printf_common+0xc8>
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	e008      	b.n	800cbd8 <_printf_common+0xa8>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	4652      	mov	r2, sl
 800cbca:	4649      	mov	r1, r9
 800cbcc:	4638      	mov	r0, r7
 800cbce:	47c0      	blx	r8
 800cbd0:	3001      	adds	r0, #1
 800cbd2:	d103      	bne.n	800cbdc <_printf_common+0xac>
 800cbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbdc:	3501      	adds	r5, #1
 800cbde:	e7c6      	b.n	800cb6e <_printf_common+0x3e>
 800cbe0:	18e1      	adds	r1, r4, r3
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	2030      	movs	r0, #48	; 0x30
 800cbe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbea:	4422      	add	r2, r4
 800cbec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbf4:	3302      	adds	r3, #2
 800cbf6:	e7c7      	b.n	800cb88 <_printf_common+0x58>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	4622      	mov	r2, r4
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	4638      	mov	r0, r7
 800cc00:	47c0      	blx	r8
 800cc02:	3001      	adds	r0, #1
 800cc04:	d0e6      	beq.n	800cbd4 <_printf_common+0xa4>
 800cc06:	3601      	adds	r6, #1
 800cc08:	e7d9      	b.n	800cbbe <_printf_common+0x8e>
	...

0800cc0c <_printf_i>:
 800cc0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc10:	7e0f      	ldrb	r7, [r1, #24]
 800cc12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc14:	2f78      	cmp	r7, #120	; 0x78
 800cc16:	4691      	mov	r9, r2
 800cc18:	4680      	mov	r8, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	469a      	mov	sl, r3
 800cc1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc22:	d807      	bhi.n	800cc34 <_printf_i+0x28>
 800cc24:	2f62      	cmp	r7, #98	; 0x62
 800cc26:	d80a      	bhi.n	800cc3e <_printf_i+0x32>
 800cc28:	2f00      	cmp	r7, #0
 800cc2a:	f000 80d4 	beq.w	800cdd6 <_printf_i+0x1ca>
 800cc2e:	2f58      	cmp	r7, #88	; 0x58
 800cc30:	f000 80c0 	beq.w	800cdb4 <_printf_i+0x1a8>
 800cc34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc3c:	e03a      	b.n	800ccb4 <_printf_i+0xa8>
 800cc3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc42:	2b15      	cmp	r3, #21
 800cc44:	d8f6      	bhi.n	800cc34 <_printf_i+0x28>
 800cc46:	a101      	add	r1, pc, #4	; (adr r1, 800cc4c <_printf_i+0x40>)
 800cc48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc4c:	0800cca5 	.word	0x0800cca5
 800cc50:	0800ccb9 	.word	0x0800ccb9
 800cc54:	0800cc35 	.word	0x0800cc35
 800cc58:	0800cc35 	.word	0x0800cc35
 800cc5c:	0800cc35 	.word	0x0800cc35
 800cc60:	0800cc35 	.word	0x0800cc35
 800cc64:	0800ccb9 	.word	0x0800ccb9
 800cc68:	0800cc35 	.word	0x0800cc35
 800cc6c:	0800cc35 	.word	0x0800cc35
 800cc70:	0800cc35 	.word	0x0800cc35
 800cc74:	0800cc35 	.word	0x0800cc35
 800cc78:	0800cdbd 	.word	0x0800cdbd
 800cc7c:	0800cce5 	.word	0x0800cce5
 800cc80:	0800cd77 	.word	0x0800cd77
 800cc84:	0800cc35 	.word	0x0800cc35
 800cc88:	0800cc35 	.word	0x0800cc35
 800cc8c:	0800cddf 	.word	0x0800cddf
 800cc90:	0800cc35 	.word	0x0800cc35
 800cc94:	0800cce5 	.word	0x0800cce5
 800cc98:	0800cc35 	.word	0x0800cc35
 800cc9c:	0800cc35 	.word	0x0800cc35
 800cca0:	0800cd7f 	.word	0x0800cd7f
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	1d1a      	adds	r2, r3, #4
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	602a      	str	r2, [r5, #0]
 800ccac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e09f      	b.n	800cdf8 <_printf_i+0x1ec>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	682b      	ldr	r3, [r5, #0]
 800ccbc:	0607      	lsls	r7, r0, #24
 800ccbe:	f103 0104 	add.w	r1, r3, #4
 800ccc2:	6029      	str	r1, [r5, #0]
 800ccc4:	d501      	bpl.n	800ccca <_printf_i+0xbe>
 800ccc6:	681e      	ldr	r6, [r3, #0]
 800ccc8:	e003      	b.n	800ccd2 <_printf_i+0xc6>
 800ccca:	0646      	lsls	r6, r0, #25
 800cccc:	d5fb      	bpl.n	800ccc6 <_printf_i+0xba>
 800ccce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ccd2:	2e00      	cmp	r6, #0
 800ccd4:	da03      	bge.n	800ccde <_printf_i+0xd2>
 800ccd6:	232d      	movs	r3, #45	; 0x2d
 800ccd8:	4276      	negs	r6, r6
 800ccda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccde:	485a      	ldr	r0, [pc, #360]	; (800ce48 <_printf_i+0x23c>)
 800cce0:	230a      	movs	r3, #10
 800cce2:	e012      	b.n	800cd0a <_printf_i+0xfe>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	6820      	ldr	r0, [r4, #0]
 800cce8:	1d19      	adds	r1, r3, #4
 800ccea:	6029      	str	r1, [r5, #0]
 800ccec:	0605      	lsls	r5, r0, #24
 800ccee:	d501      	bpl.n	800ccf4 <_printf_i+0xe8>
 800ccf0:	681e      	ldr	r6, [r3, #0]
 800ccf2:	e002      	b.n	800ccfa <_printf_i+0xee>
 800ccf4:	0641      	lsls	r1, r0, #25
 800ccf6:	d5fb      	bpl.n	800ccf0 <_printf_i+0xe4>
 800ccf8:	881e      	ldrh	r6, [r3, #0]
 800ccfa:	4853      	ldr	r0, [pc, #332]	; (800ce48 <_printf_i+0x23c>)
 800ccfc:	2f6f      	cmp	r7, #111	; 0x6f
 800ccfe:	bf0c      	ite	eq
 800cd00:	2308      	moveq	r3, #8
 800cd02:	230a      	movne	r3, #10
 800cd04:	2100      	movs	r1, #0
 800cd06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd0a:	6865      	ldr	r5, [r4, #4]
 800cd0c:	60a5      	str	r5, [r4, #8]
 800cd0e:	2d00      	cmp	r5, #0
 800cd10:	bfa2      	ittt	ge
 800cd12:	6821      	ldrge	r1, [r4, #0]
 800cd14:	f021 0104 	bicge.w	r1, r1, #4
 800cd18:	6021      	strge	r1, [r4, #0]
 800cd1a:	b90e      	cbnz	r6, 800cd20 <_printf_i+0x114>
 800cd1c:	2d00      	cmp	r5, #0
 800cd1e:	d04b      	beq.n	800cdb8 <_printf_i+0x1ac>
 800cd20:	4615      	mov	r5, r2
 800cd22:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd26:	fb03 6711 	mls	r7, r3, r1, r6
 800cd2a:	5dc7      	ldrb	r7, [r0, r7]
 800cd2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd30:	4637      	mov	r7, r6
 800cd32:	42bb      	cmp	r3, r7
 800cd34:	460e      	mov	r6, r1
 800cd36:	d9f4      	bls.n	800cd22 <_printf_i+0x116>
 800cd38:	2b08      	cmp	r3, #8
 800cd3a:	d10b      	bne.n	800cd54 <_printf_i+0x148>
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	07de      	lsls	r6, r3, #31
 800cd40:	d508      	bpl.n	800cd54 <_printf_i+0x148>
 800cd42:	6923      	ldr	r3, [r4, #16]
 800cd44:	6861      	ldr	r1, [r4, #4]
 800cd46:	4299      	cmp	r1, r3
 800cd48:	bfde      	ittt	le
 800cd4a:	2330      	movle	r3, #48	; 0x30
 800cd4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd54:	1b52      	subs	r2, r2, r5
 800cd56:	6122      	str	r2, [r4, #16]
 800cd58:	f8cd a000 	str.w	sl, [sp]
 800cd5c:	464b      	mov	r3, r9
 800cd5e:	aa03      	add	r2, sp, #12
 800cd60:	4621      	mov	r1, r4
 800cd62:	4640      	mov	r0, r8
 800cd64:	f7ff fee4 	bl	800cb30 <_printf_common>
 800cd68:	3001      	adds	r0, #1
 800cd6a:	d14a      	bne.n	800ce02 <_printf_i+0x1f6>
 800cd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd70:	b004      	add	sp, #16
 800cd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	f043 0320 	orr.w	r3, r3, #32
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	4833      	ldr	r0, [pc, #204]	; (800ce4c <_printf_i+0x240>)
 800cd80:	2778      	movs	r7, #120	; 0x78
 800cd82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	6829      	ldr	r1, [r5, #0]
 800cd8a:	061f      	lsls	r7, r3, #24
 800cd8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cd90:	d402      	bmi.n	800cd98 <_printf_i+0x18c>
 800cd92:	065f      	lsls	r7, r3, #25
 800cd94:	bf48      	it	mi
 800cd96:	b2b6      	uxthmi	r6, r6
 800cd98:	07df      	lsls	r7, r3, #31
 800cd9a:	bf48      	it	mi
 800cd9c:	f043 0320 	orrmi.w	r3, r3, #32
 800cda0:	6029      	str	r1, [r5, #0]
 800cda2:	bf48      	it	mi
 800cda4:	6023      	strmi	r3, [r4, #0]
 800cda6:	b91e      	cbnz	r6, 800cdb0 <_printf_i+0x1a4>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	f023 0320 	bic.w	r3, r3, #32
 800cdae:	6023      	str	r3, [r4, #0]
 800cdb0:	2310      	movs	r3, #16
 800cdb2:	e7a7      	b.n	800cd04 <_printf_i+0xf8>
 800cdb4:	4824      	ldr	r0, [pc, #144]	; (800ce48 <_printf_i+0x23c>)
 800cdb6:	e7e4      	b.n	800cd82 <_printf_i+0x176>
 800cdb8:	4615      	mov	r5, r2
 800cdba:	e7bd      	b.n	800cd38 <_printf_i+0x12c>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	6826      	ldr	r6, [r4, #0]
 800cdc0:	6961      	ldr	r1, [r4, #20]
 800cdc2:	1d18      	adds	r0, r3, #4
 800cdc4:	6028      	str	r0, [r5, #0]
 800cdc6:	0635      	lsls	r5, r6, #24
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	d501      	bpl.n	800cdd0 <_printf_i+0x1c4>
 800cdcc:	6019      	str	r1, [r3, #0]
 800cdce:	e002      	b.n	800cdd6 <_printf_i+0x1ca>
 800cdd0:	0670      	lsls	r0, r6, #25
 800cdd2:	d5fb      	bpl.n	800cdcc <_printf_i+0x1c0>
 800cdd4:	8019      	strh	r1, [r3, #0]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	6123      	str	r3, [r4, #16]
 800cdda:	4615      	mov	r5, r2
 800cddc:	e7bc      	b.n	800cd58 <_printf_i+0x14c>
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	1d1a      	adds	r2, r3, #4
 800cde2:	602a      	str	r2, [r5, #0]
 800cde4:	681d      	ldr	r5, [r3, #0]
 800cde6:	6862      	ldr	r2, [r4, #4]
 800cde8:	2100      	movs	r1, #0
 800cdea:	4628      	mov	r0, r5
 800cdec:	f7f3 fa50 	bl	8000290 <memchr>
 800cdf0:	b108      	cbz	r0, 800cdf6 <_printf_i+0x1ea>
 800cdf2:	1b40      	subs	r0, r0, r5
 800cdf4:	6060      	str	r0, [r4, #4]
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	6123      	str	r3, [r4, #16]
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce00:	e7aa      	b.n	800cd58 <_printf_i+0x14c>
 800ce02:	6923      	ldr	r3, [r4, #16]
 800ce04:	462a      	mov	r2, r5
 800ce06:	4649      	mov	r1, r9
 800ce08:	4640      	mov	r0, r8
 800ce0a:	47d0      	blx	sl
 800ce0c:	3001      	adds	r0, #1
 800ce0e:	d0ad      	beq.n	800cd6c <_printf_i+0x160>
 800ce10:	6823      	ldr	r3, [r4, #0]
 800ce12:	079b      	lsls	r3, r3, #30
 800ce14:	d413      	bmi.n	800ce3e <_printf_i+0x232>
 800ce16:	68e0      	ldr	r0, [r4, #12]
 800ce18:	9b03      	ldr	r3, [sp, #12]
 800ce1a:	4298      	cmp	r0, r3
 800ce1c:	bfb8      	it	lt
 800ce1e:	4618      	movlt	r0, r3
 800ce20:	e7a6      	b.n	800cd70 <_printf_i+0x164>
 800ce22:	2301      	movs	r3, #1
 800ce24:	4632      	mov	r2, r6
 800ce26:	4649      	mov	r1, r9
 800ce28:	4640      	mov	r0, r8
 800ce2a:	47d0      	blx	sl
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d09d      	beq.n	800cd6c <_printf_i+0x160>
 800ce30:	3501      	adds	r5, #1
 800ce32:	68e3      	ldr	r3, [r4, #12]
 800ce34:	9903      	ldr	r1, [sp, #12]
 800ce36:	1a5b      	subs	r3, r3, r1
 800ce38:	42ab      	cmp	r3, r5
 800ce3a:	dcf2      	bgt.n	800ce22 <_printf_i+0x216>
 800ce3c:	e7eb      	b.n	800ce16 <_printf_i+0x20a>
 800ce3e:	2500      	movs	r5, #0
 800ce40:	f104 0619 	add.w	r6, r4, #25
 800ce44:	e7f5      	b.n	800ce32 <_printf_i+0x226>
 800ce46:	bf00      	nop
 800ce48:	0800ec51 	.word	0x0800ec51
 800ce4c:	0800ec62 	.word	0x0800ec62

0800ce50 <__sflush_r>:
 800ce50:	898a      	ldrh	r2, [r1, #12]
 800ce52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce56:	4605      	mov	r5, r0
 800ce58:	0710      	lsls	r0, r2, #28
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	d458      	bmi.n	800cf10 <__sflush_r+0xc0>
 800ce5e:	684b      	ldr	r3, [r1, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	dc05      	bgt.n	800ce70 <__sflush_r+0x20>
 800ce64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dc02      	bgt.n	800ce70 <__sflush_r+0x20>
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce72:	2e00      	cmp	r6, #0
 800ce74:	d0f9      	beq.n	800ce6a <__sflush_r+0x1a>
 800ce76:	2300      	movs	r3, #0
 800ce78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce7c:	682f      	ldr	r7, [r5, #0]
 800ce7e:	6a21      	ldr	r1, [r4, #32]
 800ce80:	602b      	str	r3, [r5, #0]
 800ce82:	d032      	beq.n	800ceea <__sflush_r+0x9a>
 800ce84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	075a      	lsls	r2, r3, #29
 800ce8a:	d505      	bpl.n	800ce98 <__sflush_r+0x48>
 800ce8c:	6863      	ldr	r3, [r4, #4]
 800ce8e:	1ac0      	subs	r0, r0, r3
 800ce90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce92:	b10b      	cbz	r3, 800ce98 <__sflush_r+0x48>
 800ce94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce96:	1ac0      	subs	r0, r0, r3
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce9e:	6a21      	ldr	r1, [r4, #32]
 800cea0:	4628      	mov	r0, r5
 800cea2:	47b0      	blx	r6
 800cea4:	1c43      	adds	r3, r0, #1
 800cea6:	89a3      	ldrh	r3, [r4, #12]
 800cea8:	d106      	bne.n	800ceb8 <__sflush_r+0x68>
 800ceaa:	6829      	ldr	r1, [r5, #0]
 800ceac:	291d      	cmp	r1, #29
 800ceae:	d82b      	bhi.n	800cf08 <__sflush_r+0xb8>
 800ceb0:	4a29      	ldr	r2, [pc, #164]	; (800cf58 <__sflush_r+0x108>)
 800ceb2:	410a      	asrs	r2, r1
 800ceb4:	07d6      	lsls	r6, r2, #31
 800ceb6:	d427      	bmi.n	800cf08 <__sflush_r+0xb8>
 800ceb8:	2200      	movs	r2, #0
 800ceba:	6062      	str	r2, [r4, #4]
 800cebc:	04d9      	lsls	r1, r3, #19
 800cebe:	6922      	ldr	r2, [r4, #16]
 800cec0:	6022      	str	r2, [r4, #0]
 800cec2:	d504      	bpl.n	800cece <__sflush_r+0x7e>
 800cec4:	1c42      	adds	r2, r0, #1
 800cec6:	d101      	bne.n	800cecc <__sflush_r+0x7c>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	b903      	cbnz	r3, 800cece <__sflush_r+0x7e>
 800cecc:	6560      	str	r0, [r4, #84]	; 0x54
 800cece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ced0:	602f      	str	r7, [r5, #0]
 800ced2:	2900      	cmp	r1, #0
 800ced4:	d0c9      	beq.n	800ce6a <__sflush_r+0x1a>
 800ced6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ceda:	4299      	cmp	r1, r3
 800cedc:	d002      	beq.n	800cee4 <__sflush_r+0x94>
 800cede:	4628      	mov	r0, r5
 800cee0:	f7ff fbea 	bl	800c6b8 <_free_r>
 800cee4:	2000      	movs	r0, #0
 800cee6:	6360      	str	r0, [r4, #52]	; 0x34
 800cee8:	e7c0      	b.n	800ce6c <__sflush_r+0x1c>
 800ceea:	2301      	movs	r3, #1
 800ceec:	4628      	mov	r0, r5
 800ceee:	47b0      	blx	r6
 800cef0:	1c41      	adds	r1, r0, #1
 800cef2:	d1c8      	bne.n	800ce86 <__sflush_r+0x36>
 800cef4:	682b      	ldr	r3, [r5, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0c5      	beq.n	800ce86 <__sflush_r+0x36>
 800cefa:	2b1d      	cmp	r3, #29
 800cefc:	d001      	beq.n	800cf02 <__sflush_r+0xb2>
 800cefe:	2b16      	cmp	r3, #22
 800cf00:	d101      	bne.n	800cf06 <__sflush_r+0xb6>
 800cf02:	602f      	str	r7, [r5, #0]
 800cf04:	e7b1      	b.n	800ce6a <__sflush_r+0x1a>
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf0c:	81a3      	strh	r3, [r4, #12]
 800cf0e:	e7ad      	b.n	800ce6c <__sflush_r+0x1c>
 800cf10:	690f      	ldr	r7, [r1, #16]
 800cf12:	2f00      	cmp	r7, #0
 800cf14:	d0a9      	beq.n	800ce6a <__sflush_r+0x1a>
 800cf16:	0793      	lsls	r3, r2, #30
 800cf18:	680e      	ldr	r6, [r1, #0]
 800cf1a:	bf08      	it	eq
 800cf1c:	694b      	ldreq	r3, [r1, #20]
 800cf1e:	600f      	str	r7, [r1, #0]
 800cf20:	bf18      	it	ne
 800cf22:	2300      	movne	r3, #0
 800cf24:	eba6 0807 	sub.w	r8, r6, r7
 800cf28:	608b      	str	r3, [r1, #8]
 800cf2a:	f1b8 0f00 	cmp.w	r8, #0
 800cf2e:	dd9c      	ble.n	800ce6a <__sflush_r+0x1a>
 800cf30:	6a21      	ldr	r1, [r4, #32]
 800cf32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf34:	4643      	mov	r3, r8
 800cf36:	463a      	mov	r2, r7
 800cf38:	4628      	mov	r0, r5
 800cf3a:	47b0      	blx	r6
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	dc06      	bgt.n	800cf4e <__sflush_r+0xfe>
 800cf40:	89a3      	ldrh	r3, [r4, #12]
 800cf42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4c:	e78e      	b.n	800ce6c <__sflush_r+0x1c>
 800cf4e:	4407      	add	r7, r0
 800cf50:	eba8 0800 	sub.w	r8, r8, r0
 800cf54:	e7e9      	b.n	800cf2a <__sflush_r+0xda>
 800cf56:	bf00      	nop
 800cf58:	dfbffffe 	.word	0xdfbffffe

0800cf5c <_fflush_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	690b      	ldr	r3, [r1, #16]
 800cf60:	4605      	mov	r5, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	b913      	cbnz	r3, 800cf6c <_fflush_r+0x10>
 800cf66:	2500      	movs	r5, #0
 800cf68:	4628      	mov	r0, r5
 800cf6a:	bd38      	pop	{r3, r4, r5, pc}
 800cf6c:	b118      	cbz	r0, 800cf76 <_fflush_r+0x1a>
 800cf6e:	6a03      	ldr	r3, [r0, #32]
 800cf70:	b90b      	cbnz	r3, 800cf76 <_fflush_r+0x1a>
 800cf72:	f7ff fa1f 	bl	800c3b4 <__sinit>
 800cf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0f3      	beq.n	800cf66 <_fflush_r+0xa>
 800cf7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf80:	07d0      	lsls	r0, r2, #31
 800cf82:	d404      	bmi.n	800cf8e <_fflush_r+0x32>
 800cf84:	0599      	lsls	r1, r3, #22
 800cf86:	d402      	bmi.n	800cf8e <_fflush_r+0x32>
 800cf88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf8a:	f7ff fb7e 	bl	800c68a <__retarget_lock_acquire_recursive>
 800cf8e:	4628      	mov	r0, r5
 800cf90:	4621      	mov	r1, r4
 800cf92:	f7ff ff5d 	bl	800ce50 <__sflush_r>
 800cf96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf98:	07da      	lsls	r2, r3, #31
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	d4e4      	bmi.n	800cf68 <_fflush_r+0xc>
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	059b      	lsls	r3, r3, #22
 800cfa2:	d4e1      	bmi.n	800cf68 <_fflush_r+0xc>
 800cfa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfa6:	f7ff fb71 	bl	800c68c <__retarget_lock_release_recursive>
 800cfaa:	e7dd      	b.n	800cf68 <_fflush_r+0xc>

0800cfac <__swbuf_r>:
 800cfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfae:	460e      	mov	r6, r1
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	b118      	cbz	r0, 800cfbe <__swbuf_r+0x12>
 800cfb6:	6a03      	ldr	r3, [r0, #32]
 800cfb8:	b90b      	cbnz	r3, 800cfbe <__swbuf_r+0x12>
 800cfba:	f7ff f9fb 	bl	800c3b4 <__sinit>
 800cfbe:	69a3      	ldr	r3, [r4, #24]
 800cfc0:	60a3      	str	r3, [r4, #8]
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	071a      	lsls	r2, r3, #28
 800cfc6:	d525      	bpl.n	800d014 <__swbuf_r+0x68>
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	b31b      	cbz	r3, 800d014 <__swbuf_r+0x68>
 800cfcc:	6823      	ldr	r3, [r4, #0]
 800cfce:	6922      	ldr	r2, [r4, #16]
 800cfd0:	1a98      	subs	r0, r3, r2
 800cfd2:	6963      	ldr	r3, [r4, #20]
 800cfd4:	b2f6      	uxtb	r6, r6
 800cfd6:	4283      	cmp	r3, r0
 800cfd8:	4637      	mov	r7, r6
 800cfda:	dc04      	bgt.n	800cfe6 <__swbuf_r+0x3a>
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4628      	mov	r0, r5
 800cfe0:	f7ff ffbc 	bl	800cf5c <_fflush_r>
 800cfe4:	b9e0      	cbnz	r0, 800d020 <__swbuf_r+0x74>
 800cfe6:	68a3      	ldr	r3, [r4, #8]
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	60a3      	str	r3, [r4, #8]
 800cfec:	6823      	ldr	r3, [r4, #0]
 800cfee:	1c5a      	adds	r2, r3, #1
 800cff0:	6022      	str	r2, [r4, #0]
 800cff2:	701e      	strb	r6, [r3, #0]
 800cff4:	6962      	ldr	r2, [r4, #20]
 800cff6:	1c43      	adds	r3, r0, #1
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d004      	beq.n	800d006 <__swbuf_r+0x5a>
 800cffc:	89a3      	ldrh	r3, [r4, #12]
 800cffe:	07db      	lsls	r3, r3, #31
 800d000:	d506      	bpl.n	800d010 <__swbuf_r+0x64>
 800d002:	2e0a      	cmp	r6, #10
 800d004:	d104      	bne.n	800d010 <__swbuf_r+0x64>
 800d006:	4621      	mov	r1, r4
 800d008:	4628      	mov	r0, r5
 800d00a:	f7ff ffa7 	bl	800cf5c <_fflush_r>
 800d00e:	b938      	cbnz	r0, 800d020 <__swbuf_r+0x74>
 800d010:	4638      	mov	r0, r7
 800d012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d014:	4621      	mov	r1, r4
 800d016:	4628      	mov	r0, r5
 800d018:	f000 f806 	bl	800d028 <__swsetup_r>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d0d5      	beq.n	800cfcc <__swbuf_r+0x20>
 800d020:	f04f 37ff 	mov.w	r7, #4294967295
 800d024:	e7f4      	b.n	800d010 <__swbuf_r+0x64>
	...

0800d028 <__swsetup_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4b2a      	ldr	r3, [pc, #168]	; (800d0d4 <__swsetup_r+0xac>)
 800d02c:	4605      	mov	r5, r0
 800d02e:	6818      	ldr	r0, [r3, #0]
 800d030:	460c      	mov	r4, r1
 800d032:	b118      	cbz	r0, 800d03c <__swsetup_r+0x14>
 800d034:	6a03      	ldr	r3, [r0, #32]
 800d036:	b90b      	cbnz	r3, 800d03c <__swsetup_r+0x14>
 800d038:	f7ff f9bc 	bl	800c3b4 <__sinit>
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d042:	0718      	lsls	r0, r3, #28
 800d044:	d422      	bmi.n	800d08c <__swsetup_r+0x64>
 800d046:	06d9      	lsls	r1, r3, #27
 800d048:	d407      	bmi.n	800d05a <__swsetup_r+0x32>
 800d04a:	2309      	movs	r3, #9
 800d04c:	602b      	str	r3, [r5, #0]
 800d04e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d052:	81a3      	strh	r3, [r4, #12]
 800d054:	f04f 30ff 	mov.w	r0, #4294967295
 800d058:	e034      	b.n	800d0c4 <__swsetup_r+0x9c>
 800d05a:	0758      	lsls	r0, r3, #29
 800d05c:	d512      	bpl.n	800d084 <__swsetup_r+0x5c>
 800d05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d060:	b141      	cbz	r1, 800d074 <__swsetup_r+0x4c>
 800d062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d066:	4299      	cmp	r1, r3
 800d068:	d002      	beq.n	800d070 <__swsetup_r+0x48>
 800d06a:	4628      	mov	r0, r5
 800d06c:	f7ff fb24 	bl	800c6b8 <_free_r>
 800d070:	2300      	movs	r3, #0
 800d072:	6363      	str	r3, [r4, #52]	; 0x34
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d07a:	81a3      	strh	r3, [r4, #12]
 800d07c:	2300      	movs	r3, #0
 800d07e:	6063      	str	r3, [r4, #4]
 800d080:	6923      	ldr	r3, [r4, #16]
 800d082:	6023      	str	r3, [r4, #0]
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	f043 0308 	orr.w	r3, r3, #8
 800d08a:	81a3      	strh	r3, [r4, #12]
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	b94b      	cbnz	r3, 800d0a4 <__swsetup_r+0x7c>
 800d090:	89a3      	ldrh	r3, [r4, #12]
 800d092:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d09a:	d003      	beq.n	800d0a4 <__swsetup_r+0x7c>
 800d09c:	4621      	mov	r1, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f000 f894 	bl	800d1cc <__smakebuf_r>
 800d0a4:	89a0      	ldrh	r0, [r4, #12]
 800d0a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0aa:	f010 0301 	ands.w	r3, r0, #1
 800d0ae:	d00a      	beq.n	800d0c6 <__swsetup_r+0x9e>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	60a3      	str	r3, [r4, #8]
 800d0b4:	6963      	ldr	r3, [r4, #20]
 800d0b6:	425b      	negs	r3, r3
 800d0b8:	61a3      	str	r3, [r4, #24]
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	b943      	cbnz	r3, 800d0d0 <__swsetup_r+0xa8>
 800d0be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0c2:	d1c4      	bne.n	800d04e <__swsetup_r+0x26>
 800d0c4:	bd38      	pop	{r3, r4, r5, pc}
 800d0c6:	0781      	lsls	r1, r0, #30
 800d0c8:	bf58      	it	pl
 800d0ca:	6963      	ldrpl	r3, [r4, #20]
 800d0cc:	60a3      	str	r3, [r4, #8]
 800d0ce:	e7f4      	b.n	800d0ba <__swsetup_r+0x92>
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e7f7      	b.n	800d0c4 <__swsetup_r+0x9c>
 800d0d4:	20000078 	.word	0x20000078

0800d0d8 <_raise_r>:
 800d0d8:	291f      	cmp	r1, #31
 800d0da:	b538      	push	{r3, r4, r5, lr}
 800d0dc:	4604      	mov	r4, r0
 800d0de:	460d      	mov	r5, r1
 800d0e0:	d904      	bls.n	800d0ec <_raise_r+0x14>
 800d0e2:	2316      	movs	r3, #22
 800d0e4:	6003      	str	r3, [r0, #0]
 800d0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ea:	bd38      	pop	{r3, r4, r5, pc}
 800d0ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d0ee:	b112      	cbz	r2, 800d0f6 <_raise_r+0x1e>
 800d0f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0f4:	b94b      	cbnz	r3, 800d10a <_raise_r+0x32>
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f000 f830 	bl	800d15c <_getpid_r>
 800d0fc:	462a      	mov	r2, r5
 800d0fe:	4601      	mov	r1, r0
 800d100:	4620      	mov	r0, r4
 800d102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d106:	f000 b817 	b.w	800d138 <_kill_r>
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d00a      	beq.n	800d124 <_raise_r+0x4c>
 800d10e:	1c59      	adds	r1, r3, #1
 800d110:	d103      	bne.n	800d11a <_raise_r+0x42>
 800d112:	2316      	movs	r3, #22
 800d114:	6003      	str	r3, [r0, #0]
 800d116:	2001      	movs	r0, #1
 800d118:	e7e7      	b.n	800d0ea <_raise_r+0x12>
 800d11a:	2400      	movs	r4, #0
 800d11c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d120:	4628      	mov	r0, r5
 800d122:	4798      	blx	r3
 800d124:	2000      	movs	r0, #0
 800d126:	e7e0      	b.n	800d0ea <_raise_r+0x12>

0800d128 <raise>:
 800d128:	4b02      	ldr	r3, [pc, #8]	; (800d134 <raise+0xc>)
 800d12a:	4601      	mov	r1, r0
 800d12c:	6818      	ldr	r0, [r3, #0]
 800d12e:	f7ff bfd3 	b.w	800d0d8 <_raise_r>
 800d132:	bf00      	nop
 800d134:	20000078 	.word	0x20000078

0800d138 <_kill_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4d07      	ldr	r5, [pc, #28]	; (800d158 <_kill_r+0x20>)
 800d13c:	2300      	movs	r3, #0
 800d13e:	4604      	mov	r4, r0
 800d140:	4608      	mov	r0, r1
 800d142:	4611      	mov	r1, r2
 800d144:	602b      	str	r3, [r5, #0]
 800d146:	f7f5 ff0c 	bl	8002f62 <_kill>
 800d14a:	1c43      	adds	r3, r0, #1
 800d14c:	d102      	bne.n	800d154 <_kill_r+0x1c>
 800d14e:	682b      	ldr	r3, [r5, #0]
 800d150:	b103      	cbz	r3, 800d154 <_kill_r+0x1c>
 800d152:	6023      	str	r3, [r4, #0]
 800d154:	bd38      	pop	{r3, r4, r5, pc}
 800d156:	bf00      	nop
 800d158:	2002b3d8 	.word	0x2002b3d8

0800d15c <_getpid_r>:
 800d15c:	f7f5 bef9 	b.w	8002f52 <_getpid>

0800d160 <_sbrk_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d06      	ldr	r5, [pc, #24]	; (800d17c <_sbrk_r+0x1c>)
 800d164:	2300      	movs	r3, #0
 800d166:	4604      	mov	r4, r0
 800d168:	4608      	mov	r0, r1
 800d16a:	602b      	str	r3, [r5, #0]
 800d16c:	f7f5 ff80 	bl	8003070 <_sbrk>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_sbrk_r+0x1a>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_sbrk_r+0x1a>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	2002b3d8 	.word	0x2002b3d8

0800d180 <__swhatbuf_r>:
 800d180:	b570      	push	{r4, r5, r6, lr}
 800d182:	460c      	mov	r4, r1
 800d184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d188:	2900      	cmp	r1, #0
 800d18a:	b096      	sub	sp, #88	; 0x58
 800d18c:	4615      	mov	r5, r2
 800d18e:	461e      	mov	r6, r3
 800d190:	da0d      	bge.n	800d1ae <__swhatbuf_r+0x2e>
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d198:	f04f 0100 	mov.w	r1, #0
 800d19c:	bf0c      	ite	eq
 800d19e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d1a2:	2340      	movne	r3, #64	; 0x40
 800d1a4:	2000      	movs	r0, #0
 800d1a6:	6031      	str	r1, [r6, #0]
 800d1a8:	602b      	str	r3, [r5, #0]
 800d1aa:	b016      	add	sp, #88	; 0x58
 800d1ac:	bd70      	pop	{r4, r5, r6, pc}
 800d1ae:	466a      	mov	r2, sp
 800d1b0:	f000 f848 	bl	800d244 <_fstat_r>
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	dbec      	blt.n	800d192 <__swhatbuf_r+0x12>
 800d1b8:	9901      	ldr	r1, [sp, #4]
 800d1ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d1be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d1c2:	4259      	negs	r1, r3
 800d1c4:	4159      	adcs	r1, r3
 800d1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1ca:	e7eb      	b.n	800d1a4 <__swhatbuf_r+0x24>

0800d1cc <__smakebuf_r>:
 800d1cc:	898b      	ldrh	r3, [r1, #12]
 800d1ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1d0:	079d      	lsls	r5, r3, #30
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	d507      	bpl.n	800d1e8 <__smakebuf_r+0x1c>
 800d1d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	6123      	str	r3, [r4, #16]
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	6163      	str	r3, [r4, #20]
 800d1e4:	b002      	add	sp, #8
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}
 800d1e8:	ab01      	add	r3, sp, #4
 800d1ea:	466a      	mov	r2, sp
 800d1ec:	f7ff ffc8 	bl	800d180 <__swhatbuf_r>
 800d1f0:	9900      	ldr	r1, [sp, #0]
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7ff facb 	bl	800c790 <_malloc_r>
 800d1fa:	b948      	cbnz	r0, 800d210 <__smakebuf_r+0x44>
 800d1fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d200:	059a      	lsls	r2, r3, #22
 800d202:	d4ef      	bmi.n	800d1e4 <__smakebuf_r+0x18>
 800d204:	f023 0303 	bic.w	r3, r3, #3
 800d208:	f043 0302 	orr.w	r3, r3, #2
 800d20c:	81a3      	strh	r3, [r4, #12]
 800d20e:	e7e3      	b.n	800d1d8 <__smakebuf_r+0xc>
 800d210:	89a3      	ldrh	r3, [r4, #12]
 800d212:	6020      	str	r0, [r4, #0]
 800d214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	9b00      	ldr	r3, [sp, #0]
 800d21c:	6163      	str	r3, [r4, #20]
 800d21e:	9b01      	ldr	r3, [sp, #4]
 800d220:	6120      	str	r0, [r4, #16]
 800d222:	b15b      	cbz	r3, 800d23c <__smakebuf_r+0x70>
 800d224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d228:	4630      	mov	r0, r6
 800d22a:	f000 f81d 	bl	800d268 <_isatty_r>
 800d22e:	b128      	cbz	r0, 800d23c <__smakebuf_r+0x70>
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	f023 0303 	bic.w	r3, r3, #3
 800d236:	f043 0301 	orr.w	r3, r3, #1
 800d23a:	81a3      	strh	r3, [r4, #12]
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	431d      	orrs	r5, r3
 800d240:	81a5      	strh	r5, [r4, #12]
 800d242:	e7cf      	b.n	800d1e4 <__smakebuf_r+0x18>

0800d244 <_fstat_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d07      	ldr	r5, [pc, #28]	; (800d264 <_fstat_r+0x20>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	4611      	mov	r1, r2
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	f7f5 fee5 	bl	8003020 <_fstat>
 800d256:	1c43      	adds	r3, r0, #1
 800d258:	d102      	bne.n	800d260 <_fstat_r+0x1c>
 800d25a:	682b      	ldr	r3, [r5, #0]
 800d25c:	b103      	cbz	r3, 800d260 <_fstat_r+0x1c>
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	bf00      	nop
 800d264:	2002b3d8 	.word	0x2002b3d8

0800d268 <_isatty_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	; (800d284 <_isatty_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f5 fee4 	bl	8003040 <_isatty>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_isatty_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_isatty_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	2002b3d8 	.word	0x2002b3d8

0800d288 <_init>:
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	bf00      	nop
 800d28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d28e:	bc08      	pop	{r3}
 800d290:	469e      	mov	lr, r3
 800d292:	4770      	bx	lr

0800d294 <_fini>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	bf00      	nop
 800d298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29a:	bc08      	pop	{r3}
 800d29c:	469e      	mov	lr, r3
 800d29e:	4770      	bx	lr
